var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
import { g as getDefaultExportFromCjs, a as getAugmentedNamespace, c as commonjsGlobal } from "./_commonjsHelpers-C7MPfNLY.js";
import { d as dedent } from "./index-BdOSk9or.js";
function _mergeNamespaces(n2, m2) {
  for (var i2 = 0; i2 < m2.length; i2++) {
    const e2 = m2[i2];
    if (typeof e2 !== "string" && !Array.isArray(e2)) {
      for (const k in e2) {
        if (k !== "default" && !(k in n2)) {
          const d = Object.getOwnPropertyDescriptor(e2, k);
          if (d) {
            Object.defineProperty(n2, k, d.get ? d : {
              enumerable: true,
              get: () => e2[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
var build$2 = {};
var ansiStyles = { exports: {} };
ansiStyles.exports;
var hasRequiredAnsiStyles;
function requireAnsiStyles() {
  if (hasRequiredAnsiStyles) return ansiStyles.exports;
  hasRequiredAnsiStyles = 1;
  (function(module2) {
    const ANSI_BACKGROUND_OFFSET = 10;
    const wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
    const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          overline: [53, 55],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          // Bright color
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi256 = wrapAnsi256();
      styles.color.ansi16m = wrapAnsi16m();
      styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
      styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
      Object.defineProperties(styles, {
        rgbToAnsi256: {
          value: (red, green, blue) => {
            if (red === green && green === blue) {
              if (red < 8) {
                return 16;
              }
              if (red > 248) {
                return 231;
              }
              return Math.round((red - 8) / 247 * 24) + 232;
            }
            return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
          },
          enumerable: false
        },
        hexToRgb: {
          value: (hex) => {
            const matches2 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
            if (!matches2) {
              return [0, 0, 0];
            }
            let { colorString } = matches2.groups;
            if (colorString.length === 3) {
              colorString = colorString.split("").map((character) => character + character).join("");
            }
            const integer = Number.parseInt(colorString, 16);
            return [
              integer >> 16 & 255,
              integer >> 8 & 255,
              integer & 255
            ];
          },
          enumerable: false
        },
        hexToAnsi256: {
          value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
          enumerable: false
        }
      });
      return styles;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  })(ansiStyles);
  return ansiStyles.exports;
}
var collections = {};
var hasRequiredCollections;
function requireCollections() {
  if (hasRequiredCollections) return collections;
  hasRequiredCollections = 1;
  Object.defineProperty(collections, "__esModule", {
    value: true
  });
  collections.printIteratorEntries = printIteratorEntries;
  collections.printIteratorValues = printIteratorValues;
  collections.printListItems = printListItems;
  collections.printObjectProperties = printObjectProperties;
  const getKeysOfEnumerableProperties = (object, compareKeys) => {
    const keys = Object.keys(object).sort(compareKeys);
    if (Object.getOwnPropertySymbols) {
      Object.getOwnPropertySymbols(object).forEach((symbol) => {
        if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
          keys.push(symbol);
        }
      });
    }
    return keys;
  };
  function printIteratorEntries(iterator, config2, indentation, depth, refs, printer, separator = ": ") {
    let result = "";
    let current = iterator.next();
    if (!current.done) {
      result += config2.spacingOuter;
      const indentationNext = indentation + config2.indent;
      while (!current.done) {
        const name = printer(
          current.value[0],
          config2,
          indentationNext,
          depth,
          refs
        );
        const value = printer(
          current.value[1],
          config2,
          indentationNext,
          depth,
          refs
        );
        result += indentationNext + name + separator + value;
        current = iterator.next();
        if (!current.done) {
          result += "," + config2.spacingInner;
        } else if (!config2.min) {
          result += ",";
        }
      }
      result += config2.spacingOuter + indentation;
    }
    return result;
  }
  function printIteratorValues(iterator, config2, indentation, depth, refs, printer) {
    let result = "";
    let current = iterator.next();
    if (!current.done) {
      result += config2.spacingOuter;
      const indentationNext = indentation + config2.indent;
      while (!current.done) {
        result += indentationNext + printer(current.value, config2, indentationNext, depth, refs);
        current = iterator.next();
        if (!current.done) {
          result += "," + config2.spacingInner;
        } else if (!config2.min) {
          result += ",";
        }
      }
      result += config2.spacingOuter + indentation;
    }
    return result;
  }
  function printListItems(list, config2, indentation, depth, refs, printer) {
    let result = "";
    if (list.length) {
      result += config2.spacingOuter;
      const indentationNext = indentation + config2.indent;
      for (let i2 = 0; i2 < list.length; i2++) {
        result += indentationNext;
        if (i2 in list) {
          result += printer(list[i2], config2, indentationNext, depth, refs);
        }
        if (i2 < list.length - 1) {
          result += "," + config2.spacingInner;
        } else if (!config2.min) {
          result += ",";
        }
      }
      result += config2.spacingOuter + indentation;
    }
    return result;
  }
  function printObjectProperties(val, config2, indentation, depth, refs, printer) {
    let result = "";
    const keys = getKeysOfEnumerableProperties(val, config2.compareKeys);
    if (keys.length) {
      result += config2.spacingOuter;
      const indentationNext = indentation + config2.indent;
      for (let i2 = 0; i2 < keys.length; i2++) {
        const key = keys[i2];
        const name = printer(key, config2, indentationNext, depth, refs);
        const value = printer(val[key], config2, indentationNext, depth, refs);
        result += indentationNext + name + ": " + value;
        if (i2 < keys.length - 1) {
          result += "," + config2.spacingInner;
        } else if (!config2.min) {
          result += ",";
        }
      }
      result += config2.spacingOuter + indentation;
    }
    return result;
  }
  return collections;
}
var AsymmetricMatcher = {};
var hasRequiredAsymmetricMatcher;
function requireAsymmetricMatcher() {
  if (hasRequiredAsymmetricMatcher) return AsymmetricMatcher;
  hasRequiredAsymmetricMatcher = 1;
  Object.defineProperty(AsymmetricMatcher, "__esModule", {
    value: true
  });
  AsymmetricMatcher.test = AsymmetricMatcher.serialize = AsymmetricMatcher.default = void 0;
  var _collections = requireCollections();
  var global2 = (function() {
    if (typeof globalThis !== "undefined") {
      return globalThis;
    } else if (typeof global2 !== "undefined") {
      return global2;
    } else if (typeof self !== "undefined") {
      return self;
    } else if (typeof window !== "undefined") {
      return window;
    } else {
      return Function("return this")();
    }
  })();
  var Symbol2 = global2["jest-symbol-do-not-touch"] || global2.Symbol;
  const asymmetricMatcher = typeof Symbol2 === "function" && Symbol2.for ? Symbol2.for("jest.asymmetricMatcher") : 1267621;
  const SPACE = " ";
  const serialize = (val, config2, indentation, depth, refs, printer) => {
    const stringedValue = val.toString();
    if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining") {
      if (++depth > config2.maxDepth) {
        return "[" + stringedValue + "]";
      }
      return stringedValue + SPACE + "[" + (0, _collections.printListItems)(
        val.sample,
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "]";
    }
    if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining") {
      if (++depth > config2.maxDepth) {
        return "[" + stringedValue + "]";
      }
      return stringedValue + SPACE + "{" + (0, _collections.printObjectProperties)(
        val.sample,
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "}";
    }
    if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching") {
      return stringedValue + SPACE + printer(val.sample, config2, indentation, depth, refs);
    }
    if (stringedValue === "StringContaining" || stringedValue === "StringNotContaining") {
      return stringedValue + SPACE + printer(val.sample, config2, indentation, depth, refs);
    }
    return val.toAsymmetricMatcher();
  };
  AsymmetricMatcher.serialize = serialize;
  const test = (val) => val && val.$$typeof === asymmetricMatcher;
  AsymmetricMatcher.test = test;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  AsymmetricMatcher.default = _default;
  return AsymmetricMatcher;
}
var ConvertAnsi = {};
var ansiRegex;
var hasRequiredAnsiRegex;
function requireAnsiRegex() {
  if (hasRequiredAnsiRegex) return ansiRegex;
  hasRequiredAnsiRegex = 1;
  ansiRegex = ({ onlyFirst = false } = {}) => {
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, onlyFirst ? void 0 : "g");
  };
  return ansiRegex;
}
var hasRequiredConvertAnsi;
function requireConvertAnsi() {
  if (hasRequiredConvertAnsi) return ConvertAnsi;
  hasRequiredConvertAnsi = 1;
  Object.defineProperty(ConvertAnsi, "__esModule", {
    value: true
  });
  ConvertAnsi.test = ConvertAnsi.serialize = ConvertAnsi.default = void 0;
  var _ansiRegex = _interopRequireDefault(requireAnsiRegex());
  var _ansiStyles = _interopRequireDefault(requireAnsiStyles());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const toHumanReadableAnsi = (text) => text.replace((0, _ansiRegex.default)(), (match) => {
    switch (match) {
      case _ansiStyles.default.red.close:
      case _ansiStyles.default.green.close:
      case _ansiStyles.default.cyan.close:
      case _ansiStyles.default.gray.close:
      case _ansiStyles.default.white.close:
      case _ansiStyles.default.yellow.close:
      case _ansiStyles.default.bgRed.close:
      case _ansiStyles.default.bgGreen.close:
      case _ansiStyles.default.bgYellow.close:
      case _ansiStyles.default.inverse.close:
      case _ansiStyles.default.dim.close:
      case _ansiStyles.default.bold.close:
      case _ansiStyles.default.reset.open:
      case _ansiStyles.default.reset.close:
        return "</>";
      case _ansiStyles.default.red.open:
        return "<red>";
      case _ansiStyles.default.green.open:
        return "<green>";
      case _ansiStyles.default.cyan.open:
        return "<cyan>";
      case _ansiStyles.default.gray.open:
        return "<gray>";
      case _ansiStyles.default.white.open:
        return "<white>";
      case _ansiStyles.default.yellow.open:
        return "<yellow>";
      case _ansiStyles.default.bgRed.open:
        return "<bgRed>";
      case _ansiStyles.default.bgGreen.open:
        return "<bgGreen>";
      case _ansiStyles.default.bgYellow.open:
        return "<bgYellow>";
      case _ansiStyles.default.inverse.open:
        return "<inverse>";
      case _ansiStyles.default.dim.open:
        return "<dim>";
      case _ansiStyles.default.bold.open:
        return "<bold>";
      default:
        return "";
    }
  });
  const test = (val) => typeof val === "string" && !!val.match((0, _ansiRegex.default)());
  ConvertAnsi.test = test;
  const serialize = (val, config2, indentation, depth, refs, printer) => printer(toHumanReadableAnsi(val), config2, indentation, depth, refs);
  ConvertAnsi.serialize = serialize;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  ConvertAnsi.default = _default;
  return ConvertAnsi;
}
var DOMCollection$2 = {};
var hasRequiredDOMCollection;
function requireDOMCollection() {
  if (hasRequiredDOMCollection) return DOMCollection$2;
  hasRequiredDOMCollection = 1;
  Object.defineProperty(DOMCollection$2, "__esModule", {
    value: true
  });
  DOMCollection$2.test = DOMCollection$2.serialize = DOMCollection$2.default = void 0;
  var _collections = requireCollections();
  const SPACE = " ";
  const OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"];
  const ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
  const testName = (name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
  const test = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
  DOMCollection$2.test = test;
  const isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap";
  const serialize = (collection, config2, indentation, depth, refs, printer) => {
    const name = collection.constructor.name;
    if (++depth > config2.maxDepth) {
      return "[" + name + "]";
    }
    return (config2.min ? "" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? "{" + (0, _collections.printObjectProperties)(
      isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}) : { ...collection },
      config2,
      indentation,
      depth,
      refs,
      printer
    ) + "}" : "[" + (0, _collections.printListItems)(
      Array.from(collection),
      config2,
      indentation,
      depth,
      refs,
      printer
    ) + "]");
  };
  DOMCollection$2.serialize = serialize;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  DOMCollection$2.default = _default;
  return DOMCollection$2;
}
var DOMElement = {};
var markup = {};
var escapeHTML$2 = {};
var hasRequiredEscapeHTML;
function requireEscapeHTML() {
  if (hasRequiredEscapeHTML) return escapeHTML$2;
  hasRequiredEscapeHTML = 1;
  Object.defineProperty(escapeHTML$2, "__esModule", {
    value: true
  });
  escapeHTML$2.default = escapeHTML2;
  function escapeHTML2(str) {
    return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
  return escapeHTML$2;
}
var hasRequiredMarkup;
function requireMarkup() {
  if (hasRequiredMarkup) return markup;
  hasRequiredMarkup = 1;
  Object.defineProperty(markup, "__esModule", {
    value: true
  });
  markup.printText = markup.printProps = markup.printElementAsLeaf = markup.printElement = markup.printComment = markup.printChildren = void 0;
  var _escapeHTML = _interopRequireDefault(requireEscapeHTML());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const printProps2 = (keys, props, config2, indentation, depth, refs, printer) => {
    const indentationNext = indentation + config2.indent;
    const colors = config2.colors;
    return keys.map((key) => {
      const value = props[key];
      let printed = printer(value, config2, indentationNext, depth, refs);
      if (typeof value !== "string") {
        if (printed.indexOf("\n") !== -1) {
          printed = config2.spacingOuter + indentationNext + printed + config2.spacingOuter + indentation;
        }
        printed = "{" + printed + "}";
      }
      return config2.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
    }).join("");
  };
  markup.printProps = printProps2;
  const printChildren2 = (children, config2, indentation, depth, refs, printer) => children.map(
    (child) => config2.spacingOuter + indentation + (typeof child === "string" ? printText2(child, config2) : printer(child, config2, indentation, depth, refs))
  ).join("");
  markup.printChildren = printChildren2;
  const printText2 = (text, config2) => {
    const contentColor = config2.colors.content;
    return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
  };
  markup.printText = printText2;
  const printComment2 = (comment, config2) => {
    const commentColor = config2.colors.comment;
    return commentColor.open + "<!--" + (0, _escapeHTML.default)(comment) + "-->" + commentColor.close;
  };
  markup.printComment = printComment2;
  const printElement2 = (type2, printedProps, printedChildren, config2, indentation) => {
    const tagColor = config2.colors.tag;
    return tagColor.open + "<" + type2 + (printedProps && tagColor.close + printedProps + config2.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config2.spacingOuter + indentation + tagColor.open + "</" + type2 : (printedProps && !config2.min ? "" : " ") + "/") + ">" + tagColor.close;
  };
  markup.printElement = printElement2;
  const printElementAsLeaf2 = (type2, config2) => {
    const tagColor = config2.colors.tag;
    return tagColor.open + "<" + type2 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
  };
  markup.printElementAsLeaf = printElementAsLeaf2;
  return markup;
}
var hasRequiredDOMElement;
function requireDOMElement() {
  if (hasRequiredDOMElement) return DOMElement;
  hasRequiredDOMElement = 1;
  Object.defineProperty(DOMElement, "__esModule", {
    value: true
  });
  DOMElement.test = DOMElement.serialize = DOMElement.default = void 0;
  var _markup = requireMarkup();
  const ELEMENT_NODE2 = 1;
  const TEXT_NODE2 = 3;
  const COMMENT_NODE2 = 8;
  const FRAGMENT_NODE2 = 11;
  const ELEMENT_REGEXP2 = /^((HTML|SVG)\w*)?Element$/;
  const testHasAttribute = (val) => {
    try {
      return typeof val.hasAttribute === "function" && val.hasAttribute("is");
    } catch {
      return false;
    }
  };
  const testNode2 = (val) => {
    const constructorName = val.constructor.name;
    const { nodeType, tagName } = val;
    const isCustomElement2 = typeof tagName === "string" && tagName.includes("-") || testHasAttribute(val);
    return nodeType === ELEMENT_NODE2 && (ELEMENT_REGEXP2.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE2 && constructorName === "Text" || nodeType === COMMENT_NODE2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE2 && constructorName === "DocumentFragment";
  };
  const test = (val) => {
    var _val$constructor;
    return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode2(val);
  };
  DOMElement.test = test;
  function nodeIsText2(node) {
    return node.nodeType === TEXT_NODE2;
  }
  function nodeIsComment2(node) {
    return node.nodeType === COMMENT_NODE2;
  }
  function nodeIsFragment2(node) {
    return node.nodeType === FRAGMENT_NODE2;
  }
  const serialize = (node, config2, indentation, depth, refs, printer) => {
    if (nodeIsText2(node)) {
      return (0, _markup.printText)(node.data, config2);
    }
    if (nodeIsComment2(node)) {
      return (0, _markup.printComment)(node.data, config2);
    }
    const type2 = nodeIsFragment2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
    if (++depth > config2.maxDepth) {
      return (0, _markup.printElementAsLeaf)(type2, config2);
    }
    return (0, _markup.printElement)(
      type2,
      (0, _markup.printProps)(
        nodeIsFragment2(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),
        nodeIsFragment2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
          props[attribute.name] = attribute.value;
          return props;
        }, {}),
        config2,
        indentation + config2.indent,
        depth,
        refs,
        printer
      ),
      (0, _markup.printChildren)(
        Array.prototype.slice.call(node.childNodes || node.children),
        config2,
        indentation + config2.indent,
        depth,
        refs,
        printer
      ),
      config2,
      indentation
    );
  };
  DOMElement.serialize = serialize;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  DOMElement.default = _default;
  return DOMElement;
}
var Immutable = {};
var hasRequiredImmutable;
function requireImmutable() {
  if (hasRequiredImmutable) return Immutable;
  hasRequiredImmutable = 1;
  Object.defineProperty(Immutable, "__esModule", {
    value: true
  });
  Immutable.test = Immutable.serialize = Immutable.default = void 0;
  var _collections = requireCollections();
  const IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
  const IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
  const IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
  const IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
  const IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
  const IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@";
  const IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
  const IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
  const IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
  const getImmutableName = (name) => "Immutable." + name;
  const printAsLeaf = (name) => "[" + name + "]";
  const SPACE = " ";
  const LAZY = "…";
  const printImmutableEntries = (val, config2, indentation, depth, refs, printer, type2) => ++depth > config2.maxDepth ? printAsLeaf(getImmutableName(type2)) : getImmutableName(type2) + SPACE + "{" + (0, _collections.printIteratorEntries)(
    val.entries(),
    config2,
    indentation,
    depth,
    refs,
    printer
  ) + "}";
  function getRecordEntries(val) {
    let i2 = 0;
    return {
      next() {
        if (i2 < val._keys.length) {
          const key = val._keys[i2++];
          return {
            done: false,
            value: [key, val.get(key)]
          };
        }
        return {
          done: true,
          value: void 0
        };
      }
    };
  }
  const printImmutableRecord = (val, config2, indentation, depth, refs, printer) => {
    const name = getImmutableName(val._name || "Record");
    return ++depth > config2.maxDepth ? printAsLeaf(name) : name + SPACE + "{" + (0, _collections.printIteratorEntries)(
      getRecordEntries(val),
      config2,
      indentation,
      depth,
      refs,
      printer
    ) + "}";
  };
  const printImmutableSeq = (val, config2, indentation, depth, refs, printer) => {
    const name = getImmutableName("Seq");
    if (++depth > config2.maxDepth) {
      return printAsLeaf(name);
    }
    if (val[IS_KEYED_SENTINEL]) {
      return name + SPACE + "{" + // from Immutable collection of entries or from ECMAScript object
      (val._iter || val._object ? (0, _collections.printIteratorEntries)(
        val.entries(),
        config2,
        indentation,
        depth,
        refs,
        printer
      ) : LAZY) + "}";
    }
    return name + SPACE + "[" + (val._iter || // from Immutable collection of values
    val._array || // from ECMAScript array
    val._collection || // from ECMAScript collection in immutable v4
    val._iterable ? (0, _collections.printIteratorValues)(
      val.values(),
      config2,
      indentation,
      depth,
      refs,
      printer
    ) : LAZY) + "]";
  };
  const printImmutableValues = (val, config2, indentation, depth, refs, printer, type2) => ++depth > config2.maxDepth ? printAsLeaf(getImmutableName(type2)) : getImmutableName(type2) + SPACE + "[" + (0, _collections.printIteratorValues)(
    val.values(),
    config2,
    indentation,
    depth,
    refs,
    printer
  ) + "]";
  const serialize = (val, config2, indentation, depth, refs, printer) => {
    if (val[IS_MAP_SENTINEL]) {
      return printImmutableEntries(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer,
        val[IS_ORDERED_SENTINEL] ? "OrderedMap" : "Map"
      );
    }
    if (val[IS_LIST_SENTINEL]) {
      return printImmutableValues(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer,
        "List"
      );
    }
    if (val[IS_SET_SENTINEL]) {
      return printImmutableValues(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer,
        val[IS_ORDERED_SENTINEL] ? "OrderedSet" : "Set"
      );
    }
    if (val[IS_STACK_SENTINEL]) {
      return printImmutableValues(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer,
        "Stack"
      );
    }
    if (val[IS_SEQ_SENTINEL]) {
      return printImmutableSeq(val, config2, indentation, depth, refs, printer);
    }
    return printImmutableRecord(val, config2, indentation, depth, refs, printer);
  };
  Immutable.serialize = serialize;
  const test = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
  Immutable.test = test;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  Immutable.default = _default;
  return Immutable;
}
var ReactElement = {};
var reactIs = { exports: {} };
var reactIs_production_min = {};
/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min;
function requireReactIs_production_min() {
  if (hasRequiredReactIs_production_min) return reactIs_production_min;
  hasRequiredReactIs_production_min = 1;
  var b = 60103, c2 = 60106, d = 60107, e2 = 60108, f = 60114, g = 60109, h = 60110, k = 60112, l = 60113, m2 = 60120, n2 = 60115, p = 60116, q = 60121, r2 = 60122, u = 60117, v = 60129, w = 60131;
  if ("function" === typeof Symbol && Symbol.for) {
    var x = Symbol.for;
    b = x("react.element");
    c2 = x("react.portal");
    d = x("react.fragment");
    e2 = x("react.strict_mode");
    f = x("react.profiler");
    g = x("react.provider");
    h = x("react.context");
    k = x("react.forward_ref");
    l = x("react.suspense");
    m2 = x("react.suspense_list");
    n2 = x("react.memo");
    p = x("react.lazy");
    q = x("react.block");
    r2 = x("react.server.block");
    u = x("react.fundamental");
    v = x("react.debug_trace_mode");
    w = x("react.legacy_hidden");
  }
  function y(a) {
    if ("object" === typeof a && null !== a) {
      var t2 = a.$$typeof;
      switch (t2) {
        case b:
          switch (a = a.type, a) {
            case d:
            case f:
            case e2:
            case l:
            case m2:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case h:
                case k:
                case p:
                case n2:
                case g:
                  return a;
                default:
                  return t2;
              }
          }
        case c2:
          return t2;
      }
    }
  }
  var z = g, A = b, B = k, C = d, D = p, E = n2, F = c2, G = f, H = e2, I = l;
  reactIs_production_min.ContextConsumer = h;
  reactIs_production_min.ContextProvider = z;
  reactIs_production_min.Element = A;
  reactIs_production_min.ForwardRef = B;
  reactIs_production_min.Fragment = C;
  reactIs_production_min.Lazy = D;
  reactIs_production_min.Memo = E;
  reactIs_production_min.Portal = F;
  reactIs_production_min.Profiler = G;
  reactIs_production_min.StrictMode = H;
  reactIs_production_min.Suspense = I;
  reactIs_production_min.isAsyncMode = function() {
    return false;
  };
  reactIs_production_min.isConcurrentMode = function() {
    return false;
  };
  reactIs_production_min.isContextConsumer = function(a) {
    return y(a) === h;
  };
  reactIs_production_min.isContextProvider = function(a) {
    return y(a) === g;
  };
  reactIs_production_min.isElement = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === b;
  };
  reactIs_production_min.isForwardRef = function(a) {
    return y(a) === k;
  };
  reactIs_production_min.isFragment = function(a) {
    return y(a) === d;
  };
  reactIs_production_min.isLazy = function(a) {
    return y(a) === p;
  };
  reactIs_production_min.isMemo = function(a) {
    return y(a) === n2;
  };
  reactIs_production_min.isPortal = function(a) {
    return y(a) === c2;
  };
  reactIs_production_min.isProfiler = function(a) {
    return y(a) === f;
  };
  reactIs_production_min.isStrictMode = function(a) {
    return y(a) === e2;
  };
  reactIs_production_min.isSuspense = function(a) {
    return y(a) === l;
  };
  reactIs_production_min.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === d || a === f || a === v || a === e2 || a === l || a === m2 || a === w || "object" === typeof a && null !== a && (a.$$typeof === p || a.$$typeof === n2 || a.$$typeof === g || a.$$typeof === h || a.$$typeof === k || a.$$typeof === u || a.$$typeof === q || a[0] === r2) ? true : false;
  };
  reactIs_production_min.typeOf = y;
  return reactIs_production_min;
}
var hasRequiredReactIs;
function requireReactIs() {
  if (hasRequiredReactIs) return reactIs.exports;
  hasRequiredReactIs = 1;
  {
    reactIs.exports = requireReactIs_production_min();
  }
  return reactIs.exports;
}
var hasRequiredReactElement;
function requireReactElement() {
  if (hasRequiredReactElement) return ReactElement;
  hasRequiredReactElement = 1;
  Object.defineProperty(ReactElement, "__esModule", {
    value: true
  });
  ReactElement.test = ReactElement.serialize = ReactElement.default = void 0;
  var ReactIs = _interopRequireWildcard(requireReactIs());
  var _markup = requireMarkup();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  const getChildren = (arg, children = []) => {
    if (Array.isArray(arg)) {
      arg.forEach((item) => {
        getChildren(item, children);
      });
    } else if (arg != null && arg !== false) {
      children.push(arg);
    }
    return children;
  };
  const getType = (element) => {
    const type2 = element.type;
    if (typeof type2 === "string") {
      return type2;
    }
    if (typeof type2 === "function") {
      return type2.displayName || type2.name || "Unknown";
    }
    if (ReactIs.isFragment(element)) {
      return "React.Fragment";
    }
    if (ReactIs.isSuspense(element)) {
      return "React.Suspense";
    }
    if (typeof type2 === "object" && type2 !== null) {
      if (ReactIs.isContextProvider(element)) {
        return "Context.Provider";
      }
      if (ReactIs.isContextConsumer(element)) {
        return "Context.Consumer";
      }
      if (ReactIs.isForwardRef(element)) {
        if (type2.displayName) {
          return type2.displayName;
        }
        const functionName = type2.render.displayName || type2.render.name || "";
        return functionName !== "" ? "ForwardRef(" + functionName + ")" : "ForwardRef";
      }
      if (ReactIs.isMemo(element)) {
        const functionName = type2.displayName || type2.type.displayName || type2.type.name || "";
        return functionName !== "" ? "Memo(" + functionName + ")" : "Memo";
      }
    }
    return "UNDEFINED";
  };
  const getPropKeys = (element) => {
    const { props } = element;
    return Object.keys(props).filter((key) => key !== "children" && props[key] !== void 0).sort();
  };
  const serialize = (element, config2, indentation, depth, refs, printer) => ++depth > config2.maxDepth ? (0, _markup.printElementAsLeaf)(getType(element), config2) : (0, _markup.printElement)(
    getType(element),
    (0, _markup.printProps)(
      getPropKeys(element),
      element.props,
      config2,
      indentation + config2.indent,
      depth,
      refs,
      printer
    ),
    (0, _markup.printChildren)(
      getChildren(element.props.children),
      config2,
      indentation + config2.indent,
      depth,
      refs,
      printer
    ),
    config2,
    indentation
  );
  ReactElement.serialize = serialize;
  const test = (val) => val != null && ReactIs.isElement(val);
  ReactElement.test = test;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  ReactElement.default = _default;
  return ReactElement;
}
var ReactTestComponent = {};
var hasRequiredReactTestComponent;
function requireReactTestComponent() {
  if (hasRequiredReactTestComponent) return ReactTestComponent;
  hasRequiredReactTestComponent = 1;
  Object.defineProperty(ReactTestComponent, "__esModule", {
    value: true
  });
  ReactTestComponent.test = ReactTestComponent.serialize = ReactTestComponent.default = void 0;
  var _markup = requireMarkup();
  var global2 = (function() {
    if (typeof globalThis !== "undefined") {
      return globalThis;
    } else if (typeof global2 !== "undefined") {
      return global2;
    } else if (typeof self !== "undefined") {
      return self;
    } else if (typeof window !== "undefined") {
      return window;
    } else {
      return Function("return this")();
    }
  })();
  var Symbol2 = global2["jest-symbol-do-not-touch"] || global2.Symbol;
  const testSymbol = typeof Symbol2 === "function" && Symbol2.for ? Symbol2.for("react.test.json") : 245830487;
  const getPropKeys = (object) => {
    const { props } = object;
    return props ? Object.keys(props).filter((key) => props[key] !== void 0).sort() : [];
  };
  const serialize = (object, config2, indentation, depth, refs, printer) => ++depth > config2.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config2) : (0, _markup.printElement)(
    object.type,
    object.props ? (0, _markup.printProps)(
      getPropKeys(object),
      object.props,
      config2,
      indentation + config2.indent,
      depth,
      refs,
      printer
    ) : "",
    object.children ? (0, _markup.printChildren)(
      object.children,
      config2,
      indentation + config2.indent,
      depth,
      refs,
      printer
    ) : "",
    config2,
    indentation
  );
  ReactTestComponent.serialize = serialize;
  const test = (val) => val && val.$$typeof === testSymbol;
  ReactTestComponent.test = test;
  const plugin = {
    serialize,
    test
  };
  var _default = plugin;
  ReactTestComponent.default = _default;
  return ReactTestComponent;
}
var hasRequiredBuild$1;
function requireBuild$1() {
  if (hasRequiredBuild$1) return build$2;
  hasRequiredBuild$1 = 1;
  Object.defineProperty(build$2, "__esModule", {
    value: true
  });
  build$2.default = build$2.DEFAULT_OPTIONS = void 0;
  build$2.format = format;
  build$2.plugins = void 0;
  var _ansiStyles = _interopRequireDefault(requireAnsiStyles());
  var _collections = requireCollections();
  var _AsymmetricMatcher = _interopRequireDefault(
    requireAsymmetricMatcher()
  );
  var _ConvertAnsi = _interopRequireDefault(requireConvertAnsi());
  var _DOMCollection = _interopRequireDefault(requireDOMCollection());
  var _DOMElement = _interopRequireDefault(requireDOMElement());
  var _Immutable = _interopRequireDefault(requireImmutable());
  var _ReactElement = _interopRequireDefault(requireReactElement());
  var _ReactTestComponent = _interopRequireDefault(
    requireReactTestComponent()
  );
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const toString = Object.prototype.toString;
  const toISOString = Date.prototype.toISOString;
  const errorToString = Error.prototype.toString;
  const regExpToString = RegExp.prototype.toString;
  const getConstructorName = (val) => typeof val.constructor === "function" && val.constructor.name || "Object";
  const isWindow = (val) => typeof window !== "undefined" && val === window;
  const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  const NEWLINE_REGEXP = /\n/gi;
  class PrettyFormatPluginError extends Error {
    constructor(message, stack) {
      super(message);
      this.stack = stack;
      this.name = this.constructor.name;
    }
  }
  function isToStringedArrayType(toStringed) {
    return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
  }
  function printNumber(val) {
    return Object.is(val, -0) ? "-0" : String(val);
  }
  function printBigInt(val) {
    return String(`${val}n`);
  }
  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return "[Function]";
    }
    return "[Function " + (val.name || "anonymous") + "]";
  }
  function printSymbol(val) {
    return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
  }
  function printError(val) {
    return "[" + errorToString.call(val) + "]";
  }
  function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
    if (val === true || val === false) {
      return "" + val;
    }
    if (val === void 0) {
      return "undefined";
    }
    if (val === null) {
      return "null";
    }
    const typeOf = typeof val;
    if (typeOf === "number") {
      return printNumber(val);
    }
    if (typeOf === "bigint") {
      return printBigInt(val);
    }
    if (typeOf === "string") {
      if (escapeString) {
        return '"' + val.replace(/"|\\/g, "\\$&") + '"';
      }
      return '"' + val + '"';
    }
    if (typeOf === "function") {
      return printFunction(val, printFunctionName);
    }
    if (typeOf === "symbol") {
      return printSymbol(val);
    }
    const toStringed = toString.call(val);
    if (toStringed === "[object WeakMap]") {
      return "WeakMap {}";
    }
    if (toStringed === "[object WeakSet]") {
      return "WeakSet {}";
    }
    if (toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]") {
      return printFunction(val, printFunctionName);
    }
    if (toStringed === "[object Symbol]") {
      return printSymbol(val);
    }
    if (toStringed === "[object Date]") {
      return isNaN(+val) ? "Date { NaN }" : toISOString.call(val);
    }
    if (toStringed === "[object Error]") {
      return printError(val);
    }
    if (toStringed === "[object RegExp]") {
      if (escapeRegex) {
        return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      return regExpToString.call(val);
    }
    if (val instanceof Error) {
      return printError(val);
    }
    return null;
  }
  function printComplexValue(val, config2, indentation, depth, refs, hasCalledToJSON) {
    if (refs.indexOf(val) !== -1) {
      return "[Circular]";
    }
    refs = refs.slice();
    refs.push(val);
    const hitMaxDepth = ++depth > config2.maxDepth;
    const min2 = config2.min;
    if (config2.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === "function" && !hasCalledToJSON) {
      return printer(val.toJSON(), config2, indentation, depth, refs, true);
    }
    const toStringed = toString.call(val);
    if (toStringed === "[object Arguments]") {
      return hitMaxDepth ? "[Arguments]" : (min2 ? "" : "Arguments ") + "[" + (0, _collections.printListItems)(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "]";
    }
    if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? "[" + val.constructor.name + "]" : (min2 ? "" : !config2.printBasicPrototype && val.constructor.name === "Array" ? "" : val.constructor.name + " ") + "[" + (0, _collections.printListItems)(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "]";
    }
    if (toStringed === "[object Map]") {
      return hitMaxDepth ? "[Map]" : "Map {" + (0, _collections.printIteratorEntries)(
        val.entries(),
        config2,
        indentation,
        depth,
        refs,
        printer,
        " => "
      ) + "}";
    }
    if (toStringed === "[object Set]") {
      return hitMaxDepth ? "[Set]" : "Set {" + (0, _collections.printIteratorValues)(
        val.values(),
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "}";
    }
    return hitMaxDepth || isWindow(val) ? "[" + getConstructorName(val) + "]" : (min2 ? "" : !config2.printBasicPrototype && getConstructorName(val) === "Object" ? "" : getConstructorName(val) + " ") + "{" + (0, _collections.printObjectProperties)(
      val,
      config2,
      indentation,
      depth,
      refs,
      printer
    ) + "}";
  }
  function isNewPlugin(plugin) {
    return plugin.serialize != null;
  }
  function printPlugin(plugin, val, config2, indentation, depth, refs) {
    let printed;
    try {
      printed = isNewPlugin(plugin) ? plugin.serialize(val, config2, indentation, depth, refs, printer) : plugin.print(
        val,
        (valChild) => printer(valChild, config2, indentation, depth, refs),
        (str) => {
          const indentationNext = indentation + config2.indent;
          return indentationNext + str.replace(NEWLINE_REGEXP, "\n" + indentationNext);
        },
        {
          edgeSpacing: config2.spacingOuter,
          min: config2.min,
          spacing: config2.spacingInner
        },
        config2.colors
      );
    } catch (error) {
      throw new PrettyFormatPluginError(error.message, error.stack);
    }
    if (typeof printed !== "string") {
      throw new Error(
        `pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`
      );
    }
    return printed;
  }
  function findPlugin(plugins2, val) {
    for (let p = 0; p < plugins2.length; p++) {
      try {
        if (plugins2[p].test(val)) {
          return plugins2[p];
        }
      } catch (error) {
        throw new PrettyFormatPluginError(error.message, error.stack);
      }
    }
    return null;
  }
  function printer(val, config2, indentation, depth, refs, hasCalledToJSON) {
    const plugin = findPlugin(config2.plugins, val);
    if (plugin !== null) {
      return printPlugin(plugin, val, config2, indentation, depth, refs);
    }
    const basicResult = printBasicValue(
      val,
      config2.printFunctionName,
      config2.escapeRegex,
      config2.escapeString
    );
    if (basicResult !== null) {
      return basicResult;
    }
    return printComplexValue(
      val,
      config2,
      indentation,
      depth,
      refs,
      hasCalledToJSON
    );
  }
  const DEFAULT_THEME = {
    comment: "gray",
    content: "reset",
    prop: "yellow",
    tag: "cyan",
    value: "green"
  };
  const DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
  const DEFAULT_OPTIONS = {
    callToJSON: true,
    compareKeys: void 0,
    escapeRegex: false,
    escapeString: true,
    highlight: false,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printBasicPrototype: true,
    printFunctionName: true,
    theme: DEFAULT_THEME
  };
  build$2.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
  function validateOptions(options) {
    Object.keys(options).forEach((key) => {
      if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
        throw new Error(`pretty-format: Unknown option "${key}".`);
      }
    });
    if (options.min && options.indent !== void 0 && options.indent !== 0) {
      throw new Error(
        'pretty-format: Options "min" and "indent" cannot be used together.'
      );
    }
    if (options.theme !== void 0) {
      if (options.theme === null) {
        throw new Error('pretty-format: Option "theme" must not be null.');
      }
      if (typeof options.theme !== "object") {
        throw new Error(
          `pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`
        );
      }
    }
  }
  const getColorsHighlight = (options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {
    const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];
    const color = value && _ansiStyles.default[value];
    if (color && typeof color.close === "string" && typeof color.open === "string") {
      colors[key] = color;
    } else {
      throw new Error(
        `pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`
      );
    }
    return colors;
  }, /* @__PURE__ */ Object.create(null));
  const getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key) => {
    colors[key] = {
      close: "",
      open: ""
    };
    return colors;
  }, /* @__PURE__ */ Object.create(null));
  const getPrintFunctionName = (options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
  const getEscapeRegex = (options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
  const getEscapeString = (options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString;
  const getConfig2 = (options) => {
    var _options$printBasicPr;
    return {
      callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
      colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
      compareKeys: options && typeof options.compareKeys === "function" ? options.compareKeys : DEFAULT_OPTIONS.compareKeys,
      escapeRegex: getEscapeRegex(options),
      escapeString: getEscapeString(options),
      indent: options && options.min ? "" : createIndent(
        options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent
      ),
      maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
      min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,
      plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,
      printBasicPrototype: (_options$printBasicPr = options === null || options === void 0 ? void 0 : options.printBasicPrototype) !== null && _options$printBasicPr !== void 0 ? _options$printBasicPr : true,
      printFunctionName: getPrintFunctionName(options),
      spacingInner: options && options.min ? " " : "\n",
      spacingOuter: options && options.min ? "" : "\n"
    };
  };
  function createIndent(indent) {
    return new Array(indent + 1).join(" ");
  }
  function format(val, options) {
    if (options) {
      validateOptions(options);
      if (options.plugins) {
        const plugin = findPlugin(options.plugins, val);
        if (plugin !== null) {
          return printPlugin(plugin, val, getConfig2(options), "", 0, []);
        }
      }
    }
    const basicResult = printBasicValue(
      val,
      getPrintFunctionName(options),
      getEscapeRegex(options),
      getEscapeString(options)
    );
    if (basicResult !== null) {
      return basicResult;
    }
    return printComplexValue(val, getConfig2(options), "", 0, []);
  }
  const plugins = {
    AsymmetricMatcher: _AsymmetricMatcher.default,
    ConvertAnsi: _ConvertAnsi.default,
    DOMCollection: _DOMCollection.default,
    DOMElement: _DOMElement.default,
    Immutable: _Immutable.default,
    ReactElement: _ReactElement.default,
    ReactTestComponent: _ReactTestComponent.default
  };
  build$2.plugins = plugins;
  var _default = format;
  build$2.default = _default;
  return build$2;
}
var buildExports$1 = requireBuild$1();
const index$1 = /* @__PURE__ */ getDefaultExportFromCjs(buildExports$1);
const index$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: index$1
}, [buildExports$1]);
var toStr$1 = Object.prototype.toString;
function isCallable$2(fn) {
  return typeof fn === "function" || toStr$1.call(fn) === "[object Function]";
}
function toInteger$1(value) {
  var number = Number(value);
  if (isNaN(number)) {
    return 0;
  }
  if (number === 0 || !isFinite(number)) {
    return number;
  }
  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger$1 = Math.pow(2, 53) - 1;
function toLength$1(value) {
  var len = toInteger$1(value);
  return Math.min(Math.max(len, 0), maxSafeInteger$1);
}
function arrayFrom$1(arrayLike, mapFn) {
  var C = Array;
  var items = Object(arrayLike);
  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }
  var len = toLength$1(items.length);
  var A = isCallable$2(C) ? Object(new C(len)) : new Array(len);
  var k = 0;
  var kValue;
  while (k < len) {
    kValue = items[k];
    {
      A[k] = kValue;
    }
    k += 1;
  }
  A.length = len;
  return A;
}
function _typeof$3(obj) {
  "@babel/helpers - typeof";
  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$3(obj);
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey$3(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _defineProperty$3(obj, key, value) {
  key = _toPropertyKey$3(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey$3(arg) {
  var key = _toPrimitive$3(arg, "string");
  return _typeof$3(key) === "symbol" ? key : String(key);
}
function _toPrimitive$3(input2, hint) {
  if (_typeof$3(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint);
    if (_typeof$3(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
var SetLike$2 = /* @__PURE__ */ (function() {
  function SetLike2() {
    var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck$1(this, SetLike2);
    _defineProperty$3(this, "items", void 0);
    this.items = items;
  }
  _createClass$1(SetLike2, [{
    key: "add",
    value: function add(value) {
      if (this.has(value) === false) {
        this.items.push(value);
      }
      return this;
    }
  }, {
    key: "clear",
    value: function clear2() {
      this.items = [];
    }
  }, {
    key: "delete",
    value: function _delete(value) {
      var previousLength = this.items.length;
      this.items = this.items.filter(function(item) {
        return item !== value;
      });
      return previousLength !== this.items.length;
    }
  }, {
    key: "forEach",
    value: function forEach2(callbackfn) {
      var _this = this;
      this.items.forEach(function(item) {
        callbackfn(item, item, _this);
      });
    }
  }, {
    key: "has",
    value: function has(value) {
      return this.items.indexOf(value) !== -1;
    }
  }, {
    key: "size",
    get: function get2() {
      return this.items.length;
    }
  }]);
  return SetLike2;
})();
const SetLike$3 = typeof Set === "undefined" ? Set : SetLike$2;
function getLocalName$1(element) {
  var _element$localName;
  return (
    // eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName
    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : (
      // eslint-disable-next-line no-restricted-properties -- required for the fallback
      element.tagName.toLowerCase()
    )
  );
}
var localNameToRoleMappings$1 = {
  article: "article",
  aside: "complementary",
  button: "button",
  datalist: "listbox",
  dd: "definition",
  details: "group",
  dialog: "dialog",
  dt: "term",
  fieldset: "group",
  figure: "figure",
  // WARNING: Only with an accessible name
  form: "form",
  footer: "contentinfo",
  h1: "heading",
  h2: "heading",
  h3: "heading",
  h4: "heading",
  h5: "heading",
  h6: "heading",
  header: "banner",
  hr: "separator",
  html: "document",
  legend: "legend",
  li: "listitem",
  math: "math",
  main: "main",
  menu: "list",
  nav: "navigation",
  ol: "list",
  optgroup: "group",
  // WARNING: Only in certain context
  option: "option",
  output: "status",
  progress: "progressbar",
  // WARNING: Only with an accessible name
  section: "region",
  summary: "button",
  table: "table",
  tbody: "rowgroup",
  textarea: "textbox",
  tfoot: "rowgroup",
  // WARNING: Only in certain context
  td: "cell",
  th: "columnheader",
  thead: "rowgroup",
  tr: "row",
  ul: "list"
};
var prohibitedAttributes$1 = {
  caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]),
  insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"])
};
function hasGlobalAriaAttributes$1(element, role) {
  return [
    "aria-atomic",
    "aria-busy",
    "aria-controls",
    "aria-current",
    "aria-describedby",
    "aria-details",
    // "disabled",
    "aria-dropeffect",
    // "errormessage",
    "aria-flowto",
    "aria-grabbed",
    // "haspopup",
    "aria-hidden",
    // "invalid",
    "aria-keyshortcuts",
    "aria-label",
    "aria-labelledby",
    "aria-live",
    "aria-owns",
    "aria-relevant",
    "aria-roledescription"
  ].some(function(attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes$1[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole$1(element, implicitRole) {
  return hasGlobalAriaAttributes$1(element, implicitRole);
}
function getRole$1(element) {
  var explicitRole = getExplicitRole$1(element);
  if (explicitRole === null || explicitRole === "presentation") {
    var implicitRole = getImplicitRole$1(element);
    if (explicitRole !== "presentation" || ignorePresentationalRole$1(element, implicitRole || "")) {
      return implicitRole;
    }
  }
  return explicitRole;
}
function getImplicitRole$1(element) {
  var mappedByTag = localNameToRoleMappings$1[getLocalName$1(element)];
  if (mappedByTag !== void 0) {
    return mappedByTag;
  }
  switch (getLocalName$1(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) {
        return "link";
      }
      break;
    case "img":
      if (element.getAttribute("alt") === "" && !ignorePresentationalRole$1(element, "img")) {
        return "presentation";
      }
      return "img";
    case "input": {
      var _ref = element, type2 = _ref.type;
      switch (type2) {
        case "button":
        case "image":
        case "reset":
        case "submit":
          return "button";
        case "checkbox":
        case "radio":
          return type2;
        case "range":
          return "slider";
        case "email":
        case "tel":
        case "text":
        case "url":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "textbox";
        case "search":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "searchbox";
        case "number":
          return "spinbutton";
        default:
          return null;
      }
    }
    case "select":
      if (element.hasAttribute("multiple") || element.size > 1) {
        return "listbox";
      }
      return "combobox";
  }
  return null;
}
function getExplicitRole$1(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    if (explicitRole.length > 0) {
      return explicitRole;
    }
  }
  return null;
}
function isElement$3(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "caption";
}
function isHTMLInputElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "input";
}
function isHTMLOptGroupElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "optgroup";
}
function isHTMLSelectElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "select";
}
function isHTMLTableElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "table";
}
function isHTMLTextAreaElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "textarea";
}
function safeWindow$1(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
  if (defaultView === null) {
    throw new TypeError("no window available");
  }
  return defaultView;
}
function isHTMLFieldSetElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "fieldset";
}
function isHTMLLegendElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "legend";
}
function isHTMLSlotElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "slot";
}
function isSVGElement$1(node) {
  return isElement$3(node) && node.ownerSVGElement !== void 0;
}
function isSVGSVGElement$1(node) {
  return isElement$3(node) && getLocalName$1(node) === "svg";
}
function isSVGTitleElement$1(node) {
  return isSVGElement$1(node) && getLocalName$1(node) === "title";
}
function queryIdRefs$1(node, attributeName) {
  if (isElement$3(node) && node.hasAttribute(attributeName)) {
    var ids = node.getAttribute(attributeName).split(" ");
    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function(id) {
      return root.getElementById(id);
    }).filter(
      function(element) {
        return element !== null;
      }
      // TODO: why does this not narrow?
    );
  }
  return [];
}
function hasAnyConcreteRoles$1(node, roles) {
  if (isElement$3(node)) {
    return roles.indexOf(getRole$1(node)) !== -1;
  }
  return false;
}
function asFlatString$1(s2) {
  return s2.trim().replace(/\s\s+/g, " ");
}
function isHidden$1(node, getComputedStyleImplementation) {
  if (!isElement$3(node)) {
    return false;
  }
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") {
    return true;
  }
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}
function isControl$1(node) {
  return hasAnyConcreteRoles$1(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole$1(node, "range");
}
function hasAbstractRole$1(node, role) {
  if (!isElement$3(node)) {
    return false;
  }
  switch (role) {
    case "range":
      return hasAnyConcreteRoles$1(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}
function querySelectorAllSubtree$1(element, selectors) {
  var elements = arrayFrom$1(element.querySelectorAll(selectors));
  queryIdRefs$1(element, "aria-owns").forEach(function(root) {
    elements.push.apply(elements, arrayFrom$1(root.querySelectorAll(selectors)));
  });
  return elements;
}
function querySelectedOptions$1(listbox) {
  if (isHTMLSelectElement$1(listbox)) {
    return listbox.selectedOptions || querySelectorAllSubtree$1(listbox, "[selected]");
  }
  return querySelectorAllSubtree$1(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational$1(node) {
  return hasAnyConcreteRoles$1(node, ["none", "presentation"]);
}
function isNativeHostLanguageTextAlternativeElement$1(node) {
  return isHTMLTableCaptionElement$1(node);
}
function allowsNameFromContent$1(node) {
  return hasAnyConcreteRoles$1(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}
function isDescendantOfNativeHostLanguageTextAlternativeElement$1(node) {
  return false;
}
function getValueOfTextbox$1(element) {
  if (isHTMLInputElement$1(element) || isHTMLTextAreaElement$1(element)) {
    return element.value;
  }
  return element.textContent || "";
}
function getTextualContent$1(declaration) {
  var content = declaration.getPropertyValue("content");
  if (/^["'].*["']$/.test(content)) {
    return content.slice(1, -1);
  }
  return "";
}
function isLabelableElement$1(element) {
  var localName = getLocalName$1(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}
function findLabelableElement$1(element) {
  if (isLabelableElement$1(element)) {
    return element;
  }
  var labelableElement = null;
  element.childNodes.forEach(function(childNode) {
    if (labelableElement === null && isElement$3(childNode)) {
      var descendantLabelableElement = findLabelableElement$1(childNode);
      if (descendantLabelableElement !== null) {
        labelableElement = descendantLabelableElement;
      }
    }
  });
  return labelableElement;
}
function getControlOfLabel$1(label) {
  if (label.control !== void 0) {
    return label.control;
  }
  var htmlFor = label.getAttribute("for");
  if (htmlFor !== null) {
    return label.ownerDocument.getElementById(htmlFor);
  }
  return findLabelableElement$1(label);
}
function getLabels$3(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) {
    return labelsProperty;
  }
  if (labelsProperty !== void 0) {
    return arrayFrom$1(labelsProperty);
  }
  if (!isLabelableElement$1(element)) {
    return null;
  }
  var document2 = element.ownerDocument;
  return arrayFrom$1(document2.querySelectorAll("label")).filter(function(label) {
    return getControlOfLabel$1(label) === element;
  });
}
function getSlotContents$1(slot) {
  var assignedNodes = slot.assignedNodes();
  if (assignedNodes.length === 0) {
    return arrayFrom$1(slot.childNodes);
  }
  return assignedNodes;
}
function computeTextAlternative$1(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var consultedNodes = new SetLike$3();
  var window2 = safeWindow$1(root);
  var _options$compute = options.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
  function computeMiscTextAlternative(node, context) {
    var accumulatedText = "";
    if (isElement$3(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before");
      var beforeContent = getTextualContent$1(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }
    var childNodes = isHTMLSlotElement$1(node) ? getSlotContents$1(node) : arrayFrom$1(node.childNodes).concat(queryIdRefs$1(node, "aria-owns"));
    childNodes.forEach(function(child) {
      var result = computeTextAlternative2(child, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false,
        recursion: true
      });
      var display2 = isElement$3(child) ? getComputedStyle(child).getPropertyValue("display") : "inline";
      var separator = display2 !== "inline" ? " " : "";
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    });
    if (isElement$3(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after");
      var afterContent = getTextualContent$1(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "") {
      consultedNodes.add(attribute);
      return attribute.value;
    }
    return null;
  }
  function computeTooltipAttributeValue(node) {
    if (!isElement$3(node)) {
      return null;
    }
    return useAttribute(node, "title");
  }
  function computeElementTextAlternative(node) {
    if (!isElement$3(node)) {
      return null;
    }
    if (isHTMLFieldSetElement$1(node)) {
      consultedNodes.add(node);
      var children = arrayFrom$1(node.childNodes);
      for (var i2 = 0; i2 < children.length; i2 += 1) {
        var child = children[i2];
        if (isHTMLLegendElement$1(child)) {
          return computeTextAlternative2(child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isHTMLTableElement$1(node)) {
      consultedNodes.add(node);
      var _children = arrayFrom$1(node.childNodes);
      for (var _i = 0; _i < _children.length; _i += 1) {
        var _child = _children[_i];
        if (isHTMLTableCaptionElement$1(_child)) {
          return computeTextAlternative2(_child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isSVGSVGElement$1(node)) {
      consultedNodes.add(node);
      var _children2 = arrayFrom$1(node.childNodes);
      for (var _i2 = 0; _i2 < _children2.length; _i2 += 1) {
        var _child2 = _children2[_i2];
        if (isSVGTitleElement$1(_child2)) {
          return _child2.textContent;
        }
      }
      return null;
    } else if (getLocalName$1(node) === "img" || getLocalName$1(node) === "area") {
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) {
        return nameFromAlt;
      }
    } else if (isHTMLOptGroupElement$1(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) {
        return nameFromLabel;
      }
    }
    if (isHTMLInputElement$1(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) {
        return nameFromValue;
      }
      if (node.type === "submit") {
        return "Submit";
      }
      if (node.type === "reset") {
        return "Reset";
      }
    }
    var labels = getLabels$3(node);
    if (labels !== null && labels.length !== 0) {
      consultedNodes.add(node);
      return arrayFrom$1(labels).map(function(element) {
        return computeTextAlternative2(element, {
          isEmbeddedInLabel: true,
          isReferenced: false,
          recursion: true
        });
      }).filter(function(label) {
        return label.length > 0;
      }).join(" ");
    }
    if (isHTMLInputElement$1(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) {
        return _nameFromAlt;
      }
      var nameFromTitle = useAttribute(node, "title");
      if (nameFromTitle !== null) {
        return nameFromTitle;
      }
      return "Submit Query";
    }
    if (hasAnyConcreteRoles$1(node, ["button"])) {
      var nameFromSubTree = computeMiscTextAlternative(node, {
        isEmbeddedInLabel: false
      });
      if (nameFromSubTree !== "") {
        return nameFromSubTree;
      }
    }
    return null;
  }
  function computeTextAlternative2(current, context) {
    if (consultedNodes.has(current)) {
      return "";
    }
    if (!hidden && isHidden$1(current, getComputedStyle) && !context.isReferenced) {
      consultedNodes.add(current);
      return "";
    }
    var labelAttributeNode = isElement$3(current) ? current.getAttributeNode("aria-labelledby") : null;
    var labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs$1(current, "aria-labelledby") : [];
    if (compute === "name" && !context.isReferenced && labelElements.length > 0) {
      consultedNodes.add(labelAttributeNode);
      return labelElements.map(function(element) {
        return computeTextAlternative2(element, {
          isEmbeddedInLabel: context.isEmbeddedInLabel,
          isReferenced: true,
          // this isn't recursion as specified, otherwise we would skip
          // `aria-label` in
          // <input id="myself" aria-label="foo" aria-labelledby="myself"
          recursion: false
        });
      }).join(" ");
    }
    var skipToStep2E = context.recursion && isControl$1(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = (isElement$3(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") {
        consultedNodes.add(current);
        return ariaLabel;
      }
      if (!isMarkedPresentational$1(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) {
          consultedNodes.add(current);
          return elementTextAlternative;
        }
      }
    }
    if (hasAnyConcreteRoles$1(current, ["menu"])) {
      consultedNodes.add(current);
      return "";
    }
    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
      if (hasAnyConcreteRoles$1(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions$1(current);
        if (selectedOptions.length === 0) {
          return isHTMLInputElement$1(current) ? current.value : "";
        }
        return arrayFrom$1(selectedOptions).map(function(selectedOption) {
          return computeTextAlternative2(selectedOption, {
            isEmbeddedInLabel: context.isEmbeddedInLabel,
            isReferenced: false,
            recursion: true
          });
        }).join(" ");
      }
      if (hasAbstractRole$1(current, "range")) {
        consultedNodes.add(current);
        if (current.hasAttribute("aria-valuetext")) {
          return current.getAttribute("aria-valuetext");
        }
        if (current.hasAttribute("aria-valuenow")) {
          return current.getAttribute("aria-valuenow");
        }
        return current.getAttribute("value") || "";
      }
      if (hasAnyConcreteRoles$1(current, ["textbox"])) {
        consultedNodes.add(current);
        return getValueOfTextbox$1(current);
      }
    }
    if (allowsNameFromContent$1(current) || isElement$3(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement$1(current) || isDescendantOfNativeHostLanguageTextAlternativeElement$1()) {
      var accumulatedText2F = computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel
      });
      if (accumulatedText2F !== "") {
        consultedNodes.add(current);
        return accumulatedText2F;
      }
    }
    if (current.nodeType === current.TEXT_NODE) {
      consultedNodes.add(current);
      return current.textContent || "";
    }
    if (context.recursion) {
      consultedNodes.add(current);
      return computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel
      });
    }
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    if (tooltipAttributeValue !== null) {
      consultedNodes.add(current);
      return tooltipAttributeValue;
    }
    consultedNodes.add(current);
    return "";
  }
  return asFlatString$1(computeTextAlternative2(root, {
    isEmbeddedInLabel: false,
    // by spec computeAccessibleDescription starts with the referenced elements as roots
    isReferenced: compute === "description",
    recursion: false
  }));
}
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$2(obj);
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
      _defineProperty$2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$2(obj, key, value) {
  key = _toPropertyKey$2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey$2(arg) {
  var key = _toPrimitive$2(arg, "string");
  return _typeof$2(key) === "symbol" ? key : String(key);
}
function _toPrimitive$2(input2, hint) {
  if (_typeof$2(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint);
    if (_typeof$2(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function computeAccessibleDescription$1(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var description = queryIdRefs$1(root, "aria-describedby").map(function(element) {
    return computeTextAlternative$1(element, _objectSpread$1(_objectSpread$1({}, options), {}, {
      compute: "description"
    }));
  }).join(" ");
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
function prohibitsNaming$1(node) {
  return hasAnyConcreteRoles$1(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}
function computeAccessibleName$1(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (prohibitsNaming$1(root)) {
    return "";
  }
  return computeTextAlternative$1(root, options);
}
var lib$1 = {};
var ariaPropsMap$1 = {};
var iterationDecorator$1 = {};
var iteratorProxy$1 = {};
var hasRequiredIteratorProxy$1;
function requireIteratorProxy$1() {
  if (hasRequiredIteratorProxy$1) return iteratorProxy$1;
  hasRequiredIteratorProxy$1 = 1;
  Object.defineProperty(iteratorProxy$1, "__esModule", {
    value: true
  });
  iteratorProxy$1.default = void 0;
  function iteratorProxy2() {
    var values = this;
    var index2 = 0;
    var iter = {
      "@@iterator": function iterator() {
        return iter;
      },
      next: function next() {
        if (index2 < values.length) {
          var value = values[index2];
          index2 = index2 + 1;
          return {
            done: false,
            value
          };
        } else {
          return {
            done: true
          };
        }
      }
    };
    return iter;
  }
  var _default = iteratorProxy2;
  iteratorProxy$1.default = _default;
  return iteratorProxy$1;
}
var hasRequiredIterationDecorator$1;
function requireIterationDecorator$1() {
  if (hasRequiredIterationDecorator$1) return iterationDecorator$1;
  hasRequiredIterationDecorator$1 = 1;
  Object.defineProperty(iterationDecorator$1, "__esModule", {
    value: true
  });
  iterationDecorator$1.default = iterationDecorator2;
  var _iteratorProxy = _interopRequireDefault(requireIteratorProxy$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof2(obj);
  }
  function iterationDecorator2(collection, entries) {
    if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
      Object.defineProperty(collection, Symbol.iterator, {
        value: _iteratorProxy.default.bind(entries)
      });
    }
    return collection;
  }
  return iterationDecorator$1;
}
var hasRequiredAriaPropsMap$1;
function requireAriaPropsMap$1() {
  if (hasRequiredAriaPropsMap$1) return ariaPropsMap$1;
  hasRequiredAriaPropsMap$1 = 1;
  Object.defineProperty(ariaPropsMap$1, "__esModule", {
    value: true
  });
  ariaPropsMap$1.default = void 0;
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length) return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  var properties = [["aria-activedescendant", {
    "type": "id"
  }], ["aria-atomic", {
    "type": "boolean"
  }], ["aria-autocomplete", {
    "type": "token",
    "values": ["inline", "list", "both", "none"]
  }], ["aria-busy", {
    "type": "boolean"
  }], ["aria-checked", {
    "type": "tristate"
  }], ["aria-colcount", {
    type: "integer"
  }], ["aria-colindex", {
    type: "integer"
  }], ["aria-colspan", {
    type: "integer"
  }], ["aria-controls", {
    "type": "idlist"
  }], ["aria-current", {
    type: "token",
    values: ["page", "step", "location", "date", "time", true, false]
  }], ["aria-describedby", {
    "type": "idlist"
  }], ["aria-details", {
    "type": "id"
  }], ["aria-disabled", {
    "type": "boolean"
  }], ["aria-dropeffect", {
    "type": "tokenlist",
    "values": ["copy", "execute", "link", "move", "none", "popup"]
  }], ["aria-errormessage", {
    "type": "id"
  }], ["aria-expanded", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-flowto", {
    "type": "idlist"
  }], ["aria-grabbed", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-haspopup", {
    "type": "token",
    "values": [false, true, "menu", "listbox", "tree", "grid", "dialog"]
  }], ["aria-hidden", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-invalid", {
    "type": "token",
    "values": ["grammar", false, "spelling", true]
  }], ["aria-keyshortcuts", {
    type: "string"
  }], ["aria-label", {
    "type": "string"
  }], ["aria-labelledby", {
    "type": "idlist"
  }], ["aria-level", {
    "type": "integer"
  }], ["aria-live", {
    "type": "token",
    "values": ["assertive", "off", "polite"]
  }], ["aria-modal", {
    type: "boolean"
  }], ["aria-multiline", {
    "type": "boolean"
  }], ["aria-multiselectable", {
    "type": "boolean"
  }], ["aria-orientation", {
    "type": "token",
    "values": ["vertical", "undefined", "horizontal"]
  }], ["aria-owns", {
    "type": "idlist"
  }], ["aria-placeholder", {
    type: "string"
  }], ["aria-posinset", {
    "type": "integer"
  }], ["aria-pressed", {
    "type": "tristate"
  }], ["aria-readonly", {
    "type": "boolean"
  }], ["aria-relevant", {
    "type": "tokenlist",
    "values": ["additions", "all", "removals", "text"]
  }], ["aria-required", {
    "type": "boolean"
  }], ["aria-roledescription", {
    type: "string"
  }], ["aria-rowcount", {
    type: "integer"
  }], ["aria-rowindex", {
    type: "integer"
  }], ["aria-rowspan", {
    type: "integer"
  }], ["aria-selected", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-setsize", {
    "type": "integer"
  }], ["aria-sort", {
    "type": "token",
    "values": ["ascending", "descending", "none", "other"]
  }], ["aria-valuemax", {
    "type": "number"
  }], ["aria-valuemin", {
    "type": "number"
  }], ["aria-valuenow", {
    "type": "number"
  }], ["aria-valuetext", {
    "type": "string"
  }]];
  var ariaPropsMap2 = {
    entries: function entries() {
      return properties;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(properties), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, key, properties);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key) {
      var item = properties.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!ariaPropsMap2.get(key);
    },
    keys: function keys() {
      return properties.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
        return key;
      });
    },
    values: function values() {
      return properties.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(ariaPropsMap2, ariaPropsMap2.entries());
  ariaPropsMap$1.default = _default;
  return ariaPropsMap$1;
}
var domMap$1 = {};
var hasRequiredDomMap$1;
function requireDomMap$1() {
  if (hasRequiredDomMap$1) return domMap$1;
  hasRequiredDomMap$1 = 1;
  Object.defineProperty(domMap$1, "__esModule", {
    value: true
  });
  domMap$1.default = void 0;
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length) return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  var dom = [["a", {
    reserved: false
  }], ["abbr", {
    reserved: false
  }], ["acronym", {
    reserved: false
  }], ["address", {
    reserved: false
  }], ["applet", {
    reserved: false
  }], ["area", {
    reserved: false
  }], ["article", {
    reserved: false
  }], ["aside", {
    reserved: false
  }], ["audio", {
    reserved: false
  }], ["b", {
    reserved: false
  }], ["base", {
    reserved: true
  }], ["bdi", {
    reserved: false
  }], ["bdo", {
    reserved: false
  }], ["big", {
    reserved: false
  }], ["blink", {
    reserved: false
  }], ["blockquote", {
    reserved: false
  }], ["body", {
    reserved: false
  }], ["br", {
    reserved: false
  }], ["button", {
    reserved: false
  }], ["canvas", {
    reserved: false
  }], ["caption", {
    reserved: false
  }], ["center", {
    reserved: false
  }], ["cite", {
    reserved: false
  }], ["code", {
    reserved: false
  }], ["col", {
    reserved: true
  }], ["colgroup", {
    reserved: true
  }], ["content", {
    reserved: false
  }], ["data", {
    reserved: false
  }], ["datalist", {
    reserved: false
  }], ["dd", {
    reserved: false
  }], ["del", {
    reserved: false
  }], ["details", {
    reserved: false
  }], ["dfn", {
    reserved: false
  }], ["dialog", {
    reserved: false
  }], ["dir", {
    reserved: false
  }], ["div", {
    reserved: false
  }], ["dl", {
    reserved: false
  }], ["dt", {
    reserved: false
  }], ["em", {
    reserved: false
  }], ["embed", {
    reserved: false
  }], ["fieldset", {
    reserved: false
  }], ["figcaption", {
    reserved: false
  }], ["figure", {
    reserved: false
  }], ["font", {
    reserved: false
  }], ["footer", {
    reserved: false
  }], ["form", {
    reserved: false
  }], ["frame", {
    reserved: false
  }], ["frameset", {
    reserved: false
  }], ["h1", {
    reserved: false
  }], ["h2", {
    reserved: false
  }], ["h3", {
    reserved: false
  }], ["h4", {
    reserved: false
  }], ["h5", {
    reserved: false
  }], ["h6", {
    reserved: false
  }], ["head", {
    reserved: true
  }], ["header", {
    reserved: false
  }], ["hgroup", {
    reserved: false
  }], ["hr", {
    reserved: false
  }], ["html", {
    reserved: true
  }], ["i", {
    reserved: false
  }], ["iframe", {
    reserved: false
  }], ["img", {
    reserved: false
  }], ["input", {
    reserved: false
  }], ["ins", {
    reserved: false
  }], ["kbd", {
    reserved: false
  }], ["keygen", {
    reserved: false
  }], ["label", {
    reserved: false
  }], ["legend", {
    reserved: false
  }], ["li", {
    reserved: false
  }], ["link", {
    reserved: true
  }], ["main", {
    reserved: false
  }], ["map", {
    reserved: false
  }], ["mark", {
    reserved: false
  }], ["marquee", {
    reserved: false
  }], ["menu", {
    reserved: false
  }], ["menuitem", {
    reserved: false
  }], ["meta", {
    reserved: true
  }], ["meter", {
    reserved: false
  }], ["nav", {
    reserved: false
  }], ["noembed", {
    reserved: true
  }], ["noscript", {
    reserved: true
  }], ["object", {
    reserved: false
  }], ["ol", {
    reserved: false
  }], ["optgroup", {
    reserved: false
  }], ["option", {
    reserved: false
  }], ["output", {
    reserved: false
  }], ["p", {
    reserved: false
  }], ["param", {
    reserved: true
  }], ["picture", {
    reserved: true
  }], ["pre", {
    reserved: false
  }], ["progress", {
    reserved: false
  }], ["q", {
    reserved: false
  }], ["rp", {
    reserved: false
  }], ["rt", {
    reserved: false
  }], ["rtc", {
    reserved: false
  }], ["ruby", {
    reserved: false
  }], ["s", {
    reserved: false
  }], ["samp", {
    reserved: false
  }], ["script", {
    reserved: true
  }], ["section", {
    reserved: false
  }], ["select", {
    reserved: false
  }], ["small", {
    reserved: false
  }], ["source", {
    reserved: true
  }], ["spacer", {
    reserved: false
  }], ["span", {
    reserved: false
  }], ["strike", {
    reserved: false
  }], ["strong", {
    reserved: false
  }], ["style", {
    reserved: true
  }], ["sub", {
    reserved: false
  }], ["summary", {
    reserved: false
  }], ["sup", {
    reserved: false
  }], ["table", {
    reserved: false
  }], ["tbody", {
    reserved: false
  }], ["td", {
    reserved: false
  }], ["textarea", {
    reserved: false
  }], ["tfoot", {
    reserved: false
  }], ["th", {
    reserved: false
  }], ["thead", {
    reserved: false
  }], ["time", {
    reserved: false
  }], ["title", {
    reserved: true
  }], ["tr", {
    reserved: false
  }], ["track", {
    reserved: true
  }], ["tt", {
    reserved: false
  }], ["u", {
    reserved: false
  }], ["ul", {
    reserved: false
  }], ["var", {
    reserved: false
  }], ["video", {
    reserved: false
  }], ["wbr", {
    reserved: false
  }], ["xmp", {
    reserved: false
  }]];
  var domMap2 = {
    entries: function entries() {
      return dom;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(dom), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, key, dom);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key) {
      var item = dom.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!domMap2.get(key);
    },
    keys: function keys() {
      return dom.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
        return key;
      });
    },
    values: function values() {
      return dom.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(domMap2, domMap2.entries());
  domMap$1.default = _default;
  return domMap$1;
}
var rolesMap$1 = {};
var ariaAbstractRoles$1 = {};
var commandRole$1 = {};
var hasRequiredCommandRole$1;
function requireCommandRole$1() {
  if (hasRequiredCommandRole$1) return commandRole$1;
  hasRequiredCommandRole$1 = 1;
  Object.defineProperty(commandRole$1, "__esModule", {
    value: true
  });
  commandRole$1.default = void 0;
  var commandRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menuitem"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget"]]
  };
  var _default = commandRole2;
  commandRole$1.default = _default;
  return commandRole$1;
}
var compositeRole$1 = {};
var hasRequiredCompositeRole$1;
function requireCompositeRole$1() {
  if (hasRequiredCompositeRole$1) return compositeRole$1;
  hasRequiredCompositeRole$1 = 1;
  Object.defineProperty(compositeRole$1, "__esModule", {
    value: true
  });
  compositeRole$1.default = void 0;
  var compositeRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-disabled": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget"]]
  };
  var _default = compositeRole2;
  compositeRole$1.default = _default;
  return compositeRole$1;
}
var inputRole$1 = {};
var hasRequiredInputRole$1;
function requireInputRole$1() {
  if (hasRequiredInputRole$1) return inputRole$1;
  hasRequiredInputRole$1 = 1;
  Object.defineProperty(inputRole$1, "__esModule", {
    value: true
  });
  inputRole$1.default = void 0;
  var inputRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null
    },
    relatedConcepts: [{
      concept: {
        name: "input"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget"]]
  };
  var _default = inputRole2;
  inputRole$1.default = _default;
  return inputRole$1;
}
var landmarkRole$1 = {};
var hasRequiredLandmarkRole$1;
function requireLandmarkRole$1() {
  if (hasRequiredLandmarkRole$1) return landmarkRole$1;
  hasRequiredLandmarkRole$1 = 1;
  Object.defineProperty(landmarkRole$1, "__esModule", {
    value: true
  });
  landmarkRole$1.default = void 0;
  var landmarkRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = landmarkRole2;
  landmarkRole$1.default = _default;
  return landmarkRole$1;
}
var rangeRole$1 = {};
var hasRequiredRangeRole$1;
function requireRangeRole$1() {
  if (hasRequiredRangeRole$1) return rangeRole$1;
  hasRequiredRangeRole$1 = 1;
  Object.defineProperty(rangeRole$1, "__esModule", {
    value: true
  });
  rangeRole$1.default = void 0;
  var rangeRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-valuemax": null,
      "aria-valuemin": null,
      "aria-valuenow": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = rangeRole2;
  rangeRole$1.default = _default;
  return rangeRole$1;
}
var roletypeRole$1 = {};
var hasRequiredRoletypeRole$1;
function requireRoletypeRole$1() {
  if (hasRequiredRoletypeRole$1) return roletypeRole$1;
  hasRequiredRoletypeRole$1 = 1;
  Object.defineProperty(roletypeRole$1, "__esModule", {
    value: true
  });
  roletypeRole$1.default = void 0;
  var roletypeRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {
      "aria-atomic": null,
      "aria-busy": null,
      "aria-controls": null,
      "aria-current": null,
      "aria-describedby": null,
      "aria-details": null,
      "aria-dropeffect": null,
      "aria-flowto": null,
      "aria-grabbed": null,
      "aria-hidden": null,
      "aria-keyshortcuts": null,
      "aria-label": null,
      "aria-labelledby": null,
      "aria-live": null,
      "aria-owns": null,
      "aria-relevant": null,
      "aria-roledescription": null
    },
    relatedConcepts: [{
      concept: {
        name: "rel"
      },
      module: "HTML"
    }, {
      concept: {
        name: "role"
      },
      module: "XHTML"
    }, {
      concept: {
        name: "type"
      },
      module: "Dublin Core"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: []
  };
  var _default = roletypeRole2;
  roletypeRole$1.default = _default;
  return roletypeRole$1;
}
var sectionRole$1 = {};
var hasRequiredSectionRole$1;
function requireSectionRole$1() {
  if (hasRequiredSectionRole$1) return sectionRole$1;
  hasRequiredSectionRole$1 = 1;
  Object.defineProperty(sectionRole$1, "__esModule", {
    value: true
  });
  sectionRole$1.default = void 0;
  var sectionRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "frontmatter"
      },
      module: "DTB"
    }, {
      concept: {
        name: "level"
      },
      module: "DTB"
    }, {
      concept: {
        name: "level"
      },
      module: "SMIL"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = sectionRole2;
  sectionRole$1.default = _default;
  return sectionRole$1;
}
var sectionheadRole$1 = {};
var hasRequiredSectionheadRole$1;
function requireSectionheadRole$1() {
  if (hasRequiredSectionheadRole$1) return sectionheadRole$1;
  hasRequiredSectionheadRole$1 = 1;
  Object.defineProperty(sectionheadRole$1, "__esModule", {
    value: true
  });
  sectionheadRole$1.default = void 0;
  var sectionheadRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = sectionheadRole2;
  sectionheadRole$1.default = _default;
  return sectionheadRole$1;
}
var selectRole$1 = {};
var hasRequiredSelectRole$1;
function requireSelectRole$1() {
  if (hasRequiredSelectRole$1) return selectRole$1;
  hasRequiredSelectRole$1 = 1;
  Object.defineProperty(selectRole$1, "__esModule", {
    value: true
  });
  selectRole$1.default = void 0;
  var selectRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]]
  };
  var _default = selectRole2;
  selectRole$1.default = _default;
  return selectRole$1;
}
var structureRole$1 = {};
var hasRequiredStructureRole$1;
function requireStructureRole$1() {
  if (hasRequiredStructureRole$1) return structureRole$1;
  hasRequiredStructureRole$1 = 1;
  Object.defineProperty(structureRole$1, "__esModule", {
    value: true
  });
  structureRole$1.default = void 0;
  var structureRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype"]]
  };
  var _default = structureRole2;
  structureRole$1.default = _default;
  return structureRole$1;
}
var widgetRole$1 = {};
var hasRequiredWidgetRole$1;
function requireWidgetRole$1() {
  if (hasRequiredWidgetRole$1) return widgetRole$1;
  hasRequiredWidgetRole$1 = 1;
  Object.defineProperty(widgetRole$1, "__esModule", {
    value: true
  });
  widgetRole$1.default = void 0;
  var widgetRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype"]]
  };
  var _default = widgetRole2;
  widgetRole$1.default = _default;
  return widgetRole$1;
}
var windowRole$1 = {};
var hasRequiredWindowRole$1;
function requireWindowRole$1() {
  if (hasRequiredWindowRole$1) return windowRole$1;
  hasRequiredWindowRole$1 = 1;
  Object.defineProperty(windowRole$1, "__esModule", {
    value: true
  });
  windowRole$1.default = void 0;
  var windowRole2 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-modal": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype"]]
  };
  var _default = windowRole2;
  windowRole$1.default = _default;
  return windowRole$1;
}
var hasRequiredAriaAbstractRoles$1;
function requireAriaAbstractRoles$1() {
  if (hasRequiredAriaAbstractRoles$1) return ariaAbstractRoles$1;
  hasRequiredAriaAbstractRoles$1 = 1;
  Object.defineProperty(ariaAbstractRoles$1, "__esModule", {
    value: true
  });
  ariaAbstractRoles$1.default = void 0;
  var _commandRole = _interopRequireDefault(requireCommandRole$1());
  var _compositeRole = _interopRequireDefault(requireCompositeRole$1());
  var _inputRole = _interopRequireDefault(requireInputRole$1());
  var _landmarkRole = _interopRequireDefault(requireLandmarkRole$1());
  var _rangeRole = _interopRequireDefault(requireRangeRole$1());
  var _roletypeRole = _interopRequireDefault(requireRoletypeRole$1());
  var _sectionRole = _interopRequireDefault(requireSectionRole$1());
  var _sectionheadRole = _interopRequireDefault(requireSectionheadRole$1());
  var _selectRole = _interopRequireDefault(requireSelectRole$1());
  var _structureRole = _interopRequireDefault(requireStructureRole$1());
  var _widgetRole = _interopRequireDefault(requireWidgetRole$1());
  var _windowRole = _interopRequireDefault(requireWindowRole$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaAbstractRoles2 = [["command", _commandRole.default], ["composite", _compositeRole.default], ["input", _inputRole.default], ["landmark", _landmarkRole.default], ["range", _rangeRole.default], ["roletype", _roletypeRole.default], ["section", _sectionRole.default], ["sectionhead", _sectionheadRole.default], ["select", _selectRole.default], ["structure", _structureRole.default], ["widget", _widgetRole.default], ["window", _windowRole.default]];
  var _default = ariaAbstractRoles2;
  ariaAbstractRoles$1.default = _default;
  return ariaAbstractRoles$1;
}
var ariaLiteralRoles$1 = {};
var alertRole$1 = {};
var hasRequiredAlertRole$1;
function requireAlertRole$1() {
  if (hasRequiredAlertRole$1) return alertRole$1;
  hasRequiredAlertRole$1 = 1;
  Object.defineProperty(alertRole$1, "__esModule", {
    value: true
  });
  alertRole$1.default = void 0;
  var alertRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-atomic": "true",
      "aria-live": "assertive"
    },
    relatedConcepts: [{
      concept: {
        name: "alert"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = alertRole2;
  alertRole$1.default = _default;
  return alertRole$1;
}
var alertdialogRole$1 = {};
var hasRequiredAlertdialogRole$1;
function requireAlertdialogRole$1() {
  if (hasRequiredAlertdialogRole$1) return alertdialogRole$1;
  hasRequiredAlertdialogRole$1 = 1;
  Object.defineProperty(alertdialogRole$1, "__esModule", {
    value: true
  });
  alertdialogRole$1.default = void 0;
  var alertdialogRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "alert"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]]
  };
  var _default = alertdialogRole2;
  alertdialogRole$1.default = _default;
  return alertdialogRole$1;
}
var applicationRole$1 = {};
var hasRequiredApplicationRole$1;
function requireApplicationRole$1() {
  if (hasRequiredApplicationRole$1) return applicationRole$1;
  hasRequiredApplicationRole$1 = 1;
  Object.defineProperty(applicationRole$1, "__esModule", {
    value: true
  });
  applicationRole$1.default = void 0;
  var applicationRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "Device Independence Delivery Unit"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = applicationRole2;
  applicationRole$1.default = _default;
  return applicationRole$1;
}
var articleRole$1 = {};
var hasRequiredArticleRole$1;
function requireArticleRole$1() {
  if (hasRequiredArticleRole$1) return articleRole$1;
  hasRequiredArticleRole$1 = 1;
  Object.defineProperty(articleRole$1, "__esModule", {
    value: true
  });
  articleRole$1.default = void 0;
  var articleRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        name: "article"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "document"]]
  };
  var _default = articleRole2;
  articleRole$1.default = _default;
  return articleRole$1;
}
var bannerRole$1 = {};
var hasRequiredBannerRole$1;
function requireBannerRole$1() {
  if (hasRequiredBannerRole$1) return bannerRole$1;
  hasRequiredBannerRole$1 = 1;
  Object.defineProperty(bannerRole$1, "__esModule", {
    value: true
  });
  bannerRole$1.default = void 0;
  var bannerRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        constraints: ["direct descendant of document"],
        name: "header"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = bannerRole2;
  bannerRole$1.default = _default;
  return bannerRole$1;
}
var blockquoteRole$1 = {};
var hasRequiredBlockquoteRole$1;
function requireBlockquoteRole$1() {
  if (hasRequiredBlockquoteRole$1) return blockquoteRole$1;
  hasRequiredBlockquoteRole$1 = 1;
  Object.defineProperty(blockquoteRole$1, "__esModule", {
    value: true
  });
  blockquoteRole$1.default = void 0;
  var blockquoteRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = blockquoteRole2;
  blockquoteRole$1.default = _default;
  return blockquoteRole$1;
}
var buttonRole$1 = {};
var hasRequiredButtonRole$1;
function requireButtonRole$1() {
  if (hasRequiredButtonRole$1) return buttonRole$1;
  hasRequiredButtonRole$1 = 1;
  Object.defineProperty(buttonRole$1, "__esModule", {
    value: true
  });
  buttonRole$1.default = void 0;
  var buttonRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-pressed": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-pressed"
        }, {
          name: "type",
          value: "checkbox"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "aria-expanded",
          value: "false"
        }],
        name: "summary"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "aria-expanded",
          value: "true"
        }],
        constraints: ["direct descendant of details element with the open attribute defined"],
        name: "summary"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "button"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "image"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "reset"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "submit"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        name: "button"
      },
      module: "HTML"
    }, {
      concept: {
        name: "trigger"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command"]]
  };
  var _default = buttonRole2;
  buttonRole$1.default = _default;
  return buttonRole$1;
}
var captionRole$1 = {};
var hasRequiredCaptionRole$1;
function requireCaptionRole$1() {
  if (hasRequiredCaptionRole$1) return captionRole$1;
  hasRequiredCaptionRole$1 = 1;
  Object.defineProperty(captionRole$1, "__esModule", {
    value: true
  });
  captionRole$1.default = void 0;
  var captionRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: ["figure", "grid", "table"],
    requiredContextRole: ["figure", "grid", "table"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = captionRole2;
  captionRole$1.default = _default;
  return captionRole$1;
}
var cellRole$1 = {};
var hasRequiredCellRole$1;
function requireCellRole$1() {
  if (hasRequiredCellRole$1) return cellRole$1;
  hasRequiredCellRole$1 = 1;
  Object.defineProperty(cellRole$1, "__esModule", {
    value: true
  });
  cellRole$1.default = void 0;
  var cellRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-colindex": null,
      "aria-colspan": null,
      "aria-rowindex": null,
      "aria-rowspan": null
    },
    relatedConcepts: [{
      concept: {
        constraints: ["descendant of table"],
        name: "td"
      },
      module: "HTML"
    }],
    requireContextRole: ["row"],
    requiredContextRole: ["row"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = cellRole2;
  cellRole$1.default = _default;
  return cellRole$1;
}
var checkboxRole$1 = {};
var hasRequiredCheckboxRole$1;
function requireCheckboxRole$1() {
  if (hasRequiredCheckboxRole$1) return checkboxRole$1;
  hasRequiredCheckboxRole$1 = 1;
  Object.defineProperty(checkboxRole$1, "__esModule", {
    value: true
  });
  checkboxRole$1.default = void 0;
  var checkboxRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-checked": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "checkbox"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        name: "option"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = checkboxRole2;
  checkboxRole$1.default = _default;
  return checkboxRole$1;
}
var codeRole$1 = {};
var hasRequiredCodeRole$1;
function requireCodeRole$1() {
  if (hasRequiredCodeRole$1) return codeRole$1;
  hasRequiredCodeRole$1 = 1;
  Object.defineProperty(codeRole$1, "__esModule", {
    value: true
  });
  codeRole$1.default = void 0;
  var codeRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = codeRole2;
  codeRole$1.default = _default;
  return codeRole$1;
}
var columnheaderRole$1 = {};
var hasRequiredColumnheaderRole$1;
function requireColumnheaderRole$1() {
  if (hasRequiredColumnheaderRole$1) return columnheaderRole$1;
  hasRequiredColumnheaderRole$1 = 1;
  Object.defineProperty(columnheaderRole$1, "__esModule", {
    value: true
  });
  columnheaderRole$1.default = void 0;
  var columnheaderRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-sort": null
    },
    relatedConcepts: [{
      attributes: [{
        name: "scope",
        value: "col"
      }],
      concept: {
        name: "th"
      },
      module: "HTML"
    }],
    requireContextRole: ["row"],
    requiredContextRole: ["row"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
  };
  var _default = columnheaderRole2;
  columnheaderRole$1.default = _default;
  return columnheaderRole$1;
}
var comboboxRole$1 = {};
var hasRequiredComboboxRole$1;
function requireComboboxRole$1() {
  if (hasRequiredComboboxRole$1) return comboboxRole$1;
  hasRequiredComboboxRole$1 = 1;
  Object.defineProperty(comboboxRole$1, "__esModule", {
    value: true
  });
  comboboxRole$1.default = void 0;
  var comboboxRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-autocomplete": null,
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-expanded": "false",
      "aria-haspopup": "listbox"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "email"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "search"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "tel"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "text"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "url"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "url"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "multiple"
        }, {
          constraints: ["undefined"],
          name: "size"
        }],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "multiple"
        }, {
          name: "size",
          value: 1
        }],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        name: "select"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-controls": null,
      "aria-expanded": "false"
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = comboboxRole2;
  comboboxRole$1.default = _default;
  return comboboxRole$1;
}
var complementaryRole$1 = {};
var hasRequiredComplementaryRole$1;
function requireComplementaryRole$1() {
  if (hasRequiredComplementaryRole$1) return complementaryRole$1;
  hasRequiredComplementaryRole$1 = 1;
  Object.defineProperty(complementaryRole$1, "__esModule", {
    value: true
  });
  complementaryRole$1.default = void 0;
  var complementaryRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "aside"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = complementaryRole2;
  complementaryRole$1.default = _default;
  return complementaryRole$1;
}
var contentinfoRole$1 = {};
var hasRequiredContentinfoRole$1;
function requireContentinfoRole$1() {
  if (hasRequiredContentinfoRole$1) return contentinfoRole$1;
  hasRequiredContentinfoRole$1 = 1;
  Object.defineProperty(contentinfoRole$1, "__esModule", {
    value: true
  });
  contentinfoRole$1.default = void 0;
  var contentinfoRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        constraints: ["direct descendant of document"],
        name: "footer"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = contentinfoRole2;
  contentinfoRole$1.default = _default;
  return contentinfoRole$1;
}
var definitionRole$1 = {};
var hasRequiredDefinitionRole$1;
function requireDefinitionRole$1() {
  if (hasRequiredDefinitionRole$1) return definitionRole$1;
  hasRequiredDefinitionRole$1 = 1;
  Object.defineProperty(definitionRole$1, "__esModule", {
    value: true
  });
  definitionRole$1.default = void 0;
  var definitionRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "dd"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = definitionRole2;
  definitionRole$1.default = _default;
  return definitionRole$1;
}
var deletionRole$1 = {};
var hasRequiredDeletionRole$1;
function requireDeletionRole$1() {
  if (hasRequiredDeletionRole$1) return deletionRole$1;
  hasRequiredDeletionRole$1 = 1;
  Object.defineProperty(deletionRole$1, "__esModule", {
    value: true
  });
  deletionRole$1.default = void 0;
  var deletionRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = deletionRole2;
  deletionRole$1.default = _default;
  return deletionRole$1;
}
var dialogRole$1 = {};
var hasRequiredDialogRole$1;
function requireDialogRole$1() {
  if (hasRequiredDialogRole$1) return dialogRole$1;
  hasRequiredDialogRole$1 = 1;
  Object.defineProperty(dialogRole$1, "__esModule", {
    value: true
  });
  dialogRole$1.default = void 0;
  var dialogRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "dialog"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "window"]]
  };
  var _default = dialogRole2;
  dialogRole$1.default = _default;
  return dialogRole$1;
}
var directoryRole$1 = {};
var hasRequiredDirectoryRole$1;
function requireDirectoryRole$1() {
  if (hasRequiredDirectoryRole$1) return directoryRole$1;
  hasRequiredDirectoryRole$1 = 1;
  Object.defineProperty(directoryRole$1, "__esModule", {
    value: true
  });
  directoryRole$1.default = void 0;
  var directoryRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      module: "DAISY Guide"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "list"]]
  };
  var _default = directoryRole2;
  directoryRole$1.default = _default;
  return directoryRole$1;
}
var documentRole$1 = {};
var hasRequiredDocumentRole$1;
function requireDocumentRole$1() {
  if (hasRequiredDocumentRole$1) return documentRole$1;
  hasRequiredDocumentRole$1 = 1;
  Object.defineProperty(documentRole$1, "__esModule", {
    value: true
  });
  documentRole$1.default = void 0;
  var documentRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "Device Independence Delivery Unit"
      }
    }, {
      concept: {
        name: "body"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = documentRole2;
  documentRole$1.default = _default;
  return documentRole$1;
}
var emphasisRole$1 = {};
var hasRequiredEmphasisRole$1;
function requireEmphasisRole$1() {
  if (hasRequiredEmphasisRole$1) return emphasisRole$1;
  hasRequiredEmphasisRole$1 = 1;
  Object.defineProperty(emphasisRole$1, "__esModule", {
    value: true
  });
  emphasisRole$1.default = void 0;
  var emphasisRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = emphasisRole2;
  emphasisRole$1.default = _default;
  return emphasisRole$1;
}
var feedRole$1 = {};
var hasRequiredFeedRole$1;
function requireFeedRole$1() {
  if (hasRequiredFeedRole$1) return feedRole$1;
  hasRequiredFeedRole$1 = 1;
  Object.defineProperty(feedRole$1, "__esModule", {
    value: true
  });
  feedRole$1.default = void 0;
  var feedRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["article"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "list"]]
  };
  var _default = feedRole2;
  feedRole$1.default = _default;
  return feedRole$1;
}
var figureRole$1 = {};
var hasRequiredFigureRole$1;
function requireFigureRole$1() {
  if (hasRequiredFigureRole$1) return figureRole$1;
  hasRequiredFigureRole$1 = 1;
  Object.defineProperty(figureRole$1, "__esModule", {
    value: true
  });
  figureRole$1.default = void 0;
  var figureRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "figure"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = figureRole2;
  figureRole$1.default = _default;
  return figureRole$1;
}
var formRole$1 = {};
var hasRequiredFormRole$1;
function requireFormRole$1() {
  if (hasRequiredFormRole$1) return formRole$1;
  hasRequiredFormRole$1 = 1;
  Object.defineProperty(formRole$1, "__esModule", {
    value: true
  });
  formRole$1.default = void 0;
  var formRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-label"
        }],
        name: "form"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-labelledby"
        }],
        name: "form"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "name"
        }],
        name: "form"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = formRole2;
  formRole$1.default = _default;
  return formRole$1;
}
var genericRole$1 = {};
var hasRequiredGenericRole$1;
function requireGenericRole$1() {
  if (hasRequiredGenericRole$1) return genericRole$1;
  hasRequiredGenericRole$1 = 1;
  Object.defineProperty(genericRole$1, "__esModule", {
    value: true
  });
  genericRole$1.default = void 0;
  var genericRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "span"
      },
      module: "HTML"
    }, {
      concept: {
        name: "div"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = genericRole2;
  genericRole$1.default = _default;
  return genericRole$1;
}
var gridRole$1 = {};
var hasRequiredGridRole$1;
function requireGridRole$1() {
  if (hasRequiredGridRole$1) return gridRole$1;
  hasRequiredGridRole$1 = 1;
  Object.defineProperty(gridRole$1, "__esModule", {
    value: true
  });
  gridRole$1.default = void 0;
  var gridRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-multiselectable": null,
      "aria-readonly": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "role",
          value: "grid"
        }],
        name: "table"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["row"], ["row", "rowgroup"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]]
  };
  var _default = gridRole2;
  gridRole$1.default = _default;
  return gridRole$1;
}
var gridcellRole$1 = {};
var hasRequiredGridcellRole$1;
function requireGridcellRole$1() {
  if (hasRequiredGridcellRole$1) return gridcellRole$1;
  hasRequiredGridcellRole$1 = 1;
  Object.defineProperty(gridcellRole$1, "__esModule", {
    value: true
  });
  gridcellRole$1.default = void 0;
  var gridcellRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-selected": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "role",
          value: "gridcell"
        }],
        name: "td"
      },
      module: "HTML"
    }],
    requireContextRole: ["row"],
    requiredContextRole: ["row"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]]
  };
  var _default = gridcellRole2;
  gridcellRole$1.default = _default;
  return gridcellRole$1;
}
var groupRole$1 = {};
var hasRequiredGroupRole$1;
function requireGroupRole$1() {
  if (hasRequiredGroupRole$1) return groupRole$1;
  hasRequiredGroupRole$1 = 1;
  Object.defineProperty(groupRole$1, "__esModule", {
    value: true
  });
  groupRole$1.default = void 0;
  var groupRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-disabled": null
    },
    relatedConcepts: [{
      concept: {
        name: "details"
      },
      module: "HTML"
    }, {
      concept: {
        name: "fieldset"
      },
      module: "HTML"
    }, {
      concept: {
        name: "optgroup"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = groupRole2;
  groupRole$1.default = _default;
  return groupRole$1;
}
var headingRole$1 = {};
var hasRequiredHeadingRole$1;
function requireHeadingRole$1() {
  if (hasRequiredHeadingRole$1) return headingRole$1;
  hasRequiredHeadingRole$1 = 1;
  Object.defineProperty(headingRole$1, "__esModule", {
    value: true
  });
  headingRole$1.default = void 0;
  var headingRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-level": "2"
    },
    relatedConcepts: [{
      concept: {
        name: "h1"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h2"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h3"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h4"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h5"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h6"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-level": "2"
    },
    superClass: [["roletype", "structure", "sectionhead"]]
  };
  var _default = headingRole2;
  headingRole$1.default = _default;
  return headingRole$1;
}
var imgRole$1 = {};
var hasRequiredImgRole$1;
function requireImgRole$1() {
  if (hasRequiredImgRole$1) return imgRole$1;
  hasRequiredImgRole$1 = 1;
  Object.defineProperty(imgRole$1, "__esModule", {
    value: true
  });
  imgRole$1.default = void 0;
  var imgRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "alt"
        }],
        name: "img"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "alt"
        }],
        name: "img"
      },
      module: "HTML"
    }, {
      concept: {
        name: "imggroup"
      },
      module: "DTB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = imgRole2;
  imgRole$1.default = _default;
  return imgRole$1;
}
var insertionRole$1 = {};
var hasRequiredInsertionRole$1;
function requireInsertionRole$1() {
  if (hasRequiredInsertionRole$1) return insertionRole$1;
  hasRequiredInsertionRole$1 = 1;
  Object.defineProperty(insertionRole$1, "__esModule", {
    value: true
  });
  insertionRole$1.default = void 0;
  var insertionRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = insertionRole2;
  insertionRole$1.default = _default;
  return insertionRole$1;
}
var linkRole$1 = {};
var hasRequiredLinkRole$1;
function requireLinkRole$1() {
  if (hasRequiredLinkRole$1) return linkRole$1;
  hasRequiredLinkRole$1 = 1;
  Object.defineProperty(linkRole$1, "__esModule", {
    value: true
  });
  linkRole$1.default = void 0;
  var linkRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "href"
        }],
        name: "a"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "href"
        }],
        name: "area"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "href"
        }],
        name: "link"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command"]]
  };
  var _default = linkRole2;
  linkRole$1.default = _default;
  return linkRole$1;
}
var listRole$1 = {};
var hasRequiredListRole$1;
function requireListRole$1() {
  if (hasRequiredListRole$1) return listRole$1;
  hasRequiredListRole$1 = 1;
  Object.defineProperty(listRole$1, "__esModule", {
    value: true
  });
  listRole$1.default = void 0;
  var listRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menu"
      },
      module: "HTML"
    }, {
      concept: {
        name: "ol"
      },
      module: "HTML"
    }, {
      concept: {
        name: "ul"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["listitem"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = listRole2;
  listRole$1.default = _default;
  return listRole$1;
}
var listboxRole$1 = {};
var hasRequiredListboxRole$1;
function requireListboxRole$1() {
  if (hasRequiredListboxRole$1) return listboxRole$1;
  hasRequiredListboxRole$1 = 1;
  Object.defineProperty(listboxRole$1, "__esModule", {
    value: true
  });
  listboxRole$1.default = void 0;
  var listboxRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-invalid": null,
      "aria-multiselectable": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-orientation": "vertical"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: [">1"],
          name: "size"
        }, {
          name: "multiple"
        }],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: [">1"],
          name: "size"
        }],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "multiple"
        }],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        name: "datalist"
      },
      module: "HTML"
    }, {
      concept: {
        name: "list"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "select"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["option", "group"], ["option"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = listboxRole2;
  listboxRole$1.default = _default;
  return listboxRole$1;
}
var listitemRole$1 = {};
var hasRequiredListitemRole$1;
function requireListitemRole$1() {
  if (hasRequiredListitemRole$1) return listitemRole$1;
  hasRequiredListitemRole$1 = 1;
  Object.defineProperty(listitemRole$1, "__esModule", {
    value: true
  });
  listitemRole$1.default = void 0;
  var listitemRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-level": null,
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        constraints: ["direct descendant of ol, ul or menu"],
        name: "li"
      },
      module: "HTML"
    }, {
      concept: {
        name: "item"
      },
      module: "XForms"
    }],
    requireContextRole: ["directory", "list"],
    requiredContextRole: ["directory", "list"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = listitemRole2;
  listitemRole$1.default = _default;
  return listitemRole$1;
}
var logRole$1 = {};
var hasRequiredLogRole$1;
function requireLogRole$1() {
  if (hasRequiredLogRole$1) return logRole$1;
  hasRequiredLogRole$1 = 1;
  Object.defineProperty(logRole$1, "__esModule", {
    value: true
  });
  logRole$1.default = void 0;
  var logRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-live": "polite"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = logRole2;
  logRole$1.default = _default;
  return logRole$1;
}
var mainRole$1 = {};
var hasRequiredMainRole$1;
function requireMainRole$1() {
  if (hasRequiredMainRole$1) return mainRole$1;
  hasRequiredMainRole$1 = 1;
  Object.defineProperty(mainRole$1, "__esModule", {
    value: true
  });
  mainRole$1.default = void 0;
  var mainRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "main"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = mainRole2;
  mainRole$1.default = _default;
  return mainRole$1;
}
var marqueeRole$1 = {};
var hasRequiredMarqueeRole$1;
function requireMarqueeRole$1() {
  if (hasRequiredMarqueeRole$1) return marqueeRole$1;
  hasRequiredMarqueeRole$1 = 1;
  Object.defineProperty(marqueeRole$1, "__esModule", {
    value: true
  });
  marqueeRole$1.default = void 0;
  var marqueeRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = marqueeRole2;
  marqueeRole$1.default = _default;
  return marqueeRole$1;
}
var mathRole$1 = {};
var hasRequiredMathRole$1;
function requireMathRole$1() {
  if (hasRequiredMathRole$1) return mathRole$1;
  hasRequiredMathRole$1 = 1;
  Object.defineProperty(mathRole$1, "__esModule", {
    value: true
  });
  mathRole$1.default = void 0;
  var mathRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "math"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = mathRole2;
  mathRole$1.default = _default;
  return mathRole$1;
}
var menuRole$1 = {};
var hasRequiredMenuRole$1;
function requireMenuRole$1() {
  if (hasRequiredMenuRole$1) return menuRole$1;
  hasRequiredMenuRole$1 = 1;
  Object.defineProperty(menuRole$1, "__esModule", {
    value: true
  });
  menuRole$1.default = void 0;
  var menuRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": "vertical"
    },
    relatedConcepts: [{
      concept: {
        name: "MENU"
      },
      module: "JAPI"
    }, {
      concept: {
        name: "list"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "select"
      },
      module: "XForms"
    }, {
      concept: {
        name: "sidebar"
      },
      module: "DTB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = menuRole2;
  menuRole$1.default = _default;
  return menuRole$1;
}
var menubarRole$1 = {};
var hasRequiredMenubarRole$1;
function requireMenubarRole$1() {
  if (hasRequiredMenubarRole$1) return menubarRole$1;
  hasRequiredMenubarRole$1 = 1;
  Object.defineProperty(menubarRole$1, "__esModule", {
    value: true
  });
  menubarRole$1.default = void 0;
  var menubarRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": "horizontal"
    },
    relatedConcepts: [{
      concept: {
        name: "toolbar"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]]
  };
  var _default = menubarRole2;
  menubarRole$1.default = _default;
  return menubarRole$1;
}
var menuitemRole$1 = {};
var hasRequiredMenuitemRole$1;
function requireMenuitemRole$1() {
  if (hasRequiredMenuitemRole$1) return menuitemRole$1;
  hasRequiredMenuitemRole$1 = 1;
  Object.defineProperty(menuitemRole$1, "__esModule", {
    value: true
  });
  menuitemRole$1.default = void 0;
  var menuitemRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        name: "MENU_ITEM"
      },
      module: "JAPI"
    }, {
      concept: {
        name: "listitem"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "menuitem"
      },
      module: "HTML"
    }, {
      concept: {
        name: "option"
      },
      module: "ARIA"
    }],
    requireContextRole: ["group", "menu", "menubar"],
    requiredContextRole: ["group", "menu", "menubar"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command"]]
  };
  var _default = menuitemRole2;
  menuitemRole$1.default = _default;
  return menuitemRole$1;
}
var menuitemcheckboxRole$1 = {};
var hasRequiredMenuitemcheckboxRole$1;
function requireMenuitemcheckboxRole$1() {
  if (hasRequiredMenuitemcheckboxRole$1) return menuitemcheckboxRole$1;
  hasRequiredMenuitemcheckboxRole$1 = 1;
  Object.defineProperty(menuitemcheckboxRole$1, "__esModule", {
    value: true
  });
  menuitemcheckboxRole$1.default = void 0;
  var menuitemcheckboxRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menuitem"
      },
      module: "ARIA"
    }],
    requireContextRole: ["group", "menu", "menubar"],
    requiredContextRole: ["group", "menu", "menubar"],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]]
  };
  var _default = menuitemcheckboxRole2;
  menuitemcheckboxRole$1.default = _default;
  return menuitemcheckboxRole$1;
}
var menuitemradioRole$1 = {};
var hasRequiredMenuitemradioRole$1;
function requireMenuitemradioRole$1() {
  if (hasRequiredMenuitemradioRole$1) return menuitemradioRole$1;
  hasRequiredMenuitemradioRole$1 = 1;
  Object.defineProperty(menuitemradioRole$1, "__esModule", {
    value: true
  });
  menuitemradioRole$1.default = void 0;
  var menuitemradioRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menuitem"
      },
      module: "ARIA"
    }],
    requireContextRole: ["group", "menu", "menubar"],
    requiredContextRole: ["group", "menu", "menubar"],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]]
  };
  var _default = menuitemradioRole2;
  menuitemradioRole$1.default = _default;
  return menuitemradioRole$1;
}
var meterRole$1 = {};
var hasRequiredMeterRole$1;
function requireMeterRole$1() {
  if (hasRequiredMeterRole$1) return meterRole$1;
  hasRequiredMeterRole$1 = 1;
  Object.defineProperty(meterRole$1, "__esModule", {
    value: true
  });
  meterRole$1.default = void 0;
  var meterRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-valuetext": null,
      "aria-valuemax": "100",
      "aria-valuemin": "0"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-valuenow": null
    },
    superClass: [["roletype", "structure", "range"]]
  };
  var _default = meterRole2;
  meterRole$1.default = _default;
  return meterRole$1;
}
var navigationRole$1 = {};
var hasRequiredNavigationRole$1;
function requireNavigationRole$1() {
  if (hasRequiredNavigationRole$1) return navigationRole$1;
  hasRequiredNavigationRole$1 = 1;
  Object.defineProperty(navigationRole$1, "__esModule", {
    value: true
  });
  navigationRole$1.default = void 0;
  var navigationRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "nav"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = navigationRole2;
  navigationRole$1.default = _default;
  return navigationRole$1;
}
var noneRole$1 = {};
var hasRequiredNoneRole$1;
function requireNoneRole$1() {
  if (hasRequiredNoneRole$1) return noneRole$1;
  hasRequiredNoneRole$1 = 1;
  Object.defineProperty(noneRole$1, "__esModule", {
    value: true
  });
  noneRole$1.default = void 0;
  var noneRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: []
  };
  var _default = noneRole2;
  noneRole$1.default = _default;
  return noneRole$1;
}
var noteRole$1 = {};
var hasRequiredNoteRole$1;
function requireNoteRole$1() {
  if (hasRequiredNoteRole$1) return noteRole$1;
  hasRequiredNoteRole$1 = 1;
  Object.defineProperty(noteRole$1, "__esModule", {
    value: true
  });
  noteRole$1.default = void 0;
  var noteRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = noteRole2;
  noteRole$1.default = _default;
  return noteRole$1;
}
var optionRole$1 = {};
var hasRequiredOptionRole$1;
function requireOptionRole$1() {
  if (hasRequiredOptionRole$1) return optionRole$1;
  hasRequiredOptionRole$1 = 1;
  Object.defineProperty(optionRole$1, "__esModule", {
    value: true
  });
  optionRole$1.default = void 0;
  var optionRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-checked": null,
      "aria-posinset": null,
      "aria-setsize": null,
      "aria-selected": "false"
    },
    relatedConcepts: [{
      concept: {
        name: "item"
      },
      module: "XForms"
    }, {
      concept: {
        name: "listitem"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "option"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-selected": "false"
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = optionRole2;
  optionRole$1.default = _default;
  return optionRole$1;
}
var paragraphRole$1 = {};
var hasRequiredParagraphRole$1;
function requireParagraphRole$1() {
  if (hasRequiredParagraphRole$1) return paragraphRole$1;
  hasRequiredParagraphRole$1 = 1;
  Object.defineProperty(paragraphRole$1, "__esModule", {
    value: true
  });
  paragraphRole$1.default = void 0;
  var paragraphRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = paragraphRole2;
  paragraphRole$1.default = _default;
  return paragraphRole$1;
}
var presentationRole$1 = {};
var hasRequiredPresentationRole$1;
function requirePresentationRole$1() {
  if (hasRequiredPresentationRole$1) return presentationRole$1;
  hasRequiredPresentationRole$1 = 1;
  Object.defineProperty(presentationRole$1, "__esModule", {
    value: true
  });
  presentationRole$1.default = void 0;
  var presentationRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = presentationRole2;
  presentationRole$1.default = _default;
  return presentationRole$1;
}
var progressbarRole$1 = {};
var hasRequiredProgressbarRole$1;
function requireProgressbarRole$1() {
  if (hasRequiredProgressbarRole$1) return progressbarRole$1;
  hasRequiredProgressbarRole$1 = 1;
  Object.defineProperty(progressbarRole$1, "__esModule", {
    value: true
  });
  progressbarRole$1.default = void 0;
  var progressbarRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-valuetext": null
    },
    relatedConcepts: [{
      concept: {
        name: "progress"
      },
      module: "HTML"
    }, {
      concept: {
        name: "status"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
  };
  var _default = progressbarRole2;
  progressbarRole$1.default = _default;
  return progressbarRole$1;
}
var radioRole$1 = {};
var hasRequiredRadioRole$1;
function requireRadioRole$1() {
  if (hasRequiredRadioRole$1) return radioRole$1;
  hasRequiredRadioRole$1 = 1;
  Object.defineProperty(radioRole$1, "__esModule", {
    value: true
  });
  radioRole$1.default = void 0;
  var radioRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-checked": null,
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "radio"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = radioRole2;
  radioRole$1.default = _default;
  return radioRole$1;
}
var radiogroupRole$1 = {};
var hasRequiredRadiogroupRole$1;
function requireRadiogroupRole$1() {
  if (hasRequiredRadiogroupRole$1) return radiogroupRole$1;
  hasRequiredRadiogroupRole$1 = 1;
  Object.defineProperty(radiogroupRole$1, "__esModule", {
    value: true
  });
  radiogroupRole$1.default = void 0;
  var radiogroupRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null
    },
    relatedConcepts: [{
      concept: {
        name: "list"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["radio"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = radiogroupRole2;
  radiogroupRole$1.default = _default;
  return radiogroupRole$1;
}
var regionRole$1 = {};
var hasRequiredRegionRole$1;
function requireRegionRole$1() {
  if (hasRequiredRegionRole$1) return regionRole$1;
  hasRequiredRegionRole$1 = 1;
  Object.defineProperty(regionRole$1, "__esModule", {
    value: true
  });
  regionRole$1.default = void 0;
  var regionRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-label"
        }],
        name: "section"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-labelledby"
        }],
        name: "section"
      },
      module: "HTML"
    }, {
      concept: {
        name: "Device Independence Glossart perceivable unit"
      }
    }, {
      concept: {
        name: "frame"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = regionRole2;
  regionRole$1.default = _default;
  return regionRole$1;
}
var rowRole$1 = {};
var hasRequiredRowRole$1;
function requireRowRole$1() {
  if (hasRequiredRowRole$1) return rowRole$1;
  hasRequiredRowRole$1 = 1;
  Object.defineProperty(rowRole$1, "__esModule", {
    value: true
  });
  rowRole$1.default = void 0;
  var rowRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-colindex": null,
      "aria-expanded": null,
      "aria-level": null,
      "aria-posinset": null,
      "aria-rowindex": null,
      "aria-selected": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        name: "tr"
      },
      module: "HTML"
    }],
    requireContextRole: ["grid", "rowgroup", "table", "treegrid"],
    requiredContextRole: ["grid", "rowgroup", "table", "treegrid"],
    requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]]
  };
  var _default = rowRole2;
  rowRole$1.default = _default;
  return rowRole$1;
}
var rowgroupRole$1 = {};
var hasRequiredRowgroupRole$1;
function requireRowgroupRole$1() {
  if (hasRequiredRowgroupRole$1) return rowgroupRole$1;
  hasRequiredRowgroupRole$1 = 1;
  Object.defineProperty(rowgroupRole$1, "__esModule", {
    value: true
  });
  rowgroupRole$1.default = void 0;
  var rowgroupRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "tbody"
      },
      module: "HTML"
    }, {
      concept: {
        name: "tfoot"
      },
      module: "HTML"
    }, {
      concept: {
        name: "thead"
      },
      module: "HTML"
    }],
    requireContextRole: ["grid", "table", "treegrid"],
    requiredContextRole: ["grid", "table", "treegrid"],
    requiredOwnedElements: [["row"]],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = rowgroupRole2;
  rowgroupRole$1.default = _default;
  return rowgroupRole$1;
}
var rowheaderRole$1 = {};
var hasRequiredRowheaderRole$1;
function requireRowheaderRole$1() {
  if (hasRequiredRowheaderRole$1) return rowheaderRole$1;
  hasRequiredRowheaderRole$1 = 1;
  Object.defineProperty(rowheaderRole$1, "__esModule", {
    value: true
  });
  rowheaderRole$1.default = void 0;
  var rowheaderRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-sort": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "scope",
          value: "row"
        }],
        name: "th"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "scope",
          value: "rowgroup"
        }],
        name: "th"
      },
      module: "HTML"
    }],
    requireContextRole: ["row", "rowgroup"],
    requiredContextRole: ["row", "rowgroup"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
  };
  var _default = rowheaderRole2;
  rowheaderRole$1.default = _default;
  return rowheaderRole$1;
}
var scrollbarRole$1 = {};
var hasRequiredScrollbarRole$1;
function requireScrollbarRole$1() {
  if (hasRequiredScrollbarRole$1) return scrollbarRole$1;
  hasRequiredScrollbarRole$1 = 1;
  Object.defineProperty(scrollbarRole$1, "__esModule", {
    value: true
  });
  scrollbarRole$1.default = void 0;
  var scrollbarRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-valuetext": null,
      "aria-orientation": "vertical",
      "aria-valuemax": "100",
      "aria-valuemin": "0"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-controls": null,
      "aria-valuenow": null
    },
    superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
  };
  var _default = scrollbarRole2;
  scrollbarRole$1.default = _default;
  return scrollbarRole$1;
}
var searchRole$1 = {};
var hasRequiredSearchRole$1;
function requireSearchRole$1() {
  if (hasRequiredSearchRole$1) return searchRole$1;
  hasRequiredSearchRole$1 = 1;
  Object.defineProperty(searchRole$1, "__esModule", {
    value: true
  });
  searchRole$1.default = void 0;
  var searchRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = searchRole2;
  searchRole$1.default = _default;
  return searchRole$1;
}
var searchboxRole$1 = {};
var hasRequiredSearchboxRole$1;
function requireSearchboxRole$1() {
  if (hasRequiredSearchboxRole$1) return searchboxRole$1;
  hasRequiredSearchboxRole$1 = 1;
  Object.defineProperty(searchboxRole$1, "__esModule", {
    value: true
  });
  searchboxRole$1.default = void 0;
  var searchboxRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "search"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "input", "textbox"]]
  };
  var _default = searchboxRole2;
  searchboxRole$1.default = _default;
  return searchboxRole$1;
}
var separatorRole$1 = {};
var hasRequiredSeparatorRole$1;
function requireSeparatorRole$1() {
  if (hasRequiredSeparatorRole$1) return separatorRole$1;
  hasRequiredSeparatorRole$1 = 1;
  Object.defineProperty(separatorRole$1, "__esModule", {
    value: true
  });
  separatorRole$1.default = void 0;
  var separatorRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-orientation": "horizontal",
      "aria-valuemax": "100",
      "aria-valuemin": "0",
      "aria-valuenow": null,
      "aria-valuetext": null
    },
    relatedConcepts: [{
      concept: {
        name: "hr"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = separatorRole2;
  separatorRole$1.default = _default;
  return separatorRole$1;
}
var sliderRole$1 = {};
var hasRequiredSliderRole$1;
function requireSliderRole$1() {
  if (hasRequiredSliderRole$1) return sliderRole$1;
  hasRequiredSliderRole$1 = 1;
  Object.defineProperty(sliderRole$1, "__esModule", {
    value: true
  });
  sliderRole$1.default = void 0;
  var sliderRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-haspopup": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-valuetext": null,
      "aria-orientation": "horizontal",
      "aria-valuemax": "100",
      "aria-valuemin": "0"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "range"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-valuenow": null
    },
    superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]]
  };
  var _default = sliderRole2;
  sliderRole$1.default = _default;
  return sliderRole$1;
}
var spinbuttonRole$1 = {};
var hasRequiredSpinbuttonRole$1;
function requireSpinbuttonRole$1() {
  if (hasRequiredSpinbuttonRole$1) return spinbuttonRole$1;
  hasRequiredSpinbuttonRole$1 = 1;
  Object.defineProperty(spinbuttonRole$1, "__esModule", {
    value: true
  });
  spinbuttonRole$1.default = void 0;
  var spinbuttonRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-valuetext": null,
      "aria-valuenow": "0"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "number"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]]
  };
  var _default = spinbuttonRole2;
  spinbuttonRole$1.default = _default;
  return spinbuttonRole$1;
}
var statusRole$1 = {};
var hasRequiredStatusRole$1;
function requireStatusRole$1() {
  if (hasRequiredStatusRole$1) return statusRole$1;
  hasRequiredStatusRole$1 = 1;
  Object.defineProperty(statusRole$1, "__esModule", {
    value: true
  });
  statusRole$1.default = void 0;
  var statusRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-atomic": "true",
      "aria-live": "polite"
    },
    relatedConcepts: [{
      concept: {
        name: "output"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = statusRole2;
  statusRole$1.default = _default;
  return statusRole$1;
}
var strongRole$1 = {};
var hasRequiredStrongRole$1;
function requireStrongRole$1() {
  if (hasRequiredStrongRole$1) return strongRole$1;
  hasRequiredStrongRole$1 = 1;
  Object.defineProperty(strongRole$1, "__esModule", {
    value: true
  });
  strongRole$1.default = void 0;
  var strongRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = strongRole2;
  strongRole$1.default = _default;
  return strongRole$1;
}
var subscriptRole$1 = {};
var hasRequiredSubscriptRole$1;
function requireSubscriptRole$1() {
  if (hasRequiredSubscriptRole$1) return subscriptRole$1;
  hasRequiredSubscriptRole$1 = 1;
  Object.defineProperty(subscriptRole$1, "__esModule", {
    value: true
  });
  subscriptRole$1.default = void 0;
  var subscriptRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = subscriptRole2;
  subscriptRole$1.default = _default;
  return subscriptRole$1;
}
var superscriptRole$1 = {};
var hasRequiredSuperscriptRole$1;
function requireSuperscriptRole$1() {
  if (hasRequiredSuperscriptRole$1) return superscriptRole$1;
  hasRequiredSuperscriptRole$1 = 1;
  Object.defineProperty(superscriptRole$1, "__esModule", {
    value: true
  });
  superscriptRole$1.default = void 0;
  var superscriptRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = superscriptRole2;
  superscriptRole$1.default = _default;
  return superscriptRole$1;
}
var switchRole$1 = {};
var hasRequiredSwitchRole$1;
function requireSwitchRole$1() {
  if (hasRequiredSwitchRole$1) return switchRole$1;
  hasRequiredSwitchRole$1 = 1;
  Object.defineProperty(switchRole$1, "__esModule", {
    value: true
  });
  switchRole$1.default = void 0;
  var switchRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "button"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input", "checkbox"]]
  };
  var _default = switchRole2;
  switchRole$1.default = _default;
  return switchRole$1;
}
var tabRole$1 = {};
var hasRequiredTabRole$1;
function requireTabRole$1() {
  if (hasRequiredTabRole$1) return tabRole$1;
  hasRequiredTabRole$1 = 1;
  Object.defineProperty(tabRole$1, "__esModule", {
    value: true
  });
  tabRole$1.default = void 0;
  var tabRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-posinset": null,
      "aria-setsize": null,
      "aria-selected": "false"
    },
    relatedConcepts: [],
    requireContextRole: ["tablist"],
    requiredContextRole: ["tablist"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]]
  };
  var _default = tabRole2;
  tabRole$1.default = _default;
  return tabRole$1;
}
var tableRole$1 = {};
var hasRequiredTableRole$1;
function requireTableRole$1() {
  if (hasRequiredTableRole$1) return tableRole$1;
  hasRequiredTableRole$1 = 1;
  Object.defineProperty(tableRole$1, "__esModule", {
    value: true
  });
  tableRole$1.default = void 0;
  var tableRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-colcount": null,
      "aria-rowcount": null
    },
    relatedConcepts: [{
      concept: {
        name: "table"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["row"], ["row", "rowgroup"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = tableRole2;
  tableRole$1.default = _default;
  return tableRole$1;
}
var tablistRole$1 = {};
var hasRequiredTablistRole$1;
function requireTablistRole$1() {
  if (hasRequiredTablistRole$1) return tablistRole$1;
  hasRequiredTablistRole$1 = 1;
  Object.defineProperty(tablistRole$1, "__esModule", {
    value: true
  });
  tablistRole$1.default = void 0;
  var tablistRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-level": null,
      "aria-multiselectable": null,
      "aria-orientation": "horizontal"
    },
    relatedConcepts: [{
      module: "DAISY",
      concept: {
        name: "guide"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["tab"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"]]
  };
  var _default = tablistRole2;
  tablistRole$1.default = _default;
  return tablistRole$1;
}
var tabpanelRole$1 = {};
var hasRequiredTabpanelRole$1;
function requireTabpanelRole$1() {
  if (hasRequiredTabpanelRole$1) return tabpanelRole$1;
  hasRequiredTabpanelRole$1 = 1;
  Object.defineProperty(tabpanelRole$1, "__esModule", {
    value: true
  });
  tabpanelRole$1.default = void 0;
  var tabpanelRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = tabpanelRole2;
  tabpanelRole$1.default = _default;
  return tabpanelRole$1;
}
var termRole$1 = {};
var hasRequiredTermRole$1;
function requireTermRole$1() {
  if (hasRequiredTermRole$1) return termRole$1;
  hasRequiredTermRole$1 = 1;
  Object.defineProperty(termRole$1, "__esModule", {
    value: true
  });
  termRole$1.default = void 0;
  var termRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "dfn"
      },
      module: "HTML"
    }, {
      concept: {
        name: "dt"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = termRole2;
  termRole$1.default = _default;
  return termRole$1;
}
var textboxRole$1 = {};
var hasRequiredTextboxRole$1;
function requireTextboxRole$1() {
  if (hasRequiredTextboxRole$1) return textboxRole$1;
  hasRequiredTextboxRole$1 = 1;
  Object.defineProperty(textboxRole$1, "__esModule", {
    value: true
  });
  textboxRole$1.default = void 0;
  var textboxRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-autocomplete": null,
      "aria-errormessage": null,
      "aria-haspopup": null,
      "aria-invalid": null,
      "aria-multiline": null,
      "aria-placeholder": null,
      "aria-readonly": null,
      "aria-required": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "type"
        }, {
          constraints: ["undefined"],
          name: "list"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "email"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "tel"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "text"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "url"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        name: "input"
      },
      module: "XForms"
    }, {
      concept: {
        name: "textarea"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = textboxRole2;
  textboxRole$1.default = _default;
  return textboxRole$1;
}
var timeRole$1 = {};
var hasRequiredTimeRole$1;
function requireTimeRole$1() {
  if (hasRequiredTimeRole$1) return timeRole$1;
  hasRequiredTimeRole$1 = 1;
  Object.defineProperty(timeRole$1, "__esModule", {
    value: true
  });
  timeRole$1.default = void 0;
  var timeRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = timeRole2;
  timeRole$1.default = _default;
  return timeRole$1;
}
var timerRole$1 = {};
var hasRequiredTimerRole$1;
function requireTimerRole$1() {
  if (hasRequiredTimerRole$1) return timerRole$1;
  hasRequiredTimerRole$1 = 1;
  Object.defineProperty(timerRole$1, "__esModule", {
    value: true
  });
  timerRole$1.default = void 0;
  var timerRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "status"]]
  };
  var _default = timerRole2;
  timerRole$1.default = _default;
  return timerRole$1;
}
var toolbarRole$1 = {};
var hasRequiredToolbarRole$1;
function requireToolbarRole$1() {
  if (hasRequiredToolbarRole$1) return toolbarRole$1;
  hasRequiredToolbarRole$1 = 1;
  Object.defineProperty(toolbarRole$1, "__esModule", {
    value: true
  });
  toolbarRole$1.default = void 0;
  var toolbarRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": "horizontal"
    },
    relatedConcepts: [{
      concept: {
        name: "menubar"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "group"]]
  };
  var _default = toolbarRole2;
  toolbarRole$1.default = _default;
  return toolbarRole$1;
}
var tooltipRole$1 = {};
var hasRequiredTooltipRole$1;
function requireTooltipRole$1() {
  if (hasRequiredTooltipRole$1) return tooltipRole$1;
  hasRequiredTooltipRole$1 = 1;
  Object.defineProperty(tooltipRole$1, "__esModule", {
    value: true
  });
  tooltipRole$1.default = void 0;
  var tooltipRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = tooltipRole2;
  tooltipRole$1.default = _default;
  return tooltipRole$1;
}
var treeRole$1 = {};
var hasRequiredTreeRole$1;
function requireTreeRole$1() {
  if (hasRequiredTreeRole$1) return treeRole$1;
  hasRequiredTreeRole$1 = 1;
  Object.defineProperty(treeRole$1, "__esModule", {
    value: true
  });
  treeRole$1.default = void 0;
  var treeRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-multiselectable": null,
      "aria-required": null,
      "aria-orientation": "vertical"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["treeitem", "group"], ["treeitem"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = treeRole2;
  treeRole$1.default = _default;
  return treeRole$1;
}
var treegridRole$1 = {};
var hasRequiredTreegridRole$1;
function requireTreegridRole$1() {
  if (hasRequiredTreegridRole$1) return treegridRole$1;
  hasRequiredTreegridRole$1 = 1;
  Object.defineProperty(treegridRole$1, "__esModule", {
    value: true
  });
  treegridRole$1.default = void 0;
  var treegridRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["row"], ["row", "rowgroup"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]]
  };
  var _default = treegridRole2;
  treegridRole$1.default = _default;
  return treegridRole$1;
}
var treeitemRole$1 = {};
var hasRequiredTreeitemRole$1;
function requireTreeitemRole$1() {
  if (hasRequiredTreeitemRole$1) return treeitemRole$1;
  hasRequiredTreeitemRole$1 = 1;
  Object.defineProperty(treeitemRole$1, "__esModule", {
    value: true
  });
  treeitemRole$1.default = void 0;
  var treeitemRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-expanded": null,
      "aria-haspopup": null
    },
    relatedConcepts: [],
    requireContextRole: ["group", "tree"],
    requiredContextRole: ["group", "tree"],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-selected": null
    },
    superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]]
  };
  var _default = treeitemRole2;
  treeitemRole$1.default = _default;
  return treeitemRole$1;
}
var hasRequiredAriaLiteralRoles$1;
function requireAriaLiteralRoles$1() {
  if (hasRequiredAriaLiteralRoles$1) return ariaLiteralRoles$1;
  hasRequiredAriaLiteralRoles$1 = 1;
  Object.defineProperty(ariaLiteralRoles$1, "__esModule", {
    value: true
  });
  ariaLiteralRoles$1.default = void 0;
  var _alertRole = _interopRequireDefault(requireAlertRole$1());
  var _alertdialogRole = _interopRequireDefault(requireAlertdialogRole$1());
  var _applicationRole = _interopRequireDefault(requireApplicationRole$1());
  var _articleRole = _interopRequireDefault(requireArticleRole$1());
  var _bannerRole = _interopRequireDefault(requireBannerRole$1());
  var _blockquoteRole = _interopRequireDefault(requireBlockquoteRole$1());
  var _buttonRole = _interopRequireDefault(requireButtonRole$1());
  var _captionRole = _interopRequireDefault(requireCaptionRole$1());
  var _cellRole = _interopRequireDefault(requireCellRole$1());
  var _checkboxRole = _interopRequireDefault(requireCheckboxRole$1());
  var _codeRole = _interopRequireDefault(requireCodeRole$1());
  var _columnheaderRole = _interopRequireDefault(requireColumnheaderRole$1());
  var _comboboxRole = _interopRequireDefault(requireComboboxRole$1());
  var _complementaryRole = _interopRequireDefault(requireComplementaryRole$1());
  var _contentinfoRole = _interopRequireDefault(requireContentinfoRole$1());
  var _definitionRole = _interopRequireDefault(requireDefinitionRole$1());
  var _deletionRole = _interopRequireDefault(requireDeletionRole$1());
  var _dialogRole = _interopRequireDefault(requireDialogRole$1());
  var _directoryRole = _interopRequireDefault(requireDirectoryRole$1());
  var _documentRole = _interopRequireDefault(requireDocumentRole$1());
  var _emphasisRole = _interopRequireDefault(requireEmphasisRole$1());
  var _feedRole = _interopRequireDefault(requireFeedRole$1());
  var _figureRole = _interopRequireDefault(requireFigureRole$1());
  var _formRole = _interopRequireDefault(requireFormRole$1());
  var _genericRole = _interopRequireDefault(requireGenericRole$1());
  var _gridRole = _interopRequireDefault(requireGridRole$1());
  var _gridcellRole = _interopRequireDefault(requireGridcellRole$1());
  var _groupRole = _interopRequireDefault(requireGroupRole$1());
  var _headingRole = _interopRequireDefault(requireHeadingRole$1());
  var _imgRole = _interopRequireDefault(requireImgRole$1());
  var _insertionRole = _interopRequireDefault(requireInsertionRole$1());
  var _linkRole = _interopRequireDefault(requireLinkRole$1());
  var _listRole = _interopRequireDefault(requireListRole$1());
  var _listboxRole = _interopRequireDefault(requireListboxRole$1());
  var _listitemRole = _interopRequireDefault(requireListitemRole$1());
  var _logRole = _interopRequireDefault(requireLogRole$1());
  var _mainRole = _interopRequireDefault(requireMainRole$1());
  var _marqueeRole = _interopRequireDefault(requireMarqueeRole$1());
  var _mathRole = _interopRequireDefault(requireMathRole$1());
  var _menuRole = _interopRequireDefault(requireMenuRole$1());
  var _menubarRole = _interopRequireDefault(requireMenubarRole$1());
  var _menuitemRole = _interopRequireDefault(requireMenuitemRole$1());
  var _menuitemcheckboxRole = _interopRequireDefault(requireMenuitemcheckboxRole$1());
  var _menuitemradioRole = _interopRequireDefault(requireMenuitemradioRole$1());
  var _meterRole = _interopRequireDefault(requireMeterRole$1());
  var _navigationRole = _interopRequireDefault(requireNavigationRole$1());
  var _noneRole = _interopRequireDefault(requireNoneRole$1());
  var _noteRole = _interopRequireDefault(requireNoteRole$1());
  var _optionRole = _interopRequireDefault(requireOptionRole$1());
  var _paragraphRole = _interopRequireDefault(requireParagraphRole$1());
  var _presentationRole = _interopRequireDefault(requirePresentationRole$1());
  var _progressbarRole = _interopRequireDefault(requireProgressbarRole$1());
  var _radioRole = _interopRequireDefault(requireRadioRole$1());
  var _radiogroupRole = _interopRequireDefault(requireRadiogroupRole$1());
  var _regionRole = _interopRequireDefault(requireRegionRole$1());
  var _rowRole = _interopRequireDefault(requireRowRole$1());
  var _rowgroupRole = _interopRequireDefault(requireRowgroupRole$1());
  var _rowheaderRole = _interopRequireDefault(requireRowheaderRole$1());
  var _scrollbarRole = _interopRequireDefault(requireScrollbarRole$1());
  var _searchRole = _interopRequireDefault(requireSearchRole$1());
  var _searchboxRole = _interopRequireDefault(requireSearchboxRole$1());
  var _separatorRole = _interopRequireDefault(requireSeparatorRole$1());
  var _sliderRole = _interopRequireDefault(requireSliderRole$1());
  var _spinbuttonRole = _interopRequireDefault(requireSpinbuttonRole$1());
  var _statusRole = _interopRequireDefault(requireStatusRole$1());
  var _strongRole = _interopRequireDefault(requireStrongRole$1());
  var _subscriptRole = _interopRequireDefault(requireSubscriptRole$1());
  var _superscriptRole = _interopRequireDefault(requireSuperscriptRole$1());
  var _switchRole = _interopRequireDefault(requireSwitchRole$1());
  var _tabRole = _interopRequireDefault(requireTabRole$1());
  var _tableRole = _interopRequireDefault(requireTableRole$1());
  var _tablistRole = _interopRequireDefault(requireTablistRole$1());
  var _tabpanelRole = _interopRequireDefault(requireTabpanelRole$1());
  var _termRole = _interopRequireDefault(requireTermRole$1());
  var _textboxRole = _interopRequireDefault(requireTextboxRole$1());
  var _timeRole = _interopRequireDefault(requireTimeRole$1());
  var _timerRole = _interopRequireDefault(requireTimerRole$1());
  var _toolbarRole = _interopRequireDefault(requireToolbarRole$1());
  var _tooltipRole = _interopRequireDefault(requireTooltipRole$1());
  var _treeRole = _interopRequireDefault(requireTreeRole$1());
  var _treegridRole = _interopRequireDefault(requireTreegridRole$1());
  var _treeitemRole = _interopRequireDefault(requireTreeitemRole$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaLiteralRoles2 = [["alert", _alertRole.default], ["alertdialog", _alertdialogRole.default], ["application", _applicationRole.default], ["article", _articleRole.default], ["banner", _bannerRole.default], ["blockquote", _blockquoteRole.default], ["button", _buttonRole.default], ["caption", _captionRole.default], ["cell", _cellRole.default], ["checkbox", _checkboxRole.default], ["code", _codeRole.default], ["columnheader", _columnheaderRole.default], ["combobox", _comboboxRole.default], ["complementary", _complementaryRole.default], ["contentinfo", _contentinfoRole.default], ["definition", _definitionRole.default], ["deletion", _deletionRole.default], ["dialog", _dialogRole.default], ["directory", _directoryRole.default], ["document", _documentRole.default], ["emphasis", _emphasisRole.default], ["feed", _feedRole.default], ["figure", _figureRole.default], ["form", _formRole.default], ["generic", _genericRole.default], ["grid", _gridRole.default], ["gridcell", _gridcellRole.default], ["group", _groupRole.default], ["heading", _headingRole.default], ["img", _imgRole.default], ["insertion", _insertionRole.default], ["link", _linkRole.default], ["list", _listRole.default], ["listbox", _listboxRole.default], ["listitem", _listitemRole.default], ["log", _logRole.default], ["main", _mainRole.default], ["marquee", _marqueeRole.default], ["math", _mathRole.default], ["menu", _menuRole.default], ["menubar", _menubarRole.default], ["menuitem", _menuitemRole.default], ["menuitemcheckbox", _menuitemcheckboxRole.default], ["menuitemradio", _menuitemradioRole.default], ["meter", _meterRole.default], ["navigation", _navigationRole.default], ["none", _noneRole.default], ["note", _noteRole.default], ["option", _optionRole.default], ["paragraph", _paragraphRole.default], ["presentation", _presentationRole.default], ["progressbar", _progressbarRole.default], ["radio", _radioRole.default], ["radiogroup", _radiogroupRole.default], ["region", _regionRole.default], ["row", _rowRole.default], ["rowgroup", _rowgroupRole.default], ["rowheader", _rowheaderRole.default], ["scrollbar", _scrollbarRole.default], ["search", _searchRole.default], ["searchbox", _searchboxRole.default], ["separator", _separatorRole.default], ["slider", _sliderRole.default], ["spinbutton", _spinbuttonRole.default], ["status", _statusRole.default], ["strong", _strongRole.default], ["subscript", _subscriptRole.default], ["superscript", _superscriptRole.default], ["switch", _switchRole.default], ["tab", _tabRole.default], ["table", _tableRole.default], ["tablist", _tablistRole.default], ["tabpanel", _tabpanelRole.default], ["term", _termRole.default], ["textbox", _textboxRole.default], ["time", _timeRole.default], ["timer", _timerRole.default], ["toolbar", _toolbarRole.default], ["tooltip", _tooltipRole.default], ["tree", _treeRole.default], ["treegrid", _treegridRole.default], ["treeitem", _treeitemRole.default]];
  var _default = ariaLiteralRoles2;
  ariaLiteralRoles$1.default = _default;
  return ariaLiteralRoles$1;
}
var ariaDpubRoles$1 = {};
var docAbstractRole$1 = {};
var hasRequiredDocAbstractRole$1;
function requireDocAbstractRole$1() {
  if (hasRequiredDocAbstractRole$1) return docAbstractRole$1;
  hasRequiredDocAbstractRole$1 = 1;
  Object.defineProperty(docAbstractRole$1, "__esModule", {
    value: true
  });
  docAbstractRole$1.default = void 0;
  var docAbstractRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "abstract [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docAbstractRole2;
  docAbstractRole$1.default = _default;
  return docAbstractRole$1;
}
var docAcknowledgmentsRole$1 = {};
var hasRequiredDocAcknowledgmentsRole$1;
function requireDocAcknowledgmentsRole$1() {
  if (hasRequiredDocAcknowledgmentsRole$1) return docAcknowledgmentsRole$1;
  hasRequiredDocAcknowledgmentsRole$1 = 1;
  Object.defineProperty(docAcknowledgmentsRole$1, "__esModule", {
    value: true
  });
  docAcknowledgmentsRole$1.default = void 0;
  var docAcknowledgmentsRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "acknowledgments [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docAcknowledgmentsRole2;
  docAcknowledgmentsRole$1.default = _default;
  return docAcknowledgmentsRole$1;
}
var docAfterwordRole$1 = {};
var hasRequiredDocAfterwordRole$1;
function requireDocAfterwordRole$1() {
  if (hasRequiredDocAfterwordRole$1) return docAfterwordRole$1;
  hasRequiredDocAfterwordRole$1 = 1;
  Object.defineProperty(docAfterwordRole$1, "__esModule", {
    value: true
  });
  docAfterwordRole$1.default = void 0;
  var docAfterwordRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "afterword [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docAfterwordRole2;
  docAfterwordRole$1.default = _default;
  return docAfterwordRole$1;
}
var docAppendixRole$1 = {};
var hasRequiredDocAppendixRole$1;
function requireDocAppendixRole$1() {
  if (hasRequiredDocAppendixRole$1) return docAppendixRole$1;
  hasRequiredDocAppendixRole$1 = 1;
  Object.defineProperty(docAppendixRole$1, "__esModule", {
    value: true
  });
  docAppendixRole$1.default = void 0;
  var docAppendixRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "appendix [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docAppendixRole2;
  docAppendixRole$1.default = _default;
  return docAppendixRole$1;
}
var docBacklinkRole$1 = {};
var hasRequiredDocBacklinkRole$1;
function requireDocBacklinkRole$1() {
  if (hasRequiredDocBacklinkRole$1) return docBacklinkRole$1;
  hasRequiredDocBacklinkRole$1 = 1;
  Object.defineProperty(docBacklinkRole$1, "__esModule", {
    value: true
  });
  docBacklinkRole$1.default = void 0;
  var docBacklinkRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "content"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "referrer [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docBacklinkRole2;
  docBacklinkRole$1.default = _default;
  return docBacklinkRole$1;
}
var docBiblioentryRole$1 = {};
var hasRequiredDocBiblioentryRole$1;
function requireDocBiblioentryRole$1() {
  if (hasRequiredDocBiblioentryRole$1) return docBiblioentryRole$1;
  hasRequiredDocBiblioentryRole$1 = 1;
  Object.defineProperty(docBiblioentryRole$1, "__esModule", {
    value: true
  });
  docBiblioentryRole$1.default = void 0;
  var docBiblioentryRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "EPUB biblioentry [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: ["doc-bibliography"],
    requiredContextRole: ["doc-bibliography"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "listitem"]]
  };
  var _default = docBiblioentryRole2;
  docBiblioentryRole$1.default = _default;
  return docBiblioentryRole$1;
}
var docBibliographyRole$1 = {};
var hasRequiredDocBibliographyRole$1;
function requireDocBibliographyRole$1() {
  if (hasRequiredDocBibliographyRole$1) return docBibliographyRole$1;
  hasRequiredDocBibliographyRole$1 = 1;
  Object.defineProperty(docBibliographyRole$1, "__esModule", {
    value: true
  });
  docBibliographyRole$1.default = void 0;
  var docBibliographyRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "bibliography [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["doc-biblioentry"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docBibliographyRole2;
  docBibliographyRole$1.default = _default;
  return docBibliographyRole$1;
}
var docBibliorefRole$1 = {};
var hasRequiredDocBibliorefRole$1;
function requireDocBibliorefRole$1() {
  if (hasRequiredDocBibliorefRole$1) return docBibliorefRole$1;
  hasRequiredDocBibliorefRole$1 = 1;
  Object.defineProperty(docBibliorefRole$1, "__esModule", {
    value: true
  });
  docBibliorefRole$1.default = void 0;
  var docBibliorefRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "biblioref [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docBibliorefRole2;
  docBibliorefRole$1.default = _default;
  return docBibliorefRole$1;
}
var docChapterRole$1 = {};
var hasRequiredDocChapterRole$1;
function requireDocChapterRole$1() {
  if (hasRequiredDocChapterRole$1) return docChapterRole$1;
  hasRequiredDocChapterRole$1 = 1;
  Object.defineProperty(docChapterRole$1, "__esModule", {
    value: true
  });
  docChapterRole$1.default = void 0;
  var docChapterRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "chapter [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docChapterRole2;
  docChapterRole$1.default = _default;
  return docChapterRole$1;
}
var docColophonRole$1 = {};
var hasRequiredDocColophonRole$1;
function requireDocColophonRole$1() {
  if (hasRequiredDocColophonRole$1) return docColophonRole$1;
  hasRequiredDocColophonRole$1 = 1;
  Object.defineProperty(docColophonRole$1, "__esModule", {
    value: true
  });
  docColophonRole$1.default = void 0;
  var docColophonRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "colophon [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docColophonRole2;
  docColophonRole$1.default = _default;
  return docColophonRole$1;
}
var docConclusionRole$1 = {};
var hasRequiredDocConclusionRole$1;
function requireDocConclusionRole$1() {
  if (hasRequiredDocConclusionRole$1) return docConclusionRole$1;
  hasRequiredDocConclusionRole$1 = 1;
  Object.defineProperty(docConclusionRole$1, "__esModule", {
    value: true
  });
  docConclusionRole$1.default = void 0;
  var docConclusionRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "conclusion [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docConclusionRole2;
  docConclusionRole$1.default = _default;
  return docConclusionRole$1;
}
var docCoverRole$1 = {};
var hasRequiredDocCoverRole$1;
function requireDocCoverRole$1() {
  if (hasRequiredDocCoverRole$1) return docCoverRole$1;
  hasRequiredDocCoverRole$1 = 1;
  Object.defineProperty(docCoverRole$1, "__esModule", {
    value: true
  });
  docCoverRole$1.default = void 0;
  var docCoverRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "cover [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "img"]]
  };
  var _default = docCoverRole2;
  docCoverRole$1.default = _default;
  return docCoverRole$1;
}
var docCreditRole$1 = {};
var hasRequiredDocCreditRole$1;
function requireDocCreditRole$1() {
  if (hasRequiredDocCreditRole$1) return docCreditRole$1;
  hasRequiredDocCreditRole$1 = 1;
  Object.defineProperty(docCreditRole$1, "__esModule", {
    value: true
  });
  docCreditRole$1.default = void 0;
  var docCreditRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "credit [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docCreditRole2;
  docCreditRole$1.default = _default;
  return docCreditRole$1;
}
var docCreditsRole$1 = {};
var hasRequiredDocCreditsRole$1;
function requireDocCreditsRole$1() {
  if (hasRequiredDocCreditsRole$1) return docCreditsRole$1;
  hasRequiredDocCreditsRole$1 = 1;
  Object.defineProperty(docCreditsRole$1, "__esModule", {
    value: true
  });
  docCreditsRole$1.default = void 0;
  var docCreditsRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "credits [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docCreditsRole2;
  docCreditsRole$1.default = _default;
  return docCreditsRole$1;
}
var docDedicationRole$1 = {};
var hasRequiredDocDedicationRole$1;
function requireDocDedicationRole$1() {
  if (hasRequiredDocDedicationRole$1) return docDedicationRole$1;
  hasRequiredDocDedicationRole$1 = 1;
  Object.defineProperty(docDedicationRole$1, "__esModule", {
    value: true
  });
  docDedicationRole$1.default = void 0;
  var docDedicationRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "dedication [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docDedicationRole2;
  docDedicationRole$1.default = _default;
  return docDedicationRole$1;
}
var docEndnoteRole$1 = {};
var hasRequiredDocEndnoteRole$1;
function requireDocEndnoteRole$1() {
  if (hasRequiredDocEndnoteRole$1) return docEndnoteRole$1;
  hasRequiredDocEndnoteRole$1 = 1;
  Object.defineProperty(docEndnoteRole$1, "__esModule", {
    value: true
  });
  docEndnoteRole$1.default = void 0;
  var docEndnoteRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "rearnote [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: ["doc-endnotes"],
    requiredContextRole: ["doc-endnotes"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "listitem"]]
  };
  var _default = docEndnoteRole2;
  docEndnoteRole$1.default = _default;
  return docEndnoteRole$1;
}
var docEndnotesRole$1 = {};
var hasRequiredDocEndnotesRole$1;
function requireDocEndnotesRole$1() {
  if (hasRequiredDocEndnotesRole$1) return docEndnotesRole$1;
  hasRequiredDocEndnotesRole$1 = 1;
  Object.defineProperty(docEndnotesRole$1, "__esModule", {
    value: true
  });
  docEndnotesRole$1.default = void 0;
  var docEndnotesRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "rearnotes [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["doc-endnote"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docEndnotesRole2;
  docEndnotesRole$1.default = _default;
  return docEndnotesRole$1;
}
var docEpigraphRole$1 = {};
var hasRequiredDocEpigraphRole$1;
function requireDocEpigraphRole$1() {
  if (hasRequiredDocEpigraphRole$1) return docEpigraphRole$1;
  hasRequiredDocEpigraphRole$1 = 1;
  Object.defineProperty(docEpigraphRole$1, "__esModule", {
    value: true
  });
  docEpigraphRole$1.default = void 0;
  var docEpigraphRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "epigraph [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docEpigraphRole2;
  docEpigraphRole$1.default = _default;
  return docEpigraphRole$1;
}
var docEpilogueRole$1 = {};
var hasRequiredDocEpilogueRole$1;
function requireDocEpilogueRole$1() {
  if (hasRequiredDocEpilogueRole$1) return docEpilogueRole$1;
  hasRequiredDocEpilogueRole$1 = 1;
  Object.defineProperty(docEpilogueRole$1, "__esModule", {
    value: true
  });
  docEpilogueRole$1.default = void 0;
  var docEpilogueRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "epilogue [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docEpilogueRole2;
  docEpilogueRole$1.default = _default;
  return docEpilogueRole$1;
}
var docErrataRole$1 = {};
var hasRequiredDocErrataRole$1;
function requireDocErrataRole$1() {
  if (hasRequiredDocErrataRole$1) return docErrataRole$1;
  hasRequiredDocErrataRole$1 = 1;
  Object.defineProperty(docErrataRole$1, "__esModule", {
    value: true
  });
  docErrataRole$1.default = void 0;
  var docErrataRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "errata [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docErrataRole2;
  docErrataRole$1.default = _default;
  return docErrataRole$1;
}
var docExampleRole$1 = {};
var hasRequiredDocExampleRole$1;
function requireDocExampleRole$1() {
  if (hasRequiredDocExampleRole$1) return docExampleRole$1;
  hasRequiredDocExampleRole$1 = 1;
  Object.defineProperty(docExampleRole$1, "__esModule", {
    value: true
  });
  docExampleRole$1.default = void 0;
  var docExampleRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docExampleRole2;
  docExampleRole$1.default = _default;
  return docExampleRole$1;
}
var docFootnoteRole$1 = {};
var hasRequiredDocFootnoteRole$1;
function requireDocFootnoteRole$1() {
  if (hasRequiredDocFootnoteRole$1) return docFootnoteRole$1;
  hasRequiredDocFootnoteRole$1 = 1;
  Object.defineProperty(docFootnoteRole$1, "__esModule", {
    value: true
  });
  docFootnoteRole$1.default = void 0;
  var docFootnoteRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "footnote [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docFootnoteRole2;
  docFootnoteRole$1.default = _default;
  return docFootnoteRole$1;
}
var docForewordRole$1 = {};
var hasRequiredDocForewordRole$1;
function requireDocForewordRole$1() {
  if (hasRequiredDocForewordRole$1) return docForewordRole$1;
  hasRequiredDocForewordRole$1 = 1;
  Object.defineProperty(docForewordRole$1, "__esModule", {
    value: true
  });
  docForewordRole$1.default = void 0;
  var docForewordRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "foreword [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docForewordRole2;
  docForewordRole$1.default = _default;
  return docForewordRole$1;
}
var docGlossaryRole$1 = {};
var hasRequiredDocGlossaryRole$1;
function requireDocGlossaryRole$1() {
  if (hasRequiredDocGlossaryRole$1) return docGlossaryRole$1;
  hasRequiredDocGlossaryRole$1 = 1;
  Object.defineProperty(docGlossaryRole$1, "__esModule", {
    value: true
  });
  docGlossaryRole$1.default = void 0;
  var docGlossaryRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "glossary [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["definition"], ["term"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docGlossaryRole2;
  docGlossaryRole$1.default = _default;
  return docGlossaryRole$1;
}
var docGlossrefRole$1 = {};
var hasRequiredDocGlossrefRole$1;
function requireDocGlossrefRole$1() {
  if (hasRequiredDocGlossrefRole$1) return docGlossrefRole$1;
  hasRequiredDocGlossrefRole$1 = 1;
  Object.defineProperty(docGlossrefRole$1, "__esModule", {
    value: true
  });
  docGlossrefRole$1.default = void 0;
  var docGlossrefRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "glossref [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docGlossrefRole2;
  docGlossrefRole$1.default = _default;
  return docGlossrefRole$1;
}
var docIndexRole$1 = {};
var hasRequiredDocIndexRole$1;
function requireDocIndexRole$1() {
  if (hasRequiredDocIndexRole$1) return docIndexRole$1;
  hasRequiredDocIndexRole$1 = 1;
  Object.defineProperty(docIndexRole$1, "__esModule", {
    value: true
  });
  docIndexRole$1.default = void 0;
  var docIndexRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "index [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
  };
  var _default = docIndexRole2;
  docIndexRole$1.default = _default;
  return docIndexRole$1;
}
var docIntroductionRole$1 = {};
var hasRequiredDocIntroductionRole$1;
function requireDocIntroductionRole$1() {
  if (hasRequiredDocIntroductionRole$1) return docIntroductionRole$1;
  hasRequiredDocIntroductionRole$1 = 1;
  Object.defineProperty(docIntroductionRole$1, "__esModule", {
    value: true
  });
  docIntroductionRole$1.default = void 0;
  var docIntroductionRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "introduction [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docIntroductionRole2;
  docIntroductionRole$1.default = _default;
  return docIntroductionRole$1;
}
var docNoterefRole$1 = {};
var hasRequiredDocNoterefRole$1;
function requireDocNoterefRole$1() {
  if (hasRequiredDocNoterefRole$1) return docNoterefRole$1;
  hasRequiredDocNoterefRole$1 = 1;
  Object.defineProperty(docNoterefRole$1, "__esModule", {
    value: true
  });
  docNoterefRole$1.default = void 0;
  var docNoterefRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "noteref [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docNoterefRole2;
  docNoterefRole$1.default = _default;
  return docNoterefRole$1;
}
var docNoticeRole$1 = {};
var hasRequiredDocNoticeRole$1;
function requireDocNoticeRole$1() {
  if (hasRequiredDocNoticeRole$1) return docNoticeRole$1;
  hasRequiredDocNoticeRole$1 = 1;
  Object.defineProperty(docNoticeRole$1, "__esModule", {
    value: true
  });
  docNoticeRole$1.default = void 0;
  var docNoticeRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "notice [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "note"]]
  };
  var _default = docNoticeRole2;
  docNoticeRole$1.default = _default;
  return docNoticeRole$1;
}
var docPagebreakRole$1 = {};
var hasRequiredDocPagebreakRole$1;
function requireDocPagebreakRole$1() {
  if (hasRequiredDocPagebreakRole$1) return docPagebreakRole$1;
  hasRequiredDocPagebreakRole$1 = 1;
  Object.defineProperty(docPagebreakRole$1, "__esModule", {
    value: true
  });
  docPagebreakRole$1.default = void 0;
  var docPagebreakRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "pagebreak [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "separator"]]
  };
  var _default = docPagebreakRole2;
  docPagebreakRole$1.default = _default;
  return docPagebreakRole$1;
}
var docPagelistRole$1 = {};
var hasRequiredDocPagelistRole$1;
function requireDocPagelistRole$1() {
  if (hasRequiredDocPagelistRole$1) return docPagelistRole$1;
  hasRequiredDocPagelistRole$1 = 1;
  Object.defineProperty(docPagelistRole$1, "__esModule", {
    value: true
  });
  docPagelistRole$1.default = void 0;
  var docPagelistRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "page-list [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
  };
  var _default = docPagelistRole2;
  docPagelistRole$1.default = _default;
  return docPagelistRole$1;
}
var docPartRole$1 = {};
var hasRequiredDocPartRole$1;
function requireDocPartRole$1() {
  if (hasRequiredDocPartRole$1) return docPartRole$1;
  hasRequiredDocPartRole$1 = 1;
  Object.defineProperty(docPartRole$1, "__esModule", {
    value: true
  });
  docPartRole$1.default = void 0;
  var docPartRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "part [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docPartRole2;
  docPartRole$1.default = _default;
  return docPartRole$1;
}
var docPrefaceRole$1 = {};
var hasRequiredDocPrefaceRole$1;
function requireDocPrefaceRole$1() {
  if (hasRequiredDocPrefaceRole$1) return docPrefaceRole$1;
  hasRequiredDocPrefaceRole$1 = 1;
  Object.defineProperty(docPrefaceRole$1, "__esModule", {
    value: true
  });
  docPrefaceRole$1.default = void 0;
  var docPrefaceRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "preface [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docPrefaceRole2;
  docPrefaceRole$1.default = _default;
  return docPrefaceRole$1;
}
var docPrologueRole$1 = {};
var hasRequiredDocPrologueRole$1;
function requireDocPrologueRole$1() {
  if (hasRequiredDocPrologueRole$1) return docPrologueRole$1;
  hasRequiredDocPrologueRole$1 = 1;
  Object.defineProperty(docPrologueRole$1, "__esModule", {
    value: true
  });
  docPrologueRole$1.default = void 0;
  var docPrologueRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "prologue [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docPrologueRole2;
  docPrologueRole$1.default = _default;
  return docPrologueRole$1;
}
var docPullquoteRole$1 = {};
var hasRequiredDocPullquoteRole$1;
function requireDocPullquoteRole$1() {
  if (hasRequiredDocPullquoteRole$1) return docPullquoteRole$1;
  hasRequiredDocPullquoteRole$1 = 1;
  Object.defineProperty(docPullquoteRole$1, "__esModule", {
    value: true
  });
  docPullquoteRole$1.default = void 0;
  var docPullquoteRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "pullquote [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["none"]]
  };
  var _default = docPullquoteRole2;
  docPullquoteRole$1.default = _default;
  return docPullquoteRole$1;
}
var docQnaRole$1 = {};
var hasRequiredDocQnaRole$1;
function requireDocQnaRole$1() {
  if (hasRequiredDocQnaRole$1) return docQnaRole$1;
  hasRequiredDocQnaRole$1 = 1;
  Object.defineProperty(docQnaRole$1, "__esModule", {
    value: true
  });
  docQnaRole$1.default = void 0;
  var docQnaRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "qna [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docQnaRole2;
  docQnaRole$1.default = _default;
  return docQnaRole$1;
}
var docSubtitleRole$1 = {};
var hasRequiredDocSubtitleRole$1;
function requireDocSubtitleRole$1() {
  if (hasRequiredDocSubtitleRole$1) return docSubtitleRole$1;
  hasRequiredDocSubtitleRole$1 = 1;
  Object.defineProperty(docSubtitleRole$1, "__esModule", {
    value: true
  });
  docSubtitleRole$1.default = void 0;
  var docSubtitleRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "subtitle [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "sectionhead"]]
  };
  var _default = docSubtitleRole2;
  docSubtitleRole$1.default = _default;
  return docSubtitleRole$1;
}
var docTipRole$1 = {};
var hasRequiredDocTipRole$1;
function requireDocTipRole$1() {
  if (hasRequiredDocTipRole$1) return docTipRole$1;
  hasRequiredDocTipRole$1 = 1;
  Object.defineProperty(docTipRole$1, "__esModule", {
    value: true
  });
  docTipRole$1.default = void 0;
  var docTipRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "help [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "note"]]
  };
  var _default = docTipRole2;
  docTipRole$1.default = _default;
  return docTipRole$1;
}
var docTocRole$1 = {};
var hasRequiredDocTocRole$1;
function requireDocTocRole$1() {
  if (hasRequiredDocTocRole$1) return docTocRole$1;
  hasRequiredDocTocRole$1 = 1;
  Object.defineProperty(docTocRole$1, "__esModule", {
    value: true
  });
  docTocRole$1.default = void 0;
  var docTocRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "toc [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
  };
  var _default = docTocRole2;
  docTocRole$1.default = _default;
  return docTocRole$1;
}
var hasRequiredAriaDpubRoles$1;
function requireAriaDpubRoles$1() {
  if (hasRequiredAriaDpubRoles$1) return ariaDpubRoles$1;
  hasRequiredAriaDpubRoles$1 = 1;
  Object.defineProperty(ariaDpubRoles$1, "__esModule", {
    value: true
  });
  ariaDpubRoles$1.default = void 0;
  var _docAbstractRole = _interopRequireDefault(requireDocAbstractRole$1());
  var _docAcknowledgmentsRole = _interopRequireDefault(requireDocAcknowledgmentsRole$1());
  var _docAfterwordRole = _interopRequireDefault(requireDocAfterwordRole$1());
  var _docAppendixRole = _interopRequireDefault(requireDocAppendixRole$1());
  var _docBacklinkRole = _interopRequireDefault(requireDocBacklinkRole$1());
  var _docBiblioentryRole = _interopRequireDefault(requireDocBiblioentryRole$1());
  var _docBibliographyRole = _interopRequireDefault(requireDocBibliographyRole$1());
  var _docBibliorefRole = _interopRequireDefault(requireDocBibliorefRole$1());
  var _docChapterRole = _interopRequireDefault(requireDocChapterRole$1());
  var _docColophonRole = _interopRequireDefault(requireDocColophonRole$1());
  var _docConclusionRole = _interopRequireDefault(requireDocConclusionRole$1());
  var _docCoverRole = _interopRequireDefault(requireDocCoverRole$1());
  var _docCreditRole = _interopRequireDefault(requireDocCreditRole$1());
  var _docCreditsRole = _interopRequireDefault(requireDocCreditsRole$1());
  var _docDedicationRole = _interopRequireDefault(requireDocDedicationRole$1());
  var _docEndnoteRole = _interopRequireDefault(requireDocEndnoteRole$1());
  var _docEndnotesRole = _interopRequireDefault(requireDocEndnotesRole$1());
  var _docEpigraphRole = _interopRequireDefault(requireDocEpigraphRole$1());
  var _docEpilogueRole = _interopRequireDefault(requireDocEpilogueRole$1());
  var _docErrataRole = _interopRequireDefault(requireDocErrataRole$1());
  var _docExampleRole = _interopRequireDefault(requireDocExampleRole$1());
  var _docFootnoteRole = _interopRequireDefault(requireDocFootnoteRole$1());
  var _docForewordRole = _interopRequireDefault(requireDocForewordRole$1());
  var _docGlossaryRole = _interopRequireDefault(requireDocGlossaryRole$1());
  var _docGlossrefRole = _interopRequireDefault(requireDocGlossrefRole$1());
  var _docIndexRole = _interopRequireDefault(requireDocIndexRole$1());
  var _docIntroductionRole = _interopRequireDefault(requireDocIntroductionRole$1());
  var _docNoterefRole = _interopRequireDefault(requireDocNoterefRole$1());
  var _docNoticeRole = _interopRequireDefault(requireDocNoticeRole$1());
  var _docPagebreakRole = _interopRequireDefault(requireDocPagebreakRole$1());
  var _docPagelistRole = _interopRequireDefault(requireDocPagelistRole$1());
  var _docPartRole = _interopRequireDefault(requireDocPartRole$1());
  var _docPrefaceRole = _interopRequireDefault(requireDocPrefaceRole$1());
  var _docPrologueRole = _interopRequireDefault(requireDocPrologueRole$1());
  var _docPullquoteRole = _interopRequireDefault(requireDocPullquoteRole$1());
  var _docQnaRole = _interopRequireDefault(requireDocQnaRole$1());
  var _docSubtitleRole = _interopRequireDefault(requireDocSubtitleRole$1());
  var _docTipRole = _interopRequireDefault(requireDocTipRole$1());
  var _docTocRole = _interopRequireDefault(requireDocTocRole$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaDpubRoles2 = [["doc-abstract", _docAbstractRole.default], ["doc-acknowledgments", _docAcknowledgmentsRole.default], ["doc-afterword", _docAfterwordRole.default], ["doc-appendix", _docAppendixRole.default], ["doc-backlink", _docBacklinkRole.default], ["doc-biblioentry", _docBiblioentryRole.default], ["doc-bibliography", _docBibliographyRole.default], ["doc-biblioref", _docBibliorefRole.default], ["doc-chapter", _docChapterRole.default], ["doc-colophon", _docColophonRole.default], ["doc-conclusion", _docConclusionRole.default], ["doc-cover", _docCoverRole.default], ["doc-credit", _docCreditRole.default], ["doc-credits", _docCreditsRole.default], ["doc-dedication", _docDedicationRole.default], ["doc-endnote", _docEndnoteRole.default], ["doc-endnotes", _docEndnotesRole.default], ["doc-epigraph", _docEpigraphRole.default], ["doc-epilogue", _docEpilogueRole.default], ["doc-errata", _docErrataRole.default], ["doc-example", _docExampleRole.default], ["doc-footnote", _docFootnoteRole.default], ["doc-foreword", _docForewordRole.default], ["doc-glossary", _docGlossaryRole.default], ["doc-glossref", _docGlossrefRole.default], ["doc-index", _docIndexRole.default], ["doc-introduction", _docIntroductionRole.default], ["doc-noteref", _docNoterefRole.default], ["doc-notice", _docNoticeRole.default], ["doc-pagebreak", _docPagebreakRole.default], ["doc-pagelist", _docPagelistRole.default], ["doc-part", _docPartRole.default], ["doc-preface", _docPrefaceRole.default], ["doc-prologue", _docPrologueRole.default], ["doc-pullquote", _docPullquoteRole.default], ["doc-qna", _docQnaRole.default], ["doc-subtitle", _docSubtitleRole.default], ["doc-tip", _docTipRole.default], ["doc-toc", _docTocRole.default]];
  var _default = ariaDpubRoles2;
  ariaDpubRoles$1.default = _default;
  return ariaDpubRoles$1;
}
var ariaGraphicsRoles$1 = {};
var graphicsDocumentRole$1 = {};
var hasRequiredGraphicsDocumentRole$1;
function requireGraphicsDocumentRole$1() {
  if (hasRequiredGraphicsDocumentRole$1) return graphicsDocumentRole$1;
  hasRequiredGraphicsDocumentRole$1 = 1;
  Object.defineProperty(graphicsDocumentRole$1, "__esModule", {
    value: true
  });
  graphicsDocumentRole$1.default = void 0;
  var graphicsDocumentRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      module: "GRAPHICS",
      concept: {
        name: "graphics-object"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "img"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "article"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "document"]]
  };
  var _default = graphicsDocumentRole2;
  graphicsDocumentRole$1.default = _default;
  return graphicsDocumentRole$1;
}
var graphicsObjectRole$1 = {};
var hasRequiredGraphicsObjectRole$1;
function requireGraphicsObjectRole$1() {
  if (hasRequiredGraphicsObjectRole$1) return graphicsObjectRole$1;
  hasRequiredGraphicsObjectRole$1 = 1;
  Object.defineProperty(graphicsObjectRole$1, "__esModule", {
    value: true
  });
  graphicsObjectRole$1.default = void 0;
  var graphicsObjectRole2 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      module: "GRAPHICS",
      concept: {
        name: "graphics-document"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "group"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "img"
      }
    }, {
      module: "GRAPHICS",
      concept: {
        name: "graphics-symbol"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "group"]]
  };
  var _default = graphicsObjectRole2;
  graphicsObjectRole$1.default = _default;
  return graphicsObjectRole$1;
}
var graphicsSymbolRole$1 = {};
var hasRequiredGraphicsSymbolRole$1;
function requireGraphicsSymbolRole$1() {
  if (hasRequiredGraphicsSymbolRole$1) return graphicsSymbolRole$1;
  hasRequiredGraphicsSymbolRole$1 = 1;
  Object.defineProperty(graphicsSymbolRole$1, "__esModule", {
    value: true
  });
  graphicsSymbolRole$1.default = void 0;
  var graphicsSymbolRole2 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "img"]]
  };
  var _default = graphicsSymbolRole2;
  graphicsSymbolRole$1.default = _default;
  return graphicsSymbolRole$1;
}
var hasRequiredAriaGraphicsRoles$1;
function requireAriaGraphicsRoles$1() {
  if (hasRequiredAriaGraphicsRoles$1) return ariaGraphicsRoles$1;
  hasRequiredAriaGraphicsRoles$1 = 1;
  Object.defineProperty(ariaGraphicsRoles$1, "__esModule", {
    value: true
  });
  ariaGraphicsRoles$1.default = void 0;
  var _graphicsDocumentRole = _interopRequireDefault(requireGraphicsDocumentRole$1());
  var _graphicsObjectRole = _interopRequireDefault(requireGraphicsObjectRole$1());
  var _graphicsSymbolRole = _interopRequireDefault(requireGraphicsSymbolRole$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaGraphicsRoles2 = [["graphics-document", _graphicsDocumentRole.default], ["graphics-object", _graphicsObjectRole.default], ["graphics-symbol", _graphicsSymbolRole.default]];
  var _default = ariaGraphicsRoles2;
  ariaGraphicsRoles$1.default = _default;
  return ariaGraphicsRoles$1;
}
var hasRequiredRolesMap$1;
function requireRolesMap$1() {
  if (hasRequiredRolesMap$1) return rolesMap$1;
  hasRequiredRolesMap$1 = 1;
  Object.defineProperty(rolesMap$1, "__esModule", {
    value: true
  });
  rolesMap$1.default = void 0;
  var _ariaAbstractRoles = _interopRequireDefault(requireAriaAbstractRoles$1());
  var _ariaLiteralRoles = _interopRequireDefault(requireAriaLiteralRoles$1());
  var _ariaDpubRoles = _interopRequireDefault(requireAriaDpubRoles$1());
  var _ariaGraphicsRoles = _interopRequireDefault(requireAriaGraphicsRoles$1());
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length) return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var roles = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
  roles.forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), roleDefinition = _ref2[1];
    var _iterator = _createForOfIteratorHelper(roleDefinition.superClass), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var superClassIter = _step.value;
        var _iterator2 = _createForOfIteratorHelper(superClassIter), _step2;
        try {
          var _loop = function _loop2() {
            var superClassName = _step2.value;
            var superClassRoleTuple = roles.find(function(_ref3) {
              var _ref4 = _slicedToArray(_ref3, 1), name = _ref4[0];
              return name === superClassName;
            });
            if (superClassRoleTuple) {
              var superClassDefinition = superClassRoleTuple[1];
              for (var _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
                var prop = _Object$keys[_i2];
                if (
                  // $FlowIssue Accessing the hasOwnProperty on the Object prototype is fine.
                  !Object.prototype.hasOwnProperty.call(roleDefinition.props, prop)
                ) {
                  Object.assign(roleDefinition.props, _defineProperty2({}, prop, superClassDefinition.props[prop]));
                }
              }
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  var rolesMap2 = {
    entries: function entries() {
      return roles;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator3 = _createForOfIteratorHelper(roles), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], values = _step3$value[1];
          fn.call(thisArg, values, key, roles);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    },
    get: function get2(key) {
      var item = roles.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!rolesMap2.get(key);
    },
    keys: function keys() {
      return roles.map(function(_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1), key = _ref6[0];
        return key;
      });
    },
    values: function values() {
      return roles.map(function(_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2), values2 = _ref8[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(rolesMap2, rolesMap2.entries());
  rolesMap$1.default = _default;
  return rolesMap$1;
}
var elementRoleMap$1 = {};
var isArguments$1;
var hasRequiredIsArguments$1;
function requireIsArguments$1() {
  if (hasRequiredIsArguments$1) return isArguments$1;
  hasRequiredIsArguments$1 = 1;
  var toStr2 = Object.prototype.toString;
  isArguments$1 = function isArguments2(value) {
    var str = toStr2.call(value);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) {
      isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr2.call(value.callee) === "[object Function]";
    }
    return isArgs;
  };
  return isArguments$1;
}
var implementation$4;
var hasRequiredImplementation$4;
function requireImplementation$4() {
  if (hasRequiredImplementation$4) return implementation$4;
  hasRequiredImplementation$4 = 1;
  var keysShim;
  if (!Object.keys) {
    var has = Object.prototype.hasOwnProperty;
    var toStr2 = Object.prototype.toString;
    var isArgs = requireIsArguments$1();
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
    var hasProtoEnumBug = isEnumerable.call(function() {
    }, "prototype");
    var dontEnums = [
      "toString",
      "toLocaleString",
      "valueOf",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "constructor"
    ];
    var equalsConstructorPrototype = function(o2) {
      var ctor = o2.constructor;
      return ctor && ctor.prototype === o2;
    };
    var excludedKeys = {
      $applicationCache: true,
      $console: true,
      $external: true,
      $frame: true,
      $frameElement: true,
      $frames: true,
      $innerHeight: true,
      $innerWidth: true,
      $onmozfullscreenchange: true,
      $onmozfullscreenerror: true,
      $outerHeight: true,
      $outerWidth: true,
      $pageXOffset: true,
      $pageYOffset: true,
      $parent: true,
      $scrollLeft: true,
      $scrollTop: true,
      $scrollX: true,
      $scrollY: true,
      $self: true,
      $webkitIndexedDB: true,
      $webkitStorageInfo: true,
      $window: true
    };
    var hasAutomationEqualityBug = (function() {
      if (typeof window === "undefined") {
        return false;
      }
      for (var k in window) {
        try {
          if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
            try {
              equalsConstructorPrototype(window[k]);
            } catch (e2) {
              return true;
            }
          }
        } catch (e2) {
          return true;
        }
      }
      return false;
    })();
    var equalsConstructorPrototypeIfNotBuggy = function(o2) {
      if (typeof window === "undefined" || !hasAutomationEqualityBug) {
        return equalsConstructorPrototype(o2);
      }
      try {
        return equalsConstructorPrototype(o2);
      } catch (e2) {
        return false;
      }
    };
    keysShim = function keys(object) {
      var isObject2 = object !== null && typeof object === "object";
      var isFunction = toStr2.call(object) === "[object Function]";
      var isArguments2 = isArgs(object);
      var isString2 = isObject2 && toStr2.call(object) === "[object String]";
      var theKeys = [];
      if (!isObject2 && !isFunction && !isArguments2) {
        throw new TypeError("Object.keys called on a non-object");
      }
      var skipProto = hasProtoEnumBug && isFunction;
      if (isString2 && object.length > 0 && !has.call(object, 0)) {
        for (var i2 = 0; i2 < object.length; ++i2) {
          theKeys.push(String(i2));
        }
      }
      if (isArguments2 && object.length > 0) {
        for (var j = 0; j < object.length; ++j) {
          theKeys.push(String(j));
        }
      } else {
        for (var name in object) {
          if (!(skipProto && name === "prototype") && has.call(object, name)) {
            theKeys.push(String(name));
          }
        }
      }
      if (hasDontEnumBug) {
        var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
        for (var k = 0; k < dontEnums.length; ++k) {
          if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
            theKeys.push(dontEnums[k]);
          }
        }
      }
      return theKeys;
    };
  }
  implementation$4 = keysShim;
  return implementation$4;
}
var objectKeys;
var hasRequiredObjectKeys;
function requireObjectKeys() {
  if (hasRequiredObjectKeys) return objectKeys;
  hasRequiredObjectKeys = 1;
  var slice = Array.prototype.slice;
  var isArgs = requireIsArguments$1();
  var origKeys = Object.keys;
  var keysShim = origKeys ? function keys(o2) {
    return origKeys(o2);
  } : requireImplementation$4();
  var originalKeys = Object.keys;
  keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
      var keysWorksWithArguments = (function() {
        var args = Object.keys(arguments);
        return args && args.length === arguments.length;
      })(1, 2);
      if (!keysWorksWithArguments) {
        Object.keys = function keys(object) {
          if (isArgs(object)) {
            return originalKeys(slice.call(object));
          }
          return originalKeys(object);
        };
      }
    } else {
      Object.keys = keysShim;
    }
    return Object.keys || keysShim;
  };
  objectKeys = keysShim;
  return objectKeys;
}
var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty) return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var $defineProperty = Object.defineProperty || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e2) {
      $defineProperty = false;
    }
  }
  esDefineProperty = $defineProperty;
  return esDefineProperty;
}
var syntax;
var hasRequiredSyntax;
function requireSyntax() {
  if (hasRequiredSyntax) return syntax;
  hasRequiredSyntax = 1;
  syntax = SyntaxError;
  return syntax;
}
var type$2;
var hasRequiredType;
function requireType() {
  if (hasRequiredType) return type$2;
  hasRequiredType = 1;
  type$2 = TypeError;
  return type$2;
}
var gOPD;
var hasRequiredGOPD;
function requireGOPD() {
  if (hasRequiredGOPD) return gOPD;
  hasRequiredGOPD = 1;
  gOPD = Object.getOwnPropertyDescriptor;
  return gOPD;
}
var gopd;
var hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd) return gopd;
  hasRequiredGopd = 1;
  var $gOPD = /* @__PURE__ */ requireGOPD();
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e2) {
      $gOPD = null;
    }
  }
  gopd = $gOPD;
  return gopd;
}
var defineDataProperty;
var hasRequiredDefineDataProperty;
function requireDefineDataProperty() {
  if (hasRequiredDefineDataProperty) return defineDataProperty;
  hasRequiredDefineDataProperty = 1;
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var $SyntaxError = /* @__PURE__ */ requireSyntax();
  var $TypeError = /* @__PURE__ */ requireType();
  var gopd2 = /* @__PURE__ */ requireGopd();
  defineDataProperty = function defineDataProperty2(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd2 && gopd2(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
  return defineDataProperty;
}
var hasPropertyDescriptors_1;
var hasRequiredHasPropertyDescriptors;
function requireHasPropertyDescriptors() {
  if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
  hasRequiredHasPropertyDescriptors = 1;
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e2) {
      return true;
    }
  };
  hasPropertyDescriptors_1 = hasPropertyDescriptors;
  return hasPropertyDescriptors_1;
}
var defineProperties_1;
var hasRequiredDefineProperties;
function requireDefineProperties() {
  if (hasRequiredDefineProperties) return defineProperties_1;
  hasRequiredDefineProperties = 1;
  var keys = requireObjectKeys();
  var hasSymbols2 = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
  var toStr2 = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var defineDataProperty2 = /* @__PURE__ */ requireDefineDataProperty();
  var isFunction = function(fn) {
    return typeof fn === "function" && toStr2.call(fn) === "[object Function]";
  };
  var supportsDescriptors = /* @__PURE__ */ requireHasPropertyDescriptors()();
  var defineProperty = function(object, name, value, predicate) {
    if (name in object) {
      if (predicate === true) {
        if (object[name] === value) {
          return;
        }
      } else if (!isFunction(predicate) || !predicate()) {
        return;
      }
    }
    if (supportsDescriptors) {
      defineDataProperty2(object, name, value, true);
    } else {
      defineDataProperty2(object, name, value);
    }
  };
  var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map);
    if (hasSymbols2) {
      props = concat.call(props, Object.getOwnPropertySymbols(map));
    }
    for (var i2 = 0; i2 < props.length; i2 += 1) {
      defineProperty(object, props[i2], map[props[i2]], predicates[props[i2]]);
    }
  };
  defineProperties.supportsDescriptors = !!supportsDescriptors;
  defineProperties_1 = defineProperties;
  return defineProperties_1;
}
var callBind = { exports: {} };
var esObjectAtoms;
var hasRequiredEsObjectAtoms;
function requireEsObjectAtoms() {
  if (hasRequiredEsObjectAtoms) return esObjectAtoms;
  hasRequiredEsObjectAtoms = 1;
  esObjectAtoms = Object;
  return esObjectAtoms;
}
var esErrors;
var hasRequiredEsErrors;
function requireEsErrors() {
  if (hasRequiredEsErrors) return esErrors;
  hasRequiredEsErrors = 1;
  esErrors = Error;
  return esErrors;
}
var _eval;
var hasRequired_eval;
function require_eval() {
  if (hasRequired_eval) return _eval;
  hasRequired_eval = 1;
  _eval = EvalError;
  return _eval;
}
var range;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange) return range;
  hasRequiredRange = 1;
  range = RangeError;
  return range;
}
var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef) return ref;
  hasRequiredRef = 1;
  ref = ReferenceError;
  return ref;
}
var uri;
var hasRequiredUri;
function requireUri() {
  if (hasRequiredUri) return uri;
  hasRequiredUri = 1;
  uri = URIError;
  return uri;
}
var abs;
var hasRequiredAbs;
function requireAbs() {
  if (hasRequiredAbs) return abs;
  hasRequiredAbs = 1;
  abs = Math.abs;
  return abs;
}
var floor;
var hasRequiredFloor;
function requireFloor() {
  if (hasRequiredFloor) return floor;
  hasRequiredFloor = 1;
  floor = Math.floor;
  return floor;
}
var max;
var hasRequiredMax;
function requireMax() {
  if (hasRequiredMax) return max;
  hasRequiredMax = 1;
  max = Math.max;
  return max;
}
var min;
var hasRequiredMin;
function requireMin() {
  if (hasRequiredMin) return min;
  hasRequiredMin = 1;
  min = Math.min;
  return min;
}
var pow;
var hasRequiredPow;
function requirePow() {
  if (hasRequiredPow) return pow;
  hasRequiredPow = 1;
  pow = Math.pow;
  return pow;
}
var round;
var hasRequiredRound;
function requireRound() {
  if (hasRequiredRound) return round;
  hasRequiredRound = 1;
  round = Math.round;
  return round;
}
var _isNaN;
var hasRequired_isNaN;
function require_isNaN() {
  if (hasRequired_isNaN) return _isNaN;
  hasRequired_isNaN = 1;
  _isNaN = Number.isNaN || function isNaN2(a) {
    return a !== a;
  };
  return _isNaN;
}
var sign;
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign) return sign;
  hasRequiredSign = 1;
  var $isNaN = /* @__PURE__ */ require_isNaN();
  sign = function sign2(number) {
    if ($isNaN(number) || number === 0) {
      return number;
    }
    return number < 0 ? -1 : 1;
  };
  return sign;
}
var shams$1;
var hasRequiredShams$1;
function requireShams$1() {
  if (hasRequiredShams$1) return shams$1;
  hasRequiredShams$1 = 1;
  shams$1 = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (var _ in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = (
        /** @type {PropertyDescriptor} */
        Object.getOwnPropertyDescriptor(obj, sym)
      );
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return shams$1;
}
var hasSymbols;
var hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols) return hasSymbols;
  hasRequiredHasSymbols = 1;
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = requireShams$1();
  hasSymbols = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  return hasSymbols;
}
var Reflect_getPrototypeOf;
var hasRequiredReflect_getPrototypeOf;
function requireReflect_getPrototypeOf() {
  if (hasRequiredReflect_getPrototypeOf) return Reflect_getPrototypeOf;
  hasRequiredReflect_getPrototypeOf = 1;
  Reflect_getPrototypeOf = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  return Reflect_getPrototypeOf;
}
var Object_getPrototypeOf;
var hasRequiredObject_getPrototypeOf;
function requireObject_getPrototypeOf() {
  if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;
  hasRequiredObject_getPrototypeOf = 1;
  var $Object = /* @__PURE__ */ requireEsObjectAtoms();
  Object_getPrototypeOf = $Object.getPrototypeOf || null;
  return Object_getPrototypeOf;
}
var implementation$3;
var hasRequiredImplementation$3;
function requireImplementation$3() {
  if (hasRequiredImplementation$3) return implementation$3;
  hasRequiredImplementation$3 = 1;
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr2 = Object.prototype.toString;
  var max2 = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a, b) {
    var arr = [];
    for (var i2 = 0; i2 < a.length; i2 += 1) {
      arr[i2] = a[i2];
    }
    for (var j = 0; j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset) {
    var arr = [];
    for (var i2 = offset, j = 0; i2 < arrLike.length; i2 += 1, j += 1) {
      arr[j] = arrLike[i2];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i2 = 0; i2 < arr.length; i2 += 1) {
      str += arr[i2];
      if (i2 + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  implementation$3 = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr2.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(
          this,
          concatty(args, arguments)
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(
        that,
        concatty(args, arguments)
      );
    };
    var boundLength = max2(0, target.length - args.length);
    var boundArgs = [];
    for (var i2 = 0; i2 < boundLength; i2++) {
      boundArgs[i2] = "$" + i2;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return implementation$3;
}
var functionBind;
var hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind) return functionBind;
  hasRequiredFunctionBind = 1;
  var implementation2 = requireImplementation$3();
  functionBind = Function.prototype.bind || implementation2;
  return functionBind;
}
var functionCall;
var hasRequiredFunctionCall;
function requireFunctionCall() {
  if (hasRequiredFunctionCall) return functionCall;
  hasRequiredFunctionCall = 1;
  functionCall = Function.prototype.call;
  return functionCall;
}
var functionApply;
var hasRequiredFunctionApply;
function requireFunctionApply() {
  if (hasRequiredFunctionApply) return functionApply;
  hasRequiredFunctionApply = 1;
  functionApply = Function.prototype.apply;
  return functionApply;
}
var reflectApply;
var hasRequiredReflectApply;
function requireReflectApply() {
  if (hasRequiredReflectApply) return reflectApply;
  hasRequiredReflectApply = 1;
  reflectApply = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  return reflectApply;
}
var actualApply;
var hasRequiredActualApply;
function requireActualApply() {
  if (hasRequiredActualApply) return actualApply;
  hasRequiredActualApply = 1;
  var bind = requireFunctionBind();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var $reflectApply = requireReflectApply();
  actualApply = $reflectApply || bind.call($call, $apply);
  return actualApply;
}
var callBindApplyHelpers;
var hasRequiredCallBindApplyHelpers;
function requireCallBindApplyHelpers() {
  if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;
  hasRequiredCallBindApplyHelpers = 1;
  var bind = requireFunctionBind();
  var $TypeError = /* @__PURE__ */ requireType();
  var $call = requireFunctionCall();
  var $actualApply = requireActualApply();
  callBindApplyHelpers = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== "function") {
      throw new $TypeError("a function is required");
    }
    return $actualApply(bind, $call, args);
  };
  return callBindApplyHelpers;
}
var get;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get;
  hasRequiredGet = 1;
  var callBind2 = requireCallBindApplyHelpers();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var hasProtoAccessor;
  try {
    hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
    [].__proto__ === Array.prototype;
  } catch (e2) {
    if (!e2 || typeof e2 !== "object" || !("code" in e2) || e2.code !== "ERR_PROTO_ACCESS") {
      throw e2;
    }
  }
  var desc = !!hasProtoAccessor && gOPD2 && gOPD2(
    Object.prototype,
    /** @type {keyof typeof Object.prototype} */
    "__proto__"
  );
  var $Object = Object;
  var $getPrototypeOf = $Object.getPrototypeOf;
  get = desc && typeof desc.get === "function" ? callBind2([desc.get]) : typeof $getPrototypeOf === "function" ? (
    /** @type {import('./get')} */
    function getDunder(value) {
      return $getPrototypeOf(value == null ? value : $Object(value));
    }
  ) : false;
  return get;
}
var getProto;
var hasRequiredGetProto;
function requireGetProto() {
  if (hasRequiredGetProto) return getProto;
  hasRequiredGetProto = 1;
  var reflectGetProto = requireReflect_getPrototypeOf();
  var originalGetProto = requireObject_getPrototypeOf();
  var getDunderProto = /* @__PURE__ */ requireGet();
  getProto = reflectGetProto ? function getProto2(O) {
    return reflectGetProto(O);
  } : originalGetProto ? function getProto2(O) {
    if (!O || typeof O !== "object" && typeof O !== "function") {
      throw new TypeError("getProto: not an object");
    }
    return originalGetProto(O);
  } : getDunderProto ? function getProto2(O) {
    return getDunderProto(O);
  } : null;
  return getProto;
}
var hasown;
var hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown) return hasown;
  hasRequiredHasown = 1;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = requireFunctionBind();
  hasown = bind.call(call, $hasOwn);
  return hasown;
}
var getIntrinsic;
var hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic) return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var undefined$1;
  var $Object = /* @__PURE__ */ requireEsObjectAtoms();
  var $Error = /* @__PURE__ */ requireEsErrors();
  var $EvalError = /* @__PURE__ */ require_eval();
  var $RangeError = /* @__PURE__ */ requireRange();
  var $ReferenceError = /* @__PURE__ */ requireRef();
  var $SyntaxError = /* @__PURE__ */ requireSyntax();
  var $TypeError = /* @__PURE__ */ requireType();
  var $URIError = /* @__PURE__ */ requireUri();
  var abs2 = /* @__PURE__ */ requireAbs();
  var floor2 = /* @__PURE__ */ requireFloor();
  var max2 = /* @__PURE__ */ requireMax();
  var min2 = /* @__PURE__ */ requireMin();
  var pow2 = /* @__PURE__ */ requirePow();
  var round2 = /* @__PURE__ */ requireRound();
  var sign2 = /* @__PURE__ */ requireSign();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e2) {
    }
  };
  var $gOPD = /* @__PURE__ */ requireGopd();
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? (function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  })() : throwTypeError;
  var hasSymbols2 = requireHasSymbols()();
  var getProto2 = requireGetProto();
  var $ObjectGPO = requireObject_getPrototypeOf();
  var $ReflectGPO = requireReflect_getPrototypeOf();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto2 ? undefined$1 : getProto2(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols2 && getProto2 ? getProto2([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float16Array%": typeof Float16Array === "undefined" ? undefined$1 : Float16Array,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols2 && getProto2 ? getProto2(getProto2([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": $Object,
    "%Object.getOwnPropertyDescriptor%": $gOPD,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols2 && getProto2 ? getProto2(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet,
    "%Function.prototype.call%": $call,
    "%Function.prototype.apply%": $apply,
    "%Object.defineProperty%": $defineProperty,
    "%Object.getPrototypeOf%": $ObjectGPO,
    "%Math.abs%": abs2,
    "%Math.floor%": floor2,
    "%Math.max%": max2,
    "%Math.min%": min2,
    "%Math.pow%": pow2,
    "%Math.round%": round2,
    "%Math.sign%": sign2,
    "%Reflect.getPrototypeOf%": $ReflectGPO
  };
  if (getProto2) {
    try {
      null.error;
    } catch (e2) {
      var errorProto = getProto2(getProto2(e2));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto2) {
        value = getProto2(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = requireFunctionBind();
  var hasOwn = /* @__PURE__ */ requireHasown();
  var $concat = bind.call($call, Array.prototype.concat);
  var $spliceApply = bind.call($apply, Array.prototype.splice);
  var $replace = bind.call($call, String.prototype.replace);
  var $strSlice = bind.call($call, String.prototype.slice);
  var $exec = bind.call($call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  getIntrinsic = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
      var part = parts[i2];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return void undefined$1;
        }
        if ($gOPD && i2 + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  return getIntrinsic;
}
var setFunctionLength;
var hasRequiredSetFunctionLength;
function requireSetFunctionLength() {
  if (hasRequiredSetFunctionLength) return setFunctionLength;
  hasRequiredSetFunctionLength = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var define = /* @__PURE__ */ requireDefineDataProperty();
  var hasDescriptors = /* @__PURE__ */ requireHasPropertyDescriptors()();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var $TypeError = /* @__PURE__ */ requireType();
  var $floor = GetIntrinsic("%Math.floor%");
  setFunctionLength = function setFunctionLength2(fn, length) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD2) {
      var desc = gOPD2(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length
        );
      }
    }
    return fn;
  };
  return setFunctionLength;
}
var applyBind;
var hasRequiredApplyBind;
function requireApplyBind() {
  if (hasRequiredApplyBind) return applyBind;
  hasRequiredApplyBind = 1;
  var bind = requireFunctionBind();
  var $apply = requireFunctionApply();
  var actualApply2 = requireActualApply();
  applyBind = function applyBind2() {
    return actualApply2(bind, $apply, arguments);
  };
  return applyBind;
}
var hasRequiredCallBind;
function requireCallBind() {
  if (hasRequiredCallBind) return callBind.exports;
  hasRequiredCallBind = 1;
  (function(module2) {
    var setFunctionLength2 = /* @__PURE__ */ requireSetFunctionLength();
    var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
    var callBindBasic = requireCallBindApplyHelpers();
    var applyBind2 = requireApplyBind();
    module2.exports = function callBind2(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength2(
        func,
        1 + (adjustedLength > 0 ? adjustedLength : 0),
        true
      );
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind2 });
    } else {
      module2.exports.apply = applyBind2;
    }
  })(callBind);
  return callBind.exports;
}
var callBound$1;
var hasRequiredCallBound$1;
function requireCallBound$1() {
  if (hasRequiredCallBound$1) return callBound$1;
  hasRequiredCallBound$1 = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var callBindBasic = requireCallBindApplyHelpers();
  var $indexOf = callBindBasic([GetIntrinsic("%String.prototype.indexOf%")]);
  callBound$1 = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = (
      /** @type {(this: unknown, ...args: unknown[]) => unknown} */
      GetIntrinsic(name, !!allowMissing)
    );
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBindBasic(
        /** @type {const} */
        [intrinsic]
      );
    }
    return intrinsic;
  };
  return callBound$1;
}
var implementation$2;
var hasRequiredImplementation$2;
function requireImplementation$2() {
  if (hasRequiredImplementation$2) return implementation$2;
  hasRequiredImplementation$2 = 1;
  var objectKeys2 = requireObjectKeys();
  var hasSymbols2 = requireShams$1()();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $Object = /* @__PURE__ */ requireEsObjectAtoms();
  var $push = callBound2("Array.prototype.push");
  var $propIsEnumerable = callBound2("Object.prototype.propertyIsEnumerable");
  var originalGetSymbols = hasSymbols2 ? $Object.getOwnPropertySymbols : null;
  implementation$2 = function assign(target, source1) {
    if (target == null) {
      throw new TypeError("target must be an object");
    }
    var to = $Object(target);
    if (arguments.length === 1) {
      return to;
    }
    for (var s2 = 1; s2 < arguments.length; ++s2) {
      var from = $Object(arguments[s2]);
      var keys = objectKeys2(from);
      var getSymbols = hasSymbols2 && ($Object.getOwnPropertySymbols || originalGetSymbols);
      if (getSymbols) {
        var syms = getSymbols(from);
        for (var j = 0; j < syms.length; ++j) {
          var key = syms[j];
          if ($propIsEnumerable(from, key)) {
            $push(keys, key);
          }
        }
      }
      for (var i2 = 0; i2 < keys.length; ++i2) {
        var nextKey = keys[i2];
        if ($propIsEnumerable(from, nextKey)) {
          var propValue = from[nextKey];
          to[nextKey] = propValue;
        }
      }
    }
    return to;
  };
  return implementation$2;
}
var polyfill$2;
var hasRequiredPolyfill$2;
function requirePolyfill$2() {
  if (hasRequiredPolyfill$2) return polyfill$2;
  hasRequiredPolyfill$2 = 1;
  var implementation2 = requireImplementation$2();
  var lacksProperEnumerationOrder = function() {
    if (!Object.assign) {
      return false;
    }
    var str = "abcdefghijklmnopqrst";
    var letters = str.split("");
    var map = {};
    for (var i2 = 0; i2 < letters.length; ++i2) {
      map[letters[i2]] = letters[i2];
    }
    var obj = Object.assign({}, map);
    var actual = "";
    for (var k in obj) {
      actual += k;
    }
    return str !== actual;
  };
  var assignHasPendingExceptions = function() {
    if (!Object.assign || !Object.preventExtensions) {
      return false;
    }
    var thrower = Object.preventExtensions({ 1: 2 });
    try {
      Object.assign(thrower, "xy");
    } catch (e2) {
      return thrower[1] === "y";
    }
    return false;
  };
  polyfill$2 = function getPolyfill() {
    if (!Object.assign) {
      return implementation2;
    }
    if (lacksProperEnumerationOrder()) {
      return implementation2;
    }
    if (assignHasPendingExceptions()) {
      return implementation2;
    }
    return Object.assign;
  };
  return polyfill$2;
}
var shim$2;
var hasRequiredShim$2;
function requireShim$2() {
  if (hasRequiredShim$2) return shim$2;
  hasRequiredShim$2 = 1;
  var define = requireDefineProperties();
  var getPolyfill = requirePolyfill$2();
  shim$2 = function shimAssign() {
    var polyfill2 = getPolyfill();
    define(
      Object,
      { assign: polyfill2 },
      { assign: function() {
        return Object.assign !== polyfill2;
      } }
    );
    return polyfill2;
  };
  return shim$2;
}
var object_assign;
var hasRequiredObject_assign;
function requireObject_assign() {
  if (hasRequiredObject_assign) return object_assign;
  hasRequiredObject_assign = 1;
  var defineProperties = requireDefineProperties();
  var callBind2 = requireCallBind();
  var implementation2 = requireImplementation$2();
  var getPolyfill = requirePolyfill$2();
  var shim2 = requireShim$2();
  var polyfill2 = callBind2.apply(getPolyfill());
  var bound = function assign(target, source1) {
    return polyfill2(Object, arguments);
  };
  defineProperties(bound, {
    getPolyfill,
    implementation: implementation2,
    shim: shim2
  });
  object_assign = bound;
  return object_assign;
}
var callBound;
var hasRequiredCallBound;
function requireCallBound() {
  if (hasRequiredCallBound) return callBound;
  hasRequiredCallBound = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var callBind2 = requireCallBind();
  var $indexOf = callBind2(GetIntrinsic("String.prototype.indexOf"));
  callBound = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind2(intrinsic);
    }
    return intrinsic;
  };
  return callBound;
}
var functionsHaveNames_1;
var hasRequiredFunctionsHaveNames;
function requireFunctionsHaveNames() {
  if (hasRequiredFunctionsHaveNames) return functionsHaveNames_1;
  hasRequiredFunctionsHaveNames = 1;
  var functionsHaveNames = function functionsHaveNames2() {
    return typeof function f() {
    }.name === "string";
  };
  var gOPD2 = Object.getOwnPropertyDescriptor;
  if (gOPD2) {
    try {
      gOPD2([], "length");
    } catch (e2) {
      gOPD2 = null;
    }
  }
  functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
    if (!functionsHaveNames() || !gOPD2) {
      return false;
    }
    var desc = gOPD2(function() {
    }, "name");
    return !!desc && !!desc.configurable;
  };
  var $bind = Function.prototype.bind;
  functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
    return functionsHaveNames() && typeof $bind === "function" && function f() {
    }.bind().name !== "";
  };
  functionsHaveNames_1 = functionsHaveNames;
  return functionsHaveNames_1;
}
var setFunctionName;
var hasRequiredSetFunctionName;
function requireSetFunctionName() {
  if (hasRequiredSetFunctionName) return setFunctionName;
  hasRequiredSetFunctionName = 1;
  var define = /* @__PURE__ */ requireDefineDataProperty();
  var hasDescriptors = /* @__PURE__ */ requireHasPropertyDescriptors()();
  var functionsHaveConfigurableNames = requireFunctionsHaveNames().functionsHaveConfigurableNames();
  var $TypeError = /* @__PURE__ */ requireType();
  setFunctionName = function setFunctionName2(fn, name) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    if (!loose || functionsHaveConfigurableNames) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "name",
          name,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "name",
          name
        );
      }
    }
    return fn;
  };
  return setFunctionName;
}
var implementation$1;
var hasRequiredImplementation$1;
function requireImplementation$1() {
  if (hasRequiredImplementation$1) return implementation$1;
  hasRequiredImplementation$1 = 1;
  var setFunctionName2 = requireSetFunctionName();
  var $TypeError = /* @__PURE__ */ requireType();
  var $Object = Object;
  implementation$1 = setFunctionName2(function flags() {
    if (this == null || this !== $Object(this)) {
      throw new $TypeError("RegExp.prototype.flags getter called on non-object");
    }
    var result = "";
    if (this.hasIndices) {
      result += "d";
    }
    if (this.global) {
      result += "g";
    }
    if (this.ignoreCase) {
      result += "i";
    }
    if (this.multiline) {
      result += "m";
    }
    if (this.dotAll) {
      result += "s";
    }
    if (this.unicode) {
      result += "u";
    }
    if (this.unicodeSets) {
      result += "v";
    }
    if (this.sticky) {
      result += "y";
    }
    return result;
  }, "get flags", true);
  return implementation$1;
}
var polyfill$1;
var hasRequiredPolyfill$1;
function requirePolyfill$1() {
  if (hasRequiredPolyfill$1) return polyfill$1;
  hasRequiredPolyfill$1 = 1;
  var implementation2 = requireImplementation$1();
  var supportsDescriptors = requireDefineProperties().supportsDescriptors;
  var $gOPD = Object.getOwnPropertyDescriptor;
  polyfill$1 = function getPolyfill() {
    if (supportsDescriptors && /a/mig.flags === "gim") {
      var descriptor = $gOPD(RegExp.prototype, "flags");
      if (descriptor && typeof descriptor.get === "function" && "dotAll" in RegExp.prototype && "hasIndices" in RegExp.prototype) {
        var calls = "";
        var o2 = {};
        Object.defineProperty(o2, "hasIndices", {
          get: function() {
            calls += "d";
          }
        });
        Object.defineProperty(o2, "sticky", {
          get: function() {
            calls += "y";
          }
        });
        descriptor.get.call(o2);
        if (calls === "dy") {
          return descriptor.get;
        }
      }
    }
    return implementation2;
  };
  return polyfill$1;
}
var shim$1;
var hasRequiredShim$1;
function requireShim$1() {
  if (hasRequiredShim$1) return shim$1;
  hasRequiredShim$1 = 1;
  var supportsDescriptors = requireDefineProperties().supportsDescriptors;
  var getPolyfill = requirePolyfill$1();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var defineProperty = Object.defineProperty;
  var $TypeError = /* @__PURE__ */ requireEsErrors();
  var getProto2 = requireGetProto();
  var regex = /a/;
  shim$1 = function shimFlags() {
    if (!supportsDescriptors || !getProto2) {
      throw new $TypeError("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
    }
    var polyfill2 = getPolyfill();
    var proto = getProto2(regex);
    var descriptor = gOPD2(proto, "flags");
    if (!descriptor || descriptor.get !== polyfill2) {
      defineProperty(proto, "flags", {
        configurable: true,
        enumerable: false,
        get: polyfill2
      });
    }
    return polyfill2;
  };
  return shim$1;
}
var regexp_prototype_flags;
var hasRequiredRegexp_prototype_flags;
function requireRegexp_prototype_flags() {
  if (hasRequiredRegexp_prototype_flags) return regexp_prototype_flags;
  hasRequiredRegexp_prototype_flags = 1;
  var define = requireDefineProperties();
  var callBind2 = requireCallBind();
  var implementation2 = requireImplementation$1();
  var getPolyfill = requirePolyfill$1();
  var shim2 = requireShim$1();
  var flagsBound = callBind2(getPolyfill());
  define(flagsBound, {
    getPolyfill,
    implementation: implementation2,
    shim: shim2
  });
  regexp_prototype_flags = flagsBound;
  return regexp_prototype_flags;
}
var esGetIterator = { exports: {} };
var shams;
var hasRequiredShams;
function requireShams() {
  if (hasRequiredShams) return shams;
  hasRequiredShams = 1;
  var hasSymbols2 = requireShams$1();
  shams = function hasToStringTagShams() {
    return hasSymbols2() && !!Symbol.toStringTag;
  };
  return shams;
}
var isArguments;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments) return isArguments;
  hasRequiredIsArguments = 1;
  var hasToStringTag = requireShams()();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $toString = callBound2("Object.prototype.toString");
  var isStandardArguments = function isArguments2(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
      return false;
    }
    return $toString(value) === "[object Arguments]";
  };
  var isLegacyArguments = function isArguments2(value) {
    if (isStandardArguments(value)) {
      return true;
    }
    return value !== null && typeof value === "object" && "length" in value && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && "callee" in value && $toString(value.callee) === "[object Function]";
  };
  var supportsStandardArguments = (function() {
    return isStandardArguments(arguments);
  })();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  return isArguments;
}
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var objectInspect;
var hasRequiredObjectInspect;
function requireObjectInspect() {
  if (hasRequiredObjectInspect) return objectInspect;
  hasRequiredObjectInspect = 1;
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  }
  var utilInspect = require$$0;
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol2(inspectCustom) ? inspectCustom : null;
  var quotes = {
    __proto__: null,
    "double": '"',
    single: "'"
  };
  var quoteREs = {
    __proto__: null,
    "double": /(["\\])/g,
    single: /(['\\])/g
  };
  objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has(opts, "quoteStyle") && !has(quotes, opts.quoteStyle)) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    }
    if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
      var name = nameOf(obj);
      var keys = arrObjKeys(obj, inspect);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol2(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement2(obj)) {
      var s2 = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i2 = 0; i2 < attrs.length; i2++) {
        s2 += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
      }
      s2 += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s2 += "...";
      }
      s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s2;
    }
    if (isArray(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap2(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet2(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value) {
          setParts.push(inspect(value, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString2(obj)) {
      return markBoxed(inspect(String(obj)));
    }
    if (typeof window !== "undefined" && obj === window) {
      return "{ [object Window] }";
    }
    if (typeof globalThis !== "undefined" && obj === globalThis || typeof commonjsGlobal !== "undefined" && obj === commonjsGlobal) {
      return "{ [object globalThis] }";
    }
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys = arrObjKeys(obj, inspect);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr2(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  function wrapQuotes(s2, defaultStyle, opts) {
    var style = opts.quoteStyle || defaultStyle;
    var quoteChar = quotes[style];
    return quoteChar + s2 + quoteChar;
  }
  function quote(s2) {
    return $replace.call(String(s2), /"/g, "&quot;");
  }
  function canTrustToString(obj) {
    return !toStringTag || !(typeof obj === "object" && (toStringTag in obj || typeof obj[toStringTag] !== "undefined"));
  }
  function isArray(obj) {
    return toStr2(obj) === "[object Array]" && canTrustToString(obj);
  }
  function isDate(obj) {
    return toStr2(obj) === "[object Date]" && canTrustToString(obj);
  }
  function isRegExp(obj) {
    return toStr2(obj) === "[object RegExp]" && canTrustToString(obj);
  }
  function isError(obj) {
    return toStr2(obj) === "[object Error]" && canTrustToString(obj);
  }
  function isString2(obj) {
    return toStr2(obj) === "[object String]" && canTrustToString(obj);
  }
  function isNumber(obj) {
    return toStr2(obj) === "[object Number]" && canTrustToString(obj);
  }
  function isBoolean(obj) {
    return toStr2(obj) === "[object Boolean]" && canTrustToString(obj);
  }
  function isSymbol2(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e2) {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e2) {
    }
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
  function has(obj, key) {
    return hasOwn.call(obj, key);
  }
  function toStr2(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f) {
    if (f.name) {
      return f.name;
    }
    var m2 = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m2) {
      return m2[1];
    }
    return null;
  }
  function indexOf(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }
    for (var i2 = 0, l = xs.length; i2 < l; i2++) {
      if (xs[i2] === x) {
        return i2;
      }
    }
    return -1;
  }
  function isMap2(x) {
    if (!mapSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      mapSize.call(x);
      try {
        setSize.call(x);
      } catch (s2) {
        return true;
      }
      return x instanceof Map;
    } catch (e2) {
    }
    return false;
  }
  function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x, weakMapHas);
      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s2) {
        return true;
      }
      return x instanceof WeakMap;
    } catch (e2) {
    }
    return false;
  }
  function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x);
      return true;
    } catch (e2) {
    }
    return false;
  }
  function isSet2(x) {
    if (!setSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      setSize.call(x);
      try {
        mapSize.call(x);
      } catch (m2) {
        return true;
      }
      return x instanceof Set;
    } catch (e2) {
    }
    return false;
  }
  function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x, weakSetHas);
      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s2) {
        return true;
      }
      return x instanceof WeakSet;
    } catch (e2) {
    }
    return false;
  }
  function isElement2(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
      return true;
    }
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var quoteRE = quoteREs[opts.quoteStyle || "single"];
    quoteRE.lastIndex = 0;
    var s2 = $replace.call($replace.call(str, quoteRE, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s2, "single", opts);
  }
  function lowbyte(c2) {
    var n2 = c2.charCodeAt(0);
    var x = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n2];
    if (x) {
      return "\\" + x;
    }
    return "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type2) {
    return type2 + " { ? }";
  }
  function collectionOf(type2, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type2 + " (" + size + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs) {
    for (var i2 = 0; i2 < xs.length; i2++) {
      if (indexOf(xs[i2], "\n") >= 0) {
        return false;
      }
    }
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") {
      baseIndent = "	";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  }
  function indentedJoin(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  }
  function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i2 = 0; i2 < obj.length; i2++) {
        xs[i2] = has(obj, i2) ? inspect(obj[i2], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0; k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
      } else {
        xs.push(key + ": " + inspect(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0; j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  }
  return objectInspect;
}
var sideChannelList;
var hasRequiredSideChannelList;
function requireSideChannelList() {
  if (hasRequiredSideChannelList) return sideChannelList;
  hasRequiredSideChannelList = 1;
  var inspect = /* @__PURE__ */ requireObjectInspect();
  var $TypeError = /* @__PURE__ */ requireType();
  var listGetNode = function(list, key, isDelete) {
    var prev = list;
    var curr;
    for (; (curr = prev.next) != null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        if (!isDelete) {
          curr.next = /** @type {NonNullable<typeof list.next>} */
          list.next;
          list.next = curr;
        }
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    if (!objects) {
      return void 0;
    }
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value;
    } else {
      objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
      {
        // eslint-disable-line no-param-reassign, no-extra-parens
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    if (!objects) {
      return false;
    }
    return !!listGetNode(objects, key);
  };
  var listDelete = function(objects, key) {
    if (objects) {
      return listGetNode(objects, key, true);
    }
  };
  sideChannelList = function getSideChannelList() {
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      "delete": function(key) {
        var root = $o && $o.next;
        var deletedNode = listDelete($o, key);
        if (deletedNode && root && root === deletedNode) {
          $o = void 0;
        }
        return !!deletedNode;
      },
      get: function(key) {
        return listGet($o, key);
      },
      has: function(key) {
        return listHas($o, key);
      },
      set: function(key, value) {
        if (!$o) {
          $o = {
            next: void 0
          };
        }
        listSet(
          /** @type {NonNullable<typeof $o>} */
          $o,
          key,
          value
        );
      }
    };
    return channel;
  };
  return sideChannelList;
}
var sideChannelMap;
var hasRequiredSideChannelMap;
function requireSideChannelMap() {
  if (hasRequiredSideChannelMap) return sideChannelMap;
  hasRequiredSideChannelMap = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var inspect = /* @__PURE__ */ requireObjectInspect();
  var $TypeError = /* @__PURE__ */ requireType();
  var $Map = GetIntrinsic("%Map%", true);
  var $mapGet = callBound2("Map.prototype.get", true);
  var $mapSet = callBound2("Map.prototype.set", true);
  var $mapHas = callBound2("Map.prototype.has", true);
  var $mapDelete = callBound2("Map.prototype.delete", true);
  var $mapSize = callBound2("Map.prototype.size", true);
  sideChannelMap = !!$Map && /** @type {Exclude<import('.'), false>} */
  function getSideChannelMap() {
    var $m;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      "delete": function(key) {
        if ($m) {
          var result = $mapDelete($m, key);
          if ($mapSize($m) === 0) {
            $m = void 0;
          }
          return result;
        }
        return false;
      },
      get: function(key) {
        if ($m) {
          return $mapGet($m, key);
        }
      },
      has: function(key) {
        if ($m) {
          return $mapHas($m, key);
        }
        return false;
      },
      set: function(key, value) {
        if (!$m) {
          $m = new $Map();
        }
        $mapSet($m, key, value);
      }
    };
    return channel;
  };
  return sideChannelMap;
}
var sideChannelWeakmap;
var hasRequiredSideChannelWeakmap;
function requireSideChannelWeakmap() {
  if (hasRequiredSideChannelWeakmap) return sideChannelWeakmap;
  hasRequiredSideChannelWeakmap = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var inspect = /* @__PURE__ */ requireObjectInspect();
  var getSideChannelMap = requireSideChannelMap();
  var $TypeError = /* @__PURE__ */ requireType();
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $weakMapGet = callBound2("WeakMap.prototype.get", true);
  var $weakMapSet = callBound2("WeakMap.prototype.set", true);
  var $weakMapHas = callBound2("WeakMap.prototype.has", true);
  var $weakMapDelete = callBound2("WeakMap.prototype.delete", true);
  sideChannelWeakmap = $WeakMap ? (
    /** @type {Exclude<import('.'), false>} */
    function getSideChannelWeakMap() {
      var $wm;
      var $m;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapDelete($wm, key);
            }
          } else if (getSideChannelMap) {
            if ($m) {
              return $m["delete"](key);
            }
          }
          return false;
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          }
          return $m && $m.get(key);
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          }
          return !!$m && $m.has(key);
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if (getSideChannelMap) {
            if (!$m) {
              $m = getSideChannelMap();
            }
            $m.set(key, value);
          }
        }
      };
      return channel;
    }
  ) : getSideChannelMap;
  return sideChannelWeakmap;
}
var sideChannel;
var hasRequiredSideChannel;
function requireSideChannel() {
  if (hasRequiredSideChannel) return sideChannel;
  hasRequiredSideChannel = 1;
  var $TypeError = /* @__PURE__ */ requireType();
  var inspect = /* @__PURE__ */ requireObjectInspect();
  var getSideChannelList = requireSideChannelList();
  var getSideChannelMap = requireSideChannelMap();
  var getSideChannelWeakMap = requireSideChannelWeakmap();
  var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
  sideChannel = function getSideChannel() {
    var $channelData;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      "delete": function(key) {
        return !!$channelData && $channelData["delete"](key);
      },
      get: function(key) {
        return $channelData && $channelData.get(key);
      },
      has: function(key) {
        return !!$channelData && $channelData.has(key);
      },
      set: function(key, value) {
        if (!$channelData) {
          $channelData = makeChannel();
        }
        $channelData.set(key, value);
      }
    };
    return channel;
  };
  return sideChannel;
}
var internalSlot;
var hasRequiredInternalSlot;
function requireInternalSlot() {
  if (hasRequiredInternalSlot) return internalSlot;
  hasRequiredInternalSlot = 1;
  var hasOwn = /* @__PURE__ */ requireHasown();
  var channel = requireSideChannel()();
  var $TypeError = /* @__PURE__ */ requireType();
  var SLOT = {
    assert: function(O, slot) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new $TypeError("`O` is not an object");
      }
      if (typeof slot !== "string") {
        throw new $TypeError("`slot` must be a string");
      }
      channel.assert(O);
      if (!SLOT.has(O, slot)) {
        throw new $TypeError("`" + slot + "` is not present on `O`");
      }
    },
    get: function(O, slot) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new $TypeError("`O` is not an object");
      }
      if (typeof slot !== "string") {
        throw new $TypeError("`slot` must be a string");
      }
      var slots = channel.get(O);
      return slots && slots[
        /** @type {SaltedInternalSlot} */
        "$" + slot
      ];
    },
    has: function(O, slot) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new $TypeError("`O` is not an object");
      }
      if (typeof slot !== "string") {
        throw new $TypeError("`slot` must be a string");
      }
      var slots = channel.get(O);
      return !!slots && hasOwn(
        slots,
        /** @type {SaltedInternalSlot} */
        "$" + slot
      );
    },
    set: function(O, slot, V) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new $TypeError("`O` is not an object");
      }
      if (typeof slot !== "string") {
        throw new $TypeError("`slot` must be a string");
      }
      var slots = channel.get(O);
      if (!slots) {
        slots = {};
        channel.set(O, slots);
      }
      slots[
        /** @type {SaltedInternalSlot} */
        "$" + slot
      ] = V;
    }
  };
  if (Object.freeze) {
    Object.freeze(SLOT);
  }
  internalSlot = SLOT;
  return internalSlot;
}
var stopIterationIterator;
var hasRequiredStopIterationIterator;
function requireStopIterationIterator() {
  if (hasRequiredStopIterationIterator) return stopIterationIterator;
  hasRequiredStopIterationIterator = 1;
  var SLOT = requireInternalSlot();
  var $SyntaxError = /* @__PURE__ */ requireSyntax();
  var $StopIteration = typeof StopIteration === "object" ? StopIteration : null;
  stopIterationIterator = function getStopIterationIterator(origIterator) {
    if (!$StopIteration) {
      throw new $SyntaxError("this environment lacks StopIteration");
    }
    SLOT.set(origIterator, "[[Done]]", false);
    var siIterator = {
      next: (
        /** @type {() => IteratorResult<T>} */
        function next() {
          var iterator = (
            /** @type {typeof origIterator} */
            SLOT.get(this, "[[Iterator]]")
          );
          var done = !!SLOT.get(iterator, "[[Done]]");
          try {
            return {
              done,
              // eslint-disable-next-line no-extra-parens
              value: done ? void 0 : (
                /** @type {T} */
                iterator.next()
              )
            };
          } catch (e2) {
            SLOT.set(iterator, "[[Done]]", true);
            if (e2 !== $StopIteration) {
              throw e2;
            }
            return {
              done: true,
              value: void 0
            };
          }
        }
      )
    };
    SLOT.set(siIterator, "[[Iterator]]", origIterator);
    return siIterator;
  };
  return stopIterationIterator;
}
var isarray;
var hasRequiredIsarray;
function requireIsarray() {
  if (hasRequiredIsarray) return isarray;
  hasRequiredIsarray = 1;
  var toString = {}.toString;
  isarray = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
  };
  return isarray;
}
var isString;
var hasRequiredIsString;
function requireIsString() {
  if (hasRequiredIsString) return isString;
  hasRequiredIsString = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $strValueOf = callBound2("String.prototype.valueOf");
  var tryStringObject = function tryStringObject2(value) {
    try {
      $strValueOf(value);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var $toString = callBound2("Object.prototype.toString");
  var strClass = "[object String]";
  var hasToStringTag = requireShams()();
  isString = function isString2(value) {
    if (typeof value === "string") {
      return true;
    }
    if (!value || typeof value !== "object") {
      return false;
    }
    return hasToStringTag ? tryStringObject(value) : $toString(value) === strClass;
  };
  return isString;
}
var isMap;
var hasRequiredIsMap;
function requireIsMap() {
  if (hasRequiredIsMap) return isMap;
  hasRequiredIsMap = 1;
  var $Map = typeof Map === "function" && Map.prototype ? Map : null;
  var $Set = typeof Set === "function" && Set.prototype ? Set : null;
  var exported;
  if (!$Map) {
    exported = function isMap2(x) {
      return false;
    };
  }
  var $mapHas = $Map ? Map.prototype.has : null;
  var $setHas = $Set ? Set.prototype.has : null;
  if (!exported && !$mapHas) {
    exported = function isMap2(x) {
      return false;
    };
  }
  isMap = exported || function isMap2(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    try {
      $mapHas.call(x);
      if ($setHas) {
        try {
          $setHas.call(x);
        } catch (e2) {
          return true;
        }
      }
      return x instanceof $Map;
    } catch (e2) {
    }
    return false;
  };
  return isMap;
}
var isSet;
var hasRequiredIsSet;
function requireIsSet() {
  if (hasRequiredIsSet) return isSet;
  hasRequiredIsSet = 1;
  var $Map = typeof Map === "function" && Map.prototype ? Map : null;
  var $Set = typeof Set === "function" && Set.prototype ? Set : null;
  var exported;
  if (!$Set) {
    exported = function isSet2(x) {
      return false;
    };
  }
  var $mapHas = $Map ? Map.prototype.has : null;
  var $setHas = $Set ? Set.prototype.has : null;
  if (!exported && !$setHas) {
    exported = function isSet2(x) {
      return false;
    };
  }
  isSet = exported || function isSet2(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    try {
      $setHas.call(x);
      if ($mapHas) {
        try {
          $mapHas.call(x);
        } catch (e2) {
          return true;
        }
      }
      return x instanceof $Set;
    } catch (e2) {
    }
    return false;
  };
  return isSet;
}
var hasRequiredEsGetIterator;
function requireEsGetIterator() {
  if (hasRequiredEsGetIterator) return esGetIterator.exports;
  hasRequiredEsGetIterator = 1;
  var isArguments2 = /* @__PURE__ */ requireIsArguments();
  var getStopIterationIterator = /* @__PURE__ */ requireStopIterationIterator();
  if (requireHasSymbols()() || requireShams$1()()) {
    var $iterator = Symbol.iterator;
    esGetIterator.exports = function getIterator(iterable) {
      if (iterable != null && typeof iterable[$iterator] !== "undefined") {
        return iterable[$iterator]();
      }
      if (isArguments2(iterable)) {
        return Array.prototype[$iterator].call(iterable);
      }
    };
  } else {
    var isArray = requireIsarray();
    var isString2 = requireIsString();
    var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
    var $Map = GetIntrinsic("%Map%", true);
    var $Set = GetIntrinsic("%Set%", true);
    var callBound2 = requireCallBound();
    var $arrayPush = callBound2("Array.prototype.push");
    var $charCodeAt = callBound2("String.prototype.charCodeAt");
    var $stringSlice = callBound2("String.prototype.slice");
    var advanceStringIndex = function advanceStringIndex2(S, index2) {
      var length = S.length;
      if (index2 + 1 >= length) {
        return index2 + 1;
      }
      var first = $charCodeAt(S, index2);
      if (first < 55296 || first > 56319) {
        return index2 + 1;
      }
      var second = $charCodeAt(S, index2 + 1);
      if (second < 56320 || second > 57343) {
        return index2 + 1;
      }
      return index2 + 2;
    };
    var getArrayIterator = function getArrayIterator2(arraylike) {
      var i2 = 0;
      return {
        next: function next() {
          var done = i2 >= arraylike.length;
          var value;
          if (!done) {
            value = arraylike[i2];
            i2 += 1;
          }
          return {
            done,
            value
          };
        }
      };
    };
    var getNonCollectionIterator = function getNonCollectionIterator2(iterable, noPrimordialCollections) {
      if (isArray(iterable) || isArguments2(iterable)) {
        return getArrayIterator(iterable);
      }
      if (isString2(iterable)) {
        var i2 = 0;
        return {
          next: function next() {
            var nextIndex = advanceStringIndex(iterable, i2);
            var value = $stringSlice(iterable, i2, nextIndex);
            i2 = nextIndex;
            return {
              done: nextIndex > iterable.length,
              value
            };
          }
        };
      }
      if (noPrimordialCollections && typeof iterable["_es6-shim iterator_"] !== "undefined") {
        return iterable["_es6-shim iterator_"]();
      }
    };
    if (!$Map && !$Set) {
      esGetIterator.exports = function getIterator(iterable) {
        if (iterable != null) {
          return getNonCollectionIterator(iterable, true);
        }
      };
    } else {
      var isMap2 = /* @__PURE__ */ requireIsMap();
      var isSet2 = /* @__PURE__ */ requireIsSet();
      var $mapForEach = callBound2("Map.prototype.forEach", true);
      var $setForEach = callBound2("Set.prototype.forEach", true);
      if (typeof process === "undefined" || !process.versions || !process.versions.node) {
        var $mapIterator = callBound2("Map.prototype.iterator", true);
        var $setIterator = callBound2("Set.prototype.iterator", true);
      }
      var $mapAtAtIterator = callBound2("Map.prototype.@@iterator", true) || callBound2("Map.prototype._es6-shim iterator_", true);
      var $setAtAtIterator = callBound2("Set.prototype.@@iterator", true) || callBound2("Set.prototype._es6-shim iterator_", true);
      var getCollectionIterator = function getCollectionIterator2(iterable) {
        if (isMap2(iterable)) {
          if ($mapIterator) {
            return getStopIterationIterator($mapIterator(iterable));
          }
          if ($mapAtAtIterator) {
            return $mapAtAtIterator(iterable);
          }
          if ($mapForEach) {
            var entries = [];
            $mapForEach(iterable, function(v, k) {
              $arrayPush(entries, [k, v]);
            });
            return getArrayIterator(entries);
          }
        }
        if (isSet2(iterable)) {
          if ($setIterator) {
            return getStopIterationIterator($setIterator(iterable));
          }
          if ($setAtAtIterator) {
            return $setAtAtIterator(iterable);
          }
          if ($setForEach) {
            var values = [];
            $setForEach(iterable, function(v) {
              $arrayPush(values, v);
            });
            return getArrayIterator(values);
          }
        }
      };
      esGetIterator.exports = function getIterator(iterable) {
        return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
      };
    }
  }
  return esGetIterator.exports;
}
var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;
  var numberIsNaN = function(value) {
    return value !== value;
  };
  implementation = function is(a, b) {
    if (a === 0 && b === 0) {
      return 1 / a === 1 / b;
    }
    if (a === b) {
      return true;
    }
    if (numberIsNaN(a) && numberIsNaN(b)) {
      return true;
    }
    return false;
  };
  return implementation;
}
var polyfill;
var hasRequiredPolyfill;
function requirePolyfill() {
  if (hasRequiredPolyfill) return polyfill;
  hasRequiredPolyfill = 1;
  var implementation2 = requireImplementation();
  polyfill = function getPolyfill() {
    return typeof Object.is === "function" ? Object.is : implementation2;
  };
  return polyfill;
}
var shim;
var hasRequiredShim;
function requireShim() {
  if (hasRequiredShim) return shim;
  hasRequiredShim = 1;
  var getPolyfill = requirePolyfill();
  var define = requireDefineProperties();
  shim = function shimObjectIs() {
    var polyfill2 = getPolyfill();
    define(Object, { is: polyfill2 }, {
      is: function testObjectIs() {
        return Object.is !== polyfill2;
      }
    });
    return polyfill2;
  };
  return shim;
}
var objectIs;
var hasRequiredObjectIs;
function requireObjectIs() {
  if (hasRequiredObjectIs) return objectIs;
  hasRequiredObjectIs = 1;
  var define = requireDefineProperties();
  var callBind2 = requireCallBind();
  var implementation2 = requireImplementation();
  var getPolyfill = requirePolyfill();
  var shim2 = requireShim();
  var polyfill2 = callBind2(getPolyfill(), Object);
  define(polyfill2, {
    getPolyfill,
    implementation: implementation2,
    shim: shim2
  });
  objectIs = polyfill2;
  return objectIs;
}
var isArrayBuffer;
var hasRequiredIsArrayBuffer;
function requireIsArrayBuffer() {
  if (hasRequiredIsArrayBuffer) return isArrayBuffer;
  hasRequiredIsArrayBuffer = 1;
  var callBind2 = requireCallBind();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true);
  var $byteLength = callBound2("ArrayBuffer.prototype.byteLength", true);
  var $toString = callBound2("Object.prototype.toString");
  var abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;
  var $abSlice = !!abSlice && callBind2(abSlice);
  isArrayBuffer = $byteLength || $abSlice ? function isArrayBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    try {
      if ($byteLength) {
        $byteLength(obj);
      } else {
        $abSlice(obj, 0);
      }
      return true;
    } catch (e2) {
      return false;
    }
  } : $ArrayBuffer ? function isArrayBuffer2(obj) {
    return $toString(obj) === "[object ArrayBuffer]";
  } : function isArrayBuffer2(obj) {
    return false;
  };
  return isArrayBuffer;
}
var isDateObject;
var hasRequiredIsDateObject;
function requireIsDateObject() {
  if (hasRequiredIsDateObject) return isDateObject;
  hasRequiredIsDateObject = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var getDay = callBound2("Date.prototype.getDay");
  var tryDateObject = function tryDateGetDayCall(value) {
    try {
      getDay(value);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var toStr2 = callBound2("Object.prototype.toString");
  var dateClass = "[object Date]";
  var hasToStringTag = requireShams()();
  isDateObject = function isDateObject2(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    return hasToStringTag ? tryDateObject(value) : toStr2(value) === dateClass;
  };
  return isDateObject;
}
var isRegex;
var hasRequiredIsRegex;
function requireIsRegex() {
  if (hasRequiredIsRegex) return isRegex;
  hasRequiredIsRegex = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var hasToStringTag = requireShams()();
  var hasOwn = /* @__PURE__ */ requireHasown();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var fn;
  if (hasToStringTag) {
    var $exec = callBound2("RegExp.prototype.exec");
    var isRegexMarker = {};
    var throwRegexMarker = function() {
      throw isRegexMarker;
    };
    var badStringifier = {
      toString: throwRegexMarker,
      valueOf: throwRegexMarker
    };
    if (typeof Symbol.toPrimitive === "symbol") {
      badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    }
    fn = function isRegex2(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      var descriptor = (
        /** @type {NonNullable<typeof gOPD>} */
        gOPD2(
          /** @type {{ lastIndex?: unknown }} */
          value,
          "lastIndex"
        )
      );
      var hasLastIndexDataProperty = descriptor && hasOwn(descriptor, "value");
      if (!hasLastIndexDataProperty) {
        return false;
      }
      try {
        $exec(
          value,
          /** @type {string} */
          /** @type {unknown} */
          badStringifier
        );
      } catch (e2) {
        return e2 === isRegexMarker;
      }
    };
  } else {
    var $toString = callBound2("Object.prototype.toString");
    var regexClass = "[object RegExp]";
    fn = function isRegex2(value) {
      if (!value || typeof value !== "object" && typeof value !== "function") {
        return false;
      }
      return $toString(value) === regexClass;
    };
  }
  isRegex = fn;
  return isRegex;
}
var isSharedArrayBuffer;
var hasRequiredIsSharedArrayBuffer;
function requireIsSharedArrayBuffer() {
  if (hasRequiredIsSharedArrayBuffer) return isSharedArrayBuffer;
  hasRequiredIsSharedArrayBuffer = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $byteLength = callBound2("SharedArrayBuffer.prototype.byteLength", true);
  isSharedArrayBuffer = $byteLength ? function isSharedArrayBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    try {
      $byteLength(obj);
      return true;
    } catch (e2) {
      return false;
    }
  } : function isSharedArrayBuffer2(_obj) {
    return false;
  };
  return isSharedArrayBuffer;
}
var isNumberObject;
var hasRequiredIsNumberObject;
function requireIsNumberObject() {
  if (hasRequiredIsNumberObject) return isNumberObject;
  hasRequiredIsNumberObject = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $numToStr = callBound2("Number.prototype.toString");
  var tryNumberObject = function tryNumberObject2(value) {
    try {
      $numToStr(value);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var $toString = callBound2("Object.prototype.toString");
  var numClass = "[object Number]";
  var hasToStringTag = requireShams()();
  isNumberObject = function isNumberObject2(value) {
    if (typeof value === "number") {
      return true;
    }
    if (!value || typeof value !== "object") {
      return false;
    }
    return hasToStringTag ? tryNumberObject(value) : $toString(value) === numClass;
  };
  return isNumberObject;
}
var isBooleanObject;
var hasRequiredIsBooleanObject;
function requireIsBooleanObject() {
  if (hasRequiredIsBooleanObject) return isBooleanObject;
  hasRequiredIsBooleanObject = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $boolToStr = callBound2("Boolean.prototype.toString");
  var $toString = callBound2("Object.prototype.toString");
  var tryBooleanObject = function booleanBrandCheck(value) {
    try {
      $boolToStr(value);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var boolClass = "[object Boolean]";
  var hasToStringTag = requireShams()();
  isBooleanObject = function isBoolean(value) {
    if (typeof value === "boolean") {
      return true;
    }
    if (value === null || typeof value !== "object") {
      return false;
    }
    return hasToStringTag ? tryBooleanObject(value) : $toString(value) === boolClass;
  };
  return isBooleanObject;
}
var isSymbol = { exports: {} };
var safeRegexTest;
var hasRequiredSafeRegexTest;
function requireSafeRegexTest() {
  if (hasRequiredSafeRegexTest) return safeRegexTest;
  hasRequiredSafeRegexTest = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var isRegex2 = requireIsRegex();
  var $exec = callBound2("RegExp.prototype.exec");
  var $TypeError = /* @__PURE__ */ requireType();
  safeRegexTest = function regexTester(regex) {
    if (!isRegex2(regex)) {
      throw new $TypeError("`regex` must be a RegExp");
    }
    return function test(s2) {
      return $exec(regex, s2) !== null;
    };
  };
  return safeRegexTest;
}
var hasRequiredIsSymbol;
function requireIsSymbol() {
  if (hasRequiredIsSymbol) return isSymbol.exports;
  hasRequiredIsSymbol = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $toString = callBound2("Object.prototype.toString");
  var hasSymbols2 = requireHasSymbols()();
  var safeRegexTest2 = /* @__PURE__ */ requireSafeRegexTest();
  if (hasSymbols2) {
    var $symToStr = callBound2("Symbol.prototype.toString");
    var isSymString = safeRegexTest2(/^Symbol\(.*\)$/);
    var isSymbolObject = function isRealSymbolObject(value) {
      if (typeof value.valueOf() !== "symbol") {
        return false;
      }
      return isSymString($symToStr(value));
    };
    isSymbol.exports = function isSymbol2(value) {
      if (typeof value === "symbol") {
        return true;
      }
      if (!value || typeof value !== "object" || $toString(value) !== "[object Symbol]") {
        return false;
      }
      try {
        return isSymbolObject(value);
      } catch (e2) {
        return false;
      }
    };
  } else {
    isSymbol.exports = function isSymbol2(value) {
      return false;
    };
  }
  return isSymbol.exports;
}
var isBigint = { exports: {} };
var hasBigints;
var hasRequiredHasBigints;
function requireHasBigints() {
  if (hasRequiredHasBigints) return hasBigints;
  hasRequiredHasBigints = 1;
  var $BigInt = typeof BigInt !== "undefined" && BigInt;
  hasBigints = function hasNativeBigInts() {
    return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
  };
  return hasBigints;
}
var hasRequiredIsBigint;
function requireIsBigint() {
  if (hasRequiredIsBigint) return isBigint.exports;
  hasRequiredIsBigint = 1;
  var hasBigInts = requireHasBigints()();
  if (hasBigInts) {
    var bigIntValueOf = BigInt.prototype.valueOf;
    var tryBigInt = function tryBigIntObject(value) {
      try {
        bigIntValueOf.call(value);
        return true;
      } catch (e2) {
      }
      return false;
    };
    isBigint.exports = function isBigInt(value) {
      if (value === null || typeof value === "undefined" || typeof value === "boolean" || typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "function") {
        return false;
      }
      if (typeof value === "bigint") {
        return true;
      }
      return tryBigInt(value);
    };
  } else {
    isBigint.exports = function isBigInt(value) {
      return false;
    };
  }
  return isBigint.exports;
}
var whichBoxedPrimitive;
var hasRequiredWhichBoxedPrimitive;
function requireWhichBoxedPrimitive() {
  if (hasRequiredWhichBoxedPrimitive) return whichBoxedPrimitive;
  hasRequiredWhichBoxedPrimitive = 1;
  var isString2 = requireIsString();
  var isNumber = requireIsNumberObject();
  var isBoolean = requireIsBooleanObject();
  var isSymbol2 = requireIsSymbol();
  var isBigInt = requireIsBigint();
  whichBoxedPrimitive = function whichBoxedPrimitive2(value) {
    if (value == null || typeof value !== "object" && typeof value !== "function") {
      return null;
    }
    if (isString2(value)) {
      return "String";
    }
    if (isNumber(value)) {
      return "Number";
    }
    if (isBoolean(value)) {
      return "Boolean";
    }
    if (isSymbol2(value)) {
      return "Symbol";
    }
    if (isBigInt(value)) {
      return "BigInt";
    }
  };
  return whichBoxedPrimitive;
}
var isWeakmap;
var hasRequiredIsWeakmap;
function requireIsWeakmap() {
  if (hasRequiredIsWeakmap) return isWeakmap;
  hasRequiredIsWeakmap = 1;
  var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
  var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
  var exported;
  if (!$WeakMap) {
    exported = function isWeakMap(x) {
      return false;
    };
  }
  var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
  var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
  if (!exported && !$mapHas) {
    exported = function isWeakMap(x) {
      return false;
    };
  }
  isWeakmap = exported || function isWeakMap(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    try {
      $mapHas.call(x, $mapHas);
      if ($setHas) {
        try {
          $setHas.call(x, $setHas);
        } catch (e2) {
          return true;
        }
      }
      return x instanceof $WeakMap;
    } catch (e2) {
    }
    return false;
  };
  return isWeakmap;
}
var isWeakset = { exports: {} };
var hasRequiredIsWeakset;
function requireIsWeakset() {
  if (hasRequiredIsWeakset) return isWeakset.exports;
  hasRequiredIsWeakset = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $WeakSet = GetIntrinsic("%WeakSet%", true);
  var $setHas = callBound2("WeakSet.prototype.has", true);
  if ($setHas) {
    var $mapHas = callBound2("WeakMap.prototype.has", true);
    isWeakset.exports = function isWeakSet(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $setHas(x, $setHas);
        if ($mapHas) {
          try {
            $mapHas(x, $mapHas);
          } catch (e2) {
            return true;
          }
        }
        return x instanceof $WeakSet;
      } catch (e2) {
      }
      return false;
    };
  } else {
    isWeakset.exports = function isWeakSet(x) {
      return false;
    };
  }
  return isWeakset.exports;
}
var whichCollection;
var hasRequiredWhichCollection;
function requireWhichCollection() {
  if (hasRequiredWhichCollection) return whichCollection;
  hasRequiredWhichCollection = 1;
  var isMap2 = /* @__PURE__ */ requireIsMap();
  var isSet2 = /* @__PURE__ */ requireIsSet();
  var isWeakMap = requireIsWeakmap();
  var isWeakSet = /* @__PURE__ */ requireIsWeakset();
  whichCollection = function whichCollection2(value) {
    if (value && typeof value === "object") {
      if (isMap2(value)) {
        return "Map";
      }
      if (isSet2(value)) {
        return "Set";
      }
      if (isWeakMap(value)) {
        return "WeakMap";
      }
      if (isWeakSet(value)) {
        return "WeakSet";
      }
    }
    return false;
  };
  return whichCollection;
}
var isCallable$1;
var hasRequiredIsCallable;
function requireIsCallable() {
  if (hasRequiredIsCallable) return isCallable$1;
  hasRequiredIsCallable = 1;
  var fnToStr = Function.prototype.toString;
  var reflectApply2 = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply2 === "function" && typeof Object.defineProperty === "function") {
    try {
      badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {};
      reflectApply2(function() {
        throw 42;
      }, null, badArrayLike);
    } catch (_) {
      if (_ !== isCallableMarker) {
        reflectApply2 = null;
      }
    }
  } else {
    reflectApply2 = null;
  }
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
    try {
      var fnStr = fnToStr.call(value);
      return constructorRegex.test(fnStr);
    } catch (e2) {
      return false;
    }
  };
  var tryFunctionObject = function tryFunctionToStr(value) {
    try {
      if (isES6ClassFn(value)) {
        return false;
      }
      fnToStr.call(value);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var toStr2 = Object.prototype.toString;
  var objectClass = "[object Object]";
  var fnClass = "[object Function]";
  var genClass = "[object GeneratorFunction]";
  var ddaClass = "[object HTMLAllCollection]";
  var ddaClass2 = "[object HTML document.all class]";
  var ddaClass3 = "[object HTMLCollection]";
  var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
  var isIE68 = !(0 in [,]);
  var isDDA = function isDocumentDotAll() {
    return false;
  };
  if (typeof document === "object") {
    var all = document.all;
    if (toStr2.call(all) === toStr2.call(document.all)) {
      isDDA = function isDocumentDotAll(value) {
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
          try {
            var str = toStr2.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
          } catch (e2) {
          }
        }
        return false;
      };
    }
  }
  isCallable$1 = reflectApply2 ? function isCallable2(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    try {
      reflectApply2(value, null, badArrayLike);
    } catch (e2) {
      if (e2 !== isCallableMarker) {
        return false;
      }
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
  } : function isCallable2(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    if (hasToStringTag) {
      return tryFunctionObject(value);
    }
    if (isES6ClassFn(value)) {
      return false;
    }
    var strClass = toStr2.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
      return false;
    }
    return tryFunctionObject(value);
  };
  return isCallable$1;
}
var forEach;
var hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach) return forEach;
  hasRequiredForEach = 1;
  var isCallable2 = requireIsCallable();
  var toStr2 = Object.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var forEachArray = function forEachArray2(array, iterator, receiver) {
    for (var i2 = 0, len = array.length; i2 < len; i2++) {
      if (hasOwnProperty.call(array, i2)) {
        if (receiver == null) {
          iterator(array[i2], i2, array);
        } else {
          iterator.call(receiver, array[i2], i2, array);
        }
      }
    }
  };
  var forEachString = function forEachString2(string, iterator, receiver) {
    for (var i2 = 0, len = string.length; i2 < len; i2++) {
      if (receiver == null) {
        iterator(string.charAt(i2), i2, string);
      } else {
        iterator.call(receiver, string.charAt(i2), i2, string);
      }
    }
  };
  var forEachObject = function forEachObject2(object, iterator, receiver) {
    for (var k in object) {
      if (hasOwnProperty.call(object, k)) {
        if (receiver == null) {
          iterator(object[k], k, object);
        } else {
          iterator.call(receiver, object[k], k, object);
        }
      }
    }
  };
  function isArray(x) {
    return toStr2.call(x) === "[object Array]";
  }
  forEach = function forEach2(list, iterator, thisArg) {
    if (!isCallable2(iterator)) {
      throw new TypeError("iterator must be a function");
    }
    var receiver;
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
    if (isArray(list)) {
      forEachArray(list, iterator, receiver);
    } else if (typeof list === "string") {
      forEachString(list, iterator, receiver);
    } else {
      forEachObject(list, iterator, receiver);
    }
  };
  return forEach;
}
var possibleTypedArrayNames;
var hasRequiredPossibleTypedArrayNames;
function requirePossibleTypedArrayNames() {
  if (hasRequiredPossibleTypedArrayNames) return possibleTypedArrayNames;
  hasRequiredPossibleTypedArrayNames = 1;
  possibleTypedArrayNames = [
    "Float16Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
  return possibleTypedArrayNames;
}
var availableTypedArrays;
var hasRequiredAvailableTypedArrays;
function requireAvailableTypedArrays() {
  if (hasRequiredAvailableTypedArrays) return availableTypedArrays;
  hasRequiredAvailableTypedArrays = 1;
  var possibleNames = /* @__PURE__ */ requirePossibleTypedArrayNames();
  var g = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  availableTypedArrays = function availableTypedArrays2() {
    var out = [];
    for (var i2 = 0; i2 < possibleNames.length; i2++) {
      if (typeof g[possibleNames[i2]] === "function") {
        out[out.length] = possibleNames[i2];
      }
    }
    return out;
  };
  return availableTypedArrays;
}
var whichTypedArray;
var hasRequiredWhichTypedArray;
function requireWhichTypedArray() {
  if (hasRequiredWhichTypedArray) return whichTypedArray;
  hasRequiredWhichTypedArray = 1;
  var forEach2 = requireForEach();
  var availableTypedArrays2 = /* @__PURE__ */ requireAvailableTypedArrays();
  var callBind2 = requireCallBind();
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var getProto2 = requireGetProto();
  var $toString = callBound2("Object.prototype.toString");
  var hasToStringTag = requireShams()();
  var g = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  var typedArrays = availableTypedArrays2();
  var $slice = callBound2("String.prototype.slice");
  var $indexOf = callBound2("Array.prototype.indexOf", true) || function indexOf(array, value) {
    for (var i2 = 0; i2 < array.length; i2 += 1) {
      if (array[i2] === value) {
        return i2;
      }
    }
    return -1;
  };
  var cache = { __proto__: null };
  if (hasToStringTag && gOPD2 && getProto2) {
    forEach2(typedArrays, function(typedArray) {
      var arr = new g[typedArray]();
      if (Symbol.toStringTag in arr && getProto2) {
        var proto = getProto2(arr);
        var descriptor = gOPD2(proto, Symbol.toStringTag);
        if (!descriptor && proto) {
          var superProto = getProto2(proto);
          descriptor = gOPD2(superProto, Symbol.toStringTag);
        }
        cache["$" + typedArray] = callBind2(descriptor.get);
      }
    });
  } else {
    forEach2(typedArrays, function(typedArray) {
      var arr = new g[typedArray]();
      var fn = arr.slice || arr.set;
      if (fn) {
        cache[
          /** @type {`$${import('.').TypedArrayName}`} */
          "$" + typedArray
        ] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */
        // @ts-expect-error TODO FIXME
        callBind2(fn);
      }
    });
  }
  var tryTypedArrays = function tryAllTypedArrays(value) {
    var found = false;
    forEach2(
      /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
      cache,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, typedArray) {
        if (!found) {
          try {
            if ("$" + getter(value) === typedArray) {
              found = /** @type {import('.').TypedArrayName} */
              $slice(typedArray, 1);
            }
          } catch (e2) {
          }
        }
      }
    );
    return found;
  };
  var trySlices = function tryAllSlices(value) {
    var found = false;
    forEach2(
      /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
      cache,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, name) {
        if (!found) {
          try {
            getter(value);
            found = /** @type {import('.').TypedArrayName} */
            $slice(name, 1);
          } catch (e2) {
          }
        }
      }
    );
    return found;
  };
  whichTypedArray = function whichTypedArray2(value) {
    if (!value || typeof value !== "object") {
      return false;
    }
    if (!hasToStringTag) {
      var tag = $slice($toString(value), 8, -1);
      if ($indexOf(typedArrays, tag) > -1) {
        return tag;
      }
      if (tag !== "Object") {
        return false;
      }
      return trySlices(value);
    }
    if (!gOPD2) {
      return null;
    }
    return tryTypedArrays(value);
  };
  return whichTypedArray;
}
var arrayBufferByteLength;
var hasRequiredArrayBufferByteLength;
function requireArrayBufferByteLength() {
  if (hasRequiredArrayBufferByteLength) return arrayBufferByteLength;
  hasRequiredArrayBufferByteLength = 1;
  var callBound2 = /* @__PURE__ */ requireCallBound$1();
  var $byteLength = callBound2("ArrayBuffer.prototype.byteLength", true);
  var isArrayBuffer2 = /* @__PURE__ */ requireIsArrayBuffer();
  arrayBufferByteLength = function byteLength(ab) {
    if (!isArrayBuffer2(ab)) {
      return NaN;
    }
    return $byteLength ? $byteLength(ab) : ab.byteLength;
  };
  return arrayBufferByteLength;
}
var deepEqual;
var hasRequiredDeepEqual;
function requireDeepEqual() {
  if (hasRequiredDeepEqual) return deepEqual;
  hasRequiredDeepEqual = 1;
  var assign = requireObject_assign();
  var callBound2 = requireCallBound();
  var flags = requireRegexp_prototype_flags();
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var getIterator = requireEsGetIterator();
  var getSideChannel = requireSideChannel();
  var is = requireObjectIs();
  var isArguments2 = /* @__PURE__ */ requireIsArguments();
  var isArray = requireIsarray();
  var isArrayBuffer2 = /* @__PURE__ */ requireIsArrayBuffer();
  var isDate = /* @__PURE__ */ requireIsDateObject();
  var isRegex2 = requireIsRegex();
  var isSharedArrayBuffer2 = /* @__PURE__ */ requireIsSharedArrayBuffer();
  var objectKeys2 = requireObjectKeys();
  var whichBoxedPrimitive2 = requireWhichBoxedPrimitive();
  var whichCollection2 = /* @__PURE__ */ requireWhichCollection();
  var whichTypedArray2 = /* @__PURE__ */ requireWhichTypedArray();
  var byteLength = /* @__PURE__ */ requireArrayBufferByteLength();
  var sabByteLength = callBound2("SharedArrayBuffer.prototype.byteLength", true);
  var $getTime = callBound2("Date.prototype.getTime");
  var gPO = Object.getPrototypeOf;
  var $objToString = callBound2("Object.prototype.toString");
  var $Set = GetIntrinsic("%Set%", true);
  var $mapHas = callBound2("Map.prototype.has", true);
  var $mapGet = callBound2("Map.prototype.get", true);
  var $mapSize = callBound2("Map.prototype.size", true);
  var $setAdd = callBound2("Set.prototype.add", true);
  var $setDelete = callBound2("Set.prototype.delete", true);
  var $setHas = callBound2("Set.prototype.has", true);
  var $setSize = callBound2("Set.prototype.size", true);
  function setHasEqualElement(set, val1, opts, channel) {
    var i2 = getIterator(set);
    var result;
    while ((result = i2.next()) && !result.done) {
      if (internalDeepEqual(val1, result.value, opts, channel)) {
        $setDelete(set, result.value);
        return true;
      }
    }
    return false;
  }
  function findLooseMatchingPrimitives(prim) {
    if (typeof prim === "undefined") {
      return null;
    }
    if (typeof prim === "object") {
      return void 0;
    }
    if (typeof prim === "symbol") {
      return false;
    }
    if (typeof prim === "string" || typeof prim === "number") {
      return +prim === +prim;
    }
    return true;
  }
  function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    var curB = $mapGet(b, altValue);
    var looseOpts = assign({}, opts, { strict: false });
    if (typeof curB === "undefined" && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
      return false;
    }
    return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
  }
  function setMightHaveLoosePrim(a, b, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    return $setHas(b, altValue) && !$setHas(a, altValue);
  }
  function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
    var i2 = getIterator(set);
    var result;
    var key2;
    while ((result = i2.next()) && !result.done) {
      key2 = result.value;
      if (
        // eslint-disable-next-line no-use-before-define
        internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
      ) {
        $setDelete(set, key2);
        return true;
      }
    }
    return false;
  }
  function internalDeepEqual(actual, expected, options, channel) {
    var opts = options || {};
    if (opts.strict ? is(actual, expected) : actual === expected) {
      return true;
    }
    var actualBoxed = whichBoxedPrimitive2(actual);
    var expectedBoxed = whichBoxedPrimitive2(expected);
    if (actualBoxed !== expectedBoxed) {
      return false;
    }
    if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
      return opts.strict ? is(actual, expected) : actual == expected;
    }
    var hasActual = channel.has(actual);
    var hasExpected = channel.has(expected);
    var sentinel;
    if (hasActual && hasExpected) {
      if (channel.get(actual) === channel.get(expected)) {
        return true;
      }
    } else {
      sentinel = {};
    }
    if (!hasActual) {
      channel.set(actual, sentinel);
    }
    if (!hasExpected) {
      channel.set(expected, sentinel);
    }
    return objEquiv(actual, expected, opts, channel);
  }
  function isBuffer(x) {
    if (!x || typeof x !== "object" || typeof x.length !== "number") {
      return false;
    }
    if (typeof x.copy !== "function" || typeof x.slice !== "function") {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== "number") {
      return false;
    }
    return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
  }
  function setEquiv(a, b, opts, channel) {
    if ($setSize(a) !== $setSize(b)) {
      return false;
    }
    var iA = getIterator(a);
    var iB = getIterator(b);
    var resultA;
    var resultB;
    var set;
    while ((resultA = iA.next()) && !resultA.done) {
      if (resultA.value && typeof resultA.value === "object") {
        if (!set) {
          set = new $Set();
        }
        $setAdd(set, resultA.value);
      } else if (!$setHas(b, resultA.value)) {
        if (opts.strict) {
          return false;
        }
        if (!setMightHaveLoosePrim(a, b, resultA.value)) {
          return false;
        }
        if (!set) {
          set = new $Set();
        }
        $setAdd(set, resultA.value);
      }
    }
    if (set) {
      while ((resultB = iB.next()) && !resultB.done) {
        if (resultB.value && typeof resultB.value === "object") {
          if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {
          return false;
        }
      }
      return $setSize(set) === 0;
    }
    return true;
  }
  function mapEquiv(a, b, opts, channel) {
    if ($mapSize(a) !== $mapSize(b)) {
      return false;
    }
    var iA = getIterator(a);
    var iB = getIterator(b);
    var resultA;
    var resultB;
    var set;
    var key;
    var item1;
    var item2;
    while ((resultA = iA.next()) && !resultA.done) {
      key = resultA.value[0];
      item1 = resultA.value[1];
      if (key && typeof key === "object") {
        if (!set) {
          set = new $Set();
        }
        $setAdd(set, key);
      } else {
        item2 = $mapGet(b, key);
        if (typeof item2 === "undefined" && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts, channel)) {
          if (opts.strict) {
            return false;
          }
          if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
            return false;
          }
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, key);
        }
      }
    }
    if (set) {
      while ((resultB = iB.next()) && !resultB.done) {
        key = resultB.value[0];
        item2 = resultB.value[1];
        if (key && typeof key === "object") {
          if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
            return false;
          }
        } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)) {
          return false;
        }
      }
      return $setSize(set) === 0;
    }
    return true;
  }
  function objEquiv(a, b, opts, channel) {
    var i2, key;
    if (typeof a !== typeof b) {
      return false;
    }
    if (a == null || b == null) {
      return false;
    }
    if ($objToString(a) !== $objToString(b)) {
      return false;
    }
    if (isArguments2(a) !== isArguments2(b)) {
      return false;
    }
    var aIsArray = isArray(a);
    var bIsArray = isArray(b);
    if (aIsArray !== bIsArray) {
      return false;
    }
    var aIsError = a instanceof Error;
    var bIsError = b instanceof Error;
    if (aIsError !== bIsError) {
      return false;
    }
    if (aIsError || bIsError) {
      if (a.name !== b.name || a.message !== b.message) {
        return false;
      }
    }
    var aIsRegex = isRegex2(a);
    var bIsRegex = isRegex2(b);
    if (aIsRegex !== bIsRegex) {
      return false;
    }
    if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
      return false;
    }
    var aIsDate = isDate(a);
    var bIsDate = isDate(b);
    if (aIsDate !== bIsDate) {
      return false;
    }
    if (aIsDate || bIsDate) {
      if ($getTime(a) !== $getTime(b)) {
        return false;
      }
    }
    if (opts.strict && gPO && gPO(a) !== gPO(b)) {
      return false;
    }
    var aWhich = whichTypedArray2(a);
    var bWhich = whichTypedArray2(b);
    if (aWhich !== bWhich) {
      return false;
    }
    if (aWhich || bWhich) {
      if (a.length !== b.length) {
        return false;
      }
      for (i2 = 0; i2 < a.length; i2++) {
        if (a[i2] !== b[i2]) {
          return false;
        }
      }
      return true;
    }
    var aIsBuffer = isBuffer(a);
    var bIsBuffer = isBuffer(b);
    if (aIsBuffer !== bIsBuffer) {
      return false;
    }
    if (aIsBuffer || bIsBuffer) {
      if (a.length !== b.length) {
        return false;
      }
      for (i2 = 0; i2 < a.length; i2++) {
        if (a[i2] !== b[i2]) {
          return false;
        }
      }
      return true;
    }
    var aIsArrayBuffer = isArrayBuffer2(a);
    var bIsArrayBuffer = isArrayBuffer2(b);
    if (aIsArrayBuffer !== bIsArrayBuffer) {
      return false;
    }
    if (aIsArrayBuffer || bIsArrayBuffer) {
      if (byteLength(a) !== byteLength(b)) {
        return false;
      }
      return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
    }
    var aIsSAB = isSharedArrayBuffer2(a);
    var bIsSAB = isSharedArrayBuffer2(b);
    if (aIsSAB !== bIsSAB) {
      return false;
    }
    if (aIsSAB || bIsSAB) {
      if (sabByteLength(a) !== sabByteLength(b)) {
        return false;
      }
      return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
    }
    if (typeof a !== typeof b) {
      return false;
    }
    var ka = objectKeys2(a);
    var kb = objectKeys2(b);
    if (ka.length !== kb.length) {
      return false;
    }
    ka.sort();
    kb.sort();
    for (i2 = ka.length - 1; i2 >= 0; i2--) {
      if (ka[i2] != kb[i2]) {
        return false;
      }
    }
    for (i2 = ka.length - 1; i2 >= 0; i2--) {
      key = ka[i2];
      if (!internalDeepEqual(a[key], b[key], opts, channel)) {
        return false;
      }
    }
    var aCollection = whichCollection2(a);
    var bCollection = whichCollection2(b);
    if (aCollection !== bCollection) {
      return false;
    }
    if (aCollection === "Set" || bCollection === "Set") {
      return setEquiv(a, b, opts, channel);
    }
    if (aCollection === "Map") {
      return mapEquiv(a, b, opts, channel);
    }
    return true;
  }
  deepEqual = function deepEqual2(a, b, opts) {
    return internalDeepEqual(a, b, opts, getSideChannel());
  };
  return deepEqual;
}
var hasRequiredElementRoleMap$1;
function requireElementRoleMap$1() {
  if (hasRequiredElementRoleMap$1) return elementRoleMap$1;
  hasRequiredElementRoleMap$1 = 1;
  Object.defineProperty(elementRoleMap$1, "__esModule", {
    value: true
  });
  elementRoleMap$1.default = void 0;
  var _deepEqual = _interopRequireDefault(requireDeepEqual());
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator$1());
  var _rolesMap = _interopRequireDefault(requireRolesMap$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i3) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i3 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i3 >= o2.length) return { done: true };
          return { done: false, value: o2[i3++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var elementRoles = [];
  var keys = _rolesMap.default.keys();
  for (var i2 = 0; i2 < keys.length; i2++) {
    var key = keys[i2];
    var role = _rolesMap.default.get(key);
    if (role) {
      var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
      for (var k = 0; k < concepts.length; k++) {
        var relation = concepts[k];
        if (relation.module === "HTML") {
          var concept = relation.concept;
          if (concept) {
            (function() {
              var conceptStr = JSON.stringify(concept);
              var elementRoleRelation = elementRoles.find(function(relation2) {
                return JSON.stringify(relation2[0]) === conceptStr;
              });
              var roles = void 0;
              if (elementRoleRelation) {
                roles = elementRoleRelation[1];
              } else {
                roles = [];
              }
              var isUnique = true;
              for (var _i = 0; _i < roles.length; _i++) {
                if (roles[_i] === key) {
                  isUnique = false;
                  break;
                }
              }
              if (isUnique) {
                roles.push(key);
              }
              elementRoles.push([concept, roles]);
            })();
          }
        }
      }
    }
  }
  var elementRoleMap2 = {
    entries: function entries() {
      return elementRoles;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(elementRoles), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, _key, elementRoles);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key2) {
      var item = elementRoles.find(function(tuple) {
        return (0, _deepEqual.default)(key2, tuple[0]);
      });
      return item && item[1];
    },
    has: function has(key2) {
      return !!elementRoleMap2.get(key2);
    },
    keys: function keys2() {
      return elementRoles.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
        return key2;
      });
    },
    values: function values() {
      return elementRoles.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(elementRoleMap2, elementRoleMap2.entries());
  elementRoleMap$1.default = _default;
  return elementRoleMap$1;
}
var roleElementMap$1 = {};
var hasRequiredRoleElementMap$1;
function requireRoleElementMap$1() {
  if (hasRequiredRoleElementMap$1) return roleElementMap$1;
  hasRequiredRoleElementMap$1 = 1;
  Object.defineProperty(roleElementMap$1, "__esModule", {
    value: true
  });
  roleElementMap$1.default = void 0;
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator$1());
  var _rolesMap = _interopRequireDefault(requireRolesMap$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i3) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i3 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i3 >= o2.length) return { done: true };
          return { done: false, value: o2[i3++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var roleElement = [];
  var keys = _rolesMap.default.keys();
  var _loop = function _loop2(i3) {
    var key = keys[i3];
    var role = _rolesMap.default.get(key);
    if (role) {
      var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
      for (var k = 0; k < concepts.length; k++) {
        var relation = concepts[k];
        if (relation.module === "HTML") {
          var concept = relation.concept;
          if (concept) {
            var roleElementRelation = roleElement.find(function(item) {
              return item[0] === key;
            });
            var relationConcepts = void 0;
            if (roleElementRelation) {
              relationConcepts = roleElementRelation[1];
            } else {
              relationConcepts = [];
            }
            relationConcepts.push(concept);
            roleElement.push([key, relationConcepts]);
          }
        }
      }
    }
  };
  for (var i2 = 0; i2 < keys.length; i2++) {
    _loop(i2);
  }
  var roleElementMap2 = {
    entries: function entries() {
      return roleElement;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(roleElement), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, key, roleElement);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key) {
      var item = roleElement.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!roleElementMap2.get(key);
    },
    keys: function keys2() {
      return roleElement.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
        return key;
      });
    },
    values: function values() {
      return roleElement.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(roleElementMap2, roleElementMap2.entries());
  roleElementMap$1.default = _default;
  return roleElementMap$1;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib$1;
  hasRequiredLib$1 = 1;
  Object.defineProperty(lib$1, "__esModule", {
    value: true
  });
  lib$1.roles = lib$1.roleElements = lib$1.elementRoles = lib$1.dom = lib$1.aria = void 0;
  var _ariaPropsMap = _interopRequireDefault(requireAriaPropsMap$1());
  var _domMap = _interopRequireDefault(requireDomMap$1());
  var _rolesMap = _interopRequireDefault(requireRolesMap$1());
  var _elementRoleMap = _interopRequireDefault(requireElementRoleMap$1());
  var _roleElementMap = _interopRequireDefault(requireRoleElementMap$1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var aria = _ariaPropsMap.default;
  lib$1.aria = aria;
  var dom = _domMap.default;
  lib$1.dom = dom;
  var roles = _rolesMap.default;
  lib$1.roles = roles;
  var elementRoles = _elementRoleMap.default;
  lib$1.elementRoles = elementRoles;
  var roleElements = _roleElementMap.default;
  lib$1.roleElements = roleElements;
  return lib$1;
}
var libExports$1 = requireLib$1();
var lzString$1 = { exports: {} };
var hasRequiredLzString;
function requireLzString() {
  if (hasRequiredLzString) return lzString$1.exports;
  hasRequiredLzString = 1;
  (function(module2) {
    var LZString = (function() {
      var f = String.fromCharCode;
      var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
      var baseReverseDic = {};
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {};
          for (var i2 = 0; i2 < alphabet.length; i2++) {
            baseReverseDic[alphabet][alphabet.charAt(i2)] = i2;
          }
        }
        return baseReverseDic[alphabet][character];
      }
      var LZString2 = {
        compressToBase64: function(input2) {
          if (input2 == null) return "";
          var res = LZString2._compress(input2, 6, function(a) {
            return keyStrBase64.charAt(a);
          });
          switch (res.length % 4) {
            // To produce valid Base64
            default:
            // When could this happen ?
            case 0:
              return res;
            case 1:
              return res + "===";
            case 2:
              return res + "==";
            case 3:
              return res + "=";
          }
        },
        decompressFromBase64: function(input2) {
          if (input2 == null) return "";
          if (input2 == "") return null;
          return LZString2._decompress(input2.length, 32, function(index2) {
            return getBaseValue(keyStrBase64, input2.charAt(index2));
          });
        },
        compressToUTF16: function(input2) {
          if (input2 == null) return "";
          return LZString2._compress(input2, 15, function(a) {
            return f(a + 32);
          }) + " ";
        },
        decompressFromUTF16: function(compressed) {
          if (compressed == null) return "";
          if (compressed == "") return null;
          return LZString2._decompress(compressed.length, 16384, function(index2) {
            return compressed.charCodeAt(index2) - 32;
          });
        },
        //compress into uint8array (UCS-2 big endian format)
        compressToUint8Array: function(uncompressed) {
          var compressed = LZString2.compress(uncompressed);
          var buf = new Uint8Array(compressed.length * 2);
          for (var i2 = 0, TotalLen = compressed.length; i2 < TotalLen; i2++) {
            var current_value = compressed.charCodeAt(i2);
            buf[i2 * 2] = current_value >>> 8;
            buf[i2 * 2 + 1] = current_value % 256;
          }
          return buf;
        },
        //decompress from uint8array (UCS-2 big endian format)
        decompressFromUint8Array: function(compressed) {
          if (compressed === null || compressed === void 0) {
            return LZString2.decompress(compressed);
          } else {
            var buf = new Array(compressed.length / 2);
            for (var i2 = 0, TotalLen = buf.length; i2 < TotalLen; i2++) {
              buf[i2] = compressed[i2 * 2] * 256 + compressed[i2 * 2 + 1];
            }
            var result = [];
            buf.forEach(function(c2) {
              result.push(f(c2));
            });
            return LZString2.decompress(result.join(""));
          }
        },
        //compress into a string that is already URI encoded
        compressToEncodedURIComponent: function(input2) {
          if (input2 == null) return "";
          return LZString2._compress(input2, 6, function(a) {
            return keyStrUriSafe.charAt(a);
          });
        },
        //decompress from an output of compressToEncodedURIComponent
        decompressFromEncodedURIComponent: function(input2) {
          if (input2 == null) return "";
          if (input2 == "") return null;
          input2 = input2.replace(/ /g, "+");
          return LZString2._decompress(input2.length, 32, function(index2) {
            return getBaseValue(keyStrUriSafe, input2.charAt(index2));
          });
        },
        compress: function(uncompressed) {
          return LZString2._compress(uncompressed, 16, function(a) {
            return f(a);
          });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null) return "";
          var i2, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii);
            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
              context_dictionary[context_c] = context_dictSize++;
              context_dictionaryToCreate[context_c] = true;
            }
            context_wc = context_w + context_c;
            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
              context_w = context_wc;
            } else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i2 = 0; i2 < context_numBits; i2++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i2 = 0; i2 < 8; i2++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i2 = 0; i2 < context_numBits; i2++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i2 = 0; i2 < 16; i2++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i2 = 0; i2 < context_numBits; i2++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              context_dictionary[context_wc] = context_dictSize++;
              context_w = String(context_c);
            }
          }
          if (context_w !== "") {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i2 = 0; i2 < context_numBits; i2++) {
                  context_data_val = context_data_val << 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                }
                value = context_w.charCodeAt(0);
                for (i2 = 0; i2 < 8; i2++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              } else {
                value = 1;
                for (i2 = 0; i2 < context_numBits; i2++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i2 = 0; i2 < 16; i2++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i2 = 0; i2 < context_numBits; i2++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
          }
          value = 2;
          for (i2 = 0; i2 < context_numBits; i2++) {
            context_data_val = context_data_val << 1 | value & 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          while (true) {
            context_data_val = context_data_val << 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            } else context_data_position++;
          }
          return context_data.join("");
        },
        decompress: function(compressed) {
          if (compressed == null) return "";
          if (compressed == "") return null;
          return LZString2._decompress(compressed.length, 32768, function(index2) {
            return compressed.charCodeAt(index2);
          });
        },
        _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i2, w, bits, resb, maxpower, power, c2, data = { val: getNextValue(0), position: resetValue, index: 1 };
          for (i2 = 0; i2 < 3; i2 += 1) {
            dictionary[i2] = i2;
          }
          bits = 0;
          maxpower = Math.pow(2, 2);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (bits) {
            case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c2 = f(bits);
              break;
            case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c2 = f(bits);
              break;
            case 2:
              return "";
          }
          dictionary[3] = c2;
          w = c2;
          result.push(c2);
          while (true) {
            if (data.index > length) {
              return "";
            }
            bits = 0;
            maxpower = Math.pow(2, numBits);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (c2 = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c2 = dictSize - 1;
                enlargeIn--;
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c2 = dictSize - 1;
                enlargeIn--;
                break;
              case 2:
                return result.join("");
            }
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
            if (dictionary[c2]) {
              entry = dictionary[c2];
            } else {
              if (c2 === dictSize) {
                entry = w + w.charAt(0);
              } else {
                return null;
              }
            }
            result.push(entry);
            dictionary[dictSize++] = w + entry.charAt(0);
            enlargeIn--;
            w = entry;
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
          }
        }
      };
      return LZString2;
    })();
    if (module2 != null) {
      module2.exports = LZString;
    } else if (typeof angular !== "undefined" && angular != null) {
      angular.module("LZString", []).factory("LZString", function() {
        return LZString;
      });
    }
  })(lzString$1);
  return lzString$1.exports;
}
var lzStringExports = requireLzString();
const lzString = /* @__PURE__ */ getDefaultExportFromCjs(lzStringExports);
var define_process_env_default$2 = {};
function escapeHTML$1(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
const printProps$1 = (keys, props, config2, indentation, depth, refs, printer) => {
  const indentationNext = indentation + config2.indent;
  const colors = config2.colors;
  return keys.map((key) => {
    const value = props[key];
    let printed = printer(value, config2, indentationNext, depth, refs);
    if (typeof value !== "string") {
      if (printed.indexOf("\n") !== -1) {
        printed = config2.spacingOuter + indentationNext + printed + config2.spacingOuter + indentation;
      }
      printed = "{" + printed + "}";
    }
    return config2.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
  }).join("");
};
const NodeTypeTextNode$1 = 3;
const printChildren$1 = (children, config2, indentation, depth, refs, printer) => children.map((child) => {
  const printedChild = typeof child === "string" ? printText$1(child, config2) : printer(child, config2, indentation, depth, refs);
  if (printedChild === "" && typeof child === "object" && child !== null && child.nodeType !== NodeTypeTextNode$1) {
    return "";
  }
  return config2.spacingOuter + indentation + printedChild;
}).join("");
const printText$1 = (text, config2) => {
  const contentColor = config2.colors.content;
  return contentColor.open + escapeHTML$1(text) + contentColor.close;
};
const printComment$1 = (comment, config2) => {
  const commentColor = config2.colors.comment;
  return commentColor.open + "<!--" + escapeHTML$1(comment) + "-->" + commentColor.close;
};
const printElement$1 = (type2, printedProps, printedChildren, config2, indentation) => {
  const tagColor = config2.colors.tag;
  return tagColor.open + "<" + type2 + (printedProps && tagColor.close + printedProps + config2.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config2.spacingOuter + indentation + tagColor.open + "</" + type2 : (printedProps && !config2.min ? "" : " ") + "/") + ">" + tagColor.close;
};
const printElementAsLeaf$1 = (type2, config2) => {
  const tagColor = config2.colors.tag;
  return tagColor.open + "<" + type2 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
};
const ELEMENT_NODE$1$1 = 1;
const TEXT_NODE$1$1 = 3;
const COMMENT_NODE$1$1 = 8;
const FRAGMENT_NODE$1 = 11;
const ELEMENT_REGEXP$1 = /^((HTML|SVG)\w*)?Element$/;
const testNode$1 = (val) => {
  const constructorName = val.constructor.name;
  const {
    nodeType,
    tagName
  } = val;
  const isCustomElement2 = typeof tagName === "string" && tagName.includes("-") || typeof val.hasAttribute === "function" && val.hasAttribute("is");
  return nodeType === ELEMENT_NODE$1$1 && (ELEMENT_REGEXP$1.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE$1$1 && constructorName === "Text" || nodeType === COMMENT_NODE$1$1 && constructorName === "Comment" || nodeType === FRAGMENT_NODE$1 && constructorName === "DocumentFragment";
};
function nodeIsText$1(node) {
  return node.nodeType === TEXT_NODE$1$1;
}
function nodeIsComment$1(node) {
  return node.nodeType === COMMENT_NODE$1$1;
}
function nodeIsFragment$1(node) {
  return node.nodeType === FRAGMENT_NODE$1;
}
function createDOMElementFilter$1(filterNode) {
  return {
    test: (val) => {
      var _val$constructor2;
      return (val == null || (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) && testNode$1(val);
    },
    serialize: (node, config2, indentation, depth, refs, printer) => {
      if (nodeIsText$1(node)) {
        return printText$1(node.data, config2);
      }
      if (nodeIsComment$1(node)) {
        return printComment$1(node.data, config2);
      }
      const type2 = nodeIsFragment$1(node) ? "DocumentFragment" : node.tagName.toLowerCase();
      if (++depth > config2.maxDepth) {
        return printElementAsLeaf$1(type2, config2);
      }
      return printElement$1(type2, printProps$1(nodeIsFragment$1(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment$1(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}), config2, indentation + config2.indent, depth, refs, printer), printChildren$1(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config2, indentation + config2.indent, depth, refs, printer), config2, indentation);
    }
  };
}
let chalk = null;
let readFileSync$1 = null;
let codeFrameColumns$1 = null;
try {
  const nodeRequire = module && module.require;
  readFileSync$1 = nodeRequire.call(module, "fs").readFileSync;
  codeFrameColumns$1 = nodeRequire.call(module, "@babel/code-frame").codeFrameColumns;
  chalk = nodeRequire.call(module, "chalk");
} catch {
}
function getCodeFrame$1(frame) {
  const locationStart = frame.indexOf("(") + 1;
  const locationEnd = frame.indexOf(")");
  const frameLocation = frame.slice(locationStart, locationEnd);
  const frameLocationElements = frameLocation.split(":");
  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
  let rawFileContents = "";
  try {
    rawFileContents = readFileSync$1(filename, "utf-8");
  } catch {
    return "";
  }
  const codeFrame = codeFrameColumns$1(rawFileContents, {
    start: {
      line,
      column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return chalk.dim(frameLocation) + "\n" + codeFrame + "\n";
}
function getUserCodeFrame$1() {
  if (!readFileSync$1 || !codeFrameColumns$1) {
    return "";
  }
  const err = new Error();
  const firstClientCodeFrame = err.stack.split("\n").slice(1).find((frame) => !frame.includes("node_modules/"));
  return getCodeFrame$1(firstClientCodeFrame);
}
const TEXT_NODE$2 = 3;
function jestFakeTimersAreEnabled$1() {
  if (typeof jest !== "undefined" && jest !== null) {
    return (
      // legacy timers
      setTimeout._isMockFunction === true || // modern timers
      // eslint-disable-next-line prefer-object-has-own -- not supported by our support matrix
      Object.prototype.hasOwnProperty.call(setTimeout, "clock")
    );
  }
  return false;
}
function getDocument$2() {
  if (typeof window === "undefined") {
    throw new Error("Could not find default container");
  }
  return window.document;
}
function getWindowFromNode$1(node) {
  if (node.defaultView) {
    return node.defaultView;
  } else if (node.ownerDocument && node.ownerDocument.defaultView) {
    return node.ownerDocument.defaultView;
  } else if (node.window) {
    return node.window;
  } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {
    throw new Error("It looks like the window object is not available for the provided node.");
  } else if (node.then instanceof Function) {
    throw new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?");
  } else if (Array.isArray(node)) {
    throw new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?");
  } else if (typeof node.debug === "function" && typeof node.logTestingPlaygroundURL === "function") {
    throw new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?");
  } else {
    throw new Error("The given node is not an Element, the node type is: " + typeof node + ".");
  }
}
function checkContainerType$1(container) {
  if (!container || !(typeof container.querySelector === "function") || !(typeof container.querySelectorAll === "function")) {
    throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
  }
  function getTypeName(object) {
    if (typeof object === "object") {
      return object === null ? "null" : object.constructor.name;
    }
    return typeof object;
  }
}
const shouldHighlight$1 = () => {
  let colors;
  try {
    var _process;
    colors = JSON.parse((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.COLORS);
  } catch (e2) {
  }
  if (typeof colors === "boolean") {
    return colors;
  } else {
    return typeof process !== "undefined" && process.versions !== void 0 && process.versions.node !== void 0;
  }
};
const {
  DOMCollection: DOMCollection$1
} = buildExports$1.plugins;
const ELEMENT_NODE$2 = 1;
const COMMENT_NODE$2 = 8;
function filterCommentsAndDefaultIgnoreTagsTags$1(value) {
  return value.nodeType !== COMMENT_NODE$2 && (value.nodeType !== ELEMENT_NODE$2 || !value.matches(getConfig$2().defaultIgnore));
}
function prettyDOM$2(dom, maxLength, options) {
  if (options === void 0) {
    options = {};
  }
  if (!dom) {
    dom = getDocument$2().body;
  }
  if (typeof maxLength !== "number") {
    maxLength = typeof process !== "undefined" && define_process_env_default$2.DEBUG_PRINT_LIMIT || 7e3;
  }
  if (maxLength === 0) {
    return "";
  }
  if (dom.documentElement) {
    dom = dom.documentElement;
  }
  let domTypeName = typeof dom;
  if (domTypeName === "object") {
    domTypeName = dom.constructor.name;
  } else {
    dom = {};
  }
  if (!("outerHTML" in dom)) {
    throw new TypeError("Expected an element or document but got " + domTypeName);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags$1,
    ...prettyFormatOptions
  } = options;
  const debugContent = buildExports$1.format(dom, {
    plugins: [createDOMElementFilter$1(filterNode), DOMCollection$1],
    printFunctionName: false,
    highlight: shouldHighlight$1(),
    ...prettyFormatOptions
  });
  return maxLength !== void 0 && dom.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
}
const logDOM$2 = function() {
  const userCodeFrame = getUserCodeFrame$1();
  if (userCodeFrame) {
    console.log(prettyDOM$2(...arguments) + "\n\n" + userCodeFrame);
  } else {
    console.log(prettyDOM$2(...arguments));
  }
};
let config$1 = {
  testIdAttribute: "data-testid",
  asyncUtilTimeout: 1e3,
  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.
  // forcing react-testing-library to wrap all async functions would've been
  // a total nightmare (consider wrapping every findBy* query and then also
  // updating `within` so those would be wrapped too. Total nightmare).
  // so we have this config option that's really only intended for
  // react-testing-library to use. For that reason, this feature will remain
  // undocumented.
  asyncWrapper: (cb) => cb(),
  unstable_advanceTimersWrapper: (cb) => cb(),
  eventWrapper: (cb) => cb(),
  // default value for the `hidden` option in `ByRole` queries
  defaultHidden: false,
  // default value for the `ignore` option in `ByText` queries
  defaultIgnore: "script, style",
  // showOriginalStackTrace flag to show the full error stack traces for async errors
  showOriginalStackTrace: false,
  // throw errors w/ suggestions for better queries. Opt in so off by default.
  throwSuggestions: false,
  // called when getBy* queries fail. (message, container) => Error
  getElementError(message, container) {
    const prettifiedDOM = prettyDOM$2(container);
    const error = new Error([message, "Ignored nodes: comments, " + config$1.defaultIgnore + "\n" + prettifiedDOM].filter(Boolean).join("\n\n"));
    error.name = "TestingLibraryElementError";
    return error;
  },
  _disableExpensiveErrorDiagnostics: false,
  computedStyleSupportsPseudoElements: false
};
function runWithExpensiveErrorDiagnosticsDisabled$1(callback) {
  try {
    config$1._disableExpensiveErrorDiagnostics = true;
    return callback();
  } finally {
    config$1._disableExpensiveErrorDiagnostics = false;
  }
}
function configure$1(newConfig) {
  if (typeof newConfig === "function") {
    newConfig = newConfig(config$1);
  }
  config$1 = {
    ...config$1,
    ...newConfig
  };
}
function getConfig$2() {
  return config$1;
}
const labelledNodeNames$1 = ["button", "meter", "output", "progress", "select", "textarea", "input"];
function getTextContent$1(node) {
  if (labelledNodeNames$1.includes(node.nodeName.toLowerCase())) {
    return "";
  }
  if (node.nodeType === TEXT_NODE$2) return node.textContent;
  return Array.from(node.childNodes).map((childNode) => getTextContent$1(childNode)).join("");
}
function getLabelContent$1(element) {
  let textContent;
  if (element.tagName.toLowerCase() === "label") {
    textContent = getTextContent$1(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}
function getRealLabels$1(element) {
  if (element.labels !== void 0) {
    var _labels;
    return (_labels = element.labels) != null ? _labels : [];
  }
  if (!isLabelable$1(element)) return [];
  const labels = element.ownerDocument.querySelectorAll("label");
  return Array.from(labels).filter((label) => label.control === element);
}
function isLabelable$1(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === "INPUT" && element.getAttribute("type") !== "hidden";
}
function getLabels$2(container, element, _temp) {
  let {
    selector = "*"
  } = _temp === void 0 ? {} : _temp;
  const ariaLabelledBy = element.getAttribute("aria-labelledby");
  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(" ") : [];
  return labelsId.length ? labelsId.map((labelId) => {
    const labellingElement = container.querySelector('[id="' + labelId + '"]');
    return labellingElement ? {
      content: getLabelContent$1(labellingElement),
      formControl: null
    } : {
      content: "",
      formControl: null
    };
  }) : Array.from(getRealLabels$1(element)).map((label) => {
    const textToMatch = getLabelContent$1(label);
    const formControlSelector = "button, input, meter, output, progress, select, textarea";
    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter((formControlElement) => formControlElement.matches(selector))[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
function assertNotNullOrUndefined$1(matcher) {
  if (matcher === null || matcher === void 0) {
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`
      "It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?"
    );
  }
}
function fuzzyMatches$1(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined$1(matcher);
  const normalizedText = normalizer(textToMatch);
  if (typeof matcher === "string" || typeof matcher === "number") {
    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());
  } else if (typeof matcher === "function") {
    return matcher(normalizedText, node);
  } else {
    return matchRegExp$1(matcher, normalizedText);
  }
}
function matches$2(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined$1(matcher);
  const normalizedText = normalizer(textToMatch);
  if (matcher instanceof Function) {
    return matcher(normalizedText, node);
  } else if (matcher instanceof RegExp) {
    return matchRegExp$1(matcher, normalizedText);
  } else {
    return normalizedText === String(matcher);
  }
}
function getDefaultNormalizer$2(_temp) {
  let {
    trim = true,
    collapseWhitespace = true
  } = _temp === void 0 ? {} : _temp;
  return (text) => {
    let normalizedText = text;
    normalizedText = trim ? normalizedText.trim() : normalizedText;
    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, " ") : normalizedText;
    return normalizedText;
  };
}
function makeNormalizer$1(_ref) {
  let {
    trim,
    collapseWhitespace,
    normalizer
  } = _ref;
  if (!normalizer) {
    return getDefaultNormalizer$2({
      trim,
      collapseWhitespace
    });
  }
  if (typeof trim !== "undefined" || typeof collapseWhitespace !== "undefined") {
    throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
  }
  return normalizer;
}
function matchRegExp$1(matcher, text) {
  const match = matcher.test(text);
  if (matcher.global && matcher.lastIndex !== 0) {
    console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.");
    matcher.lastIndex = 0;
  }
  return match;
}
function getNodeText$2(node) {
  if (node.matches("input[type=submit], input[type=button], input[type=reset]")) {
    return node.value;
  }
  return Array.from(node.childNodes).filter((child) => child.nodeType === TEXT_NODE$2 && Boolean(child.textContent)).map((c2) => c2.textContent).join("");
}
const elementRoleList$2 = buildElementRoleList$2(libExports$1.elementRoles);
function isSubtreeInaccessible$1(element) {
  if (element.hidden === true) {
    return true;
  }
  if (element.getAttribute("aria-hidden") === "true") {
    return true;
  }
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).display === "none") {
    return true;
  }
  return false;
}
function isInaccessible$2(element, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible$1
  } = options;
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).visibility === "hidden") {
    return true;
  }
  let currentElement = element;
  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement)) {
      return true;
    }
    currentElement = currentElement.parentElement;
  }
  return false;
}
function getImplicitAriaRoles$2(currentNode) {
  for (const {
    match,
    roles: roles2
  } of elementRoleList$2) {
    if (match(currentNode)) {
      return [...roles2];
    }
  }
  return [];
}
function buildElementRoleList$2(elementRolesMap) {
  function makeElementSelector(_ref) {
    let {
      name,
      attributes
    } = _ref;
    return "" + name + attributes.map((_ref2) => {
      let {
        name: attributeName,
        value,
        constraints = []
      } = _ref2;
      const shouldNotExist = constraints.indexOf("undefined") !== -1;
      if (shouldNotExist) {
        return ":not([" + attributeName + "])";
      } else if (value) {
        return "[" + attributeName + '="' + value + '"]';
      } else {
        return "[" + attributeName + "]";
      }
    }).join("");
  }
  function getSelectorSpecificity(_ref3) {
    let {
      attributes = []
    } = _ref3;
    return attributes.length;
  }
  function bySelectorSpecificity(_ref4, _ref5) {
    let {
      specificity: leftSpecificity
    } = _ref4;
    let {
      specificity: rightSpecificity
    } = _ref5;
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let {
      attributes = []
    } = element;
    const typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
    if (typeTextIndex >= 0) {
      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];
    }
    const selector = makeElementSelector({
      ...element,
      attributes
    });
    return (node) => {
      if (typeTextIndex >= 0 && node.type !== "text") {
        return false;
      }
      return node.matches(selector);
    };
  }
  let result = [];
  for (const [element, roles2] of elementRolesMap.entries()) {
    result = [...result, {
      match: match(element),
      roles: Array.from(roles2),
      specificity: getSelectorSpecificity(element)
    }];
  }
  return result.sort(bySelectorSpecificity);
}
function getRoles$2(container, _temp) {
  let {
    hidden = false
  } = _temp === void 0 ? {} : _temp;
  function flattenDOM(node) {
    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
  }
  return flattenDOM(container).filter((element) => {
    return hidden === false ? isInaccessible$2(element) === false : true;
  }).reduce((acc, node) => {
    let roles2 = [];
    if (node.hasAttribute("role")) {
      roles2 = node.getAttribute("role").split(" ").slice(0, 1);
    } else {
      roles2 = getImplicitAriaRoles$2(node);
    }
    return roles2.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? {
      ...rolesAcc,
      [role]: [...rolesAcc[role], node]
    } : {
      ...rolesAcc,
      [role]: [node]
    }, acc);
  }, {});
}
function prettyRoles$1(dom, _ref6) {
  let {
    hidden,
    includeDescription
  } = _ref6;
  const roles2 = getRoles$2(dom, {
    hidden
  });
  return Object.entries(roles2).filter((_ref7) => {
    let [role] = _ref7;
    return role !== "generic";
  }).map((_ref8) => {
    let [role, elements] = _ref8;
    const delimiterBar = "-".repeat(50);
    const elementsString = elements.map((el) => {
      const nameString = 'Name "' + computeAccessibleName$1(el, {
        computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements
      }) + '":\n';
      const domString = prettyDOM$2(el.cloneNode(false));
      if (includeDescription) {
        const descriptionString = 'Description "' + computeAccessibleDescription$1(el, {
          computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements
        }) + '":\n';
        return "" + nameString + descriptionString + domString;
      }
      return "" + nameString + domString;
    }).join("\n\n");
    return role + ":\n\n" + elementsString + "\n\n" + delimiterBar;
  }).join("\n");
}
const logRoles$1 = function(dom, _temp2) {
  let {
    hidden = false
  } = _temp2 === void 0 ? {} : _temp2;
  return console.log(prettyRoles$1(dom, {
    hidden
  }));
};
function computeAriaSelected$1(element) {
  if (element.tagName === "OPTION") {
    return element.selected;
  }
  return checkBooleanAttribute$1(element, "aria-selected");
}
function computeAriaBusy$1(element) {
  return element.getAttribute("aria-busy") === "true";
}
function computeAriaChecked$1(element) {
  if ("indeterminate" in element && element.indeterminate) {
    return void 0;
  }
  if ("checked" in element) {
    return element.checked;
  }
  return checkBooleanAttribute$1(element, "aria-checked");
}
function computeAriaPressed$1(element) {
  return checkBooleanAttribute$1(element, "aria-pressed");
}
function computeAriaCurrent$1(element) {
  var _ref9, _checkBooleanAttribut;
  return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute$1(element, "aria-current")) != null ? _checkBooleanAttribut : element.getAttribute("aria-current")) != null ? _ref9 : false;
}
function computeAriaExpanded$1(element) {
  return checkBooleanAttribute$1(element, "aria-expanded");
}
function checkBooleanAttribute$1(element, attribute) {
  const attributeValue = element.getAttribute(attribute);
  if (attributeValue === "true") {
    return true;
  }
  if (attributeValue === "false") {
    return false;
  }
  return void 0;
}
function computeHeadingLevel$1(element) {
  const implicitHeadingLevels = {
    H1: 1,
    H2: 2,
    H3: 3,
    H4: 4,
    H5: 5,
    H6: 6
  };
  const ariaLevelAttribute = element.getAttribute("aria-level") && Number(element.getAttribute("aria-level"));
  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];
}
function computeAriaValueNow$1(element) {
  const valueNow = element.getAttribute("aria-valuenow");
  return valueNow === null ? void 0 : +valueNow;
}
function computeAriaValueMax$1(element) {
  const valueMax = element.getAttribute("aria-valuemax");
  return valueMax === null ? void 0 : +valueMax;
}
function computeAriaValueMin$1(element) {
  const valueMin = element.getAttribute("aria-valuemin");
  return valueMin === null ? void 0 : +valueMin;
}
function computeAriaValueText$1(element) {
  const valueText = element.getAttribute("aria-valuetext");
  return valueText === null ? void 0 : valueText;
}
const normalize$2 = getDefaultNormalizer$2();
function escapeRegExp$1(string) {
  return string.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
}
function getRegExpMatcher$1(string) {
  return new RegExp(escapeRegExp$1(string.toLowerCase()), "i");
}
function makeSuggestion$1(queryName, element, content, _ref) {
  let {
    variant,
    name
  } = _ref;
  let warning = "";
  const queryOptions = {};
  const queryArgs = [["Role", "TestId"].includes(queryName) ? content : getRegExpMatcher$1(content)];
  if (name) {
    queryOptions.name = getRegExpMatcher$1(name);
  }
  if (queryName === "Role" && isInaccessible$2(element)) {
    queryOptions.hidden = true;
    warning = "Element is inaccessible. This means that the element and all its children are invisible to screen readers.\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\n    ";
  }
  if (Object.keys(queryOptions).length > 0) {
    queryArgs.push(queryOptions);
  }
  const queryMethod = variant + "By" + queryName;
  return {
    queryName,
    queryMethod,
    queryArgs,
    variant,
    warning,
    toString() {
      if (warning) {
        console.warn(warning);
      }
      let [text, options] = queryArgs;
      text = typeof text === "string" ? "'" + text + "'" : text;
      options = options ? ", { " + Object.entries(options).map((_ref2) => {
        let [k, v] = _ref2;
        return k + ": " + v;
      }).join(", ") + " }" : "";
      return queryMethod + "(" + text + options + ")";
    }
  };
}
function canSuggest$1(currentMethod, requestedMethod, data) {
  return data && (!requestedMethod || requestedMethod.toLowerCase() === currentMethod.toLowerCase());
}
function getSuggestedQuery$2(element, variant, method) {
  var _element$getAttribute, _getImplicitAriaRoles;
  if (variant === void 0) {
    variant = "get";
  }
  if (element.matches(getConfig$2().defaultIgnore)) {
    return void 0;
  }
  const role = (_element$getAttribute = element.getAttribute("role")) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles$2(element)) == null ? void 0 : _getImplicitAriaRoles[0];
  if (role !== "generic" && canSuggest$1("Role", method, role)) {
    return makeSuggestion$1("Role", element, role, {
      variant,
      name: computeAccessibleName$1(element, {
        computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements
      })
    });
  }
  const labelText = getLabels$2(document, element).map((label) => label.content).join(" ");
  if (canSuggest$1("LabelText", method, labelText)) {
    return makeSuggestion$1("LabelText", element, labelText, {
      variant
    });
  }
  const placeholderText = element.getAttribute("placeholder");
  if (canSuggest$1("PlaceholderText", method, placeholderText)) {
    return makeSuggestion$1("PlaceholderText", element, placeholderText, {
      variant
    });
  }
  const textContent = normalize$2(getNodeText$2(element));
  if (canSuggest$1("Text", method, textContent)) {
    return makeSuggestion$1("Text", element, textContent, {
      variant
    });
  }
  if (canSuggest$1("DisplayValue", method, element.value)) {
    return makeSuggestion$1("DisplayValue", element, normalize$2(element.value), {
      variant
    });
  }
  const alt = element.getAttribute("alt");
  if (canSuggest$1("AltText", method, alt)) {
    return makeSuggestion$1("AltText", element, alt, {
      variant
    });
  }
  const title = element.getAttribute("title");
  if (canSuggest$1("Title", method, title)) {
    return makeSuggestion$1("Title", element, title, {
      variant
    });
  }
  const testId = element.getAttribute(getConfig$2().testIdAttribute);
  if (canSuggest$1("TestId", method, testId)) {
    return makeSuggestion$1("TestId", element, testId, {
      variant
    });
  }
  return void 0;
}
function copyStackTrace$1(target, source) {
  target.stack = source.stack.replace(source.message, target.message);
}
function waitFor$2(callback, _ref) {
  let {
    container = getDocument$2(),
    timeout = getConfig$2().asyncUtilTimeout,
    showOriginalStackTrace = getConfig$2().showOriginalStackTrace,
    stackTraceError,
    interval = 50,
    onTimeout = (error) => {
      Object.defineProperty(error, "message", {
        value: getConfig$2().getElementError(error.message, container).message
      });
      return error;
    },
    mutationObserverOptions = {
      subtree: true,
      childList: true,
      attributes: true,
      characterData: true
    }
  } = _ref;
  if (typeof callback !== "function") {
    throw new TypeError("Received `callback` arg must be a function");
  }
  return new Promise(async (resolve, reject) => {
    let lastError, intervalId, observer;
    let finished = false;
    let promiseStatus = "idle";
    const overallTimeoutTimer = setTimeout(handleTimeout, timeout);
    const usingJestFakeTimers = jestFakeTimersAreEnabled$1();
    if (usingJestFakeTimers) {
      const {
        unstable_advanceTimersWrapper: advanceTimersWrapper
      } = getConfig$2();
      checkCallback();
      while (!finished) {
        if (!jestFakeTimersAreEnabled$1()) {
          const error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
          if (!showOriginalStackTrace) copyStackTrace$1(error, stackTraceError);
          reject(error);
          return;
        }
        await advanceTimersWrapper(async () => {
          jest.advanceTimersByTime(interval);
        });
        if (finished) {
          break;
        }
        checkCallback();
      }
    } else {
      try {
        checkContainerType$1(container);
      } catch (e2) {
        reject(e2);
        return;
      }
      intervalId = setInterval(checkRealTimersCallback, interval);
      const {
        MutationObserver
      } = getWindowFromNode$1(container);
      observer = new MutationObserver(checkRealTimersCallback);
      observer.observe(container, mutationObserverOptions);
      checkCallback();
    }
    function onDone(error, result) {
      finished = true;
      clearTimeout(overallTimeoutTimer);
      if (!usingJestFakeTimers) {
        clearInterval(intervalId);
        observer.disconnect();
      }
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }
    function checkRealTimersCallback() {
      if (jestFakeTimersAreEnabled$1()) {
        const error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
        if (!showOriginalStackTrace) copyStackTrace$1(error, stackTraceError);
        return reject(error);
      } else {
        return checkCallback();
      }
    }
    function checkCallback() {
      if (promiseStatus === "pending") return;
      try {
        const result = runWithExpensiveErrorDiagnosticsDisabled$1(callback);
        if (typeof (result == null ? void 0 : result.then) === "function") {
          promiseStatus = "pending";
          result.then((resolvedValue) => {
            promiseStatus = "resolved";
            onDone(null, resolvedValue);
          }, (rejectedValue) => {
            promiseStatus = "rejected";
            lastError = rejectedValue;
          });
        } else {
          onDone(null, result);
        }
      } catch (error) {
        lastError = error;
      }
    }
    function handleTimeout() {
      let error;
      if (lastError) {
        error = lastError;
        if (!showOriginalStackTrace && error.name === "TestingLibraryElementError") {
          copyStackTrace$1(error, stackTraceError);
        }
      } else {
        error = new Error("Timed out in waitFor.");
        if (!showOriginalStackTrace) {
          copyStackTrace$1(error, stackTraceError);
        }
      }
      onDone(onTimeout(error), null);
    }
  });
}
function waitForWrapper$1(callback, options) {
  const stackTraceError = new Error("STACK_TRACE_MESSAGE");
  return getConfig$2().asyncWrapper(() => waitFor$2(callback, {
    stackTraceError,
    ...options
  }));
}
function getElementError$2(message, container) {
  return getConfig$2().getElementError(message, container);
}
function getMultipleElementsFoundError$1(message, container) {
  return getElementError$2(message + "\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).", container);
}
function queryAllByAttribute$2(attribute, container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches$2 : fuzzyMatches$1;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[" + attribute + "]")).filter((node) => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
}
function queryByAttribute$1(attribute, container, text, options) {
  const els = queryAllByAttribute$2(attribute, container, text, options);
  if (els.length > 1) {
    throw getMultipleElementsFoundError$1("Found multiple elements by [" + attribute + "=" + text + "]", container);
  }
  return els[0] || null;
}
function makeSingleQuery$1(allQuery, getMultipleError2) {
  return function(container) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    const els = allQuery(container, ...args);
    if (els.length > 1) {
      const elementStrings = els.map((element) => getElementError$2(null, element).message).join("\n\n");
      throw getMultipleElementsFoundError$1(getMultipleError2(container, ...args) + "\n\nHere are the matching elements:\n\n" + elementStrings, container);
    }
    return els[0] || null;
  };
}
function getSuggestionError$1(suggestion, container) {
  return getConfig$2().getElementError("A better query is available, try this:\n" + suggestion.toString() + "\n", container);
}
function makeGetAllQuery$1(allQuery, getMissingError2) {
  return function(container) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    const els = allQuery(container, ...args);
    if (!els.length) {
      throw getConfig$2().getElementError(getMissingError2(container, ...args), container);
    }
    return els;
  };
}
function makeFindQuery$1(getter) {
  return (container, text, options, waitForOptions) => {
    return waitForWrapper$1(() => {
      return getter(container, text, options);
    }, {
      container,
      ...waitForOptions
    });
  };
}
const wrapSingleQueryWithSuggestion$1 = (query, queryAllByName, variant) => function(container) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  const element = query(container, ...args);
  const [{
    suggest = getConfig$2().throwSuggestions
  } = {}] = args.slice(-1);
  if (element && suggest) {
    const suggestion = getSuggestedQuery$2(element, variant);
    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {
      throw getSuggestionError$1(suggestion.toString(), container);
    }
  }
  return element;
};
const wrapAllByQueryWithSuggestion$1 = (query, queryAllByName, variant) => function(container) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  const els = query(container, ...args);
  const [{
    suggest = getConfig$2().throwSuggestions
  } = {}] = args.slice(-1);
  if (els.length && suggest) {
    const uniqueSuggestionMessages = [...new Set(els.map((element) => {
      var _getSuggestedQuery;
      return (_getSuggestedQuery = getSuggestedQuery$2(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();
    }))];
    if (
      // only want to suggest if all the els have the same suggestion.
      uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?
        getSuggestedQuery$2(els[0], variant).queryName
      )
    ) {
      throw getSuggestionError$1(uniqueSuggestionMessages[0], container);
    }
  }
  return els;
};
function buildQueries$2(queryAllBy, getMultipleError2, getMissingError2) {
  const queryBy = wrapSingleQueryWithSuggestion$1(makeSingleQuery$1(queryAllBy, getMultipleError2), queryAllBy.name, "query");
  const getAllBy = makeGetAllQuery$1(queryAllBy, getMissingError2);
  const getBy = makeSingleQuery$1(getAllBy, getMultipleError2);
  const getByWithSuggestions = wrapSingleQueryWithSuggestion$1(getBy, queryAllBy.name, "get");
  const getAllWithSuggestions = wrapAllByQueryWithSuggestion$1(getAllBy, queryAllBy.name.replace("query", "get"), "getAll");
  const findAllBy = makeFindQuery$1(wrapAllByQueryWithSuggestion$1(getAllBy, queryAllBy.name, "findAll"));
  const findBy = makeFindQuery$1(wrapSingleQueryWithSuggestion$1(getBy, queryAllBy.name, "find"));
  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
}
var queryHelpers$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  getElementError: getElementError$2,
  wrapAllByQueryWithSuggestion: wrapAllByQueryWithSuggestion$1,
  wrapSingleQueryWithSuggestion: wrapSingleQueryWithSuggestion$1,
  getMultipleElementsFoundError: getMultipleElementsFoundError$1,
  queryAllByAttribute: queryAllByAttribute$2,
  queryByAttribute: queryByAttribute$1,
  makeSingleQuery: makeSingleQuery$1,
  makeGetAllQuery: makeGetAllQuery$1,
  makeFindQuery: makeFindQuery$1,
  buildQueries: buildQueries$2
});
function queryAllLabels$1(container) {
  return Array.from(container.querySelectorAll("label,input")).map((node) => {
    return {
      node,
      textToMatch: getLabelContent$1(node)
    };
  }).filter((_ref) => {
    let {
      textToMatch
    } = _ref;
    return textToMatch !== null;
  });
}
const queryAllLabelsByText$1 = function(container, text, _temp) {
  let {
    exact = true,
    trim,
    collapseWhitespace,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches$2 : fuzzyMatches$1;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  const textToMatchByLabels = queryAllLabels$1(container);
  return textToMatchByLabels.filter((_ref2) => {
    let {
      node,
      textToMatch
    } = _ref2;
    return matcher(textToMatch, node, text, matchNormalizer);
  }).map((_ref3) => {
    let {
      node
    } = _ref3;
    return node;
  });
};
const queryAllByLabelText$2 = function(container, text, _temp2) {
  let {
    selector = "*",
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp2 === void 0 ? {} : _temp2;
  checkContainerType$1(container);
  const matcher = exact ? matches$2 : fuzzyMatches$1;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  const matchingLabelledElements = Array.from(container.querySelectorAll("*")).filter((element) => {
    return getRealLabels$1(element).length || element.hasAttribute("aria-labelledby");
  }).reduce((labelledElements, labelledElement) => {
    const labelList = getLabels$2(container, labelledElement, {
      selector
    });
    labelList.filter((label) => Boolean(label.formControl)).forEach((label) => {
      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {
        labelledElements.push(label.formControl);
      }
    });
    const labelsValue = labelList.filter((label) => Boolean(label.content)).map((label) => label.content);
    if (matcher(labelsValue.join(" "), labelledElement, text, matchNormalizer)) {
      labelledElements.push(labelledElement);
    }
    if (labelsValue.length > 1) {
      labelsValue.forEach((labelValue, index2) => {
        if (matcher(labelValue, labelledElement, text, matchNormalizer)) {
          labelledElements.push(labelledElement);
        }
        const labelsFiltered = [...labelsValue];
        labelsFiltered.splice(index2, 1);
        if (labelsFiltered.length > 1) {
          if (matcher(labelsFiltered.join(" "), labelledElement, text, matchNormalizer)) {
            labelledElements.push(labelledElement);
          }
        }
      });
    }
    return labelledElements;
  }, []).concat(queryAllByAttribute$2("aria-label", container, text, {
    exact,
    normalizer: matchNormalizer
  }));
  return Array.from(new Set(matchingLabelledElements)).filter((element) => element.matches(selector));
};
const getAllByLabelText$2 = function(container, text) {
  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }
  const els = queryAllByLabelText$2(container, text, ...rest);
  if (!els.length) {
    const labels = queryAllLabelsByText$1(container, text, ...rest);
    if (labels.length) {
      const tagNames = labels.map((label) => getTagNameOfElementAssociatedWithLabelViaFor$1(container, label)).filter((tagName) => !!tagName);
      if (tagNames.length) {
        throw getConfig$2().getElementError(tagNames.map((tagName) => "Found a label with the text of: " + text + ", however the element associated with this label (<" + tagName + " />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <" + tagName + " />, you can use aria-label or aria-labelledby instead.").join("\n\n"), container);
      } else {
        throw getConfig$2().getElementError("Found a label with the text of: " + text + `, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
      }
    } else {
      throw getConfig$2().getElementError("Unable to find a label with the text of: " + text, container);
    }
  }
  return els;
};
function getTagNameOfElementAssociatedWithLabelViaFor$1(container, label) {
  const htmlFor = label.getAttribute("for");
  if (!htmlFor) {
    return null;
  }
  const element = container.querySelector('[id="' + htmlFor + '"]');
  return element ? element.tagName.toLowerCase() : null;
}
const getMultipleError$7$1 = (c2, text) => "Found multiple elements with the text of: " + text;
const queryByLabelText$2 = wrapSingleQueryWithSuggestion$1(makeSingleQuery$1(queryAllByLabelText$2, getMultipleError$7$1), queryAllByLabelText$2.name, "query");
const getByLabelText$2 = makeSingleQuery$1(getAllByLabelText$2, getMultipleError$7$1);
const findAllByLabelText$2 = makeFindQuery$1(wrapAllByQueryWithSuggestion$1(getAllByLabelText$2, getAllByLabelText$2.name, "findAll"));
const findByLabelText$2 = makeFindQuery$1(wrapSingleQueryWithSuggestion$1(getByLabelText$2, getAllByLabelText$2.name, "find"));
const getAllByLabelTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(getAllByLabelText$2, getAllByLabelText$2.name, "getAll");
const getByLabelTextWithSuggestions$1 = wrapSingleQueryWithSuggestion$1(getByLabelText$2, getAllByLabelText$2.name, "get");
const queryAllByLabelTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByLabelText$2, queryAllByLabelText$2.name, "queryAll");
const queryAllByPlaceholderText$2 = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  checkContainerType$1(args[0]);
  return queryAllByAttribute$2("placeholder", ...args);
};
const getMultipleError$6$1 = (c2, text) => "Found multiple elements with the placeholder text of: " + text;
const getMissingError$6$1 = (c2, text) => "Unable to find an element with the placeholder text of: " + text;
const queryAllByPlaceholderTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByPlaceholderText$2, queryAllByPlaceholderText$2.name, "queryAll");
const [queryByPlaceholderText$2, getAllByPlaceholderText$2, getByPlaceholderText$2, findAllByPlaceholderText$2, findByPlaceholderText$2] = buildQueries$2(queryAllByPlaceholderText$2, getMultipleError$6$1, getMissingError$6$1);
const queryAllByText$2 = function(container, text, _temp) {
  let {
    selector = "*",
    exact = true,
    collapseWhitespace,
    trim,
    ignore = getConfig$2().defaultIgnore,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  const matcher = exact ? matches$2 : fuzzyMatches$1;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  let baseArray = [];
  if (typeof container.matches === "function" && container.matches(selector)) {
    baseArray = [container];
  }
  return [...baseArray, ...Array.from(container.querySelectorAll(selector))].filter((node) => !ignore || !node.matches(ignore)).filter((node) => matcher(getNodeText$2(node), node, text, matchNormalizer));
};
const getMultipleError$5$1 = (c2, text) => "Found multiple elements with the text: " + text;
const getMissingError$5$1 = function(c2, text, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    collapseWhitespace,
    trim,
    normalizer,
    selector
  } = options;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  const normalizedText = matchNormalizer(text.toString());
  const isNormalizedDifferent = normalizedText !== text.toString();
  const isCustomSelector = (selector != null ? selector : "*") !== "*";
  return "Unable to find an element with the text: " + (isNormalizedDifferent ? normalizedText + " (normalized from '" + text + "')" : text) + (isCustomSelector ? ", which matches selector '" + selector + "'" : "") + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
};
const queryAllByTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByText$2, queryAllByText$2.name, "queryAll");
const [queryByText$2, getAllByText$2, getByText$2, findAllByText$2, findByText$2] = buildQueries$2(queryAllByText$2, getMultipleError$5$1, getMissingError$5$1);
const queryAllByDisplayValue$2 = function(container, value, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  const matcher = exact ? matches$2 : fuzzyMatches$1;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("input,textarea,select")).filter((node) => {
    if (node.tagName === "SELECT") {
      const selectedOptions = Array.from(node.options).filter((option) => option.selected);
      return selectedOptions.some((optionNode) => matcher(getNodeText$2(optionNode), optionNode, value, matchNormalizer));
    } else {
      return matcher(node.value, node, value, matchNormalizer);
    }
  });
};
const getMultipleError$4$1 = (c2, value) => "Found multiple elements with the display value: " + value + ".";
const getMissingError$4$1 = (c2, value) => "Unable to find an element with the display value: " + value + ".";
const queryAllByDisplayValueWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByDisplayValue$2, queryAllByDisplayValue$2.name, "queryAll");
const [queryByDisplayValue$2, getAllByDisplayValue$2, getByDisplayValue$2, findAllByDisplayValue$2, findByDisplayValue$2] = buildQueries$2(queryAllByDisplayValue$2, getMultipleError$4$1, getMissingError$4$1);
const VALID_TAG_REGEXP$1 = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText$2 = function(container, alt, options) {
  if (options === void 0) {
    options = {};
  }
  checkContainerType$1(container);
  return queryAllByAttribute$2("alt", container, alt, options).filter((node) => VALID_TAG_REGEXP$1.test(node.tagName));
};
const getMultipleError$3$1 = (c2, alt) => "Found multiple elements with the alt text: " + alt;
const getMissingError$3$1 = (c2, alt) => "Unable to find an element with the alt text: " + alt;
const queryAllByAltTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByAltText$2, queryAllByAltText$2.name, "queryAll");
const [queryByAltText$2, getAllByAltText$2, getByAltText$2, findAllByAltText$2, findByAltText$2] = buildQueries$2(queryAllByAltText$2, getMultipleError$3$1, getMissingError$3$1);
const isSvgTitle$1 = (node) => {
  var _node$parentElement;
  return node.tagName.toLowerCase() === "title" && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === "svg";
};
const queryAllByTitle$2 = function(container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  const matcher = exact ? matches$2 : fuzzyMatches$1;
  const matchNormalizer = makeNormalizer$1({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[title], svg > title")).filter((node) => matcher(node.getAttribute("title"), node, text, matchNormalizer) || isSvgTitle$1(node) && matcher(getNodeText$2(node), node, text, matchNormalizer));
};
const getMultipleError$2$1 = (c2, title) => "Found multiple elements with the title: " + title + ".";
const getMissingError$2$1 = (c2, title) => "Unable to find an element with the title: " + title + ".";
const queryAllByTitleWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByTitle$2, queryAllByTitle$2.name, "queryAll");
const [queryByTitle$2, getAllByTitle$2, getByTitle$2, findAllByTitle$2, findByTitle$2] = buildQueries$2(queryAllByTitle$2, getMultipleError$2$1, getMissingError$2$1);
const queryAllByRole$2 = function(container, role, _temp) {
  let {
    hidden = getConfig$2().defaultHidden,
    name,
    description,
    queryFallbacks = false,
    selected,
    busy,
    checked,
    pressed,
    current,
    level,
    expanded,
    value: {
      now: valueNow,
      min: valueMin,
      max: valueMax,
      text: valueText
    } = {}
  } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  if (selected !== void 0) {
    var _allRoles$get;
    if (((_allRoles$get = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get.props["aria-selected"]) === void 0) {
      throw new Error('"aria-selected" is not supported on role "' + role + '".');
    }
  }
  if (busy !== void 0) {
    var _allRoles$get2;
    if (((_allRoles$get2 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get2.props["aria-busy"]) === void 0) {
      throw new Error('"aria-busy" is not supported on role "' + role + '".');
    }
  }
  if (checked !== void 0) {
    var _allRoles$get3;
    if (((_allRoles$get3 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get3.props["aria-checked"]) === void 0) {
      throw new Error('"aria-checked" is not supported on role "' + role + '".');
    }
  }
  if (pressed !== void 0) {
    var _allRoles$get4;
    if (((_allRoles$get4 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get4.props["aria-pressed"]) === void 0) {
      throw new Error('"aria-pressed" is not supported on role "' + role + '".');
    }
  }
  if (current !== void 0) {
    var _allRoles$get5;
    if (((_allRoles$get5 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get5.props["aria-current"]) === void 0) {
      throw new Error('"aria-current" is not supported on role "' + role + '".');
    }
  }
  if (level !== void 0) {
    if (role !== "heading") {
      throw new Error('Role "' + role + '" cannot have "level" property.');
    }
  }
  if (valueNow !== void 0) {
    var _allRoles$get6;
    if (((_allRoles$get6 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get6.props["aria-valuenow"]) === void 0) {
      throw new Error('"aria-valuenow" is not supported on role "' + role + '".');
    }
  }
  if (valueMax !== void 0) {
    var _allRoles$get7;
    if (((_allRoles$get7 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get7.props["aria-valuemax"]) === void 0) {
      throw new Error('"aria-valuemax" is not supported on role "' + role + '".');
    }
  }
  if (valueMin !== void 0) {
    var _allRoles$get8;
    if (((_allRoles$get8 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get8.props["aria-valuemin"]) === void 0) {
      throw new Error('"aria-valuemin" is not supported on role "' + role + '".');
    }
  }
  if (valueText !== void 0) {
    var _allRoles$get9;
    if (((_allRoles$get9 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get9.props["aria-valuetext"]) === void 0) {
      throw new Error('"aria-valuetext" is not supported on role "' + role + '".');
    }
  }
  if (expanded !== void 0) {
    var _allRoles$get10;
    if (((_allRoles$get10 = libExports$1.roles.get(role)) == null ? void 0 : _allRoles$get10.props["aria-expanded"]) === void 0) {
      throw new Error('"aria-expanded" is not supported on role "' + role + '".');
    }
  }
  const subtreeIsInaccessibleCache = /* @__PURE__ */ new WeakMap();
  function cachedIsSubtreeInaccessible(element) {
    if (!subtreeIsInaccessibleCache.has(element)) {
      subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible$1(element));
    }
    return subtreeIsInaccessibleCache.get(element);
  }
  return Array.from(container.querySelectorAll(
    // Only query elements that can be matched by the following filters
    makeRoleSelector$1(role)
  )).filter((node) => {
    const isRoleSpecifiedExplicitly = node.hasAttribute("role");
    if (isRoleSpecifiedExplicitly) {
      const roleValue = node.getAttribute("role");
      if (queryFallbacks) {
        return roleValue.split(" ").filter(Boolean).some((roleAttributeToken) => roleAttributeToken === role);
      }
      const [firstRoleAttributeToken] = roleValue.split(" ");
      return firstRoleAttributeToken === role;
    }
    const implicitRoles = getImplicitAriaRoles$2(node);
    return implicitRoles.some((implicitRole) => {
      return implicitRole === role;
    });
  }).filter((element) => {
    if (selected !== void 0) {
      return selected === computeAriaSelected$1(element);
    }
    if (busy !== void 0) {
      return busy === computeAriaBusy$1(element);
    }
    if (checked !== void 0) {
      return checked === computeAriaChecked$1(element);
    }
    if (pressed !== void 0) {
      return pressed === computeAriaPressed$1(element);
    }
    if (current !== void 0) {
      return current === computeAriaCurrent$1(element);
    }
    if (expanded !== void 0) {
      return expanded === computeAriaExpanded$1(element);
    }
    if (level !== void 0) {
      return level === computeHeadingLevel$1(element);
    }
    if (valueNow !== void 0 || valueMax !== void 0 || valueMin !== void 0 || valueText !== void 0) {
      let valueMatches = true;
      if (valueNow !== void 0) {
        valueMatches && (valueMatches = valueNow === computeAriaValueNow$1(element));
      }
      if (valueMax !== void 0) {
        valueMatches && (valueMatches = valueMax === computeAriaValueMax$1(element));
      }
      if (valueMin !== void 0) {
        valueMatches && (valueMatches = valueMin === computeAriaValueMin$1(element));
      }
      if (valueText !== void 0) {
        var _computeAriaValueText;
        valueMatches && (valueMatches = matches$2((_computeAriaValueText = computeAriaValueText$1(element)) != null ? _computeAriaValueText : null, element, valueText, (text) => text));
      }
      return valueMatches;
    }
    return true;
  }).filter((element) => {
    if (name === void 0) {
      return true;
    }
    return matches$2(computeAccessibleName$1(element, {
      computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements
    }), element, name, (text) => text);
  }).filter((element) => {
    if (description === void 0) {
      return true;
    }
    return matches$2(computeAccessibleDescription$1(element, {
      computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements
    }), element, description, (text) => text);
  }).filter((element) => {
    return hidden === false ? isInaccessible$2(element, {
      isSubtreeInaccessible: cachedIsSubtreeInaccessible
    }) === false : true;
  });
};
function makeRoleSelector$1(role) {
  var _roleElements$get;
  const explicitRoleSelector = '*[role~="' + role + '"]';
  const roleRelations = (_roleElements$get = libExports$1.roleElements.get(role)) != null ? _roleElements$get : /* @__PURE__ */ new Set();
  const implicitRoleSelectors = new Set(Array.from(roleRelations).map((_ref) => {
    let {
      name
    } = _ref;
    return name;
  }));
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",");
}
const getNameHint$1 = (name) => {
  let nameHint = "";
  if (name === void 0) {
    nameHint = "";
  } else if (typeof name === "string") {
    nameHint = ' and name "' + name + '"';
  } else {
    nameHint = " and name `" + name + "`";
  }
  return nameHint;
};
const getMultipleError$1$1 = function(c2, role, _temp2) {
  let {
    name
  } = _temp2 === void 0 ? {} : _temp2;
  return 'Found multiple elements with the role "' + role + '"' + getNameHint$1(name);
};
const getMissingError$1$1 = function(container, role, _temp3) {
  let {
    hidden = getConfig$2().defaultHidden,
    name,
    description
  } = _temp3 === void 0 ? {} : _temp3;
  if (getConfig$2()._disableExpensiveErrorDiagnostics) {
    return 'Unable to find role="' + role + '"' + getNameHint$1(name);
  }
  let roles2 = "";
  Array.from(container.children).forEach((childElement) => {
    roles2 += prettyRoles$1(childElement, {
      hidden,
      includeDescription: description !== void 0
    });
  });
  let roleMessage;
  if (roles2.length === 0) {
    if (hidden === false) {
      roleMessage = "There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole";
    } else {
      roleMessage = "There are no available roles.";
    }
  } else {
    roleMessage = ("\nHere are the " + (hidden === false ? "accessible" : "available") + " roles:\n\n  " + roles2.replace(/\n/g, "\n  ").replace(/\n\s\s\n/g, "\n\n") + "\n").trim();
  }
  let nameHint = "";
  if (name === void 0) {
    nameHint = "";
  } else if (typeof name === "string") {
    nameHint = ' and name "' + name + '"';
  } else {
    nameHint = " and name `" + name + "`";
  }
  let descriptionHint = "";
  if (description === void 0) {
    descriptionHint = "";
  } else if (typeof description === "string") {
    descriptionHint = ' and description "' + description + '"';
  } else {
    descriptionHint = " and description `" + description + "`";
  }
  return ("\nUnable to find an " + (hidden === false ? "accessible " : "") + 'element with the role "' + role + '"' + nameHint + descriptionHint + "\n\n" + roleMessage).trim();
};
const queryAllByRoleWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByRole$2, queryAllByRole$2.name, "queryAll");
const [queryByRole$2, getAllByRole$2, getByRole$2, findAllByRole$2, findByRole$2] = buildQueries$2(queryAllByRole$2, getMultipleError$1$1, getMissingError$1$1);
const getTestIdAttribute$1 = () => getConfig$2().testIdAttribute;
const queryAllByTestId$2 = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  checkContainerType$1(args[0]);
  return queryAllByAttribute$2(getTestIdAttribute$1(), ...args);
};
const getMultipleError$8 = (c2, id) => "Found multiple elements by: [" + getTestIdAttribute$1() + '="' + id + '"]';
const getMissingError$7 = (c2, id) => "Unable to find an element by: [" + getTestIdAttribute$1() + '="' + id + '"]';
const queryAllByTestIdWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByTestId$2, queryAllByTestId$2.name, "queryAll");
const [queryByTestId$2, getAllByTestId$2, getByTestId$2, findAllByTestId$2, findByTestId$2] = buildQueries$2(queryAllByTestId$2, getMultipleError$8, getMissingError$7);
var queries$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  queryAllByLabelText: queryAllByLabelTextWithSuggestions$1,
  queryByLabelText: queryByLabelText$2,
  getAllByLabelText: getAllByLabelTextWithSuggestions$1,
  getByLabelText: getByLabelTextWithSuggestions$1,
  findAllByLabelText: findAllByLabelText$2,
  findByLabelText: findByLabelText$2,
  queryByPlaceholderText: queryByPlaceholderText$2,
  queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions$1,
  getByPlaceholderText: getByPlaceholderText$2,
  getAllByPlaceholderText: getAllByPlaceholderText$2,
  findAllByPlaceholderText: findAllByPlaceholderText$2,
  findByPlaceholderText: findByPlaceholderText$2,
  queryByText: queryByText$2,
  queryAllByText: queryAllByTextWithSuggestions$1,
  getByText: getByText$2,
  getAllByText: getAllByText$2,
  findAllByText: findAllByText$2,
  findByText: findByText$2,
  queryByDisplayValue: queryByDisplayValue$2,
  queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions$1,
  getByDisplayValue: getByDisplayValue$2,
  getAllByDisplayValue: getAllByDisplayValue$2,
  findAllByDisplayValue: findAllByDisplayValue$2,
  findByDisplayValue: findByDisplayValue$2,
  queryByAltText: queryByAltText$2,
  queryAllByAltText: queryAllByAltTextWithSuggestions$1,
  getByAltText: getByAltText$2,
  getAllByAltText: getAllByAltText$2,
  findAllByAltText: findAllByAltText$2,
  findByAltText: findByAltText$2,
  queryByTitle: queryByTitle$2,
  queryAllByTitle: queryAllByTitleWithSuggestions$1,
  getByTitle: getByTitle$2,
  getAllByTitle: getAllByTitle$2,
  findAllByTitle: findAllByTitle$2,
  findByTitle: findByTitle$2,
  queryByRole: queryByRole$2,
  queryAllByRole: queryAllByRoleWithSuggestions$1,
  getAllByRole: getAllByRole$2,
  getByRole: getByRole$2,
  findAllByRole: findAllByRole$2,
  findByRole: findByRole$2,
  queryByTestId: queryByTestId$2,
  queryAllByTestId: queryAllByTestIdWithSuggestions$1,
  getByTestId: getByTestId$2,
  getAllByTestId: getAllByTestId$2,
  findAllByTestId: findAllByTestId$2,
  findByTestId: findByTestId$2
});
function getQueriesForElement$2(element, queries$12, initialValue2) {
  if (queries$12 === void 0) {
    queries$12 = queries$2;
  }
  if (initialValue2 === void 0) {
    initialValue2 = {};
  }
  return Object.keys(queries$12).reduce((helpers2, key) => {
    const fn = queries$12[key];
    helpers2[key] = fn.bind(null, element);
    return helpers2;
  }, initialValue2);
}
const isRemoved = (result) => !result || Array.isArray(result) && !result.length;
function initialCheck(elements) {
  if (isRemoved(elements)) {
    throw new Error("The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.");
  }
}
async function waitForElementToBeRemoved$1(callback, options) {
  const timeoutError = new Error("Timed out in waitForElementToBeRemoved.");
  if (typeof callback !== "function") {
    initialCheck(callback);
    const elements = Array.isArray(callback) ? callback : [callback];
    const getRemainingElements = elements.map((element) => {
      let parent = element.parentElement;
      if (parent === null) return () => null;
      while (parent.parentElement) parent = parent.parentElement;
      return () => parent.contains(element) ? element : null;
    });
    callback = () => getRemainingElements.map((c2) => c2()).filter(Boolean);
  }
  initialCheck(callback());
  return waitForWrapper$1(() => {
    let result;
    try {
      result = callback();
    } catch (error) {
      if (error.name === "TestingLibraryElementError") {
        return void 0;
      }
      throw error;
    }
    if (!isRemoved(result)) {
      throw timeoutError;
    }
    return void 0;
  }, options);
}
const eventMap$3 = {
  // Clipboard Events
  copy: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  cut: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  paste: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Composition Events
  compositionEnd: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  compositionStart: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  compositionUpdate: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Keyboard Events
  keyDown: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  keyPress: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  keyUp: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  // Focus Events
  focus: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  blur: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  focusIn: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  focusOut: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  // Form Events
  change: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  input: {
    EventType: "InputEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  invalid: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: true
    }
  },
  submit: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  reset: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  // Mouse Events
  click: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      button: 0,
      composed: true
    }
  },
  contextMenu: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dblClick: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  drag: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragEnd: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragEnter: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragExit: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragLeave: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragOver: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragStart: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  drop: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseDown: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseEnter: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  mouseLeave: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  mouseMove: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseOut: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseOver: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseUp: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Selection Events
  select: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // Touch Events
  touchCancel: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  touchEnd: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  touchMove: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  touchStart: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // UI Events
  resize: {
    EventType: "UIEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  scroll: {
    EventType: "UIEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Wheel Events
  wheel: {
    EventType: "WheelEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Media Events
  abort: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  canPlay: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  canPlayThrough: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  durationChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  emptied: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  encrypted: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  ended: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadedData: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadedMetadata: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadStart: {
    EventType: "ProgressEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pause: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  play: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  playing: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  progress: {
    EventType: "ProgressEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  rateChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  seeked: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  seeking: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  stalled: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  suspend: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  timeUpdate: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  volumeChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  waiting: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Events
  load: {
    // TODO: load events can be UIEvent or Event depending on what generated them
    // This is where this abstraction breaks down.
    // But the common targets are <img />, <script /> and window.
    // Neither of these targets receive a UIEvent
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  error: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Animation Events
  animationStart: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  animationEnd: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  animationIteration: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // Transition Events
  transitionCancel: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  transitionEnd: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  transitionRun: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  transitionStart: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // pointer events
  pointerOver: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerEnter: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pointerDown: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerMove: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerUp: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerCancel: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  pointerOut: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerLeave: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  gotPointerCapture: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  lostPointerCapture: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  // history events
  popState: {
    EventType: "PopStateEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // window events
  offline: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  online: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  }
};
const eventAliasMap$1 = {
  doubleClick: "dblClick"
};
function fireEvent$1(element, event) {
  return getConfig$2().eventWrapper(() => {
    if (!event) {
      throw new Error("Unable to fire an event - please provide an event object.");
    }
    if (!element) {
      throw new Error('Unable to fire a "' + event.type + '" event - please provide a DOM element.');
    }
    return element.dispatchEvent(event);
  });
}
function createEvent$2(eventName, node, init, _temp) {
  let {
    EventType = "Event",
    defaultInit = {}
  } = _temp === void 0 ? {} : _temp;
  if (!node) {
    throw new Error('Unable to fire a "' + eventName + '" event - please provide a DOM element.');
  }
  const eventInit = {
    ...defaultInit,
    ...init
  };
  const {
    target: {
      value,
      files,
      ...targetProperties
    } = {}
  } = eventInit;
  if (value !== void 0) {
    setNativeValue(node, value);
  }
  if (files !== void 0) {
    Object.defineProperty(node, "files", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: files
    });
  }
  Object.assign(node, targetProperties);
  const window2 = getWindowFromNode$1(node);
  const EventConstructor = window2[EventType] || window2.Event;
  let event;
  if (typeof EventConstructor === "function") {
    event = new EventConstructor(eventName, eventInit);
  } else {
    event = window2.document.createEvent(EventType);
    const {
      bubbles,
      cancelable,
      detail,
      ...otherInit
    } = eventInit;
    event.initEvent(eventName, bubbles, cancelable, detail);
    Object.keys(otherInit).forEach((eventKey) => {
      event[eventKey] = otherInit[eventKey];
    });
  }
  const dataTransferProperties = ["dataTransfer", "clipboardData"];
  dataTransferProperties.forEach((dataTransferKey) => {
    const dataTransferValue = eventInit[dataTransferKey];
    if (typeof dataTransferValue === "object") {
      if (typeof window2.DataTransfer === "function") {
        Object.defineProperty(event, dataTransferKey, {
          value: Object.getOwnPropertyNames(dataTransferValue).reduce((acc, propName) => {
            Object.defineProperty(acc, propName, {
              value: dataTransferValue[propName]
            });
            return acc;
          }, new window2.DataTransfer())
        });
      } else {
        Object.defineProperty(event, dataTransferKey, {
          value: dataTransferValue
        });
      }
    }
  });
  return event;
}
Object.keys(eventMap$3).forEach((key) => {
  const {
    EventType,
    defaultInit
  } = eventMap$3[key];
  const eventName = key.toLowerCase();
  createEvent$2[key] = (node, init) => createEvent$2(eventName, node, init, {
    EventType,
    defaultInit
  });
  fireEvent$1[key] = (node, init) => fireEvent$1(node, createEvent$2[key](node, init));
});
function setNativeValue(element, value) {
  const {
    set: valueSetter
  } = Object.getOwnPropertyDescriptor(element, "value") || {};
  const prototype = Object.getPrototypeOf(element);
  const {
    set: prototypeValueSetter
  } = Object.getOwnPropertyDescriptor(prototype, "value") || {};
  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
    prototypeValueSetter.call(element, value);
  } else {
    if (valueSetter) {
      valueSetter.call(element, value);
    } else {
      throw new Error("The given element does not have a value setter");
    }
  }
}
Object.keys(eventAliasMap$1).forEach((aliasKey) => {
  const key = eventAliasMap$1[aliasKey];
  fireEvent$1[aliasKey] = function() {
    return fireEvent$1[key](...arguments);
  };
});
function unindent$1(string) {
  return string.replace(/[ \t]*[\n][ \t]*/g, "\n");
}
function encode$1(value) {
  return lzString.compressToEncodedURIComponent(unindent$1(value));
}
function getPlaygroundUrl$1(markup2) {
  return "https://testing-playground.com/#markup=" + encode$1(markup2);
}
const debug$1 = (element, maxLength, options) => Array.isArray(element) ? element.forEach((el) => logDOM$2(el, maxLength, options)) : logDOM$2(element, maxLength, options);
const logTestingPlaygroundURL$1 = function(element) {
  if (element === void 0) {
    element = getDocument$2().body;
  }
  if (!element || !("innerHTML" in element)) {
    console.log("The element you're providing isn't a valid DOM element.");
    return;
  }
  if (!element.innerHTML) {
    console.log("The provided element doesn't have any children.");
    return;
  }
  const playgroundUrl = getPlaygroundUrl$1(element.innerHTML);
  console.log("Open this URL in your browser\n\n" + playgroundUrl);
  return playgroundUrl;
};
const initialValue$1 = {
  debug: debug$1,
  logTestingPlaygroundURL: logTestingPlaygroundURL$1
};
const screen$1 = typeof document !== "undefined" && document.body ? getQueriesForElement$2(document.body, queries$2, initialValue$1) : Object.keys(queries$2).reduce((helpers2, key) => {
  helpers2[key] = () => {
    throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error");
  };
  return helpers2;
}, initialValue$1);
const domTestingLibrary = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  buildQueries: buildQueries$2,
  configure: configure$1,
  createEvent: createEvent$2,
  findAllByAltText: findAllByAltText$2,
  findAllByDisplayValue: findAllByDisplayValue$2,
  findAllByLabelText: findAllByLabelText$2,
  findAllByPlaceholderText: findAllByPlaceholderText$2,
  findAllByRole: findAllByRole$2,
  findAllByTestId: findAllByTestId$2,
  findAllByText: findAllByText$2,
  findAllByTitle: findAllByTitle$2,
  findByAltText: findByAltText$2,
  findByDisplayValue: findByDisplayValue$2,
  findByLabelText: findByLabelText$2,
  findByPlaceholderText: findByPlaceholderText$2,
  findByRole: findByRole$2,
  findByTestId: findByTestId$2,
  findByText: findByText$2,
  findByTitle: findByTitle$2,
  fireEvent: fireEvent$1,
  getAllByAltText: getAllByAltText$2,
  getAllByDisplayValue: getAllByDisplayValue$2,
  getAllByLabelText: getAllByLabelTextWithSuggestions$1,
  getAllByPlaceholderText: getAllByPlaceholderText$2,
  getAllByRole: getAllByRole$2,
  getAllByTestId: getAllByTestId$2,
  getAllByText: getAllByText$2,
  getAllByTitle: getAllByTitle$2,
  getByAltText: getByAltText$2,
  getByDisplayValue: getByDisplayValue$2,
  getByLabelText: getByLabelTextWithSuggestions$1,
  getByPlaceholderText: getByPlaceholderText$2,
  getByRole: getByRole$2,
  getByTestId: getByTestId$2,
  getByText: getByText$2,
  getByTitle: getByTitle$2,
  getConfig: getConfig$2,
  getDefaultNormalizer: getDefaultNormalizer$2,
  getElementError: getElementError$2,
  getMultipleElementsFoundError: getMultipleElementsFoundError$1,
  getNodeText: getNodeText$2,
  getQueriesForElement: getQueriesForElement$2,
  getRoles: getRoles$2,
  getSuggestedQuery: getSuggestedQuery$2,
  isInaccessible: isInaccessible$2,
  logDOM: logDOM$2,
  logRoles: logRoles$1,
  makeFindQuery: makeFindQuery$1,
  makeGetAllQuery: makeGetAllQuery$1,
  makeSingleQuery: makeSingleQuery$1,
  prettyDOM: prettyDOM$2,
  prettyFormat: index$2,
  queries: queries$2,
  queryAllByAltText: queryAllByAltTextWithSuggestions$1,
  queryAllByAttribute: queryAllByAttribute$2,
  queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions$1,
  queryAllByLabelText: queryAllByLabelTextWithSuggestions$1,
  queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions$1,
  queryAllByRole: queryAllByRoleWithSuggestions$1,
  queryAllByTestId: queryAllByTestIdWithSuggestions$1,
  queryAllByText: queryAllByTextWithSuggestions$1,
  queryAllByTitle: queryAllByTitleWithSuggestions$1,
  queryByAltText: queryByAltText$2,
  queryByAttribute: queryByAttribute$1,
  queryByDisplayValue: queryByDisplayValue$2,
  queryByLabelText: queryByLabelText$2,
  queryByPlaceholderText: queryByPlaceholderText$2,
  queryByRole: queryByRole$2,
  queryByTestId: queryByTestId$2,
  queryByText: queryByText$2,
  queryByTitle: queryByTitle$2,
  queryHelpers: queryHelpers$1,
  screen: screen$1,
  waitFor: waitForWrapper$1,
  waitForElementToBeRemoved: waitForElementToBeRemoved$1,
  within: getQueriesForElement$2,
  wrapAllByQueryWithSuggestion: wrapAllByQueryWithSuggestion$1,
  wrapSingleQueryWithSuggestion: wrapSingleQueryWithSuggestion$1
}, Symbol.toStringTag, { value: "Module" }));
function isElementType(element, tag, props) {
  if (element.namespaceURI && element.namespaceURI !== "http://www.w3.org/1999/xhtml") {
    return false;
  }
  tag = Array.isArray(tag) ? tag : [
    tag
  ];
  if (!tag.includes(element.tagName.toLowerCase())) {
    return false;
  }
  if (props) {
    return Object.entries(props).every(([k, v]) => element[k] === v);
  }
  return true;
}
var clickableInputTypes;
(function(clickableInputTypes2) {
  clickableInputTypes2["button"] = "button";
  clickableInputTypes2["color"] = "color";
  clickableInputTypes2["file"] = "file";
  clickableInputTypes2["image"] = "image";
  clickableInputTypes2["reset"] = "reset";
  clickableInputTypes2["submit"] = "submit";
  clickableInputTypes2["checkbox"] = "checkbox";
  clickableInputTypes2["radio"] = "radio";
})(clickableInputTypes || (clickableInputTypes = {}));
function isClickableInput(element) {
  return isElementType(element, "button") || isElementType(element, "input") && element.type in clickableInputTypes;
}
var helpers = {};
var hasRequiredHelpers;
function requireHelpers() {
  if (hasRequiredHelpers) return helpers;
  hasRequiredHelpers = 1;
  Object.defineProperty(helpers, "__esModule", {
    value: true
  });
  helpers.TEXT_NODE = void 0;
  helpers.checkContainerType = checkContainerType2;
  helpers.getDocument = getDocument2;
  helpers.getWindowFromNode = getWindowFromNode2;
  helpers.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled2;
  helpers.TEXT_NODE = 3;
  function jestFakeTimersAreEnabled2() {
    if (typeof jest !== "undefined" && jest !== null) {
      return (
        // legacy timers
        setTimeout._isMockFunction === true || // modern timers
        // eslint-disable-next-line prefer-object-has-own -- not supported by our support matrix
        Object.prototype.hasOwnProperty.call(setTimeout, "clock")
      );
    }
    return false;
  }
  function getDocument2() {
    if (typeof window === "undefined") {
      throw new Error("Could not find default container");
    }
    return window.document;
  }
  function getWindowFromNode2(node) {
    if (node.defaultView) {
      return node.defaultView;
    } else if (node.ownerDocument && node.ownerDocument.defaultView) {
      return node.ownerDocument.defaultView;
    } else if (node.window) {
      return node.window;
    } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {
      throw new Error(`It looks like the window object is not available for the provided node.`);
    } else if (node.then instanceof Function) {
      throw new Error(`It looks like you passed a Promise object instead of a DOM node. Did you do something like \`fireEvent.click(screen.findBy...\` when you meant to use a \`getBy\` query \`fireEvent.click(screen.getBy...\`, or await the findBy query \`fireEvent.click(await screen.findBy...\`?`);
    } else if (Array.isArray(node)) {
      throw new Error(`It looks like you passed an Array instead of a DOM node. Did you do something like \`fireEvent.click(screen.getAllBy...\` when you meant to use a \`getBy\` query \`fireEvent.click(screen.getBy...\`?`);
    } else if (typeof node.debug === "function" && typeof node.logTestingPlaygroundURL === "function") {
      throw new Error(`It looks like you passed a \`screen\` object. Did you do something like \`fireEvent.click(screen, ...\` when you meant to use a query, e.g. \`fireEvent.click(screen.getBy..., \`?`);
    } else {
      throw new Error(`The given node is not an Element, the node type is: ${typeof node}.`);
    }
  }
  function checkContainerType2(container) {
    if (!container || !(typeof container.querySelector === "function") || !(typeof container.querySelectorAll === "function")) {
      throw new TypeError(`Expected container to be an Element, a Document or a DocumentFragment but got ${getTypeName(container)}.`);
    }
    function getTypeName(object) {
      if (typeof object === "object") {
        return object === null ? "null" : object.constructor.name;
      }
      return typeof object;
    }
  }
  return helpers;
}
var helpersExports = requireHelpers();
function getWindow(node) {
  return helpersExports.getWindowFromNode(node);
}
function readBlobText(blob, FileReader) {
  return new Promise((res, rej) => {
    const fr = new FileReader();
    fr.onerror = rej;
    fr.onabort = rej;
    fr.onload = () => {
      res(String(fr.result));
    };
    fr.readAsText(blob);
  });
}
function createFileList(window2, files) {
  const list = {
    ...files,
    length: files.length,
    item: (index2) => list[index2],
    [Symbol.iterator]: function* nextFile() {
      for (let i2 = 0; i2 < list.length; i2++) {
        yield list[i2];
      }
    }
  };
  list.constructor = window2.FileList;
  if (window2.FileList) {
    Object.setPrototypeOf(list, window2.FileList.prototype);
  }
  Object.freeze(list);
  return list;
}
class DataTransferItemStub {
  getAsFile() {
    return this.file;
  }
  getAsString(callback) {
    if (typeof this.data === "string") {
      callback(this.data);
    }
  }
  /* istanbul ignore next */
  webkitGetAsEntry() {
    throw new Error("not implemented");
  }
  constructor(dataOrFile, type2) {
    this.file = null;
    this.data = void 0;
    if (typeof dataOrFile === "string") {
      this.kind = "string";
      this.type = String(type2);
      this.data = dataOrFile;
    } else {
      this.kind = "file";
      this.type = dataOrFile.type;
      this.file = dataOrFile;
    }
  }
}
class DataTransferItemListStub extends Array {
  add(...args) {
    const item = new DataTransferItemStub(args[0], args[1]);
    this.push(item);
    return item;
  }
  clear() {
    this.splice(0, this.length);
  }
  remove(index2) {
    this.splice(index2, 1);
  }
}
function getTypeMatcher(type2, exact) {
  const [group, sub] = type2.split("/");
  const isGroup = !sub || sub === "*";
  return (item) => {
    return exact ? item.type === (isGroup ? group : type2) : isGroup ? item.type.startsWith(`${group}/`) : item.type === group;
  };
}
function createDataTransferStub(window2) {
  return new class DataTransferStub {
    getData(format) {
      var ref2;
      const match = (ref2 = this.items.find(getTypeMatcher(format, true))) !== null && ref2 !== void 0 ? ref2 : this.items.find(getTypeMatcher(format, false));
      let text = "";
      match === null || match === void 0 ? void 0 : match.getAsString((t2) => {
        text = t2;
      });
      return text;
    }
    setData(format, data) {
      const matchIndex = this.items.findIndex(getTypeMatcher(format, true));
      const item = new DataTransferItemStub(data, format);
      if (matchIndex >= 0) {
        this.items.splice(matchIndex, 1, item);
      } else {
        this.items.push(item);
      }
    }
    clearData(format) {
      if (format) {
        const matchIndex = this.items.findIndex(getTypeMatcher(format, true));
        if (matchIndex >= 0) {
          this.items.remove(matchIndex);
        }
      } else {
        this.items.clear();
      }
    }
    get types() {
      const t2 = [];
      if (this.files.length) {
        t2.push("Files");
      }
      this.items.forEach((i2) => t2.push(i2.type));
      Object.freeze(t2);
      return t2;
    }
    /* istanbul ignore next */
    setDragImage() {
    }
    constructor() {
      this.dropEffect = "none";
      this.effectAllowed = "uninitialized";
      this.items = new DataTransferItemListStub();
      this.files = createFileList(window2, []);
    }
  }();
}
function createDataTransfer(window2, files = []) {
  const dt = typeof window2.DataTransfer === "undefined" ? createDataTransferStub(window2) : (
    /* istanbul ignore next */
    new window2.DataTransfer()
  );
  Object.defineProperty(dt, "files", {
    get: () => createFileList(window2, files)
  });
  return dt;
}
function getBlobFromDataTransferItem(window2, item) {
  if (item.kind === "file") {
    return item.getAsFile();
  }
  let data = "";
  item.getAsString((s2) => {
    data = s2;
  });
  return new window2.Blob([
    data
  ], {
    type: item.type
  });
}
function createClipboardItem(window2, ...blobs) {
  const dataMap = Object.fromEntries(blobs.map((b) => [
    typeof b === "string" ? "text/plain" : b.type,
    Promise.resolve(b)
  ]));
  if (typeof window2.ClipboardItem !== "undefined") {
    return new window2.ClipboardItem(dataMap);
  }
  return new class ClipboardItem {
    get types() {
      return Array.from(Object.keys(this.data));
    }
    async getType(type2) {
      const value = await this.data[type2];
      if (!value) {
        throw new Error(`${type2} is not one of the available MIME types on this item.`);
      }
      return value instanceof window2.Blob ? value : new window2.Blob([
        value
      ], {
        type: type2
      });
    }
    constructor(d) {
      this.data = d;
    }
  }(dataMap);
}
const ClipboardStubControl = Symbol("Manage ClipboardSub");
function createClipboardStub(window2, control) {
  return Object.assign(new class Clipboard extends window2.EventTarget {
    async read() {
      return Array.from(this.items);
    }
    async readText() {
      let text = "";
      for (const item of this.items) {
        const type2 = item.types.includes("text/plain") ? "text/plain" : item.types.find((t2) => t2.startsWith("text/"));
        if (type2) {
          text += await item.getType(type2).then((b) => readBlobText(b, window2.FileReader));
        }
      }
      return text;
    }
    async write(data) {
      this.items = data;
    }
    async writeText(text) {
      this.items = [
        createClipboardItem(window2, text)
      ];
    }
    constructor(...args) {
      super(...args);
      this.items = [];
    }
  }(), {
    [ClipboardStubControl]: control
  });
}
function isClipboardStub(clipboard) {
  var ref2;
  return !!((ref2 = clipboard) === null || ref2 === void 0 ? void 0 : ref2[ClipboardStubControl]);
}
function attachClipboardStubToView(window2) {
  if (isClipboardStub(window2.navigator.clipboard)) {
    return window2.navigator.clipboard[ClipboardStubControl];
  }
  const realClipboard = Object.getOwnPropertyDescriptor(window2.navigator, "clipboard");
  let stub;
  const control = {
    resetClipboardStub: () => {
      stub = createClipboardStub(window2, control);
    },
    detachClipboardStub: () => {
      if (realClipboard) {
        Object.defineProperty(window2.navigator, "clipboard", realClipboard);
      } else {
        Object.defineProperty(window2.navigator, "clipboard", {
          value: void 0,
          configurable: true
        });
      }
    }
  };
  stub = createClipboardStub(window2, control);
  Object.defineProperty(window2.navigator, "clipboard", {
    get: () => stub,
    configurable: true
  });
  return stub[ClipboardStubControl];
}
function resetClipboardStubOnView(window2) {
  if (isClipboardStub(window2.navigator.clipboard)) {
    window2.navigator.clipboard[ClipboardStubControl].resetClipboardStub();
  }
}
function detachClipboardStubFromView(window2) {
  if (isClipboardStub(window2.navigator.clipboard)) {
    window2.navigator.clipboard[ClipboardStubControl].detachClipboardStub();
  }
}
async function readDataTransferFromClipboard(document2) {
  const window2 = document2.defaultView;
  const clipboard = window2 === null || window2 === void 0 ? void 0 : window2.navigator.clipboard;
  const items = clipboard && await clipboard.read();
  if (!items) {
    throw new Error("The Clipboard API is unavailable.");
  }
  const dt = createDataTransfer(window2);
  for (const item of items) {
    for (const type2 of item.types) {
      dt.setData(type2, await item.getType(type2).then((b) => readBlobText(b, window2.FileReader)));
    }
  }
  return dt;
}
async function writeDataTransferToClipboard(document2, clipboardData) {
  const window2 = getWindow(document2);
  const clipboard = window2.navigator.clipboard;
  const items = [];
  for (let i2 = 0; i2 < clipboardData.items.length; i2++) {
    const dtItem = clipboardData.items[i2];
    const blob = getBlobFromDataTransferItem(window2, dtItem);
    items.push(createClipboardItem(window2, blob));
  }
  const written = clipboard && await clipboard.write(items).then(
    () => true,
    // Can happen with other implementations that e.g. require permissions
    /* istanbul ignore next */
    () => false
  );
  if (!written) {
    throw new Error("The Clipboard API is unavailable.");
  }
}
if (typeof globalThis.afterEach === "function") {
  globalThis.afterEach(() => resetClipboardStubOnView(globalThis.window));
}
if (typeof globalThis.afterAll === "function") {
  globalThis.afterAll(() => detachClipboardStubFromView(globalThis.window));
}
function isContentEditable(element) {
  return element.hasAttribute("contenteditable") && (element.getAttribute("contenteditable") == "true" || element.getAttribute("contenteditable") == "");
}
function getContentEditable(node) {
  const element = getElement$1(node);
  return element && (element.closest('[contenteditable=""]') || element.closest('[contenteditable="true"]'));
}
function getElement$1(node) {
  return node.nodeType === 1 ? node : node.parentElement;
}
function isEditable(element) {
  return isEditableInputOrTextArea(element) && !element.readOnly || isContentEditable(element);
}
var editableInputTypes;
(function(editableInputTypes2) {
  editableInputTypes2["text"] = "text";
  editableInputTypes2["date"] = "date";
  editableInputTypes2["datetime-local"] = "datetime-local";
  editableInputTypes2["email"] = "email";
  editableInputTypes2["month"] = "month";
  editableInputTypes2["number"] = "number";
  editableInputTypes2["password"] = "password";
  editableInputTypes2["search"] = "search";
  editableInputTypes2["tel"] = "tel";
  editableInputTypes2["time"] = "time";
  editableInputTypes2["url"] = "url";
  editableInputTypes2["week"] = "week";
})(editableInputTypes || (editableInputTypes = {}));
function isEditableInputOrTextArea(element) {
  return isElementType(element, "textarea") || isElementType(element, "input") && element.type in editableInputTypes;
}
var maxLengthSupportedTypes;
(function(maxLengthSupportedTypes2) {
  maxLengthSupportedTypes2["email"] = "email";
  maxLengthSupportedTypes2["password"] = "password";
  maxLengthSupportedTypes2["search"] = "search";
  maxLengthSupportedTypes2["telephone"] = "telephone";
  maxLengthSupportedTypes2["text"] = "text";
  maxLengthSupportedTypes2["url"] = "url";
})(maxLengthSupportedTypes || (maxLengthSupportedTypes = {}));
function getMaxLength(element) {
  var ref2;
  const attr = (ref2 = element.getAttribute("maxlength")) !== null && ref2 !== void 0 ? ref2 : "";
  return /^\d+$/.test(attr) && Number(attr) >= 0 ? Number(attr) : void 0;
}
function supportsMaxLength(element) {
  return isElementType(element, "textarea") || isElementType(element, "input") && element.type in maxLengthSupportedTypes;
}
const FOCUSABLE_SELECTOR = [
  "input:not([type=hidden]):not([disabled])",
  "button:not([disabled])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  '[contenteditable=""]',
  '[contenteditable="true"]',
  "a[href]",
  "[tabindex]:not([disabled])"
].join(", ");
function isFocusable(element) {
  return element.matches(FOCUSABLE_SELECTOR);
}
var bracketDict;
(function(bracketDict2) {
  bracketDict2["{"] = "}";
  bracketDict2["["] = "]";
})(bracketDict || (bracketDict = {}));
function readNextDescriptor(text, context) {
  let pos = 0;
  const startBracket = text[pos] in bracketDict ? text[pos] : "";
  pos += startBracket.length;
  const isEscapedChar = new RegExp(`^\\${startBracket}{2}`).test(text);
  const type2 = isEscapedChar ? "" : startBracket;
  return {
    type: type2,
    ...type2 === "" ? readPrintableChar(text, pos, context) : readTag(text, pos, type2, context)
  };
}
function readPrintableChar(text, pos, context) {
  const descriptor = text[pos];
  assertDescriptor(descriptor, text, pos, context);
  pos += descriptor.length;
  return {
    consumedLength: pos,
    descriptor,
    releasePrevious: false,
    releaseSelf: true,
    repeat: 1
  };
}
function readTag(text, pos, startBracket, context) {
  var ref2, ref1;
  const releasePreviousModifier = text[pos] === "/" ? "/" : "";
  pos += releasePreviousModifier.length;
  const escapedDescriptor = startBracket === "{" && text[pos] === "\\";
  pos += Number(escapedDescriptor);
  const descriptor = escapedDescriptor ? text[pos] : (ref2 = text.slice(pos).match(startBracket === "{" ? /^\w+|^[^}>/]/ : /^\w+/)) === null || ref2 === void 0 ? void 0 : ref2[0];
  assertDescriptor(descriptor, text, pos, context);
  pos += descriptor.length;
  var ref22;
  const repeatModifier = (ref22 = (ref1 = text.slice(pos).match(/^>\d+/)) === null || ref1 === void 0 ? void 0 : ref1[0]) !== null && ref22 !== void 0 ? ref22 : "";
  pos += repeatModifier.length;
  const releaseSelfModifier = text[pos] === "/" || !repeatModifier && text[pos] === ">" ? text[pos] : "";
  pos += releaseSelfModifier.length;
  const expectedEndBracket = bracketDict[startBracket];
  const endBracket = text[pos] === expectedEndBracket ? expectedEndBracket : "";
  if (!endBracket) {
    throw new Error(getErrorMessage([
      !repeatModifier && "repeat modifier",
      !releaseSelfModifier && "release modifier",
      `"${expectedEndBracket}"`
    ].filter(Boolean).join(" or "), text[pos], text, context));
  }
  pos += endBracket.length;
  return {
    consumedLength: pos,
    descriptor,
    releasePrevious: !!releasePreviousModifier,
    repeat: repeatModifier ? Math.max(Number(repeatModifier.substr(1)), 1) : 1,
    releaseSelf: hasReleaseSelf(releaseSelfModifier, repeatModifier)
  };
}
function assertDescriptor(descriptor, text, pos, context) {
  if (!descriptor) {
    throw new Error(getErrorMessage("key descriptor", text[pos], text, context));
  }
}
function hasReleaseSelf(releaseSelfModifier, repeatModifier) {
  if (releaseSelfModifier) {
    return releaseSelfModifier === "/";
  }
  if (repeatModifier) {
    return false;
  }
}
function getErrorMessage(expected, found, text, context) {
  return `Expected ${expected} but found "${found !== null && found !== void 0 ? found : ""}" in "${text}"
    See ${context === "pointer" ? `https://testing-library.com/docs/user-event/pointer#pressing-a-button-or-touching-the-screen` : `https://testing-library.com/docs/user-event/keyboard`}
    for more information about how userEvent parses your input.`;
}
function cloneEvent(event) {
  return new event.constructor(event.type, event);
}
var ApiLevel;
(function(ApiLevel2) {
  ApiLevel2[ApiLevel2["Trigger"] = 2] = "Trigger";
  ApiLevel2[ApiLevel2["Call"] = 1] = "Call";
})(ApiLevel || (ApiLevel = {}));
function setLevelRef(instance, level) {
  instance.levelRefs[level] = {};
}
function getLevelRef(instance, level) {
  return instance.levelRefs[level];
}
var PointerEventsCheckLevel;
(function(PointerEventsCheckLevel2) {
  PointerEventsCheckLevel2[PointerEventsCheckLevel2[
    /**
    * Check pointer events on every user interaction that triggers a bunch of events.
    * E.g. once for releasing a mouse button even though this triggers `pointerup`, `mouseup`, `click`, etc...
    */
    "EachTrigger"
  ] = 4] = "EachTrigger";
  PointerEventsCheckLevel2[PointerEventsCheckLevel2[
    /** Check each target once per call to pointer (related) API */
    "EachApiCall"
  ] = 2] = "EachApiCall";
  PointerEventsCheckLevel2[PointerEventsCheckLevel2[
    /** Check each event target once */
    "EachTarget"
  ] = 1] = "EachTarget";
  PointerEventsCheckLevel2[PointerEventsCheckLevel2[
    /** No pointer events check */
    "Never"
  ] = 0] = "Never";
})(PointerEventsCheckLevel || (PointerEventsCheckLevel = {}));
function isDisabled(element) {
  for (let el = element; el; el = el.parentElement) {
    if (isElementType(el, [
      "button",
      "input",
      "select",
      "textarea",
      "optgroup",
      "option"
    ])) {
      if (el.hasAttribute("disabled")) {
        return true;
      }
    } else if (isElementType(el, "fieldset")) {
      var ref2;
      if (el.hasAttribute("disabled") && !((ref2 = el.querySelector(":scope > legend")) === null || ref2 === void 0 ? void 0 : ref2.contains(element))) {
        return true;
      }
    } else if (el.tagName.includes("-")) {
      if (el.constructor.formAssociated && el.hasAttribute("disabled")) {
        return true;
      }
    }
  }
  return false;
}
function getActiveElement(document2) {
  const activeElement = document2.activeElement;
  if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot) {
    return getActiveElement(activeElement.shadowRoot);
  } else {
    if (isDisabled(activeElement)) {
      return document2.ownerDocument ? (
        /* istanbul ignore next */
        document2.ownerDocument.body
      ) : document2.body;
    }
    return activeElement;
  }
}
function getActiveElementOrBody(document2) {
  var ref2;
  return (ref2 = getActiveElement(document2)) !== null && ref2 !== void 0 ? ref2 : (
    /* istanbul ignore next */
    document2.body
  );
}
function findClosest(element, callback) {
  let el = element;
  do {
    if (callback(el)) {
      return el;
    }
    el = el.parentElement;
  } while (el && el !== element.ownerDocument.body);
  return void 0;
}
function hasOwnSelection(node) {
  return isElement$2(node) && isEditableInputOrTextArea(node);
}
function hasNoSelection(node) {
  return isElement$2(node) && isClickableInput(node);
}
function isElement$2(node) {
  return node.nodeType === 1;
}
function updateSelectionOnFocus(element) {
  const selection = element.ownerDocument.getSelection();
  if (!(selection === null || selection === void 0 ? void 0 : selection.focusNode)) {
    return;
  }
  if (hasOwnSelection(element)) {
    const contenteditable = getContentEditable(selection.focusNode);
    if (contenteditable) {
      if (!selection.isCollapsed) {
        var ref2;
        const focusNode = ((ref2 = contenteditable.firstChild) === null || ref2 === void 0 ? void 0 : ref2.nodeType) === 3 ? contenteditable.firstChild : contenteditable;
        selection.setBaseAndExtent(focusNode, 0, focusNode, 0);
      }
    } else {
      selection.setBaseAndExtent(element, 0, element, 0);
    }
  }
}
var lib = {};
var ariaPropsMap = {};
var iterationDecorator = {};
var iteratorProxy = {};
var hasRequiredIteratorProxy;
function requireIteratorProxy() {
  if (hasRequiredIteratorProxy) return iteratorProxy;
  hasRequiredIteratorProxy = 1;
  Object.defineProperty(iteratorProxy, "__esModule", {
    value: true
  });
  iteratorProxy.default = void 0;
  function iteratorProxy$12() {
    var values = this;
    var index2 = 0;
    var iter = {
      "@@iterator": function iterator() {
        return iter;
      },
      next: function next() {
        if (index2 < values.length) {
          var value = values[index2];
          index2 = index2 + 1;
          return {
            done: false,
            value
          };
        } else {
          return {
            done: true
          };
        }
      }
    };
    return iter;
  }
  var _default = iteratorProxy$12;
  iteratorProxy.default = _default;
  return iteratorProxy;
}
var hasRequiredIterationDecorator;
function requireIterationDecorator() {
  if (hasRequiredIterationDecorator) return iterationDecorator;
  hasRequiredIterationDecorator = 1;
  Object.defineProperty(iterationDecorator, "__esModule", {
    value: true
  });
  iterationDecorator.default = iterationDecorator$12;
  var _iteratorProxy = _interopRequireDefault(requireIteratorProxy());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof2(obj);
  }
  function iterationDecorator$12(collection, entries) {
    if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
      Object.defineProperty(collection, Symbol.iterator, {
        value: _iteratorProxy.default.bind(entries)
      });
    }
    return collection;
  }
  return iterationDecorator;
}
var hasRequiredAriaPropsMap;
function requireAriaPropsMap() {
  if (hasRequiredAriaPropsMap) return ariaPropsMap;
  hasRequiredAriaPropsMap = 1;
  Object.defineProperty(ariaPropsMap, "__esModule", {
    value: true
  });
  ariaPropsMap.default = void 0;
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length) return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  var properties = [["aria-activedescendant", {
    "type": "id"
  }], ["aria-atomic", {
    "type": "boolean"
  }], ["aria-autocomplete", {
    "type": "token",
    "values": ["inline", "list", "both", "none"]
  }], ["aria-braillelabel", {
    "type": "string"
  }], ["aria-brailleroledescription", {
    "type": "string"
  }], ["aria-busy", {
    "type": "boolean"
  }], ["aria-checked", {
    "type": "tristate"
  }], ["aria-colcount", {
    type: "integer"
  }], ["aria-colindex", {
    type: "integer"
  }], ["aria-colspan", {
    type: "integer"
  }], ["aria-controls", {
    "type": "idlist"
  }], ["aria-current", {
    type: "token",
    values: ["page", "step", "location", "date", "time", true, false]
  }], ["aria-describedby", {
    "type": "idlist"
  }], ["aria-description", {
    "type": "string"
  }], ["aria-details", {
    "type": "id"
  }], ["aria-disabled", {
    "type": "boolean"
  }], ["aria-dropeffect", {
    "type": "tokenlist",
    "values": ["copy", "execute", "link", "move", "none", "popup"]
  }], ["aria-errormessage", {
    "type": "id"
  }], ["aria-expanded", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-flowto", {
    "type": "idlist"
  }], ["aria-grabbed", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-haspopup", {
    "type": "token",
    "values": [false, true, "menu", "listbox", "tree", "grid", "dialog"]
  }], ["aria-hidden", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-invalid", {
    "type": "token",
    "values": ["grammar", false, "spelling", true]
  }], ["aria-keyshortcuts", {
    type: "string"
  }], ["aria-label", {
    "type": "string"
  }], ["aria-labelledby", {
    "type": "idlist"
  }], ["aria-level", {
    "type": "integer"
  }], ["aria-live", {
    "type": "token",
    "values": ["assertive", "off", "polite"]
  }], ["aria-modal", {
    type: "boolean"
  }], ["aria-multiline", {
    "type": "boolean"
  }], ["aria-multiselectable", {
    "type": "boolean"
  }], ["aria-orientation", {
    "type": "token",
    "values": ["vertical", "undefined", "horizontal"]
  }], ["aria-owns", {
    "type": "idlist"
  }], ["aria-placeholder", {
    type: "string"
  }], ["aria-posinset", {
    "type": "integer"
  }], ["aria-pressed", {
    "type": "tristate"
  }], ["aria-readonly", {
    "type": "boolean"
  }], ["aria-relevant", {
    "type": "tokenlist",
    "values": ["additions", "all", "removals", "text"]
  }], ["aria-required", {
    "type": "boolean"
  }], ["aria-roledescription", {
    type: "string"
  }], ["aria-rowcount", {
    type: "integer"
  }], ["aria-rowindex", {
    type: "integer"
  }], ["aria-rowspan", {
    type: "integer"
  }], ["aria-selected", {
    "type": "boolean",
    "allowundefined": true
  }], ["aria-setsize", {
    "type": "integer"
  }], ["aria-sort", {
    "type": "token",
    "values": ["ascending", "descending", "none", "other"]
  }], ["aria-valuemax", {
    "type": "number"
  }], ["aria-valuemin", {
    "type": "number"
  }], ["aria-valuenow", {
    "type": "number"
  }], ["aria-valuetext", {
    "type": "string"
  }]];
  var ariaPropsMap$12 = {
    entries: function entries() {
      return properties;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(properties), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, key, properties);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key) {
      var item = properties.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!ariaPropsMap$12.get(key);
    },
    keys: function keys() {
      return properties.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
        return key;
      });
    },
    values: function values() {
      return properties.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(ariaPropsMap$12, ariaPropsMap$12.entries());
  ariaPropsMap.default = _default;
  return ariaPropsMap;
}
var domMap = {};
var hasRequiredDomMap;
function requireDomMap() {
  if (hasRequiredDomMap) return domMap;
  hasRequiredDomMap = 1;
  Object.defineProperty(domMap, "__esModule", {
    value: true
  });
  domMap.default = void 0;
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length) return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  var dom = [["a", {
    reserved: false
  }], ["abbr", {
    reserved: false
  }], ["acronym", {
    reserved: false
  }], ["address", {
    reserved: false
  }], ["applet", {
    reserved: false
  }], ["area", {
    reserved: false
  }], ["article", {
    reserved: false
  }], ["aside", {
    reserved: false
  }], ["audio", {
    reserved: false
  }], ["b", {
    reserved: false
  }], ["base", {
    reserved: true
  }], ["bdi", {
    reserved: false
  }], ["bdo", {
    reserved: false
  }], ["big", {
    reserved: false
  }], ["blink", {
    reserved: false
  }], ["blockquote", {
    reserved: false
  }], ["body", {
    reserved: false
  }], ["br", {
    reserved: false
  }], ["button", {
    reserved: false
  }], ["canvas", {
    reserved: false
  }], ["caption", {
    reserved: false
  }], ["center", {
    reserved: false
  }], ["cite", {
    reserved: false
  }], ["code", {
    reserved: false
  }], ["col", {
    reserved: true
  }], ["colgroup", {
    reserved: true
  }], ["content", {
    reserved: false
  }], ["data", {
    reserved: false
  }], ["datalist", {
    reserved: false
  }], ["dd", {
    reserved: false
  }], ["del", {
    reserved: false
  }], ["details", {
    reserved: false
  }], ["dfn", {
    reserved: false
  }], ["dialog", {
    reserved: false
  }], ["dir", {
    reserved: false
  }], ["div", {
    reserved: false
  }], ["dl", {
    reserved: false
  }], ["dt", {
    reserved: false
  }], ["em", {
    reserved: false
  }], ["embed", {
    reserved: false
  }], ["fieldset", {
    reserved: false
  }], ["figcaption", {
    reserved: false
  }], ["figure", {
    reserved: false
  }], ["font", {
    reserved: false
  }], ["footer", {
    reserved: false
  }], ["form", {
    reserved: false
  }], ["frame", {
    reserved: false
  }], ["frameset", {
    reserved: false
  }], ["h1", {
    reserved: false
  }], ["h2", {
    reserved: false
  }], ["h3", {
    reserved: false
  }], ["h4", {
    reserved: false
  }], ["h5", {
    reserved: false
  }], ["h6", {
    reserved: false
  }], ["head", {
    reserved: true
  }], ["header", {
    reserved: false
  }], ["hgroup", {
    reserved: false
  }], ["hr", {
    reserved: false
  }], ["html", {
    reserved: true
  }], ["i", {
    reserved: false
  }], ["iframe", {
    reserved: false
  }], ["img", {
    reserved: false
  }], ["input", {
    reserved: false
  }], ["ins", {
    reserved: false
  }], ["kbd", {
    reserved: false
  }], ["keygen", {
    reserved: false
  }], ["label", {
    reserved: false
  }], ["legend", {
    reserved: false
  }], ["li", {
    reserved: false
  }], ["link", {
    reserved: true
  }], ["main", {
    reserved: false
  }], ["map", {
    reserved: false
  }], ["mark", {
    reserved: false
  }], ["marquee", {
    reserved: false
  }], ["menu", {
    reserved: false
  }], ["menuitem", {
    reserved: false
  }], ["meta", {
    reserved: true
  }], ["meter", {
    reserved: false
  }], ["nav", {
    reserved: false
  }], ["noembed", {
    reserved: true
  }], ["noscript", {
    reserved: true
  }], ["object", {
    reserved: false
  }], ["ol", {
    reserved: false
  }], ["optgroup", {
    reserved: false
  }], ["option", {
    reserved: false
  }], ["output", {
    reserved: false
  }], ["p", {
    reserved: false
  }], ["param", {
    reserved: true
  }], ["picture", {
    reserved: true
  }], ["pre", {
    reserved: false
  }], ["progress", {
    reserved: false
  }], ["q", {
    reserved: false
  }], ["rp", {
    reserved: false
  }], ["rt", {
    reserved: false
  }], ["rtc", {
    reserved: false
  }], ["ruby", {
    reserved: false
  }], ["s", {
    reserved: false
  }], ["samp", {
    reserved: false
  }], ["script", {
    reserved: true
  }], ["section", {
    reserved: false
  }], ["select", {
    reserved: false
  }], ["small", {
    reserved: false
  }], ["source", {
    reserved: true
  }], ["spacer", {
    reserved: false
  }], ["span", {
    reserved: false
  }], ["strike", {
    reserved: false
  }], ["strong", {
    reserved: false
  }], ["style", {
    reserved: true
  }], ["sub", {
    reserved: false
  }], ["summary", {
    reserved: false
  }], ["sup", {
    reserved: false
  }], ["table", {
    reserved: false
  }], ["tbody", {
    reserved: false
  }], ["td", {
    reserved: false
  }], ["textarea", {
    reserved: false
  }], ["tfoot", {
    reserved: false
  }], ["th", {
    reserved: false
  }], ["thead", {
    reserved: false
  }], ["time", {
    reserved: false
  }], ["title", {
    reserved: true
  }], ["tr", {
    reserved: false
  }], ["track", {
    reserved: true
  }], ["tt", {
    reserved: false
  }], ["u", {
    reserved: false
  }], ["ul", {
    reserved: false
  }], ["var", {
    reserved: false
  }], ["video", {
    reserved: false
  }], ["wbr", {
    reserved: false
  }], ["xmp", {
    reserved: false
  }]];
  var domMap$12 = {
    entries: function entries() {
      return dom;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(dom), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, key, dom);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key) {
      var item = dom.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!domMap$12.get(key);
    },
    keys: function keys() {
      return dom.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
        return key;
      });
    },
    values: function values() {
      return dom.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(domMap$12, domMap$12.entries());
  domMap.default = _default;
  return domMap;
}
var rolesMap = {};
var ariaAbstractRoles = {};
var commandRole = {};
var hasRequiredCommandRole;
function requireCommandRole() {
  if (hasRequiredCommandRole) return commandRole;
  hasRequiredCommandRole = 1;
  Object.defineProperty(commandRole, "__esModule", {
    value: true
  });
  commandRole.default = void 0;
  var commandRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget"]]
  };
  var _default = commandRole$12;
  commandRole.default = _default;
  return commandRole;
}
var compositeRole = {};
var hasRequiredCompositeRole;
function requireCompositeRole() {
  if (hasRequiredCompositeRole) return compositeRole;
  hasRequiredCompositeRole = 1;
  Object.defineProperty(compositeRole, "__esModule", {
    value: true
  });
  compositeRole.default = void 0;
  var compositeRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-disabled": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget"]]
  };
  var _default = compositeRole$12;
  compositeRole.default = _default;
  return compositeRole;
}
var inputRole = {};
var hasRequiredInputRole;
function requireInputRole() {
  if (hasRequiredInputRole) return inputRole;
  hasRequiredInputRole = 1;
  Object.defineProperty(inputRole, "__esModule", {
    value: true
  });
  inputRole.default = void 0;
  var inputRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null
    },
    relatedConcepts: [{
      concept: {
        name: "input"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget"]]
  };
  var _default = inputRole$12;
  inputRole.default = _default;
  return inputRole;
}
var landmarkRole = {};
var hasRequiredLandmarkRole;
function requireLandmarkRole() {
  if (hasRequiredLandmarkRole) return landmarkRole;
  hasRequiredLandmarkRole = 1;
  Object.defineProperty(landmarkRole, "__esModule", {
    value: true
  });
  landmarkRole.default = void 0;
  var landmarkRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = landmarkRole$12;
  landmarkRole.default = _default;
  return landmarkRole;
}
var rangeRole = {};
var hasRequiredRangeRole;
function requireRangeRole() {
  if (hasRequiredRangeRole) return rangeRole;
  hasRequiredRangeRole = 1;
  Object.defineProperty(rangeRole, "__esModule", {
    value: true
  });
  rangeRole.default = void 0;
  var rangeRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-valuemax": null,
      "aria-valuemin": null,
      "aria-valuenow": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = rangeRole$12;
  rangeRole.default = _default;
  return rangeRole;
}
var roletypeRole = {};
var hasRequiredRoletypeRole;
function requireRoletypeRole() {
  if (hasRequiredRoletypeRole) return roletypeRole;
  hasRequiredRoletypeRole = 1;
  Object.defineProperty(roletypeRole, "__esModule", {
    value: true
  });
  roletypeRole.default = void 0;
  var roletypeRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {
      "aria-atomic": null,
      "aria-busy": null,
      "aria-controls": null,
      "aria-current": null,
      "aria-describedby": null,
      "aria-details": null,
      "aria-dropeffect": null,
      "aria-flowto": null,
      "aria-grabbed": null,
      "aria-hidden": null,
      "aria-keyshortcuts": null,
      "aria-label": null,
      "aria-labelledby": null,
      "aria-live": null,
      "aria-owns": null,
      "aria-relevant": null,
      "aria-roledescription": null
    },
    relatedConcepts: [{
      concept: {
        name: "role"
      },
      module: "XHTML"
    }, {
      concept: {
        name: "type"
      },
      module: "Dublin Core"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: []
  };
  var _default = roletypeRole$12;
  roletypeRole.default = _default;
  return roletypeRole;
}
var sectionRole = {};
var hasRequiredSectionRole;
function requireSectionRole() {
  if (hasRequiredSectionRole) return sectionRole;
  hasRequiredSectionRole = 1;
  Object.defineProperty(sectionRole, "__esModule", {
    value: true
  });
  sectionRole.default = void 0;
  var sectionRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "frontmatter"
      },
      module: "DTB"
    }, {
      concept: {
        name: "level"
      },
      module: "DTB"
    }, {
      concept: {
        name: "level"
      },
      module: "SMIL"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = sectionRole$12;
  sectionRole.default = _default;
  return sectionRole;
}
var sectionheadRole = {};
var hasRequiredSectionheadRole;
function requireSectionheadRole() {
  if (hasRequiredSectionheadRole) return sectionheadRole;
  hasRequiredSectionheadRole = 1;
  Object.defineProperty(sectionheadRole, "__esModule", {
    value: true
  });
  sectionheadRole.default = void 0;
  var sectionheadRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = sectionheadRole$12;
  sectionheadRole.default = _default;
  return sectionheadRole;
}
var selectRole = {};
var hasRequiredSelectRole;
function requireSelectRole() {
  if (hasRequiredSelectRole) return selectRole;
  hasRequiredSelectRole = 1;
  Object.defineProperty(selectRole, "__esModule", {
    value: true
  });
  selectRole.default = void 0;
  var selectRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]]
  };
  var _default = selectRole$12;
  selectRole.default = _default;
  return selectRole;
}
var structureRole = {};
var hasRequiredStructureRole;
function requireStructureRole() {
  if (hasRequiredStructureRole) return structureRole;
  hasRequiredStructureRole = 1;
  Object.defineProperty(structureRole, "__esModule", {
    value: true
  });
  structureRole.default = void 0;
  var structureRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype"]]
  };
  var _default = structureRole$12;
  structureRole.default = _default;
  return structureRole;
}
var widgetRole = {};
var hasRequiredWidgetRole;
function requireWidgetRole() {
  if (hasRequiredWidgetRole) return widgetRole;
  hasRequiredWidgetRole = 1;
  Object.defineProperty(widgetRole, "__esModule", {
    value: true
  });
  widgetRole.default = void 0;
  var widgetRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype"]]
  };
  var _default = widgetRole$12;
  widgetRole.default = _default;
  return widgetRole;
}
var windowRole = {};
var hasRequiredWindowRole;
function requireWindowRole() {
  if (hasRequiredWindowRole) return windowRole;
  hasRequiredWindowRole = 1;
  Object.defineProperty(windowRole, "__esModule", {
    value: true
  });
  windowRole.default = void 0;
  var windowRole$12 = {
    abstract: true,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-modal": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype"]]
  };
  var _default = windowRole$12;
  windowRole.default = _default;
  return windowRole;
}
var hasRequiredAriaAbstractRoles;
function requireAriaAbstractRoles() {
  if (hasRequiredAriaAbstractRoles) return ariaAbstractRoles;
  hasRequiredAriaAbstractRoles = 1;
  Object.defineProperty(ariaAbstractRoles, "__esModule", {
    value: true
  });
  ariaAbstractRoles.default = void 0;
  var _commandRole = _interopRequireDefault(requireCommandRole());
  var _compositeRole = _interopRequireDefault(requireCompositeRole());
  var _inputRole = _interopRequireDefault(requireInputRole());
  var _landmarkRole = _interopRequireDefault(requireLandmarkRole());
  var _rangeRole = _interopRequireDefault(requireRangeRole());
  var _roletypeRole = _interopRequireDefault(requireRoletypeRole());
  var _sectionRole = _interopRequireDefault(requireSectionRole());
  var _sectionheadRole = _interopRequireDefault(requireSectionheadRole());
  var _selectRole = _interopRequireDefault(requireSelectRole());
  var _structureRole = _interopRequireDefault(requireStructureRole());
  var _widgetRole = _interopRequireDefault(requireWidgetRole());
  var _windowRole = _interopRequireDefault(requireWindowRole());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaAbstractRoles$12 = [["command", _commandRole.default], ["composite", _compositeRole.default], ["input", _inputRole.default], ["landmark", _landmarkRole.default], ["range", _rangeRole.default], ["roletype", _roletypeRole.default], ["section", _sectionRole.default], ["sectionhead", _sectionheadRole.default], ["select", _selectRole.default], ["structure", _structureRole.default], ["widget", _widgetRole.default], ["window", _windowRole.default]];
  var _default = ariaAbstractRoles$12;
  ariaAbstractRoles.default = _default;
  return ariaAbstractRoles;
}
var ariaLiteralRoles = {};
var alertRole = {};
var hasRequiredAlertRole;
function requireAlertRole() {
  if (hasRequiredAlertRole) return alertRole;
  hasRequiredAlertRole = 1;
  Object.defineProperty(alertRole, "__esModule", {
    value: true
  });
  alertRole.default = void 0;
  var alertRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-atomic": "true",
      "aria-live": "assertive"
    },
    relatedConcepts: [{
      concept: {
        name: "alert"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = alertRole$12;
  alertRole.default = _default;
  return alertRole;
}
var alertdialogRole = {};
var hasRequiredAlertdialogRole;
function requireAlertdialogRole() {
  if (hasRequiredAlertdialogRole) return alertdialogRole;
  hasRequiredAlertdialogRole = 1;
  Object.defineProperty(alertdialogRole, "__esModule", {
    value: true
  });
  alertdialogRole.default = void 0;
  var alertdialogRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "alert"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]]
  };
  var _default = alertdialogRole$12;
  alertdialogRole.default = _default;
  return alertdialogRole;
}
var applicationRole = {};
var hasRequiredApplicationRole;
function requireApplicationRole() {
  if (hasRequiredApplicationRole) return applicationRole;
  hasRequiredApplicationRole = 1;
  Object.defineProperty(applicationRole, "__esModule", {
    value: true
  });
  applicationRole.default = void 0;
  var applicationRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "Device Independence Delivery Unit"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = applicationRole$12;
  applicationRole.default = _default;
  return applicationRole;
}
var articleRole = {};
var hasRequiredArticleRole;
function requireArticleRole() {
  if (hasRequiredArticleRole) return articleRole;
  hasRequiredArticleRole = 1;
  Object.defineProperty(articleRole, "__esModule", {
    value: true
  });
  articleRole.default = void 0;
  var articleRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        name: "article"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "document"]]
  };
  var _default = articleRole$12;
  articleRole.default = _default;
  return articleRole;
}
var bannerRole = {};
var hasRequiredBannerRole;
function requireBannerRole() {
  if (hasRequiredBannerRole) return bannerRole;
  hasRequiredBannerRole = 1;
  Object.defineProperty(bannerRole, "__esModule", {
    value: true
  });
  bannerRole.default = void 0;
  var bannerRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        constraints: ["scoped to the body element"],
        name: "header"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = bannerRole$12;
  bannerRole.default = _default;
  return bannerRole;
}
var blockquoteRole = {};
var hasRequiredBlockquoteRole;
function requireBlockquoteRole() {
  if (hasRequiredBlockquoteRole) return blockquoteRole;
  hasRequiredBlockquoteRole = 1;
  Object.defineProperty(blockquoteRole, "__esModule", {
    value: true
  });
  blockquoteRole.default = void 0;
  var blockquoteRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "blockquote"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = blockquoteRole$12;
  blockquoteRole.default = _default;
  return blockquoteRole;
}
var buttonRole = {};
var hasRequiredButtonRole;
function requireButtonRole() {
  if (hasRequiredButtonRole) return buttonRole;
  hasRequiredButtonRole = 1;
  Object.defineProperty(buttonRole, "__esModule", {
    value: true
  });
  buttonRole.default = void 0;
  var buttonRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-pressed": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "button"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "image"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "reset"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "type",
          value: "submit"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        name: "button"
      },
      module: "HTML"
    }, {
      concept: {
        name: "trigger"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command"]]
  };
  var _default = buttonRole$12;
  buttonRole.default = _default;
  return buttonRole;
}
var captionRole = {};
var hasRequiredCaptionRole;
function requireCaptionRole() {
  if (hasRequiredCaptionRole) return captionRole;
  hasRequiredCaptionRole = 1;
  Object.defineProperty(captionRole, "__esModule", {
    value: true
  });
  captionRole.default = void 0;
  var captionRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "caption"
      },
      module: "HTML"
    }],
    requireContextRole: ["figure", "grid", "table"],
    requiredContextRole: ["figure", "grid", "table"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = captionRole$12;
  captionRole.default = _default;
  return captionRole;
}
var cellRole = {};
var hasRequiredCellRole;
function requireCellRole() {
  if (hasRequiredCellRole) return cellRole;
  hasRequiredCellRole = 1;
  Object.defineProperty(cellRole, "__esModule", {
    value: true
  });
  cellRole.default = void 0;
  var cellRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-colindex": null,
      "aria-colspan": null,
      "aria-rowindex": null,
      "aria-rowspan": null
    },
    relatedConcepts: [{
      concept: {
        constraints: ["ancestor table element has table role"],
        name: "td"
      },
      module: "HTML"
    }],
    requireContextRole: ["row"],
    requiredContextRole: ["row"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = cellRole$12;
  cellRole.default = _default;
  return cellRole;
}
var checkboxRole = {};
var hasRequiredCheckboxRole;
function requireCheckboxRole() {
  if (hasRequiredCheckboxRole) return checkboxRole;
  hasRequiredCheckboxRole = 1;
  Object.defineProperty(checkboxRole, "__esModule", {
    value: true
  });
  checkboxRole.default = void 0;
  var checkboxRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-checked": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "checkbox"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        name: "option"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = checkboxRole$12;
  checkboxRole.default = _default;
  return checkboxRole;
}
var codeRole = {};
var hasRequiredCodeRole;
function requireCodeRole() {
  if (hasRequiredCodeRole) return codeRole;
  hasRequiredCodeRole = 1;
  Object.defineProperty(codeRole, "__esModule", {
    value: true
  });
  codeRole.default = void 0;
  var codeRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "code"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = codeRole$12;
  codeRole.default = _default;
  return codeRole;
}
var columnheaderRole = {};
var hasRequiredColumnheaderRole;
function requireColumnheaderRole() {
  if (hasRequiredColumnheaderRole) return columnheaderRole;
  hasRequiredColumnheaderRole = 1;
  Object.defineProperty(columnheaderRole, "__esModule", {
    value: true
  });
  columnheaderRole.default = void 0;
  var columnheaderRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-sort": null
    },
    relatedConcepts: [{
      concept: {
        name: "th"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "scope",
          value: "col"
        }],
        name: "th"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "scope",
          value: "colgroup"
        }],
        name: "th"
      },
      module: "HTML"
    }],
    requireContextRole: ["row"],
    requiredContextRole: ["row"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
  };
  var _default = columnheaderRole$12;
  columnheaderRole.default = _default;
  return columnheaderRole;
}
var comboboxRole = {};
var hasRequiredComboboxRole;
function requireComboboxRole() {
  if (hasRequiredComboboxRole) return comboboxRole;
  hasRequiredComboboxRole = 1;
  Object.defineProperty(comboboxRole, "__esModule", {
    value: true
  });
  comboboxRole.default = void 0;
  var comboboxRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-autocomplete": null,
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-expanded": "false",
      "aria-haspopup": "listbox"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "email"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "search"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "tel"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "text"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "url"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "list"
        }, {
          name: "type",
          value: "url"
        }],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "multiple"
        }, {
          constraints: ["undefined"],
          name: "size"
        }],
        constraints: ["the multiple attribute is not set and the size attribute does not have a value greater than 1"],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        name: "select"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-controls": null,
      "aria-expanded": "false"
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = comboboxRole$12;
  comboboxRole.default = _default;
  return comboboxRole;
}
var complementaryRole = {};
var hasRequiredComplementaryRole;
function requireComplementaryRole() {
  if (hasRequiredComplementaryRole) return complementaryRole;
  hasRequiredComplementaryRole = 1;
  Object.defineProperty(complementaryRole, "__esModule", {
    value: true
  });
  complementaryRole.default = void 0;
  var complementaryRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "aside"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-label"
        }],
        constraints: ["scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
        name: "aside"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-labelledby"
        }],
        constraints: ["scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
        name: "aside"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = complementaryRole$12;
  complementaryRole.default = _default;
  return complementaryRole;
}
var contentinfoRole = {};
var hasRequiredContentinfoRole;
function requireContentinfoRole() {
  if (hasRequiredContentinfoRole) return contentinfoRole;
  hasRequiredContentinfoRole = 1;
  Object.defineProperty(contentinfoRole, "__esModule", {
    value: true
  });
  contentinfoRole.default = void 0;
  var contentinfoRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        constraints: ["scoped to the body element"],
        name: "footer"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = contentinfoRole$12;
  contentinfoRole.default = _default;
  return contentinfoRole;
}
var definitionRole = {};
var hasRequiredDefinitionRole;
function requireDefinitionRole() {
  if (hasRequiredDefinitionRole) return definitionRole;
  hasRequiredDefinitionRole = 1;
  Object.defineProperty(definitionRole, "__esModule", {
    value: true
  });
  definitionRole.default = void 0;
  var definitionRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "dd"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = definitionRole$12;
  definitionRole.default = _default;
  return definitionRole;
}
var deletionRole = {};
var hasRequiredDeletionRole;
function requireDeletionRole() {
  if (hasRequiredDeletionRole) return deletionRole;
  hasRequiredDeletionRole = 1;
  Object.defineProperty(deletionRole, "__esModule", {
    value: true
  });
  deletionRole.default = void 0;
  var deletionRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "del"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = deletionRole$12;
  deletionRole.default = _default;
  return deletionRole;
}
var dialogRole = {};
var hasRequiredDialogRole;
function requireDialogRole() {
  if (hasRequiredDialogRole) return dialogRole;
  hasRequiredDialogRole = 1;
  Object.defineProperty(dialogRole, "__esModule", {
    value: true
  });
  dialogRole.default = void 0;
  var dialogRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "dialog"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "window"]]
  };
  var _default = dialogRole$12;
  dialogRole.default = _default;
  return dialogRole;
}
var directoryRole = {};
var hasRequiredDirectoryRole;
function requireDirectoryRole() {
  if (hasRequiredDirectoryRole) return directoryRole;
  hasRequiredDirectoryRole = 1;
  Object.defineProperty(directoryRole, "__esModule", {
    value: true
  });
  directoryRole.default = void 0;
  var directoryRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      module: "DAISY Guide"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "list"]]
  };
  var _default = directoryRole$12;
  directoryRole.default = _default;
  return directoryRole;
}
var documentRole = {};
var hasRequiredDocumentRole;
function requireDocumentRole() {
  if (hasRequiredDocumentRole) return documentRole;
  hasRequiredDocumentRole = 1;
  Object.defineProperty(documentRole, "__esModule", {
    value: true
  });
  documentRole.default = void 0;
  var documentRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "Device Independence Delivery Unit"
      }
    }, {
      concept: {
        name: "html"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = documentRole$12;
  documentRole.default = _default;
  return documentRole;
}
var emphasisRole = {};
var hasRequiredEmphasisRole;
function requireEmphasisRole() {
  if (hasRequiredEmphasisRole) return emphasisRole;
  hasRequiredEmphasisRole = 1;
  Object.defineProperty(emphasisRole, "__esModule", {
    value: true
  });
  emphasisRole.default = void 0;
  var emphasisRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "em"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = emphasisRole$12;
  emphasisRole.default = _default;
  return emphasisRole;
}
var feedRole = {};
var hasRequiredFeedRole;
function requireFeedRole() {
  if (hasRequiredFeedRole) return feedRole;
  hasRequiredFeedRole = 1;
  Object.defineProperty(feedRole, "__esModule", {
    value: true
  });
  feedRole.default = void 0;
  var feedRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["article"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "list"]]
  };
  var _default = feedRole$12;
  feedRole.default = _default;
  return feedRole;
}
var figureRole = {};
var hasRequiredFigureRole;
function requireFigureRole() {
  if (hasRequiredFigureRole) return figureRole;
  hasRequiredFigureRole = 1;
  Object.defineProperty(figureRole, "__esModule", {
    value: true
  });
  figureRole.default = void 0;
  var figureRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "figure"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = figureRole$12;
  figureRole.default = _default;
  return figureRole;
}
var formRole = {};
var hasRequiredFormRole;
function requireFormRole() {
  if (hasRequiredFormRole) return formRole;
  hasRequiredFormRole = 1;
  Object.defineProperty(formRole, "__esModule", {
    value: true
  });
  formRole.default = void 0;
  var formRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-label"
        }],
        name: "form"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-labelledby"
        }],
        name: "form"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "name"
        }],
        name: "form"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = formRole$12;
  formRole.default = _default;
  return formRole;
}
var genericRole = {};
var hasRequiredGenericRole;
function requireGenericRole() {
  if (hasRequiredGenericRole) return genericRole;
  hasRequiredGenericRole = 1;
  Object.defineProperty(genericRole, "__esModule", {
    value: true
  });
  genericRole.default = void 0;
  var genericRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "a"
      },
      module: "HTML"
    }, {
      concept: {
        name: "area"
      },
      module: "HTML"
    }, {
      concept: {
        name: "aside"
      },
      module: "HTML"
    }, {
      concept: {
        name: "b"
      },
      module: "HTML"
    }, {
      concept: {
        name: "bdo"
      },
      module: "HTML"
    }, {
      concept: {
        name: "body"
      },
      module: "HTML"
    }, {
      concept: {
        name: "data"
      },
      module: "HTML"
    }, {
      concept: {
        name: "div"
      },
      module: "HTML"
    }, {
      concept: {
        constraints: ["scoped to the main element", "scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
        name: "footer"
      },
      module: "HTML"
    }, {
      concept: {
        constraints: ["scoped to the main element", "scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
        name: "header"
      },
      module: "HTML"
    }, {
      concept: {
        name: "hgroup"
      },
      module: "HTML"
    }, {
      concept: {
        name: "i"
      },
      module: "HTML"
    }, {
      concept: {
        name: "pre"
      },
      module: "HTML"
    }, {
      concept: {
        name: "q"
      },
      module: "HTML"
    }, {
      concept: {
        name: "samp"
      },
      module: "HTML"
    }, {
      concept: {
        name: "section"
      },
      module: "HTML"
    }, {
      concept: {
        name: "small"
      },
      module: "HTML"
    }, {
      concept: {
        name: "span"
      },
      module: "HTML"
    }, {
      concept: {
        name: "u"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = genericRole$12;
  genericRole.default = _default;
  return genericRole;
}
var gridRole = {};
var hasRequiredGridRole;
function requireGridRole() {
  if (hasRequiredGridRole) return gridRole;
  hasRequiredGridRole = 1;
  Object.defineProperty(gridRole, "__esModule", {
    value: true
  });
  gridRole.default = void 0;
  var gridRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-multiselectable": null,
      "aria-readonly": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["row"], ["row", "rowgroup"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]]
  };
  var _default = gridRole$12;
  gridRole.default = _default;
  return gridRole;
}
var gridcellRole = {};
var hasRequiredGridcellRole;
function requireGridcellRole() {
  if (hasRequiredGridcellRole) return gridcellRole;
  hasRequiredGridcellRole = 1;
  Object.defineProperty(gridcellRole, "__esModule", {
    value: true
  });
  gridcellRole.default = void 0;
  var gridcellRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-selected": null
    },
    relatedConcepts: [{
      concept: {
        constraints: ["ancestor table element has grid role", "ancestor table element has treegrid role"],
        name: "td"
      },
      module: "HTML"
    }],
    requireContextRole: ["row"],
    requiredContextRole: ["row"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]]
  };
  var _default = gridcellRole$12;
  gridcellRole.default = _default;
  return gridcellRole;
}
var groupRole = {};
var hasRequiredGroupRole;
function requireGroupRole() {
  if (hasRequiredGroupRole) return groupRole;
  hasRequiredGroupRole = 1;
  Object.defineProperty(groupRole, "__esModule", {
    value: true
  });
  groupRole.default = void 0;
  var groupRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-disabled": null
    },
    relatedConcepts: [{
      concept: {
        name: "details"
      },
      module: "HTML"
    }, {
      concept: {
        name: "fieldset"
      },
      module: "HTML"
    }, {
      concept: {
        name: "optgroup"
      },
      module: "HTML"
    }, {
      concept: {
        name: "address"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = groupRole$12;
  groupRole.default = _default;
  return groupRole;
}
var headingRole = {};
var hasRequiredHeadingRole;
function requireHeadingRole() {
  if (hasRequiredHeadingRole) return headingRole;
  hasRequiredHeadingRole = 1;
  Object.defineProperty(headingRole, "__esModule", {
    value: true
  });
  headingRole.default = void 0;
  var headingRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-level": "2"
    },
    relatedConcepts: [{
      concept: {
        name: "h1"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h2"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h3"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h4"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h5"
      },
      module: "HTML"
    }, {
      concept: {
        name: "h6"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-level": "2"
    },
    superClass: [["roletype", "structure", "sectionhead"]]
  };
  var _default = headingRole$12;
  headingRole.default = _default;
  return headingRole;
}
var imgRole = {};
var hasRequiredImgRole;
function requireImgRole() {
  if (hasRequiredImgRole) return imgRole;
  hasRequiredImgRole = 1;
  Object.defineProperty(imgRole, "__esModule", {
    value: true
  });
  imgRole.default = void 0;
  var imgRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "alt"
        }],
        name: "img"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "alt"
        }],
        name: "img"
      },
      module: "HTML"
    }, {
      concept: {
        name: "imggroup"
      },
      module: "DTB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = imgRole$12;
  imgRole.default = _default;
  return imgRole;
}
var insertionRole = {};
var hasRequiredInsertionRole;
function requireInsertionRole() {
  if (hasRequiredInsertionRole) return insertionRole;
  hasRequiredInsertionRole = 1;
  Object.defineProperty(insertionRole, "__esModule", {
    value: true
  });
  insertionRole.default = void 0;
  var insertionRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "ins"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = insertionRole$12;
  insertionRole.default = _default;
  return insertionRole;
}
var linkRole = {};
var hasRequiredLinkRole;
function requireLinkRole() {
  if (hasRequiredLinkRole) return linkRole;
  hasRequiredLinkRole = 1;
  Object.defineProperty(linkRole, "__esModule", {
    value: true
  });
  linkRole.default = void 0;
  var linkRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "href"
        }],
        name: "a"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "href"
        }],
        name: "area"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command"]]
  };
  var _default = linkRole$12;
  linkRole.default = _default;
  return linkRole;
}
var listRole = {};
var hasRequiredListRole;
function requireListRole() {
  if (hasRequiredListRole) return listRole;
  hasRequiredListRole = 1;
  Object.defineProperty(listRole, "__esModule", {
    value: true
  });
  listRole.default = void 0;
  var listRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menu"
      },
      module: "HTML"
    }, {
      concept: {
        name: "ol"
      },
      module: "HTML"
    }, {
      concept: {
        name: "ul"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["listitem"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = listRole$12;
  listRole.default = _default;
  return listRole;
}
var listboxRole = {};
var hasRequiredListboxRole;
function requireListboxRole() {
  if (hasRequiredListboxRole) return listboxRole;
  hasRequiredListboxRole = 1;
  Object.defineProperty(listboxRole, "__esModule", {
    value: true
  });
  listboxRole.default = void 0;
  var listboxRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-invalid": null,
      "aria-multiselectable": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-orientation": "vertical"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: [">1"],
          name: "size"
        }],
        constraints: ["the size attribute value is greater than 1"],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "multiple"
        }],
        name: "select"
      },
      module: "HTML"
    }, {
      concept: {
        name: "datalist"
      },
      module: "HTML"
    }, {
      concept: {
        name: "list"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "select"
      },
      module: "XForms"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["option", "group"], ["option"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = listboxRole$12;
  listboxRole.default = _default;
  return listboxRole;
}
var listitemRole = {};
var hasRequiredListitemRole;
function requireListitemRole() {
  if (hasRequiredListitemRole) return listitemRole;
  hasRequiredListitemRole = 1;
  Object.defineProperty(listitemRole, "__esModule", {
    value: true
  });
  listitemRole.default = void 0;
  var listitemRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-level": null,
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        constraints: ["direct descendant of ol", "direct descendant of ul", "direct descendant of menu"],
        name: "li"
      },
      module: "HTML"
    }, {
      concept: {
        name: "item"
      },
      module: "XForms"
    }],
    requireContextRole: ["directory", "list"],
    requiredContextRole: ["directory", "list"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = listitemRole$12;
  listitemRole.default = _default;
  return listitemRole;
}
var logRole = {};
var hasRequiredLogRole;
function requireLogRole() {
  if (hasRequiredLogRole) return logRole;
  hasRequiredLogRole = 1;
  Object.defineProperty(logRole, "__esModule", {
    value: true
  });
  logRole.default = void 0;
  var logRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-live": "polite"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = logRole$12;
  logRole.default = _default;
  return logRole;
}
var mainRole = {};
var hasRequiredMainRole;
function requireMainRole() {
  if (hasRequiredMainRole) return mainRole;
  hasRequiredMainRole = 1;
  Object.defineProperty(mainRole, "__esModule", {
    value: true
  });
  mainRole.default = void 0;
  var mainRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "main"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = mainRole$12;
  mainRole.default = _default;
  return mainRole;
}
var markRole = {};
var hasRequiredMarkRole;
function requireMarkRole() {
  if (hasRequiredMarkRole) return markRole;
  hasRequiredMarkRole = 1;
  Object.defineProperty(markRole, "__esModule", {
    value: true
  });
  markRole.default = void 0;
  var markRole$1 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: [],
    props: {
      "aria-braillelabel": null,
      "aria-brailleroledescription": null,
      "aria-description": null
    },
    relatedConcepts: [{
      concept: {
        name: "mark"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = markRole$1;
  markRole.default = _default;
  return markRole;
}
var marqueeRole = {};
var hasRequiredMarqueeRole;
function requireMarqueeRole() {
  if (hasRequiredMarqueeRole) return marqueeRole;
  hasRequiredMarqueeRole = 1;
  Object.defineProperty(marqueeRole, "__esModule", {
    value: true
  });
  marqueeRole.default = void 0;
  var marqueeRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = marqueeRole$12;
  marqueeRole.default = _default;
  return marqueeRole;
}
var mathRole = {};
var hasRequiredMathRole;
function requireMathRole() {
  if (hasRequiredMathRole) return mathRole;
  hasRequiredMathRole = 1;
  Object.defineProperty(mathRole, "__esModule", {
    value: true
  });
  mathRole.default = void 0;
  var mathRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "math"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = mathRole$12;
  mathRole.default = _default;
  return mathRole;
}
var menuRole = {};
var hasRequiredMenuRole;
function requireMenuRole() {
  if (hasRequiredMenuRole) return menuRole;
  hasRequiredMenuRole = 1;
  Object.defineProperty(menuRole, "__esModule", {
    value: true
  });
  menuRole.default = void 0;
  var menuRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": "vertical"
    },
    relatedConcepts: [{
      concept: {
        name: "MENU"
      },
      module: "JAPI"
    }, {
      concept: {
        name: "list"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "select"
      },
      module: "XForms"
    }, {
      concept: {
        name: "sidebar"
      },
      module: "DTB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = menuRole$12;
  menuRole.default = _default;
  return menuRole;
}
var menubarRole = {};
var hasRequiredMenubarRole;
function requireMenubarRole() {
  if (hasRequiredMenubarRole) return menubarRole;
  hasRequiredMenubarRole = 1;
  Object.defineProperty(menubarRole, "__esModule", {
    value: true
  });
  menubarRole.default = void 0;
  var menubarRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": "horizontal"
    },
    relatedConcepts: [{
      concept: {
        name: "toolbar"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]]
  };
  var _default = menubarRole$12;
  menubarRole.default = _default;
  return menubarRole;
}
var menuitemRole = {};
var hasRequiredMenuitemRole;
function requireMenuitemRole() {
  if (hasRequiredMenuitemRole) return menuitemRole;
  hasRequiredMenuitemRole = 1;
  Object.defineProperty(menuitemRole, "__esModule", {
    value: true
  });
  menuitemRole.default = void 0;
  var menuitemRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        name: "MENU_ITEM"
      },
      module: "JAPI"
    }, {
      concept: {
        name: "listitem"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "option"
      },
      module: "ARIA"
    }],
    requireContextRole: ["group", "menu", "menubar"],
    requiredContextRole: ["group", "menu", "menubar"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command"]]
  };
  var _default = menuitemRole$12;
  menuitemRole.default = _default;
  return menuitemRole;
}
var menuitemcheckboxRole = {};
var hasRequiredMenuitemcheckboxRole;
function requireMenuitemcheckboxRole() {
  if (hasRequiredMenuitemcheckboxRole) return menuitemcheckboxRole;
  hasRequiredMenuitemcheckboxRole = 1;
  Object.defineProperty(menuitemcheckboxRole, "__esModule", {
    value: true
  });
  menuitemcheckboxRole.default = void 0;
  var menuitemcheckboxRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menuitem"
      },
      module: "ARIA"
    }],
    requireContextRole: ["group", "menu", "menubar"],
    requiredContextRole: ["group", "menu", "menubar"],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]]
  };
  var _default = menuitemcheckboxRole$12;
  menuitemcheckboxRole.default = _default;
  return menuitemcheckboxRole;
}
var menuitemradioRole = {};
var hasRequiredMenuitemradioRole;
function requireMenuitemradioRole() {
  if (hasRequiredMenuitemradioRole) return menuitemradioRole;
  hasRequiredMenuitemradioRole = 1;
  Object.defineProperty(menuitemradioRole, "__esModule", {
    value: true
  });
  menuitemradioRole.default = void 0;
  var menuitemradioRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "menuitem"
      },
      module: "ARIA"
    }],
    requireContextRole: ["group", "menu", "menubar"],
    requiredContextRole: ["group", "menu", "menubar"],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]]
  };
  var _default = menuitemradioRole$12;
  menuitemradioRole.default = _default;
  return menuitemradioRole;
}
var meterRole = {};
var hasRequiredMeterRole;
function requireMeterRole() {
  if (hasRequiredMeterRole) return meterRole;
  hasRequiredMeterRole = 1;
  Object.defineProperty(meterRole, "__esModule", {
    value: true
  });
  meterRole.default = void 0;
  var meterRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-valuetext": null,
      "aria-valuemax": "100",
      "aria-valuemin": "0"
    },
    relatedConcepts: [{
      concept: {
        name: "meter"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-valuenow": null
    },
    superClass: [["roletype", "structure", "range"]]
  };
  var _default = meterRole$12;
  meterRole.default = _default;
  return meterRole;
}
var navigationRole = {};
var hasRequiredNavigationRole;
function requireNavigationRole() {
  if (hasRequiredNavigationRole) return navigationRole;
  hasRequiredNavigationRole = 1;
  Object.defineProperty(navigationRole, "__esModule", {
    value: true
  });
  navigationRole.default = void 0;
  var navigationRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "nav"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = navigationRole$12;
  navigationRole.default = _default;
  return navigationRole;
}
var noneRole = {};
var hasRequiredNoneRole;
function requireNoneRole() {
  if (hasRequiredNoneRole) return noneRole;
  hasRequiredNoneRole = 1;
  Object.defineProperty(noneRole, "__esModule", {
    value: true
  });
  noneRole.default = void 0;
  var noneRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: [],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: []
  };
  var _default = noneRole$12;
  noneRole.default = _default;
  return noneRole;
}
var noteRole = {};
var hasRequiredNoteRole;
function requireNoteRole() {
  if (hasRequiredNoteRole) return noteRole;
  hasRequiredNoteRole = 1;
  Object.defineProperty(noteRole, "__esModule", {
    value: true
  });
  noteRole.default = void 0;
  var noteRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = noteRole$12;
  noteRole.default = _default;
  return noteRole;
}
var optionRole = {};
var hasRequiredOptionRole;
function requireOptionRole() {
  if (hasRequiredOptionRole) return optionRole;
  hasRequiredOptionRole = 1;
  Object.defineProperty(optionRole, "__esModule", {
    value: true
  });
  optionRole.default = void 0;
  var optionRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-checked": null,
      "aria-posinset": null,
      "aria-setsize": null,
      "aria-selected": "false"
    },
    relatedConcepts: [{
      concept: {
        name: "item"
      },
      module: "XForms"
    }, {
      concept: {
        name: "listitem"
      },
      module: "ARIA"
    }, {
      concept: {
        name: "option"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-selected": "false"
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = optionRole$12;
  optionRole.default = _default;
  return optionRole;
}
var paragraphRole = {};
var hasRequiredParagraphRole;
function requireParagraphRole() {
  if (hasRequiredParagraphRole) return paragraphRole;
  hasRequiredParagraphRole = 1;
  Object.defineProperty(paragraphRole, "__esModule", {
    value: true
  });
  paragraphRole.default = void 0;
  var paragraphRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "p"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = paragraphRole$12;
  paragraphRole.default = _default;
  return paragraphRole;
}
var presentationRole = {};
var hasRequiredPresentationRole;
function requirePresentationRole() {
  if (hasRequiredPresentationRole) return presentationRole;
  hasRequiredPresentationRole = 1;
  Object.defineProperty(presentationRole, "__esModule", {
    value: true
  });
  presentationRole.default = void 0;
  var presentationRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "alt",
          value: ""
        }],
        name: "img"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = presentationRole$12;
  presentationRole.default = _default;
  return presentationRole;
}
var progressbarRole = {};
var hasRequiredProgressbarRole;
function requireProgressbarRole() {
  if (hasRequiredProgressbarRole) return progressbarRole;
  hasRequiredProgressbarRole = 1;
  Object.defineProperty(progressbarRole, "__esModule", {
    value: true
  });
  progressbarRole.default = void 0;
  var progressbarRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-valuetext": null
    },
    relatedConcepts: [{
      concept: {
        name: "progress"
      },
      module: "HTML"
    }, {
      concept: {
        name: "status"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
  };
  var _default = progressbarRole$12;
  progressbarRole.default = _default;
  return progressbarRole;
}
var radioRole = {};
var hasRequiredRadioRole;
function requireRadioRole() {
  if (hasRequiredRadioRole) return radioRole;
  hasRequiredRadioRole = 1;
  Object.defineProperty(radioRole, "__esModule", {
    value: true
  });
  radioRole.default = void 0;
  var radioRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-checked": null,
      "aria-posinset": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "radio"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = radioRole$12;
  radioRole.default = _default;
  return radioRole;
}
var radiogroupRole = {};
var hasRequiredRadiogroupRole;
function requireRadiogroupRole() {
  if (hasRequiredRadiogroupRole) return radiogroupRole;
  hasRequiredRadiogroupRole = 1;
  Object.defineProperty(radiogroupRole, "__esModule", {
    value: true
  });
  radiogroupRole.default = void 0;
  var radiogroupRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null
    },
    relatedConcepts: [{
      concept: {
        name: "list"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["radio"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = radiogroupRole$12;
  radiogroupRole.default = _default;
  return radiogroupRole;
}
var regionRole = {};
var hasRequiredRegionRole;
function requireRegionRole() {
  if (hasRequiredRegionRole) return regionRole;
  hasRequiredRegionRole = 1;
  Object.defineProperty(regionRole, "__esModule", {
    value: true
  });
  regionRole.default = void 0;
  var regionRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-label"
        }],
        name: "section"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["set"],
          name: "aria-labelledby"
        }],
        name: "section"
      },
      module: "HTML"
    }, {
      concept: {
        name: "Device Independence Glossart perceivable unit"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = regionRole$12;
  regionRole.default = _default;
  return regionRole;
}
var rowRole = {};
var hasRequiredRowRole;
function requireRowRole() {
  if (hasRequiredRowRole) return rowRole;
  hasRequiredRowRole = 1;
  Object.defineProperty(rowRole, "__esModule", {
    value: true
  });
  rowRole.default = void 0;
  var rowRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-colindex": null,
      "aria-expanded": null,
      "aria-level": null,
      "aria-posinset": null,
      "aria-rowindex": null,
      "aria-selected": null,
      "aria-setsize": null
    },
    relatedConcepts: [{
      concept: {
        name: "tr"
      },
      module: "HTML"
    }],
    requireContextRole: ["grid", "rowgroup", "table", "treegrid"],
    requiredContextRole: ["grid", "rowgroup", "table", "treegrid"],
    requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]]
  };
  var _default = rowRole$12;
  rowRole.default = _default;
  return rowRole;
}
var rowgroupRole = {};
var hasRequiredRowgroupRole;
function requireRowgroupRole() {
  if (hasRequiredRowgroupRole) return rowgroupRole;
  hasRequiredRowgroupRole = 1;
  Object.defineProperty(rowgroupRole, "__esModule", {
    value: true
  });
  rowgroupRole.default = void 0;
  var rowgroupRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "tbody"
      },
      module: "HTML"
    }, {
      concept: {
        name: "tfoot"
      },
      module: "HTML"
    }, {
      concept: {
        name: "thead"
      },
      module: "HTML"
    }],
    requireContextRole: ["grid", "table", "treegrid"],
    requiredContextRole: ["grid", "table", "treegrid"],
    requiredOwnedElements: [["row"]],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = rowgroupRole$12;
  rowgroupRole.default = _default;
  return rowgroupRole;
}
var rowheaderRole = {};
var hasRequiredRowheaderRole;
function requireRowheaderRole() {
  if (hasRequiredRowheaderRole) return rowheaderRole;
  hasRequiredRowheaderRole = 1;
  Object.defineProperty(rowheaderRole, "__esModule", {
    value: true
  });
  rowheaderRole.default = void 0;
  var rowheaderRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-sort": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "scope",
          value: "row"
        }],
        name: "th"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          name: "scope",
          value: "rowgroup"
        }],
        name: "th"
      },
      module: "HTML"
    }],
    requireContextRole: ["row", "rowgroup"],
    requiredContextRole: ["row", "rowgroup"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
  };
  var _default = rowheaderRole$12;
  rowheaderRole.default = _default;
  return rowheaderRole;
}
var scrollbarRole = {};
var hasRequiredScrollbarRole;
function requireScrollbarRole() {
  if (hasRequiredScrollbarRole) return scrollbarRole;
  hasRequiredScrollbarRole = 1;
  Object.defineProperty(scrollbarRole, "__esModule", {
    value: true
  });
  scrollbarRole.default = void 0;
  var scrollbarRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-valuetext": null,
      "aria-orientation": "vertical",
      "aria-valuemax": "100",
      "aria-valuemin": "0"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-controls": null,
      "aria-valuenow": null
    },
    superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
  };
  var _default = scrollbarRole$12;
  scrollbarRole.default = _default;
  return scrollbarRole;
}
var searchRole = {};
var hasRequiredSearchRole;
function requireSearchRole() {
  if (hasRequiredSearchRole) return searchRole;
  hasRequiredSearchRole = 1;
  Object.defineProperty(searchRole, "__esModule", {
    value: true
  });
  searchRole.default = void 0;
  var searchRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = searchRole$12;
  searchRole.default = _default;
  return searchRole;
}
var searchboxRole = {};
var hasRequiredSearchboxRole;
function requireSearchboxRole() {
  if (hasRequiredSearchboxRole) return searchboxRole;
  hasRequiredSearchboxRole = 1;
  Object.defineProperty(searchboxRole, "__esModule", {
    value: true
  });
  searchboxRole.default = void 0;
  var searchboxRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "search"
        }],
        constraints: ["the list attribute is not set"],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "input", "textbox"]]
  };
  var _default = searchboxRole$12;
  searchboxRole.default = _default;
  return searchboxRole;
}
var separatorRole = {};
var hasRequiredSeparatorRole;
function requireSeparatorRole() {
  if (hasRequiredSeparatorRole) return separatorRole;
  hasRequiredSeparatorRole = 1;
  Object.defineProperty(separatorRole, "__esModule", {
    value: true
  });
  separatorRole.default = void 0;
  var separatorRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-orientation": "horizontal",
      "aria-valuemax": "100",
      "aria-valuemin": "0",
      "aria-valuenow": null,
      "aria-valuetext": null
    },
    relatedConcepts: [{
      concept: {
        name: "hr"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure"]]
  };
  var _default = separatorRole$12;
  separatorRole.default = _default;
  return separatorRole;
}
var sliderRole = {};
var hasRequiredSliderRole;
function requireSliderRole() {
  if (hasRequiredSliderRole) return sliderRole;
  hasRequiredSliderRole = 1;
  Object.defineProperty(sliderRole, "__esModule", {
    value: true
  });
  sliderRole.default = void 0;
  var sliderRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-haspopup": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-valuetext": null,
      "aria-orientation": "horizontal",
      "aria-valuemax": "100",
      "aria-valuemin": "0"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "range"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-valuenow": null
    },
    superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]]
  };
  var _default = sliderRole$12;
  sliderRole.default = _default;
  return sliderRole;
}
var spinbuttonRole = {};
var hasRequiredSpinbuttonRole;
function requireSpinbuttonRole() {
  if (hasRequiredSpinbuttonRole) return spinbuttonRole;
  hasRequiredSpinbuttonRole = 1;
  Object.defineProperty(spinbuttonRole, "__esModule", {
    value: true
  });
  spinbuttonRole.default = void 0;
  var spinbuttonRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-readonly": null,
      "aria-required": null,
      "aria-valuetext": null,
      "aria-valuenow": "0"
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          name: "type",
          value: "number"
        }],
        name: "input"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]]
  };
  var _default = spinbuttonRole$12;
  spinbuttonRole.default = _default;
  return spinbuttonRole;
}
var statusRole = {};
var hasRequiredStatusRole;
function requireStatusRole() {
  if (hasRequiredStatusRole) return statusRole;
  hasRequiredStatusRole = 1;
  Object.defineProperty(statusRole, "__esModule", {
    value: true
  });
  statusRole.default = void 0;
  var statusRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-atomic": "true",
      "aria-live": "polite"
    },
    relatedConcepts: [{
      concept: {
        name: "output"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = statusRole$12;
  statusRole.default = _default;
  return statusRole;
}
var strongRole = {};
var hasRequiredStrongRole;
function requireStrongRole() {
  if (hasRequiredStrongRole) return strongRole;
  hasRequiredStrongRole = 1;
  Object.defineProperty(strongRole, "__esModule", {
    value: true
  });
  strongRole.default = void 0;
  var strongRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "strong"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = strongRole$12;
  strongRole.default = _default;
  return strongRole;
}
var subscriptRole = {};
var hasRequiredSubscriptRole;
function requireSubscriptRole() {
  if (hasRequiredSubscriptRole) return subscriptRole;
  hasRequiredSubscriptRole = 1;
  Object.defineProperty(subscriptRole, "__esModule", {
    value: true
  });
  subscriptRole.default = void 0;
  var subscriptRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "sub"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = subscriptRole$12;
  subscriptRole.default = _default;
  return subscriptRole;
}
var superscriptRole = {};
var hasRequiredSuperscriptRole;
function requireSuperscriptRole() {
  if (hasRequiredSuperscriptRole) return superscriptRole;
  hasRequiredSuperscriptRole = 1;
  Object.defineProperty(superscriptRole, "__esModule", {
    value: true
  });
  superscriptRole.default = void 0;
  var superscriptRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["prohibited"],
    prohibitedProps: ["aria-label", "aria-labelledby"],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "sup"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = superscriptRole$12;
  superscriptRole.default = _default;
  return superscriptRole;
}
var switchRole = {};
var hasRequiredSwitchRole;
function requireSwitchRole() {
  if (hasRequiredSwitchRole) return switchRole;
  hasRequiredSwitchRole = 1;
  Object.defineProperty(switchRole, "__esModule", {
    value: true
  });
  switchRole.default = void 0;
  var switchRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "button"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-checked": null
    },
    superClass: [["roletype", "widget", "input", "checkbox"]]
  };
  var _default = switchRole$12;
  switchRole.default = _default;
  return switchRole;
}
var tabRole = {};
var hasRequiredTabRole;
function requireTabRole() {
  if (hasRequiredTabRole) return tabRole;
  hasRequiredTabRole = 1;
  Object.defineProperty(tabRole, "__esModule", {
    value: true
  });
  tabRole.default = void 0;
  var tabRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-posinset": null,
      "aria-setsize": null,
      "aria-selected": "false"
    },
    relatedConcepts: [],
    requireContextRole: ["tablist"],
    requiredContextRole: ["tablist"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]]
  };
  var _default = tabRole$12;
  tabRole.default = _default;
  return tabRole;
}
var tableRole = {};
var hasRequiredTableRole;
function requireTableRole() {
  if (hasRequiredTableRole) return tableRole;
  hasRequiredTableRole = 1;
  Object.defineProperty(tableRole, "__esModule", {
    value: true
  });
  tableRole.default = void 0;
  var tableRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-colcount": null,
      "aria-rowcount": null
    },
    relatedConcepts: [{
      concept: {
        name: "table"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["row"], ["row", "rowgroup"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = tableRole$12;
  tableRole.default = _default;
  return tableRole;
}
var tablistRole = {};
var hasRequiredTablistRole;
function requireTablistRole() {
  if (hasRequiredTablistRole) return tablistRole;
  hasRequiredTablistRole = 1;
  Object.defineProperty(tablistRole, "__esModule", {
    value: true
  });
  tablistRole.default = void 0;
  var tablistRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-level": null,
      "aria-multiselectable": null,
      "aria-orientation": "horizontal"
    },
    relatedConcepts: [{
      module: "DAISY",
      concept: {
        name: "guide"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["tab"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite"]]
  };
  var _default = tablistRole$12;
  tablistRole.default = _default;
  return tablistRole;
}
var tabpanelRole = {};
var hasRequiredTabpanelRole;
function requireTabpanelRole() {
  if (hasRequiredTabpanelRole) return tabpanelRole;
  hasRequiredTabpanelRole = 1;
  Object.defineProperty(tabpanelRole, "__esModule", {
    value: true
  });
  tabpanelRole.default = void 0;
  var tabpanelRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = tabpanelRole$12;
  tabpanelRole.default = _default;
  return tabpanelRole;
}
var termRole = {};
var hasRequiredTermRole;
function requireTermRole() {
  if (hasRequiredTermRole) return termRole;
  hasRequiredTermRole = 1;
  Object.defineProperty(termRole, "__esModule", {
    value: true
  });
  termRole.default = void 0;
  var termRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "dfn"
      },
      module: "HTML"
    }, {
      concept: {
        name: "dt"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = termRole$12;
  termRole.default = _default;
  return termRole;
}
var textboxRole = {};
var hasRequiredTextboxRole;
function requireTextboxRole() {
  if (hasRequiredTextboxRole) return textboxRole;
  hasRequiredTextboxRole = 1;
  Object.defineProperty(textboxRole, "__esModule", {
    value: true
  });
  textboxRole.default = void 0;
  var textboxRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-activedescendant": null,
      "aria-autocomplete": null,
      "aria-errormessage": null,
      "aria-haspopup": null,
      "aria-invalid": null,
      "aria-multiline": null,
      "aria-placeholder": null,
      "aria-readonly": null,
      "aria-required": null
    },
    relatedConcepts: [{
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "type"
        }, {
          constraints: ["undefined"],
          name: "list"
        }],
        constraints: ["the list attribute is not set"],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "email"
        }],
        constraints: ["the list attribute is not set"],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "tel"
        }],
        constraints: ["the list attribute is not set"],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "text"
        }],
        constraints: ["the list attribute is not set"],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        attributes: [{
          constraints: ["undefined"],
          name: "list"
        }, {
          name: "type",
          value: "url"
        }],
        constraints: ["the list attribute is not set"],
        name: "input"
      },
      module: "HTML"
    }, {
      concept: {
        name: "input"
      },
      module: "XForms"
    }, {
      concept: {
        name: "textarea"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "input"]]
  };
  var _default = textboxRole$12;
  textboxRole.default = _default;
  return textboxRole;
}
var timeRole = {};
var hasRequiredTimeRole;
function requireTimeRole() {
  if (hasRequiredTimeRole) return timeRole;
  hasRequiredTimeRole = 1;
  Object.defineProperty(timeRole, "__esModule", {
    value: true
  });
  timeRole.default = void 0;
  var timeRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "time"
      },
      module: "HTML"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = timeRole$12;
  timeRole.default = _default;
  return timeRole;
}
var timerRole = {};
var hasRequiredTimerRole;
function requireTimerRole() {
  if (hasRequiredTimerRole) return timerRole;
  hasRequiredTimerRole = 1;
  Object.defineProperty(timerRole, "__esModule", {
    value: true
  });
  timerRole.default = void 0;
  var timerRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "status"]]
  };
  var _default = timerRole$12;
  timerRole.default = _default;
  return timerRole;
}
var toolbarRole = {};
var hasRequiredToolbarRole;
function requireToolbarRole() {
  if (hasRequiredToolbarRole) return toolbarRole;
  hasRequiredToolbarRole = 1;
  Object.defineProperty(toolbarRole, "__esModule", {
    value: true
  });
  toolbarRole.default = void 0;
  var toolbarRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-orientation": "horizontal"
    },
    relatedConcepts: [{
      concept: {
        name: "menubar"
      },
      module: "ARIA"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "group"]]
  };
  var _default = toolbarRole$12;
  toolbarRole.default = _default;
  return toolbarRole;
}
var tooltipRole = {};
var hasRequiredTooltipRole;
function requireTooltipRole() {
  if (hasRequiredTooltipRole) return tooltipRole;
  hasRequiredTooltipRole = 1;
  Object.defineProperty(tooltipRole, "__esModule", {
    value: true
  });
  tooltipRole.default = void 0;
  var tooltipRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = tooltipRole$12;
  tooltipRole.default = _default;
  return tooltipRole;
}
var treeRole = {};
var hasRequiredTreeRole;
function requireTreeRole() {
  if (hasRequiredTreeRole) return treeRole;
  hasRequiredTreeRole = 1;
  Object.defineProperty(treeRole, "__esModule", {
    value: true
  });
  treeRole.default = void 0;
  var treeRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null,
      "aria-multiselectable": null,
      "aria-required": null,
      "aria-orientation": "vertical"
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["treeitem", "group"], ["treeitem"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
  };
  var _default = treeRole$12;
  treeRole.default = _default;
  return treeRole;
}
var treegridRole = {};
var hasRequiredTreegridRole;
function requireTreegridRole() {
  if (hasRequiredTreegridRole) return treegridRole;
  hasRequiredTreegridRole = 1;
  Object.defineProperty(treegridRole, "__esModule", {
    value: true
  });
  treegridRole.default = void 0;
  var treegridRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["row"], ["row", "rowgroup"]],
    requiredProps: {},
    superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]]
  };
  var _default = treegridRole$12;
  treegridRole.default = _default;
  return treegridRole;
}
var treeitemRole = {};
var hasRequiredTreeitemRole;
function requireTreeitemRole() {
  if (hasRequiredTreeitemRole) return treeitemRole;
  hasRequiredTreeitemRole = 1;
  Object.defineProperty(treeitemRole, "__esModule", {
    value: true
  });
  treeitemRole.default = void 0;
  var treeitemRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-expanded": null,
      "aria-haspopup": null
    },
    relatedConcepts: [],
    requireContextRole: ["group", "tree"],
    requiredContextRole: ["group", "tree"],
    requiredOwnedElements: [],
    requiredProps: {
      "aria-selected": null
    },
    superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]]
  };
  var _default = treeitemRole$12;
  treeitemRole.default = _default;
  return treeitemRole;
}
var hasRequiredAriaLiteralRoles;
function requireAriaLiteralRoles() {
  if (hasRequiredAriaLiteralRoles) return ariaLiteralRoles;
  hasRequiredAriaLiteralRoles = 1;
  Object.defineProperty(ariaLiteralRoles, "__esModule", {
    value: true
  });
  ariaLiteralRoles.default = void 0;
  var _alertRole = _interopRequireDefault(requireAlertRole());
  var _alertdialogRole = _interopRequireDefault(requireAlertdialogRole());
  var _applicationRole = _interopRequireDefault(requireApplicationRole());
  var _articleRole = _interopRequireDefault(requireArticleRole());
  var _bannerRole = _interopRequireDefault(requireBannerRole());
  var _blockquoteRole = _interopRequireDefault(requireBlockquoteRole());
  var _buttonRole = _interopRequireDefault(requireButtonRole());
  var _captionRole = _interopRequireDefault(requireCaptionRole());
  var _cellRole = _interopRequireDefault(requireCellRole());
  var _checkboxRole = _interopRequireDefault(requireCheckboxRole());
  var _codeRole = _interopRequireDefault(requireCodeRole());
  var _columnheaderRole = _interopRequireDefault(requireColumnheaderRole());
  var _comboboxRole = _interopRequireDefault(requireComboboxRole());
  var _complementaryRole = _interopRequireDefault(requireComplementaryRole());
  var _contentinfoRole = _interopRequireDefault(requireContentinfoRole());
  var _definitionRole = _interopRequireDefault(requireDefinitionRole());
  var _deletionRole = _interopRequireDefault(requireDeletionRole());
  var _dialogRole = _interopRequireDefault(requireDialogRole());
  var _directoryRole = _interopRequireDefault(requireDirectoryRole());
  var _documentRole = _interopRequireDefault(requireDocumentRole());
  var _emphasisRole = _interopRequireDefault(requireEmphasisRole());
  var _feedRole = _interopRequireDefault(requireFeedRole());
  var _figureRole = _interopRequireDefault(requireFigureRole());
  var _formRole = _interopRequireDefault(requireFormRole());
  var _genericRole = _interopRequireDefault(requireGenericRole());
  var _gridRole = _interopRequireDefault(requireGridRole());
  var _gridcellRole = _interopRequireDefault(requireGridcellRole());
  var _groupRole = _interopRequireDefault(requireGroupRole());
  var _headingRole = _interopRequireDefault(requireHeadingRole());
  var _imgRole = _interopRequireDefault(requireImgRole());
  var _insertionRole = _interopRequireDefault(requireInsertionRole());
  var _linkRole = _interopRequireDefault(requireLinkRole());
  var _listRole = _interopRequireDefault(requireListRole());
  var _listboxRole = _interopRequireDefault(requireListboxRole());
  var _listitemRole = _interopRequireDefault(requireListitemRole());
  var _logRole = _interopRequireDefault(requireLogRole());
  var _mainRole = _interopRequireDefault(requireMainRole());
  var _markRole = _interopRequireDefault(requireMarkRole());
  var _marqueeRole = _interopRequireDefault(requireMarqueeRole());
  var _mathRole = _interopRequireDefault(requireMathRole());
  var _menuRole = _interopRequireDefault(requireMenuRole());
  var _menubarRole = _interopRequireDefault(requireMenubarRole());
  var _menuitemRole = _interopRequireDefault(requireMenuitemRole());
  var _menuitemcheckboxRole = _interopRequireDefault(requireMenuitemcheckboxRole());
  var _menuitemradioRole = _interopRequireDefault(requireMenuitemradioRole());
  var _meterRole = _interopRequireDefault(requireMeterRole());
  var _navigationRole = _interopRequireDefault(requireNavigationRole());
  var _noneRole = _interopRequireDefault(requireNoneRole());
  var _noteRole = _interopRequireDefault(requireNoteRole());
  var _optionRole = _interopRequireDefault(requireOptionRole());
  var _paragraphRole = _interopRequireDefault(requireParagraphRole());
  var _presentationRole = _interopRequireDefault(requirePresentationRole());
  var _progressbarRole = _interopRequireDefault(requireProgressbarRole());
  var _radioRole = _interopRequireDefault(requireRadioRole());
  var _radiogroupRole = _interopRequireDefault(requireRadiogroupRole());
  var _regionRole = _interopRequireDefault(requireRegionRole());
  var _rowRole = _interopRequireDefault(requireRowRole());
  var _rowgroupRole = _interopRequireDefault(requireRowgroupRole());
  var _rowheaderRole = _interopRequireDefault(requireRowheaderRole());
  var _scrollbarRole = _interopRequireDefault(requireScrollbarRole());
  var _searchRole = _interopRequireDefault(requireSearchRole());
  var _searchboxRole = _interopRequireDefault(requireSearchboxRole());
  var _separatorRole = _interopRequireDefault(requireSeparatorRole());
  var _sliderRole = _interopRequireDefault(requireSliderRole());
  var _spinbuttonRole = _interopRequireDefault(requireSpinbuttonRole());
  var _statusRole = _interopRequireDefault(requireStatusRole());
  var _strongRole = _interopRequireDefault(requireStrongRole());
  var _subscriptRole = _interopRequireDefault(requireSubscriptRole());
  var _superscriptRole = _interopRequireDefault(requireSuperscriptRole());
  var _switchRole = _interopRequireDefault(requireSwitchRole());
  var _tabRole = _interopRequireDefault(requireTabRole());
  var _tableRole = _interopRequireDefault(requireTableRole());
  var _tablistRole = _interopRequireDefault(requireTablistRole());
  var _tabpanelRole = _interopRequireDefault(requireTabpanelRole());
  var _termRole = _interopRequireDefault(requireTermRole());
  var _textboxRole = _interopRequireDefault(requireTextboxRole());
  var _timeRole = _interopRequireDefault(requireTimeRole());
  var _timerRole = _interopRequireDefault(requireTimerRole());
  var _toolbarRole = _interopRequireDefault(requireToolbarRole());
  var _tooltipRole = _interopRequireDefault(requireTooltipRole());
  var _treeRole = _interopRequireDefault(requireTreeRole());
  var _treegridRole = _interopRequireDefault(requireTreegridRole());
  var _treeitemRole = _interopRequireDefault(requireTreeitemRole());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaLiteralRoles$12 = [["alert", _alertRole.default], ["alertdialog", _alertdialogRole.default], ["application", _applicationRole.default], ["article", _articleRole.default], ["banner", _bannerRole.default], ["blockquote", _blockquoteRole.default], ["button", _buttonRole.default], ["caption", _captionRole.default], ["cell", _cellRole.default], ["checkbox", _checkboxRole.default], ["code", _codeRole.default], ["columnheader", _columnheaderRole.default], ["combobox", _comboboxRole.default], ["complementary", _complementaryRole.default], ["contentinfo", _contentinfoRole.default], ["definition", _definitionRole.default], ["deletion", _deletionRole.default], ["dialog", _dialogRole.default], ["directory", _directoryRole.default], ["document", _documentRole.default], ["emphasis", _emphasisRole.default], ["feed", _feedRole.default], ["figure", _figureRole.default], ["form", _formRole.default], ["generic", _genericRole.default], ["grid", _gridRole.default], ["gridcell", _gridcellRole.default], ["group", _groupRole.default], ["heading", _headingRole.default], ["img", _imgRole.default], ["insertion", _insertionRole.default], ["link", _linkRole.default], ["list", _listRole.default], ["listbox", _listboxRole.default], ["listitem", _listitemRole.default], ["log", _logRole.default], ["main", _mainRole.default], ["mark", _markRole.default], ["marquee", _marqueeRole.default], ["math", _mathRole.default], ["menu", _menuRole.default], ["menubar", _menubarRole.default], ["menuitem", _menuitemRole.default], ["menuitemcheckbox", _menuitemcheckboxRole.default], ["menuitemradio", _menuitemradioRole.default], ["meter", _meterRole.default], ["navigation", _navigationRole.default], ["none", _noneRole.default], ["note", _noteRole.default], ["option", _optionRole.default], ["paragraph", _paragraphRole.default], ["presentation", _presentationRole.default], ["progressbar", _progressbarRole.default], ["radio", _radioRole.default], ["radiogroup", _radiogroupRole.default], ["region", _regionRole.default], ["row", _rowRole.default], ["rowgroup", _rowgroupRole.default], ["rowheader", _rowheaderRole.default], ["scrollbar", _scrollbarRole.default], ["search", _searchRole.default], ["searchbox", _searchboxRole.default], ["separator", _separatorRole.default], ["slider", _sliderRole.default], ["spinbutton", _spinbuttonRole.default], ["status", _statusRole.default], ["strong", _strongRole.default], ["subscript", _subscriptRole.default], ["superscript", _superscriptRole.default], ["switch", _switchRole.default], ["tab", _tabRole.default], ["table", _tableRole.default], ["tablist", _tablistRole.default], ["tabpanel", _tabpanelRole.default], ["term", _termRole.default], ["textbox", _textboxRole.default], ["time", _timeRole.default], ["timer", _timerRole.default], ["toolbar", _toolbarRole.default], ["tooltip", _tooltipRole.default], ["tree", _treeRole.default], ["treegrid", _treegridRole.default], ["treeitem", _treeitemRole.default]];
  var _default = ariaLiteralRoles$12;
  ariaLiteralRoles.default = _default;
  return ariaLiteralRoles;
}
var ariaDpubRoles = {};
var docAbstractRole = {};
var hasRequiredDocAbstractRole;
function requireDocAbstractRole() {
  if (hasRequiredDocAbstractRole) return docAbstractRole;
  hasRequiredDocAbstractRole = 1;
  Object.defineProperty(docAbstractRole, "__esModule", {
    value: true
  });
  docAbstractRole.default = void 0;
  var docAbstractRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "abstract [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docAbstractRole$12;
  docAbstractRole.default = _default;
  return docAbstractRole;
}
var docAcknowledgmentsRole = {};
var hasRequiredDocAcknowledgmentsRole;
function requireDocAcknowledgmentsRole() {
  if (hasRequiredDocAcknowledgmentsRole) return docAcknowledgmentsRole;
  hasRequiredDocAcknowledgmentsRole = 1;
  Object.defineProperty(docAcknowledgmentsRole, "__esModule", {
    value: true
  });
  docAcknowledgmentsRole.default = void 0;
  var docAcknowledgmentsRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "acknowledgments [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docAcknowledgmentsRole$12;
  docAcknowledgmentsRole.default = _default;
  return docAcknowledgmentsRole;
}
var docAfterwordRole = {};
var hasRequiredDocAfterwordRole;
function requireDocAfterwordRole() {
  if (hasRequiredDocAfterwordRole) return docAfterwordRole;
  hasRequiredDocAfterwordRole = 1;
  Object.defineProperty(docAfterwordRole, "__esModule", {
    value: true
  });
  docAfterwordRole.default = void 0;
  var docAfterwordRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "afterword [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docAfterwordRole$12;
  docAfterwordRole.default = _default;
  return docAfterwordRole;
}
var docAppendixRole = {};
var hasRequiredDocAppendixRole;
function requireDocAppendixRole() {
  if (hasRequiredDocAppendixRole) return docAppendixRole;
  hasRequiredDocAppendixRole = 1;
  Object.defineProperty(docAppendixRole, "__esModule", {
    value: true
  });
  docAppendixRole.default = void 0;
  var docAppendixRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "appendix [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docAppendixRole$12;
  docAppendixRole.default = _default;
  return docAppendixRole;
}
var docBacklinkRole = {};
var hasRequiredDocBacklinkRole;
function requireDocBacklinkRole() {
  if (hasRequiredDocBacklinkRole) return docBacklinkRole;
  hasRequiredDocBacklinkRole = 1;
  Object.defineProperty(docBacklinkRole, "__esModule", {
    value: true
  });
  docBacklinkRole.default = void 0;
  var docBacklinkRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "referrer [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docBacklinkRole$12;
  docBacklinkRole.default = _default;
  return docBacklinkRole;
}
var docBiblioentryRole = {};
var hasRequiredDocBiblioentryRole;
function requireDocBiblioentryRole() {
  if (hasRequiredDocBiblioentryRole) return docBiblioentryRole;
  hasRequiredDocBiblioentryRole = 1;
  Object.defineProperty(docBiblioentryRole, "__esModule", {
    value: true
  });
  docBiblioentryRole.default = void 0;
  var docBiblioentryRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "EPUB biblioentry [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: ["doc-bibliography"],
    requiredContextRole: ["doc-bibliography"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "listitem"]]
  };
  var _default = docBiblioentryRole$12;
  docBiblioentryRole.default = _default;
  return docBiblioentryRole;
}
var docBibliographyRole = {};
var hasRequiredDocBibliographyRole;
function requireDocBibliographyRole() {
  if (hasRequiredDocBibliographyRole) return docBibliographyRole;
  hasRequiredDocBibliographyRole = 1;
  Object.defineProperty(docBibliographyRole, "__esModule", {
    value: true
  });
  docBibliographyRole.default = void 0;
  var docBibliographyRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "bibliography [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["doc-biblioentry"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docBibliographyRole$12;
  docBibliographyRole.default = _default;
  return docBibliographyRole;
}
var docBibliorefRole = {};
var hasRequiredDocBibliorefRole;
function requireDocBibliorefRole() {
  if (hasRequiredDocBibliorefRole) return docBibliorefRole;
  hasRequiredDocBibliorefRole = 1;
  Object.defineProperty(docBibliorefRole, "__esModule", {
    value: true
  });
  docBibliorefRole.default = void 0;
  var docBibliorefRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "biblioref [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docBibliorefRole$12;
  docBibliorefRole.default = _default;
  return docBibliorefRole;
}
var docChapterRole = {};
var hasRequiredDocChapterRole;
function requireDocChapterRole() {
  if (hasRequiredDocChapterRole) return docChapterRole;
  hasRequiredDocChapterRole = 1;
  Object.defineProperty(docChapterRole, "__esModule", {
    value: true
  });
  docChapterRole.default = void 0;
  var docChapterRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "chapter [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docChapterRole$12;
  docChapterRole.default = _default;
  return docChapterRole;
}
var docColophonRole = {};
var hasRequiredDocColophonRole;
function requireDocColophonRole() {
  if (hasRequiredDocColophonRole) return docColophonRole;
  hasRequiredDocColophonRole = 1;
  Object.defineProperty(docColophonRole, "__esModule", {
    value: true
  });
  docColophonRole.default = void 0;
  var docColophonRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "colophon [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docColophonRole$12;
  docColophonRole.default = _default;
  return docColophonRole;
}
var docConclusionRole = {};
var hasRequiredDocConclusionRole;
function requireDocConclusionRole() {
  if (hasRequiredDocConclusionRole) return docConclusionRole;
  hasRequiredDocConclusionRole = 1;
  Object.defineProperty(docConclusionRole, "__esModule", {
    value: true
  });
  docConclusionRole.default = void 0;
  var docConclusionRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "conclusion [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docConclusionRole$12;
  docConclusionRole.default = _default;
  return docConclusionRole;
}
var docCoverRole = {};
var hasRequiredDocCoverRole;
function requireDocCoverRole() {
  if (hasRequiredDocCoverRole) return docCoverRole;
  hasRequiredDocCoverRole = 1;
  Object.defineProperty(docCoverRole, "__esModule", {
    value: true
  });
  docCoverRole.default = void 0;
  var docCoverRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "cover [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "img"]]
  };
  var _default = docCoverRole$12;
  docCoverRole.default = _default;
  return docCoverRole;
}
var docCreditRole = {};
var hasRequiredDocCreditRole;
function requireDocCreditRole() {
  if (hasRequiredDocCreditRole) return docCreditRole;
  hasRequiredDocCreditRole = 1;
  Object.defineProperty(docCreditRole, "__esModule", {
    value: true
  });
  docCreditRole.default = void 0;
  var docCreditRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "credit [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docCreditRole$12;
  docCreditRole.default = _default;
  return docCreditRole;
}
var docCreditsRole = {};
var hasRequiredDocCreditsRole;
function requireDocCreditsRole() {
  if (hasRequiredDocCreditsRole) return docCreditsRole;
  hasRequiredDocCreditsRole = 1;
  Object.defineProperty(docCreditsRole, "__esModule", {
    value: true
  });
  docCreditsRole.default = void 0;
  var docCreditsRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "credits [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docCreditsRole$12;
  docCreditsRole.default = _default;
  return docCreditsRole;
}
var docDedicationRole = {};
var hasRequiredDocDedicationRole;
function requireDocDedicationRole() {
  if (hasRequiredDocDedicationRole) return docDedicationRole;
  hasRequiredDocDedicationRole = 1;
  Object.defineProperty(docDedicationRole, "__esModule", {
    value: true
  });
  docDedicationRole.default = void 0;
  var docDedicationRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "dedication [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docDedicationRole$12;
  docDedicationRole.default = _default;
  return docDedicationRole;
}
var docEndnoteRole = {};
var hasRequiredDocEndnoteRole;
function requireDocEndnoteRole() {
  if (hasRequiredDocEndnoteRole) return docEndnoteRole;
  hasRequiredDocEndnoteRole = 1;
  Object.defineProperty(docEndnoteRole, "__esModule", {
    value: true
  });
  docEndnoteRole.default = void 0;
  var docEndnoteRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "rearnote [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: ["doc-endnotes"],
    requiredContextRole: ["doc-endnotes"],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "listitem"]]
  };
  var _default = docEndnoteRole$12;
  docEndnoteRole.default = _default;
  return docEndnoteRole;
}
var docEndnotesRole = {};
var hasRequiredDocEndnotesRole;
function requireDocEndnotesRole() {
  if (hasRequiredDocEndnotesRole) return docEndnotesRole;
  hasRequiredDocEndnotesRole = 1;
  Object.defineProperty(docEndnotesRole, "__esModule", {
    value: true
  });
  docEndnotesRole.default = void 0;
  var docEndnotesRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "rearnotes [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["doc-endnote"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docEndnotesRole$12;
  docEndnotesRole.default = _default;
  return docEndnotesRole;
}
var docEpigraphRole = {};
var hasRequiredDocEpigraphRole;
function requireDocEpigraphRole() {
  if (hasRequiredDocEpigraphRole) return docEpigraphRole;
  hasRequiredDocEpigraphRole = 1;
  Object.defineProperty(docEpigraphRole, "__esModule", {
    value: true
  });
  docEpigraphRole.default = void 0;
  var docEpigraphRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "epigraph [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docEpigraphRole$12;
  docEpigraphRole.default = _default;
  return docEpigraphRole;
}
var docEpilogueRole = {};
var hasRequiredDocEpilogueRole;
function requireDocEpilogueRole() {
  if (hasRequiredDocEpilogueRole) return docEpilogueRole;
  hasRequiredDocEpilogueRole = 1;
  Object.defineProperty(docEpilogueRole, "__esModule", {
    value: true
  });
  docEpilogueRole.default = void 0;
  var docEpilogueRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "epilogue [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docEpilogueRole$12;
  docEpilogueRole.default = _default;
  return docEpilogueRole;
}
var docErrataRole = {};
var hasRequiredDocErrataRole;
function requireDocErrataRole() {
  if (hasRequiredDocErrataRole) return docErrataRole;
  hasRequiredDocErrataRole = 1;
  Object.defineProperty(docErrataRole, "__esModule", {
    value: true
  });
  docErrataRole.default = void 0;
  var docErrataRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "errata [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docErrataRole$12;
  docErrataRole.default = _default;
  return docErrataRole;
}
var docExampleRole = {};
var hasRequiredDocExampleRole;
function requireDocExampleRole() {
  if (hasRequiredDocExampleRole) return docExampleRole;
  hasRequiredDocExampleRole = 1;
  Object.defineProperty(docExampleRole, "__esModule", {
    value: true
  });
  docExampleRole.default = void 0;
  var docExampleRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docExampleRole$12;
  docExampleRole.default = _default;
  return docExampleRole;
}
var docFootnoteRole = {};
var hasRequiredDocFootnoteRole;
function requireDocFootnoteRole() {
  if (hasRequiredDocFootnoteRole) return docFootnoteRole;
  hasRequiredDocFootnoteRole = 1;
  Object.defineProperty(docFootnoteRole, "__esModule", {
    value: true
  });
  docFootnoteRole.default = void 0;
  var docFootnoteRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "footnote [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docFootnoteRole$12;
  docFootnoteRole.default = _default;
  return docFootnoteRole;
}
var docForewordRole = {};
var hasRequiredDocForewordRole;
function requireDocForewordRole() {
  if (hasRequiredDocForewordRole) return docForewordRole;
  hasRequiredDocForewordRole = 1;
  Object.defineProperty(docForewordRole, "__esModule", {
    value: true
  });
  docForewordRole.default = void 0;
  var docForewordRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "foreword [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docForewordRole$12;
  docForewordRole.default = _default;
  return docForewordRole;
}
var docGlossaryRole = {};
var hasRequiredDocGlossaryRole;
function requireDocGlossaryRole() {
  if (hasRequiredDocGlossaryRole) return docGlossaryRole;
  hasRequiredDocGlossaryRole = 1;
  Object.defineProperty(docGlossaryRole, "__esModule", {
    value: true
  });
  docGlossaryRole.default = void 0;
  var docGlossaryRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "glossary [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [["definition"], ["term"]],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docGlossaryRole$12;
  docGlossaryRole.default = _default;
  return docGlossaryRole;
}
var docGlossrefRole = {};
var hasRequiredDocGlossrefRole;
function requireDocGlossrefRole() {
  if (hasRequiredDocGlossrefRole) return docGlossrefRole;
  hasRequiredDocGlossrefRole = 1;
  Object.defineProperty(docGlossrefRole, "__esModule", {
    value: true
  });
  docGlossrefRole.default = void 0;
  var docGlossrefRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "glossref [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docGlossrefRole$12;
  docGlossrefRole.default = _default;
  return docGlossrefRole;
}
var docIndexRole = {};
var hasRequiredDocIndexRole;
function requireDocIndexRole() {
  if (hasRequiredDocIndexRole) return docIndexRole;
  hasRequiredDocIndexRole = 1;
  Object.defineProperty(docIndexRole, "__esModule", {
    value: true
  });
  docIndexRole.default = void 0;
  var docIndexRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "index [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
  };
  var _default = docIndexRole$12;
  docIndexRole.default = _default;
  return docIndexRole;
}
var docIntroductionRole = {};
var hasRequiredDocIntroductionRole;
function requireDocIntroductionRole() {
  if (hasRequiredDocIntroductionRole) return docIntroductionRole;
  hasRequiredDocIntroductionRole = 1;
  Object.defineProperty(docIntroductionRole, "__esModule", {
    value: true
  });
  docIntroductionRole.default = void 0;
  var docIntroductionRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "introduction [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docIntroductionRole$12;
  docIntroductionRole.default = _default;
  return docIntroductionRole;
}
var docNoterefRole = {};
var hasRequiredDocNoterefRole;
function requireDocNoterefRole() {
  if (hasRequiredDocNoterefRole) return docNoterefRole;
  hasRequiredDocNoterefRole = 1;
  Object.defineProperty(docNoterefRole, "__esModule", {
    value: true
  });
  docNoterefRole.default = void 0;
  var docNoterefRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "noteref [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "widget", "command", "link"]]
  };
  var _default = docNoterefRole$12;
  docNoterefRole.default = _default;
  return docNoterefRole;
}
var docNoticeRole = {};
var hasRequiredDocNoticeRole;
function requireDocNoticeRole() {
  if (hasRequiredDocNoticeRole) return docNoticeRole;
  hasRequiredDocNoticeRole = 1;
  Object.defineProperty(docNoticeRole, "__esModule", {
    value: true
  });
  docNoticeRole.default = void 0;
  var docNoticeRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "notice [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "note"]]
  };
  var _default = docNoticeRole$12;
  docNoticeRole.default = _default;
  return docNoticeRole;
}
var docPagebreakRole = {};
var hasRequiredDocPagebreakRole;
function requireDocPagebreakRole() {
  if (hasRequiredDocPagebreakRole) return docPagebreakRole;
  hasRequiredDocPagebreakRole = 1;
  Object.defineProperty(docPagebreakRole, "__esModule", {
    value: true
  });
  docPagebreakRole.default = void 0;
  var docPagebreakRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "pagebreak [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "separator"]]
  };
  var _default = docPagebreakRole$12;
  docPagebreakRole.default = _default;
  return docPagebreakRole;
}
var docPagelistRole = {};
var hasRequiredDocPagelistRole;
function requireDocPagelistRole() {
  if (hasRequiredDocPagelistRole) return docPagelistRole;
  hasRequiredDocPagelistRole = 1;
  Object.defineProperty(docPagelistRole, "__esModule", {
    value: true
  });
  docPagelistRole.default = void 0;
  var docPagelistRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "page-list [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
  };
  var _default = docPagelistRole$12;
  docPagelistRole.default = _default;
  return docPagelistRole;
}
var docPartRole = {};
var hasRequiredDocPartRole;
function requireDocPartRole() {
  if (hasRequiredDocPartRole) return docPartRole;
  hasRequiredDocPartRole = 1;
  Object.defineProperty(docPartRole, "__esModule", {
    value: true
  });
  docPartRole.default = void 0;
  var docPartRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "part [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docPartRole$12;
  docPartRole.default = _default;
  return docPartRole;
}
var docPrefaceRole = {};
var hasRequiredDocPrefaceRole;
function requireDocPrefaceRole() {
  if (hasRequiredDocPrefaceRole) return docPrefaceRole;
  hasRequiredDocPrefaceRole = 1;
  Object.defineProperty(docPrefaceRole, "__esModule", {
    value: true
  });
  docPrefaceRole.default = void 0;
  var docPrefaceRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "preface [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docPrefaceRole$12;
  docPrefaceRole.default = _default;
  return docPrefaceRole;
}
var docPrologueRole = {};
var hasRequiredDocPrologueRole;
function requireDocPrologueRole() {
  if (hasRequiredDocPrologueRole) return docPrologueRole;
  hasRequiredDocPrologueRole = 1;
  Object.defineProperty(docPrologueRole, "__esModule", {
    value: true
  });
  docPrologueRole.default = void 0;
  var docPrologueRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "prologue [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark"]]
  };
  var _default = docPrologueRole$12;
  docPrologueRole.default = _default;
  return docPrologueRole;
}
var docPullquoteRole = {};
var hasRequiredDocPullquoteRole;
function requireDocPullquoteRole() {
  if (hasRequiredDocPullquoteRole) return docPullquoteRole;
  hasRequiredDocPullquoteRole = 1;
  Object.defineProperty(docPullquoteRole, "__esModule", {
    value: true
  });
  docPullquoteRole.default = void 0;
  var docPullquoteRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {},
    relatedConcepts: [{
      concept: {
        name: "pullquote [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["none"]]
  };
  var _default = docPullquoteRole$12;
  docPullquoteRole.default = _default;
  return docPullquoteRole;
}
var docQnaRole = {};
var hasRequiredDocQnaRole;
function requireDocQnaRole() {
  if (hasRequiredDocQnaRole) return docQnaRole;
  hasRequiredDocQnaRole = 1;
  Object.defineProperty(docQnaRole, "__esModule", {
    value: true
  });
  docQnaRole.default = void 0;
  var docQnaRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "qna [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section"]]
  };
  var _default = docQnaRole$12;
  docQnaRole.default = _default;
  return docQnaRole;
}
var docSubtitleRole = {};
var hasRequiredDocSubtitleRole;
function requireDocSubtitleRole() {
  if (hasRequiredDocSubtitleRole) return docSubtitleRole;
  hasRequiredDocSubtitleRole = 1;
  Object.defineProperty(docSubtitleRole, "__esModule", {
    value: true
  });
  docSubtitleRole.default = void 0;
  var docSubtitleRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "subtitle [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "sectionhead"]]
  };
  var _default = docSubtitleRole$12;
  docSubtitleRole.default = _default;
  return docSubtitleRole;
}
var docTipRole = {};
var hasRequiredDocTipRole;
function requireDocTipRole() {
  if (hasRequiredDocTipRole) return docTipRole;
  hasRequiredDocTipRole = 1;
  Object.defineProperty(docTipRole, "__esModule", {
    value: true
  });
  docTipRole.default = void 0;
  var docTipRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "help [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "note"]]
  };
  var _default = docTipRole$12;
  docTipRole.default = _default;
  return docTipRole;
}
var docTocRole = {};
var hasRequiredDocTocRole;
function requireDocTocRole() {
  if (hasRequiredDocTocRole) return docTocRole;
  hasRequiredDocTocRole = 1;
  Object.defineProperty(docTocRole, "__esModule", {
    value: true
  });
  docTocRole.default = void 0;
  var docTocRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      concept: {
        name: "toc [EPUB-SSV]"
      },
      module: "EPUB"
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
  };
  var _default = docTocRole$12;
  docTocRole.default = _default;
  return docTocRole;
}
var hasRequiredAriaDpubRoles;
function requireAriaDpubRoles() {
  if (hasRequiredAriaDpubRoles) return ariaDpubRoles;
  hasRequiredAriaDpubRoles = 1;
  Object.defineProperty(ariaDpubRoles, "__esModule", {
    value: true
  });
  ariaDpubRoles.default = void 0;
  var _docAbstractRole = _interopRequireDefault(requireDocAbstractRole());
  var _docAcknowledgmentsRole = _interopRequireDefault(requireDocAcknowledgmentsRole());
  var _docAfterwordRole = _interopRequireDefault(requireDocAfterwordRole());
  var _docAppendixRole = _interopRequireDefault(requireDocAppendixRole());
  var _docBacklinkRole = _interopRequireDefault(requireDocBacklinkRole());
  var _docBiblioentryRole = _interopRequireDefault(requireDocBiblioentryRole());
  var _docBibliographyRole = _interopRequireDefault(requireDocBibliographyRole());
  var _docBibliorefRole = _interopRequireDefault(requireDocBibliorefRole());
  var _docChapterRole = _interopRequireDefault(requireDocChapterRole());
  var _docColophonRole = _interopRequireDefault(requireDocColophonRole());
  var _docConclusionRole = _interopRequireDefault(requireDocConclusionRole());
  var _docCoverRole = _interopRequireDefault(requireDocCoverRole());
  var _docCreditRole = _interopRequireDefault(requireDocCreditRole());
  var _docCreditsRole = _interopRequireDefault(requireDocCreditsRole());
  var _docDedicationRole = _interopRequireDefault(requireDocDedicationRole());
  var _docEndnoteRole = _interopRequireDefault(requireDocEndnoteRole());
  var _docEndnotesRole = _interopRequireDefault(requireDocEndnotesRole());
  var _docEpigraphRole = _interopRequireDefault(requireDocEpigraphRole());
  var _docEpilogueRole = _interopRequireDefault(requireDocEpilogueRole());
  var _docErrataRole = _interopRequireDefault(requireDocErrataRole());
  var _docExampleRole = _interopRequireDefault(requireDocExampleRole());
  var _docFootnoteRole = _interopRequireDefault(requireDocFootnoteRole());
  var _docForewordRole = _interopRequireDefault(requireDocForewordRole());
  var _docGlossaryRole = _interopRequireDefault(requireDocGlossaryRole());
  var _docGlossrefRole = _interopRequireDefault(requireDocGlossrefRole());
  var _docIndexRole = _interopRequireDefault(requireDocIndexRole());
  var _docIntroductionRole = _interopRequireDefault(requireDocIntroductionRole());
  var _docNoterefRole = _interopRequireDefault(requireDocNoterefRole());
  var _docNoticeRole = _interopRequireDefault(requireDocNoticeRole());
  var _docPagebreakRole = _interopRequireDefault(requireDocPagebreakRole());
  var _docPagelistRole = _interopRequireDefault(requireDocPagelistRole());
  var _docPartRole = _interopRequireDefault(requireDocPartRole());
  var _docPrefaceRole = _interopRequireDefault(requireDocPrefaceRole());
  var _docPrologueRole = _interopRequireDefault(requireDocPrologueRole());
  var _docPullquoteRole = _interopRequireDefault(requireDocPullquoteRole());
  var _docQnaRole = _interopRequireDefault(requireDocQnaRole());
  var _docSubtitleRole = _interopRequireDefault(requireDocSubtitleRole());
  var _docTipRole = _interopRequireDefault(requireDocTipRole());
  var _docTocRole = _interopRequireDefault(requireDocTocRole());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaDpubRoles$12 = [["doc-abstract", _docAbstractRole.default], ["doc-acknowledgments", _docAcknowledgmentsRole.default], ["doc-afterword", _docAfterwordRole.default], ["doc-appendix", _docAppendixRole.default], ["doc-backlink", _docBacklinkRole.default], ["doc-biblioentry", _docBiblioentryRole.default], ["doc-bibliography", _docBibliographyRole.default], ["doc-biblioref", _docBibliorefRole.default], ["doc-chapter", _docChapterRole.default], ["doc-colophon", _docColophonRole.default], ["doc-conclusion", _docConclusionRole.default], ["doc-cover", _docCoverRole.default], ["doc-credit", _docCreditRole.default], ["doc-credits", _docCreditsRole.default], ["doc-dedication", _docDedicationRole.default], ["doc-endnote", _docEndnoteRole.default], ["doc-endnotes", _docEndnotesRole.default], ["doc-epigraph", _docEpigraphRole.default], ["doc-epilogue", _docEpilogueRole.default], ["doc-errata", _docErrataRole.default], ["doc-example", _docExampleRole.default], ["doc-footnote", _docFootnoteRole.default], ["doc-foreword", _docForewordRole.default], ["doc-glossary", _docGlossaryRole.default], ["doc-glossref", _docGlossrefRole.default], ["doc-index", _docIndexRole.default], ["doc-introduction", _docIntroductionRole.default], ["doc-noteref", _docNoterefRole.default], ["doc-notice", _docNoticeRole.default], ["doc-pagebreak", _docPagebreakRole.default], ["doc-pagelist", _docPagelistRole.default], ["doc-part", _docPartRole.default], ["doc-preface", _docPrefaceRole.default], ["doc-prologue", _docPrologueRole.default], ["doc-pullquote", _docPullquoteRole.default], ["doc-qna", _docQnaRole.default], ["doc-subtitle", _docSubtitleRole.default], ["doc-tip", _docTipRole.default], ["doc-toc", _docTocRole.default]];
  var _default = ariaDpubRoles$12;
  ariaDpubRoles.default = _default;
  return ariaDpubRoles;
}
var ariaGraphicsRoles = {};
var graphicsDocumentRole = {};
var hasRequiredGraphicsDocumentRole;
function requireGraphicsDocumentRole() {
  if (hasRequiredGraphicsDocumentRole) return graphicsDocumentRole;
  hasRequiredGraphicsDocumentRole = 1;
  Object.defineProperty(graphicsDocumentRole, "__esModule", {
    value: true
  });
  graphicsDocumentRole.default = void 0;
  var graphicsDocumentRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      module: "GRAPHICS",
      concept: {
        name: "graphics-object"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "img"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "article"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "document"]]
  };
  var _default = graphicsDocumentRole$12;
  graphicsDocumentRole.default = _default;
  return graphicsDocumentRole;
}
var graphicsObjectRole = {};
var hasRequiredGraphicsObjectRole;
function requireGraphicsObjectRole() {
  if (hasRequiredGraphicsObjectRole) return graphicsObjectRole;
  hasRequiredGraphicsObjectRole = 1;
  Object.defineProperty(graphicsObjectRole, "__esModule", {
    value: true
  });
  graphicsObjectRole.default = void 0;
  var graphicsObjectRole$12 = {
    abstract: false,
    accessibleNameRequired: false,
    baseConcepts: [],
    childrenPresentational: false,
    nameFrom: ["author", "contents"],
    prohibitedProps: [],
    props: {
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [{
      module: "GRAPHICS",
      concept: {
        name: "graphics-document"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "group"
      }
    }, {
      module: "ARIA",
      concept: {
        name: "img"
      }
    }, {
      module: "GRAPHICS",
      concept: {
        name: "graphics-symbol"
      }
    }],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "group"]]
  };
  var _default = graphicsObjectRole$12;
  graphicsObjectRole.default = _default;
  return graphicsObjectRole;
}
var graphicsSymbolRole = {};
var hasRequiredGraphicsSymbolRole;
function requireGraphicsSymbolRole() {
  if (hasRequiredGraphicsSymbolRole) return graphicsSymbolRole;
  hasRequiredGraphicsSymbolRole = 1;
  Object.defineProperty(graphicsSymbolRole, "__esModule", {
    value: true
  });
  graphicsSymbolRole.default = void 0;
  var graphicsSymbolRole$12 = {
    abstract: false,
    accessibleNameRequired: true,
    baseConcepts: [],
    childrenPresentational: true,
    nameFrom: ["author"],
    prohibitedProps: [],
    props: {
      "aria-disabled": null,
      "aria-errormessage": null,
      "aria-expanded": null,
      "aria-haspopup": null,
      "aria-invalid": null
    },
    relatedConcepts: [],
    requireContextRole: [],
    requiredContextRole: [],
    requiredOwnedElements: [],
    requiredProps: {},
    superClass: [["roletype", "structure", "section", "img"]]
  };
  var _default = graphicsSymbolRole$12;
  graphicsSymbolRole.default = _default;
  return graphicsSymbolRole;
}
var hasRequiredAriaGraphicsRoles;
function requireAriaGraphicsRoles() {
  if (hasRequiredAriaGraphicsRoles) return ariaGraphicsRoles;
  hasRequiredAriaGraphicsRoles = 1;
  Object.defineProperty(ariaGraphicsRoles, "__esModule", {
    value: true
  });
  ariaGraphicsRoles.default = void 0;
  var _graphicsDocumentRole = _interopRequireDefault(requireGraphicsDocumentRole());
  var _graphicsObjectRole = _interopRequireDefault(requireGraphicsObjectRole());
  var _graphicsSymbolRole = _interopRequireDefault(requireGraphicsSymbolRole());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaGraphicsRoles$12 = [["graphics-document", _graphicsDocumentRole.default], ["graphics-object", _graphicsObjectRole.default], ["graphics-symbol", _graphicsSymbolRole.default]];
  var _default = ariaGraphicsRoles$12;
  ariaGraphicsRoles.default = _default;
  return ariaGraphicsRoles;
}
var hasRequiredRolesMap;
function requireRolesMap() {
  if (hasRequiredRolesMap) return rolesMap;
  hasRequiredRolesMap = 1;
  Object.defineProperty(rolesMap, "__esModule", {
    value: true
  });
  rolesMap.default = void 0;
  var _ariaAbstractRoles = _interopRequireDefault(requireAriaAbstractRoles());
  var _ariaLiteralRoles = _interopRequireDefault(requireAriaLiteralRoles());
  var _ariaDpubRoles = _interopRequireDefault(requireAriaDpubRoles());
  var _ariaGraphicsRoles = _interopRequireDefault(requireAriaGraphicsRoles());
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length) return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var roles = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
  roles.forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), roleDefinition = _ref2[1];
    var _iterator = _createForOfIteratorHelper(roleDefinition.superClass), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var superClassIter = _step.value;
        var _iterator2 = _createForOfIteratorHelper(superClassIter), _step2;
        try {
          var _loop = function _loop2() {
            var superClassName = _step2.value;
            var superClassRoleTuple = roles.find(function(_ref3) {
              var _ref4 = _slicedToArray(_ref3, 1), name = _ref4[0];
              return name === superClassName;
            });
            if (superClassRoleTuple) {
              var superClassDefinition = superClassRoleTuple[1];
              for (var _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
                var prop = _Object$keys[_i2];
                if (
                  // $FlowIssue Accessing the hasOwnProperty on the Object prototype is fine.
                  !Object.prototype.hasOwnProperty.call(roleDefinition.props, prop)
                ) {
                  Object.assign(roleDefinition.props, _defineProperty2({}, prop, superClassDefinition.props[prop]));
                }
              }
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  var rolesMap$12 = {
    entries: function entries() {
      return roles;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator3 = _createForOfIteratorHelper(roles), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], values = _step3$value[1];
          fn.call(thisArg, values, key, roles);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    },
    get: function get2(key) {
      var item = roles.find(function(tuple) {
        return tuple[0] === key ? true : false;
      });
      return item && item[1];
    },
    has: function has(key) {
      return !!rolesMap$12.get(key);
    },
    keys: function keys() {
      return roles.map(function(_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1), key = _ref6[0];
        return key;
      });
    },
    values: function values() {
      return roles.map(function(_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2), values2 = _ref8[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(rolesMap$12, rolesMap$12.entries());
  rolesMap.default = _default;
  return rolesMap;
}
var elementRoleMap = {};
var lite = {};
var hasRequiredLite;
function requireLite() {
  if (hasRequiredLite) return lite;
  hasRequiredLite = 1;
  var has = Object.prototype.hasOwnProperty;
  function dequal(foo, bar) {
    var ctor, len;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
      if (ctor === Date) return foo.getTime() === bar.getTime();
      if (ctor === RegExp) return foo.toString() === bar.toString();
      if (ctor === Array) {
        if ((len = foo.length) === bar.length) {
          while (len-- && dequal(foo[len], bar[len])) ;
        }
        return len === -1;
      }
      if (!ctor || typeof foo === "object") {
        len = 0;
        for (ctor in foo) {
          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
        }
        return Object.keys(bar).length === len;
      }
    }
    return foo !== foo && bar !== bar;
  }
  lite.dequal = dequal;
  return lite;
}
var hasRequiredElementRoleMap;
function requireElementRoleMap() {
  if (hasRequiredElementRoleMap) return elementRoleMap;
  hasRequiredElementRoleMap = 1;
  Object.defineProperty(elementRoleMap, "__esModule", {
    value: true
  });
  elementRoleMap.default = void 0;
  var _lite = requireLite();
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator());
  var _rolesMap = _interopRequireDefault(requireRolesMap());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i3) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i3 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i3 >= o2.length) return { done: true };
          return { done: false, value: o2[i3++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var elementRoles = [];
  var keys = _rolesMap.default.keys();
  for (var i2 = 0; i2 < keys.length; i2++) {
    var key = keys[i2];
    var role = _rolesMap.default.get(key);
    if (role) {
      var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
      for (var k = 0; k < concepts.length; k++) {
        var relation = concepts[k];
        if (relation.module === "HTML") {
          (function() {
            var concept = relation.concept;
            if (concept) {
              var elementRoleRelation = elementRoles.find(function(relation2) {
                return (0, _lite.dequal)(relation2, concept);
              });
              var roles;
              if (elementRoleRelation) {
                roles = elementRoleRelation[1];
              } else {
                roles = [];
              }
              var isUnique = true;
              for (var _i = 0; _i < roles.length; _i++) {
                if (roles[_i] === key) {
                  isUnique = false;
                  break;
                }
              }
              if (isUnique) {
                roles.push(key);
              }
              elementRoles.push([concept, roles]);
            }
          })();
        }
      }
    }
  }
  var elementRoleMap$12 = {
    entries: function entries() {
      return elementRoles;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(elementRoles), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, _key, elementRoles);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key2) {
      var item = elementRoles.find(function(tuple) {
        return key2.name === tuple[0].name && (0, _lite.dequal)(key2.attributes, tuple[0].attributes);
      });
      return item && item[1];
    },
    has: function has(key2) {
      return !!elementRoleMap$12.get(key2);
    },
    keys: function keys2() {
      return elementRoles.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
        return key2;
      });
    },
    values: function values() {
      return elementRoles.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(elementRoleMap$12, elementRoleMap$12.entries());
  elementRoleMap.default = _default;
  return elementRoleMap;
}
var roleElementMap = {};
var hasRequiredRoleElementMap;
function requireRoleElementMap() {
  if (hasRequiredRoleElementMap) return roleElementMap;
  hasRequiredRoleElementMap = 1;
  Object.defineProperty(roleElementMap, "__esModule", {
    value: true
  });
  roleElementMap.default = void 0;
  var _iterationDecorator = _interopRequireDefault(requireIterationDecorator());
  var _rolesMap = _interopRequireDefault(requireRolesMap());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(arr, i3) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike) {
        if (it) o2 = it;
        var i3 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i3 >= o2.length) return { done: true };
          return { done: false, value: o2[i3++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s2() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e3) {
      didErr = true;
      err = _e3;
    }, f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++) {
      arr2[i3] = arr[i3];
    }
    return arr2;
  }
  var roleElement = [];
  var keys = _rolesMap.default.keys();
  for (var i2 = 0; i2 < keys.length; i2++) {
    var key = keys[i2];
    var role = _rolesMap.default.get(key);
    var relationConcepts = [];
    if (role) {
      var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
      for (var k = 0; k < concepts.length; k++) {
        var relation = concepts[k];
        if (relation.module === "HTML") {
          var concept = relation.concept;
          if (concept != null) {
            relationConcepts.push(concept);
          }
        }
      }
      if (relationConcepts.length > 0) {
        roleElement.push([key, relationConcepts]);
      }
    }
  }
  var roleElementMap$12 = {
    entries: function entries() {
      return roleElement;
    },
    forEach: function forEach2(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var _iterator = _createForOfIteratorHelper(roleElement), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values = _step$value[1];
          fn.call(thisArg, values, _key, roleElement);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    get: function get2(key2) {
      var item = roleElement.find(function(tuple) {
        return tuple[0] === key2 ? true : false;
      });
      return item && item[1];
    },
    has: function has(key2) {
      return !!roleElementMap$12.get(key2);
    },
    keys: function keys2() {
      return roleElement.map(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
        return key2;
      });
    },
    values: function values() {
      return roleElement.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
        return values2;
      });
    }
  };
  var _default = (0, _iterationDecorator.default)(roleElementMap$12, roleElementMap$12.entries());
  roleElementMap.default = _default;
  return roleElementMap;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib;
  hasRequiredLib = 1;
  Object.defineProperty(lib, "__esModule", {
    value: true
  });
  lib.roles = lib.roleElements = lib.elementRoles = lib.dom = lib.aria = void 0;
  var _ariaPropsMap = _interopRequireDefault(requireAriaPropsMap());
  var _domMap = _interopRequireDefault(requireDomMap());
  var _rolesMap = _interopRequireDefault(requireRolesMap());
  var _elementRoleMap = _interopRequireDefault(requireElementRoleMap());
  var _roleElementMap = _interopRequireDefault(requireRoleElementMap());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var aria = _ariaPropsMap.default;
  lib.aria = aria;
  var dom = _domMap.default;
  lib.dom = dom;
  var roles = _rolesMap.default;
  lib.roles = roles;
  var elementRoles = _elementRoleMap.default;
  lib.elementRoles = elementRoles;
  var roleElements = _roleElementMap.default;
  lib.roleElements = roleElements;
  return lib;
}
var libExports = requireLib();
var define_process_env_default$1 = {};
function escapeHTML(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
const printProps = (keys, props, config2, indentation, depth, refs, printer) => {
  const indentationNext = indentation + config2.indent;
  const colors = config2.colors;
  return keys.map((key) => {
    const value = props[key];
    let printed = printer(value, config2, indentationNext, depth, refs);
    if (typeof value !== "string") {
      if (printed.indexOf("\n") !== -1) {
        printed = config2.spacingOuter + indentationNext + printed + config2.spacingOuter + indentation;
      }
      printed = "{" + printed + "}";
    }
    return config2.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
  }).join("");
};
const NodeTypeTextNode = 3;
const printChildren = (children, config2, indentation, depth, refs, printer) => children.map((child) => {
  const printedChild = typeof child === "string" ? printText(child, config2) : printer(child, config2, indentation, depth, refs);
  if (printedChild === "" && typeof child === "object" && child !== null && child.nodeType !== NodeTypeTextNode) {
    return "";
  }
  return config2.spacingOuter + indentation + printedChild;
}).join("");
const printText = (text, config2) => {
  const contentColor = config2.colors.content;
  return contentColor.open + escapeHTML(text) + contentColor.close;
};
const printComment = (comment, config2) => {
  const commentColor = config2.colors.comment;
  return commentColor.open + "<!--" + escapeHTML(comment) + "-->" + commentColor.close;
};
const printElement = (type2, printedProps, printedChildren, config2, indentation) => {
  const tagColor = config2.colors.tag;
  return tagColor.open + "<" + type2 + (printedProps && tagColor.close + printedProps + config2.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config2.spacingOuter + indentation + tagColor.open + "</" + type2 : (printedProps && !config2.min ? "" : " ") + "/") + ">" + tagColor.close;
};
const printElementAsLeaf = (type2, config2) => {
  const tagColor = config2.colors.tag;
  return tagColor.open + "<" + type2 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
};
const ELEMENT_NODE$1 = 1;
const TEXT_NODE$1 = 3;
const COMMENT_NODE$1 = 8;
const FRAGMENT_NODE = 11;
const ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
const isCustomElement$1 = (val) => {
  const {
    tagName
  } = val;
  return Boolean(typeof tagName === "string" && tagName.includes("-") || typeof val.hasAttribute === "function" && val.hasAttribute("is"));
};
const testNode = (val) => {
  const constructorName = val.constructor.name;
  const {
    nodeType
  } = val;
  return nodeType === ELEMENT_NODE$1 && (ELEMENT_REGEXP.test(constructorName) || isCustomElement$1(val)) || nodeType === TEXT_NODE$1 && constructorName === "Text" || nodeType === COMMENT_NODE$1 && constructorName === "Comment" || nodeType === FRAGMENT_NODE && constructorName === "DocumentFragment";
};
function nodeIsText(node) {
  return node.nodeType === TEXT_NODE$1;
}
function nodeIsComment(node) {
  return node.nodeType === COMMENT_NODE$1;
}
function nodeIsFragment(node) {
  return node.nodeType === FRAGMENT_NODE;
}
function createDOMElementFilter(filterNode) {
  return {
    test: (val) => {
      var _val$constructor2;
      return ((val == null || (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) || isCustomElement$1(val)) && testNode(val);
    },
    serialize: (node, config2, indentation, depth, refs, printer) => {
      if (nodeIsText(node)) {
        return printText(node.data, config2);
      }
      if (nodeIsComment(node)) {
        return printComment(node.data, config2);
      }
      const type2 = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();
      if (++depth > config2.maxDepth) {
        return printElementAsLeaf(type2, config2);
      }
      return printElement(type2, printProps(nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}), config2, indentation + config2.indent, depth, refs, printer), printChildren(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config2, indentation + config2.indent, depth, refs, printer), config2, indentation);
    }
  };
}
let picocolors = null;
let readFileSync = null;
let codeFrameColumns = null;
try {
  const nodeRequire = module && module.require;
  readFileSync = nodeRequire.call(module, "fs").readFileSync;
  codeFrameColumns = nodeRequire.call(module, "@babel/code-frame").codeFrameColumns;
  picocolors = nodeRequire.call(module, "picocolors");
} catch {
}
function getCodeFrame(frame) {
  const locationStart = frame.indexOf("(") + 1;
  const locationEnd = frame.indexOf(")");
  const frameLocation = frame.slice(locationStart, locationEnd);
  const frameLocationElements = frameLocation.split(":");
  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
  let rawFileContents = "";
  try {
    rawFileContents = readFileSync(filename, "utf-8");
  } catch {
    return "";
  }
  const codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line,
      column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return picocolors.dim(frameLocation) + "\n" + codeFrame + "\n";
}
function getUserCodeFrame() {
  if (!readFileSync || !codeFrameColumns) {
    return "";
  }
  const err = new Error();
  const firstClientCodeFrame = err.stack.split("\n").slice(1).find((frame) => !frame.includes("node_modules/"));
  return getCodeFrame(firstClientCodeFrame);
}
const TEXT_NODE = 3;
function jestFakeTimersAreEnabled() {
  if (typeof jest !== "undefined" && jest !== null) {
    return (
      // legacy timers
      setTimeout._isMockFunction === true || // modern timers
      // eslint-disable-next-line prefer-object-has-own -- not supported by our support matrix
      Object.prototype.hasOwnProperty.call(setTimeout, "clock")
    );
  }
  return false;
}
function getDocument$1() {
  if (typeof window === "undefined") {
    throw new Error("Could not find default container");
  }
  return window.document;
}
function getWindowFromNode(node) {
  if (node.defaultView) {
    return node.defaultView;
  } else if (node.ownerDocument && node.ownerDocument.defaultView) {
    return node.ownerDocument.defaultView;
  } else if (node.window) {
    return node.window;
  } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {
    throw new Error("It looks like the window object is not available for the provided node.");
  } else if (node.then instanceof Function) {
    throw new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?");
  } else if (Array.isArray(node)) {
    throw new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?");
  } else if (typeof node.debug === "function" && typeof node.logTestingPlaygroundURL === "function") {
    throw new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?");
  } else {
    throw new Error("The given node is not an Element, the node type is: " + typeof node + ".");
  }
}
function checkContainerType(container) {
  if (!container || !(typeof container.querySelector === "function") || !(typeof container.querySelectorAll === "function")) {
    throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
  }
  function getTypeName(object) {
    if (typeof object === "object") {
      return object === null ? "null" : object.constructor.name;
    }
    return typeof object;
  }
}
const shouldHighlight = () => {
  if (typeof process === "undefined") {
    return false;
  }
  let colors;
  try {
    var _process$env;
    const colorsJSON = (_process$env = define_process_env_default$1) == null ? void 0 : _process$env.COLORS;
    if (colorsJSON) {
      colors = JSON.parse(colorsJSON);
    }
  } catch {
  }
  if (typeof colors === "boolean") {
    return colors;
  } else {
    return process.versions !== void 0 && process.versions.node !== void 0;
  }
};
const {
  DOMCollection
} = buildExports$1.plugins;
const ELEMENT_NODE = 1;
const COMMENT_NODE = 8;
function filterCommentsAndDefaultIgnoreTagsTags(value) {
  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches(getConfig$1().defaultIgnore));
}
function prettyDOM$1(dom, maxLength, options) {
  if (options === void 0) {
    options = {};
  }
  if (!dom) {
    dom = getDocument$1().body;
  }
  if (typeof maxLength !== "number") {
    maxLength = typeof process !== "undefined" && typeof define_process_env_default$1 !== "undefined" && define_process_env_default$1.DEBUG_PRINT_LIMIT || 7e3;
  }
  if (maxLength === 0) {
    return "";
  }
  if (dom.documentElement) {
    dom = dom.documentElement;
  }
  let domTypeName = typeof dom;
  if (domTypeName === "object") {
    domTypeName = dom.constructor.name;
  } else {
    dom = {};
  }
  if (!("outerHTML" in dom)) {
    throw new TypeError("Expected an element or document but got " + domTypeName);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
    ...prettyFormatOptions
  } = options;
  const debugContent = buildExports$1.format(dom, {
    plugins: [createDOMElementFilter(filterNode), DOMCollection],
    printFunctionName: false,
    highlight: shouldHighlight(),
    ...prettyFormatOptions
  });
  return maxLength !== void 0 && dom.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
}
const logDOM$1 = function() {
  const userCodeFrame = getUserCodeFrame();
  if (userCodeFrame) {
    console.log(prettyDOM$1(...arguments) + "\n\n" + userCodeFrame);
  } else {
    console.log(prettyDOM$1(...arguments));
  }
};
let config = {
  testIdAttribute: "data-testid",
  asyncUtilTimeout: 1e3,
  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.
  // forcing react-testing-library to wrap all async functions would've been
  // a total nightmare (consider wrapping every findBy* query and then also
  // updating `within` so those would be wrapped too. Total nightmare).
  // so we have this config option that's really only intended for
  // react-testing-library to use. For that reason, this feature will remain
  // undocumented.
  asyncWrapper: (cb) => cb(),
  unstable_advanceTimersWrapper: (cb) => cb(),
  eventWrapper: (cb) => cb(),
  // default value for the `hidden` option in `ByRole` queries
  defaultHidden: false,
  // default value for the `ignore` option in `ByText` queries
  defaultIgnore: "script, style",
  // showOriginalStackTrace flag to show the full error stack traces for async errors
  showOriginalStackTrace: false,
  // throw errors w/ suggestions for better queries. Opt in so off by default.
  throwSuggestions: false,
  // called when getBy* queries fail. (message, container) => Error
  getElementError(message, container) {
    const prettifiedDOM = prettyDOM$1(container);
    const error = new Error([message, "Ignored nodes: comments, " + config.defaultIgnore + "\n" + prettifiedDOM].filter(Boolean).join("\n\n"));
    error.name = "TestingLibraryElementError";
    return error;
  },
  _disableExpensiveErrorDiagnostics: false,
  computedStyleSupportsPseudoElements: false
};
function runWithExpensiveErrorDiagnosticsDisabled(callback) {
  try {
    config._disableExpensiveErrorDiagnostics = true;
    return callback();
  } finally {
    config._disableExpensiveErrorDiagnostics = false;
  }
}
function getConfig$1() {
  return config;
}
const labelledNodeNames = ["button", "meter", "output", "progress", "select", "textarea", "input"];
function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return "";
  }
  if (node.nodeType === TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map((childNode) => getTextContent(childNode)).join("");
}
function getLabelContent(element) {
  let textContent;
  if (element.tagName.toLowerCase() === "label") {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}
function getRealLabels(element) {
  if (element.labels !== void 0) {
    var _labels;
    return (_labels = element.labels) != null ? _labels : [];
  }
  if (!isLabelable(element)) return [];
  const labels = element.ownerDocument.querySelectorAll("label");
  return Array.from(labels).filter((label) => label.control === element);
}
function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === "INPUT" && element.getAttribute("type") !== "hidden";
}
function getLabels$1(container, element, _temp) {
  let {
    selector = "*"
  } = _temp === void 0 ? {} : _temp;
  const ariaLabelledBy = element.getAttribute("aria-labelledby");
  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(" ") : [];
  return labelsId.length ? labelsId.map((labelId) => {
    const labellingElement = container.querySelector('[id="' + labelId + '"]');
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: "",
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map((label) => {
    const textToMatch = getLabelContent(label);
    const formControlSelector = "button, input, meter, output, progress, select, textarea";
    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter((formControlElement) => formControlElement.matches(selector))[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
function assertNotNullOrUndefined(matcher) {
  if (matcher === null || matcher === void 0) {
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`
      "It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?"
    );
  }
}
function fuzzyMatches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined(matcher);
  const normalizedText = normalizer(textToMatch);
  if (typeof matcher === "string" || typeof matcher === "number") {
    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());
  } else if (typeof matcher === "function") {
    return matcher(normalizedText, node);
  } else {
    return matchRegExp(matcher, normalizedText);
  }
}
function matches$1(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined(matcher);
  const normalizedText = normalizer(textToMatch);
  if (matcher instanceof Function) {
    return matcher(normalizedText, node);
  } else if (matcher instanceof RegExp) {
    return matchRegExp(matcher, normalizedText);
  } else {
    return normalizedText === String(matcher);
  }
}
function getDefaultNormalizer$1(_temp) {
  let {
    trim = true,
    collapseWhitespace = true
  } = _temp === void 0 ? {} : _temp;
  return (text) => {
    let normalizedText = text;
    normalizedText = trim ? normalizedText.trim() : normalizedText;
    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, " ") : normalizedText;
    return normalizedText;
  };
}
function makeNormalizer(_ref) {
  let {
    trim,
    collapseWhitespace,
    normalizer
  } = _ref;
  if (!normalizer) {
    return getDefaultNormalizer$1({
      trim,
      collapseWhitespace
    });
  }
  if (typeof trim !== "undefined" || typeof collapseWhitespace !== "undefined") {
    throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
  }
  return normalizer;
}
function matchRegExp(matcher, text) {
  const match = matcher.test(text);
  if (matcher.global && matcher.lastIndex !== 0) {
    console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.");
    matcher.lastIndex = 0;
  }
  return match;
}
function getNodeText$1(node) {
  if (node.matches("input[type=submit], input[type=button], input[type=reset]")) {
    return node.value;
  }
  return Array.from(node.childNodes).filter((child) => child.nodeType === TEXT_NODE && Boolean(child.textContent)).map((c2) => c2.textContent).join("");
}
const elementRoleList$1 = buildElementRoleList$1(libExports.elementRoles);
function isSubtreeInaccessible(element) {
  if (element.hidden === true) {
    return true;
  }
  if (element.getAttribute("aria-hidden") === "true") {
    return true;
  }
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).display === "none") {
    return true;
  }
  return false;
}
function isInaccessible$1(element, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible
  } = options;
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).visibility === "hidden") {
    return true;
  }
  let currentElement = element;
  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement)) {
      return true;
    }
    currentElement = currentElement.parentElement;
  }
  return false;
}
function getImplicitAriaRoles$1(currentNode) {
  for (const {
    match,
    roles: roles2
  } of elementRoleList$1) {
    if (match(currentNode)) {
      return [...roles2];
    }
  }
  return [];
}
function buildElementRoleList$1(elementRolesMap) {
  function makeElementSelector(_ref) {
    let {
      name,
      attributes
    } = _ref;
    return "" + name + attributes.map((_ref2) => {
      let {
        name: attributeName,
        value,
        constraints = []
      } = _ref2;
      const shouldNotExist = constraints.indexOf("undefined") !== -1;
      const shouldBeNonEmpty = constraints.indexOf("set") !== -1;
      const hasExplicitValue = typeof value !== "undefined";
      if (hasExplicitValue) {
        return "[" + attributeName + '="' + value + '"]';
      } else if (shouldNotExist) {
        return ":not([" + attributeName + "])";
      } else if (shouldBeNonEmpty) {
        return "[" + attributeName + "]:not([" + attributeName + '=""])';
      }
      return "[" + attributeName + "]";
    }).join("");
  }
  function getSelectorSpecificity(_ref3) {
    let {
      attributes = []
    } = _ref3;
    return attributes.length;
  }
  function bySelectorSpecificity(_ref4, _ref5) {
    let {
      specificity: leftSpecificity
    } = _ref4;
    let {
      specificity: rightSpecificity
    } = _ref5;
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let {
      attributes = []
    } = element;
    const typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
    if (typeTextIndex >= 0) {
      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];
    }
    const selector = makeElementSelector({
      ...element,
      attributes
    });
    return (node) => {
      if (typeTextIndex >= 0 && node.type !== "text") {
        return false;
      }
      return node.matches(selector);
    };
  }
  let result = [];
  for (const [element, roles2] of elementRolesMap.entries()) {
    result = [...result, {
      match: match(element),
      roles: Array.from(roles2),
      specificity: getSelectorSpecificity(element)
    }];
  }
  return result.sort(bySelectorSpecificity);
}
function getRoles$1(container, _temp) {
  let {
    hidden = false
  } = _temp === void 0 ? {} : _temp;
  function flattenDOM(node) {
    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
  }
  return flattenDOM(container).filter((element) => {
    return hidden === false ? isInaccessible$1(element) === false : true;
  }).reduce((acc, node) => {
    let roles2 = [];
    if (node.hasAttribute("role")) {
      roles2 = node.getAttribute("role").split(" ").slice(0, 1);
    } else {
      roles2 = getImplicitAriaRoles$1(node);
    }
    return roles2.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? {
      ...rolesAcc,
      [role]: [...rolesAcc[role], node]
    } : {
      ...rolesAcc,
      [role]: [node]
    }, acc);
  }, {});
}
function prettyRoles(dom, _ref6) {
  let {
    hidden,
    includeDescription
  } = _ref6;
  const roles2 = getRoles$1(dom, {
    hidden
  });
  return Object.entries(roles2).filter((_ref7) => {
    let [role] = _ref7;
    return role !== "generic";
  }).map((_ref8) => {
    let [role, elements] = _ref8;
    const delimiterBar = "-".repeat(50);
    const elementsString = elements.map((el) => {
      const nameString = 'Name "' + computeAccessibleName$1(el, {
        computedStyleSupportsPseudoElements: getConfig$1().computedStyleSupportsPseudoElements
      }) + '":\n';
      const domString = prettyDOM$1(el.cloneNode(false));
      if (includeDescription) {
        const descriptionString = 'Description "' + computeAccessibleDescription$1(el, {
          computedStyleSupportsPseudoElements: getConfig$1().computedStyleSupportsPseudoElements
        }) + '":\n';
        return "" + nameString + descriptionString + domString;
      }
      return "" + nameString + domString;
    }).join("\n\n");
    return role + ":\n\n" + elementsString + "\n\n" + delimiterBar;
  }).join("\n");
}
function computeAriaSelected(element) {
  if (element.tagName === "OPTION") {
    return element.selected;
  }
  return checkBooleanAttribute(element, "aria-selected");
}
function computeAriaBusy(element) {
  return element.getAttribute("aria-busy") === "true";
}
function computeAriaChecked(element) {
  if ("indeterminate" in element && element.indeterminate) {
    return void 0;
  }
  if ("checked" in element) {
    return element.checked;
  }
  return checkBooleanAttribute(element, "aria-checked");
}
function computeAriaPressed(element) {
  return checkBooleanAttribute(element, "aria-pressed");
}
function computeAriaCurrent(element) {
  var _ref9, _checkBooleanAttribut;
  return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute(element, "aria-current")) != null ? _checkBooleanAttribut : element.getAttribute("aria-current")) != null ? _ref9 : false;
}
function computeAriaExpanded(element) {
  return checkBooleanAttribute(element, "aria-expanded");
}
function checkBooleanAttribute(element, attribute) {
  const attributeValue = element.getAttribute(attribute);
  if (attributeValue === "true") {
    return true;
  }
  if (attributeValue === "false") {
    return false;
  }
  return void 0;
}
function computeHeadingLevel(element) {
  const implicitHeadingLevels = {
    H1: 1,
    H2: 2,
    H3: 3,
    H4: 4,
    H5: 5,
    H6: 6
  };
  const ariaLevelAttribute = element.getAttribute("aria-level") && Number(element.getAttribute("aria-level"));
  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];
}
function computeAriaValueNow(element) {
  const valueNow = element.getAttribute("aria-valuenow");
  return valueNow === null ? void 0 : +valueNow;
}
function computeAriaValueMax(element) {
  const valueMax = element.getAttribute("aria-valuemax");
  return valueMax === null ? void 0 : +valueMax;
}
function computeAriaValueMin(element) {
  const valueMin = element.getAttribute("aria-valuemin");
  return valueMin === null ? void 0 : +valueMin;
}
function computeAriaValueText(element) {
  const valueText = element.getAttribute("aria-valuetext");
  return valueText === null ? void 0 : valueText;
}
const normalize$1 = getDefaultNormalizer$1();
function escapeRegExp(string) {
  return string.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
}
function getRegExpMatcher(string) {
  return new RegExp(escapeRegExp(string.toLowerCase()), "i");
}
function makeSuggestion(queryName, element, content, _ref) {
  let {
    variant,
    name
  } = _ref;
  let warning = "";
  const queryOptions = {};
  const queryArgs = [["Role", "TestId"].includes(queryName) ? content : getRegExpMatcher(content)];
  if (name) {
    queryOptions.name = getRegExpMatcher(name);
  }
  if (queryName === "Role" && isInaccessible$1(element)) {
    queryOptions.hidden = true;
    warning = "Element is inaccessible. This means that the element and all its children are invisible to screen readers.\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\n    ";
  }
  if (Object.keys(queryOptions).length > 0) {
    queryArgs.push(queryOptions);
  }
  const queryMethod = variant + "By" + queryName;
  return {
    queryName,
    queryMethod,
    queryArgs,
    variant,
    warning,
    toString() {
      if (warning) {
        console.warn(warning);
      }
      let [text, options] = queryArgs;
      text = typeof text === "string" ? "'" + text + "'" : text;
      options = options ? ", { " + Object.entries(options).map((_ref2) => {
        let [k, v] = _ref2;
        return k + ": " + v;
      }).join(", ") + " }" : "";
      return queryMethod + "(" + text + options + ")";
    }
  };
}
function canSuggest(currentMethod, requestedMethod, data) {
  return data && true;
}
function getSuggestedQuery$1(element, variant, method) {
  var _element$getAttribute, _getImplicitAriaRoles;
  if (variant === void 0) {
    variant = "get";
  }
  if (element.matches(getConfig$1().defaultIgnore)) {
    return void 0;
  }
  const role = (_element$getAttribute = element.getAttribute("role")) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles$1(element)) == null ? void 0 : _getImplicitAriaRoles[0];
  if (role !== "generic" && canSuggest("Role", method, role)) {
    return makeSuggestion("Role", element, role, {
      variant,
      name: computeAccessibleName$1(element, {
        computedStyleSupportsPseudoElements: getConfig$1().computedStyleSupportsPseudoElements
      })
    });
  }
  const labelText = getLabels$1(document, element).map((label) => label.content).join(" ");
  if (canSuggest("LabelText", method, labelText)) {
    return makeSuggestion("LabelText", element, labelText, {
      variant
    });
  }
  const placeholderText = element.getAttribute("placeholder");
  if (canSuggest("PlaceholderText", method, placeholderText)) {
    return makeSuggestion("PlaceholderText", element, placeholderText, {
      variant
    });
  }
  const textContent = normalize$1(getNodeText$1(element));
  if (canSuggest("Text", method, textContent)) {
    return makeSuggestion("Text", element, textContent, {
      variant
    });
  }
  if (canSuggest("DisplayValue", method, element.value)) {
    return makeSuggestion("DisplayValue", element, normalize$1(element.value), {
      variant
    });
  }
  const alt = element.getAttribute("alt");
  if (canSuggest("AltText", method, alt)) {
    return makeSuggestion("AltText", element, alt, {
      variant
    });
  }
  const title = element.getAttribute("title");
  if (canSuggest("Title", method, title)) {
    return makeSuggestion("Title", element, title, {
      variant
    });
  }
  const testId = element.getAttribute(getConfig$1().testIdAttribute);
  if (canSuggest("TestId", method, testId)) {
    return makeSuggestion("TestId", element, testId, {
      variant
    });
  }
  return void 0;
}
function copyStackTrace(target, source) {
  target.stack = source.stack.replace(source.message, target.message);
}
function waitFor$1(callback, _ref) {
  let {
    container = getDocument$1(),
    timeout = getConfig$1().asyncUtilTimeout,
    showOriginalStackTrace = getConfig$1().showOriginalStackTrace,
    stackTraceError,
    interval = 50,
    onTimeout = (error) => {
      Object.defineProperty(error, "message", {
        value: getConfig$1().getElementError(error.message, container).message
      });
      return error;
    },
    mutationObserverOptions = {
      subtree: true,
      childList: true,
      attributes: true,
      characterData: true
    }
  } = _ref;
  if (typeof callback !== "function") {
    throw new TypeError("Received `callback` arg must be a function");
  }
  return new Promise(async (resolve, reject) => {
    let lastError, intervalId, observer;
    let finished = false;
    let promiseStatus = "idle";
    const overallTimeoutTimer = setTimeout(handleTimeout, timeout);
    const usingJestFakeTimers = jestFakeTimersAreEnabled();
    if (usingJestFakeTimers) {
      const {
        unstable_advanceTimersWrapper: advanceTimersWrapper
      } = getConfig$1();
      checkCallback();
      while (!finished) {
        if (!jestFakeTimersAreEnabled()) {
          const error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
          if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
          reject(error);
          return;
        }
        await advanceTimersWrapper(async () => {
          jest.advanceTimersByTime(interval);
        });
        if (finished) {
          break;
        }
        checkCallback();
      }
    } else {
      try {
        checkContainerType(container);
      } catch (e2) {
        reject(e2);
        return;
      }
      intervalId = setInterval(checkRealTimersCallback, interval);
      const {
        MutationObserver
      } = getWindowFromNode(container);
      observer = new MutationObserver(checkRealTimersCallback);
      observer.observe(container, mutationObserverOptions);
      checkCallback();
    }
    function onDone(error, result) {
      finished = true;
      clearTimeout(overallTimeoutTimer);
      if (!usingJestFakeTimers) {
        clearInterval(intervalId);
        observer.disconnect();
      }
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }
    function checkRealTimersCallback() {
      if (jestFakeTimersAreEnabled()) {
        const error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
        if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
        return reject(error);
      } else {
        return checkCallback();
      }
    }
    function checkCallback() {
      if (promiseStatus === "pending") return;
      try {
        const result = runWithExpensiveErrorDiagnosticsDisabled(callback);
        if (typeof (result == null ? void 0 : result.then) === "function") {
          promiseStatus = "pending";
          result.then((resolvedValue) => {
            promiseStatus = "resolved";
            onDone(null, resolvedValue);
          }, (rejectedValue) => {
            promiseStatus = "rejected";
            lastError = rejectedValue;
          });
        } else {
          onDone(null, result);
        }
      } catch (error) {
        lastError = error;
      }
    }
    function handleTimeout() {
      let error;
      if (lastError) {
        error = lastError;
        if (!showOriginalStackTrace && error.name === "TestingLibraryElementError") {
          copyStackTrace(error, stackTraceError);
        }
      } else {
        error = new Error("Timed out in waitFor.");
        if (!showOriginalStackTrace) {
          copyStackTrace(error, stackTraceError);
        }
      }
      onDone(onTimeout(error), null);
    }
  });
}
function waitForWrapper(callback, options) {
  const stackTraceError = new Error("STACK_TRACE_MESSAGE");
  return getConfig$1().asyncWrapper(() => waitFor$1(callback, {
    stackTraceError,
    ...options
  }));
}
function getElementError$1(message, container) {
  return getConfig$1().getElementError(message, container);
}
function getMultipleElementsFoundError(message, container) {
  return getElementError$1(message + "\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).", container);
}
function queryAllByAttribute$1(attribute, container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches$1 : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[" + attribute + "]")).filter((node) => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
}
function makeSingleQuery(allQuery, getMultipleError2) {
  return function(container) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    const els = allQuery(container, ...args);
    if (els.length > 1) {
      const elementStrings = els.map((element) => getElementError$1(null, element).message).join("\n\n");
      throw getMultipleElementsFoundError(getMultipleError2(container, ...args) + "\n\nHere are the matching elements:\n\n" + elementStrings, container);
    }
    return els[0] || null;
  };
}
function getSuggestionError(suggestion, container) {
  return getConfig$1().getElementError("A better query is available, try this:\n" + suggestion.toString() + "\n", container);
}
function makeGetAllQuery(allQuery, getMissingError2) {
  return function(container) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    const els = allQuery(container, ...args);
    if (!els.length) {
      throw getConfig$1().getElementError(getMissingError2(container, ...args), container);
    }
    return els;
  };
}
function makeFindQuery(getter) {
  return (container, text, options, waitForOptions) => {
    return waitForWrapper(() => {
      return getter(container, text, options);
    }, {
      container,
      ...waitForOptions
    });
  };
}
const wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  const element = query(container, ...args);
  const [{
    suggest = getConfig$1().throwSuggestions
  } = {}] = args.slice(-1);
  if (element && suggest) {
    const suggestion = getSuggestedQuery$1(element, variant);
    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {
      throw getSuggestionError(suggestion.toString(), container);
    }
  }
  return element;
};
const wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  const els = query(container, ...args);
  const [{
    suggest = getConfig$1().throwSuggestions
  } = {}] = args.slice(-1);
  if (els.length && suggest) {
    const uniqueSuggestionMessages = [...new Set(els.map((element) => {
      var _getSuggestedQuery;
      return (_getSuggestedQuery = getSuggestedQuery$1(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();
    }))];
    if (
      // only want to suggest if all the els have the same suggestion.
      uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?
        getSuggestedQuery$1(els[0], variant).queryName
      )
    ) {
      throw getSuggestionError(uniqueSuggestionMessages[0], container);
    }
  }
  return els;
};
function buildQueries$1(queryAllBy, getMultipleError2, getMissingError2) {
  const queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError2), queryAllBy.name, "query");
  const getAllBy = makeGetAllQuery(queryAllBy, getMissingError2);
  const getBy = makeSingleQuery(getAllBy, getMultipleError2);
  const getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "get");
  const getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace("query", "get"), "getAll");
  const findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, "findAll"));
  const findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "find"));
  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
}
function queryAllLabels(container) {
  return Array.from(container.querySelectorAll("label,input")).map((node) => {
    return {
      node,
      textToMatch: getLabelContent(node)
    };
  }).filter((_ref) => {
    let {
      textToMatch
    } = _ref;
    return textToMatch !== null;
  });
}
const queryAllLabelsByText = function(container, text, _temp) {
  let {
    exact = true,
    trim,
    collapseWhitespace,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches$1 : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  const textToMatchByLabels = queryAllLabels(container);
  return textToMatchByLabels.filter((_ref2) => {
    let {
      node,
      textToMatch
    } = _ref2;
    return matcher(textToMatch, node, text, matchNormalizer);
  }).map((_ref3) => {
    let {
      node
    } = _ref3;
    return node;
  });
};
const queryAllByLabelText$1 = function(container, text, _temp2) {
  let {
    selector = "*",
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp2 === void 0 ? {} : _temp2;
  checkContainerType(container);
  const matcher = exact ? matches$1 : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  const matchingLabelledElements = Array.from(container.querySelectorAll("*")).filter((element) => {
    return getRealLabels(element).length || element.hasAttribute("aria-labelledby");
  }).reduce((labelledElements, labelledElement) => {
    const labelList = getLabels$1(container, labelledElement, {
      selector
    });
    labelList.filter((label) => Boolean(label.formControl)).forEach((label) => {
      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {
        labelledElements.push(label.formControl);
      }
    });
    const labelsValue = labelList.filter((label) => Boolean(label.content)).map((label) => label.content);
    if (matcher(labelsValue.join(" "), labelledElement, text, matchNormalizer)) {
      labelledElements.push(labelledElement);
    }
    if (labelsValue.length > 1) {
      labelsValue.forEach((labelValue, index2) => {
        if (matcher(labelValue, labelledElement, text, matchNormalizer)) {
          labelledElements.push(labelledElement);
        }
        const labelsFiltered = [...labelsValue];
        labelsFiltered.splice(index2, 1);
        if (labelsFiltered.length > 1) {
          if (matcher(labelsFiltered.join(" "), labelledElement, text, matchNormalizer)) {
            labelledElements.push(labelledElement);
          }
        }
      });
    }
    return labelledElements;
  }, []).concat(queryAllByAttribute$1("aria-label", container, text, {
    exact,
    normalizer: matchNormalizer
  }));
  return Array.from(new Set(matchingLabelledElements)).filter((element) => element.matches(selector));
};
const getAllByLabelText$1 = function(container, text) {
  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }
  const els = queryAllByLabelText$1(container, text, ...rest);
  if (!els.length) {
    const labels = queryAllLabelsByText(container, text, ...rest);
    if (labels.length) {
      const tagNames = labels.map((label) => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter((tagName) => !!tagName);
      if (tagNames.length) {
        throw getConfig$1().getElementError(tagNames.map((tagName) => "Found a label with the text of: " + text + ", however the element associated with this label (<" + tagName + " />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <" + tagName + " />, you can use aria-label or aria-labelledby instead.").join("\n\n"), container);
      } else {
        throw getConfig$1().getElementError("Found a label with the text of: " + text + `, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
      }
    } else {
      throw getConfig$1().getElementError("Unable to find a label with the text of: " + text, container);
    }
  }
  return els;
};
function getTagNameOfElementAssociatedWithLabelViaFor(container, label) {
  const htmlFor = label.getAttribute("for");
  if (!htmlFor) {
    return null;
  }
  const element = container.querySelector('[id="' + htmlFor + '"]');
  return element ? element.tagName.toLowerCase() : null;
}
const getMultipleError$7 = (c2, text) => "Found multiple elements with the text of: " + text;
const queryByLabelText$1 = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllByLabelText$1, getMultipleError$7), queryAllByLabelText$1.name, "query");
const getByLabelText$1 = makeSingleQuery(getAllByLabelText$1, getMultipleError$7);
const findAllByLabelText$1 = makeFindQuery(wrapAllByQueryWithSuggestion(getAllByLabelText$1, getAllByLabelText$1.name, "findAll"));
const findByLabelText$1 = makeFindQuery(wrapSingleQueryWithSuggestion(getByLabelText$1, getAllByLabelText$1.name, "find"));
const getAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(getAllByLabelText$1, getAllByLabelText$1.name, "getAll");
const getByLabelTextWithSuggestions = wrapSingleQueryWithSuggestion(getByLabelText$1, getAllByLabelText$1.name, "get");
const queryAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByLabelText$1, queryAllByLabelText$1.name, "queryAll");
const queryAllByPlaceholderText$1 = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  checkContainerType(args[0]);
  return queryAllByAttribute$1("placeholder", ...args);
};
const getMultipleError$6 = (c2, text) => "Found multiple elements with the placeholder text of: " + text;
const getMissingError$6 = (c2, text) => "Unable to find an element with the placeholder text of: " + text;
const queryAllByPlaceholderTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByPlaceholderText$1, queryAllByPlaceholderText$1.name, "queryAll");
const [queryByPlaceholderText$1, getAllByPlaceholderText$1, getByPlaceholderText$1, findAllByPlaceholderText$1, findByPlaceholderText$1] = buildQueries$1(queryAllByPlaceholderText$1, getMultipleError$6, getMissingError$6);
const queryAllByText$1 = function(container, text, _temp) {
  let {
    selector = "*",
    exact = true,
    collapseWhitespace,
    trim,
    ignore = getConfig$1().defaultIgnore,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  const matcher = exact ? matches$1 : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  let baseArray = [];
  if (typeof container.matches === "function" && container.matches(selector)) {
    baseArray = [container];
  }
  return [...baseArray, ...Array.from(container.querySelectorAll(selector))].filter((node) => !ignore || !node.matches(ignore)).filter((node) => matcher(getNodeText$1(node), node, text, matchNormalizer));
};
const getMultipleError$5 = (c2, text) => "Found multiple elements with the text: " + text;
const getMissingError$5 = function(c2, text, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    collapseWhitespace,
    trim,
    normalizer,
    selector
  } = options;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  const normalizedText = matchNormalizer(text.toString());
  const isNormalizedDifferent = normalizedText !== text.toString();
  const isCustomSelector = (selector != null ? selector : "*") !== "*";
  return "Unable to find an element with the text: " + (isNormalizedDifferent ? normalizedText + " (normalized from '" + text + "')" : text) + (isCustomSelector ? ", which matches selector '" + selector + "'" : "") + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
};
const queryAllByTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByText$1, queryAllByText$1.name, "queryAll");
const [queryByText$1, getAllByText$1, getByText$1, findAllByText$1, findByText$1] = buildQueries$1(queryAllByText$1, getMultipleError$5, getMissingError$5);
const queryAllByDisplayValue$1 = function(container, value, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  const matcher = exact ? matches$1 : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("input,textarea,select")).filter((node) => {
    if (node.tagName === "SELECT") {
      const selectedOptions = Array.from(node.options).filter((option) => option.selected);
      return selectedOptions.some((optionNode) => matcher(getNodeText$1(optionNode), optionNode, value, matchNormalizer));
    } else {
      return matcher(node.value, node, value, matchNormalizer);
    }
  });
};
const getMultipleError$4 = (c2, value) => "Found multiple elements with the display value: " + value + ".";
const getMissingError$4 = (c2, value) => "Unable to find an element with the display value: " + value + ".";
const queryAllByDisplayValueWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByDisplayValue$1, queryAllByDisplayValue$1.name, "queryAll");
const [queryByDisplayValue$1, getAllByDisplayValue$1, getByDisplayValue$1, findAllByDisplayValue$1, findByDisplayValue$1] = buildQueries$1(queryAllByDisplayValue$1, getMultipleError$4, getMissingError$4);
const VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText$1 = function(container, alt, options) {
  if (options === void 0) {
    options = {};
  }
  checkContainerType(container);
  return queryAllByAttribute$1("alt", container, alt, options).filter((node) => VALID_TAG_REGEXP.test(node.tagName));
};
const getMultipleError$3 = (c2, alt) => "Found multiple elements with the alt text: " + alt;
const getMissingError$3 = (c2, alt) => "Unable to find an element with the alt text: " + alt;
const queryAllByAltTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByAltText$1, queryAllByAltText$1.name, "queryAll");
const [queryByAltText$1, getAllByAltText$1, getByAltText$1, findAllByAltText$1, findByAltText$1] = buildQueries$1(queryAllByAltText$1, getMultipleError$3, getMissingError$3);
const isSvgTitle = (node) => {
  var _node$parentElement;
  return node.tagName.toLowerCase() === "title" && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === "svg";
};
const queryAllByTitle$1 = function(container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  const matcher = exact ? matches$1 : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[title], svg > title")).filter((node) => matcher(node.getAttribute("title"), node, text, matchNormalizer) || isSvgTitle(node) && matcher(getNodeText$1(node), node, text, matchNormalizer));
};
const getMultipleError$2 = (c2, title) => "Found multiple elements with the title: " + title + ".";
const getMissingError$2 = (c2, title) => "Unable to find an element with the title: " + title + ".";
const queryAllByTitleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTitle$1, queryAllByTitle$1.name, "queryAll");
const [queryByTitle$1, getAllByTitle$1, getByTitle$1, findAllByTitle$1, findByTitle$1] = buildQueries$1(queryAllByTitle$1, getMultipleError$2, getMissingError$2);
const queryAllByRole$1 = function(container, role, _temp) {
  let {
    hidden = getConfig$1().defaultHidden,
    name,
    description,
    queryFallbacks = false,
    selected,
    busy,
    checked,
    pressed,
    current,
    level,
    expanded,
    value: {
      now: valueNow,
      min: valueMin,
      max: valueMax,
      text: valueText
    } = {}
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  if (selected !== void 0) {
    var _allRoles$get;
    if (((_allRoles$get = libExports.roles.get(role)) == null ? void 0 : _allRoles$get.props["aria-selected"]) === void 0) {
      throw new Error('"aria-selected" is not supported on role "' + role + '".');
    }
  }
  if (busy !== void 0) {
    var _allRoles$get2;
    if (((_allRoles$get2 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get2.props["aria-busy"]) === void 0) {
      throw new Error('"aria-busy" is not supported on role "' + role + '".');
    }
  }
  if (checked !== void 0) {
    var _allRoles$get3;
    if (((_allRoles$get3 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get3.props["aria-checked"]) === void 0) {
      throw new Error('"aria-checked" is not supported on role "' + role + '".');
    }
  }
  if (pressed !== void 0) {
    var _allRoles$get4;
    if (((_allRoles$get4 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get4.props["aria-pressed"]) === void 0) {
      throw new Error('"aria-pressed" is not supported on role "' + role + '".');
    }
  }
  if (current !== void 0) {
    var _allRoles$get5;
    if (((_allRoles$get5 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get5.props["aria-current"]) === void 0) {
      throw new Error('"aria-current" is not supported on role "' + role + '".');
    }
  }
  if (level !== void 0) {
    if (role !== "heading") {
      throw new Error('Role "' + role + '" cannot have "level" property.');
    }
  }
  if (valueNow !== void 0) {
    var _allRoles$get6;
    if (((_allRoles$get6 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get6.props["aria-valuenow"]) === void 0) {
      throw new Error('"aria-valuenow" is not supported on role "' + role + '".');
    }
  }
  if (valueMax !== void 0) {
    var _allRoles$get7;
    if (((_allRoles$get7 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get7.props["aria-valuemax"]) === void 0) {
      throw new Error('"aria-valuemax" is not supported on role "' + role + '".');
    }
  }
  if (valueMin !== void 0) {
    var _allRoles$get8;
    if (((_allRoles$get8 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get8.props["aria-valuemin"]) === void 0) {
      throw new Error('"aria-valuemin" is not supported on role "' + role + '".');
    }
  }
  if (valueText !== void 0) {
    var _allRoles$get9;
    if (((_allRoles$get9 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get9.props["aria-valuetext"]) === void 0) {
      throw new Error('"aria-valuetext" is not supported on role "' + role + '".');
    }
  }
  if (expanded !== void 0) {
    var _allRoles$get0;
    if (((_allRoles$get0 = libExports.roles.get(role)) == null ? void 0 : _allRoles$get0.props["aria-expanded"]) === void 0) {
      throw new Error('"aria-expanded" is not supported on role "' + role + '".');
    }
  }
  const subtreeIsInaccessibleCache = /* @__PURE__ */ new WeakMap();
  function cachedIsSubtreeInaccessible(element) {
    if (!subtreeIsInaccessibleCache.has(element)) {
      subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible(element));
    }
    return subtreeIsInaccessibleCache.get(element);
  }
  return Array.from(container.querySelectorAll(
    // Only query elements that can be matched by the following filters
    makeRoleSelector(role)
  )).filter((node) => {
    const isRoleSpecifiedExplicitly = node.hasAttribute("role");
    if (isRoleSpecifiedExplicitly) {
      const roleValue = node.getAttribute("role");
      if (queryFallbacks) {
        return roleValue.split(" ").filter(Boolean).some((roleAttributeToken) => roleAttributeToken === role);
      }
      const [firstRoleAttributeToken] = roleValue.split(" ");
      return firstRoleAttributeToken === role;
    }
    const implicitRoles = getImplicitAriaRoles$1(node);
    return implicitRoles.some((implicitRole) => {
      return implicitRole === role;
    });
  }).filter((element) => {
    if (selected !== void 0) {
      return selected === computeAriaSelected(element);
    }
    if (busy !== void 0) {
      return busy === computeAriaBusy(element);
    }
    if (checked !== void 0) {
      return checked === computeAriaChecked(element);
    }
    if (pressed !== void 0) {
      return pressed === computeAriaPressed(element);
    }
    if (current !== void 0) {
      return current === computeAriaCurrent(element);
    }
    if (expanded !== void 0) {
      return expanded === computeAriaExpanded(element);
    }
    if (level !== void 0) {
      return level === computeHeadingLevel(element);
    }
    if (valueNow !== void 0 || valueMax !== void 0 || valueMin !== void 0 || valueText !== void 0) {
      let valueMatches = true;
      if (valueNow !== void 0) {
        valueMatches && (valueMatches = valueNow === computeAriaValueNow(element));
      }
      if (valueMax !== void 0) {
        valueMatches && (valueMatches = valueMax === computeAriaValueMax(element));
      }
      if (valueMin !== void 0) {
        valueMatches && (valueMatches = valueMin === computeAriaValueMin(element));
      }
      if (valueText !== void 0) {
        var _computeAriaValueText;
        valueMatches && (valueMatches = matches$1((_computeAriaValueText = computeAriaValueText(element)) != null ? _computeAriaValueText : null, element, valueText, (text) => text));
      }
      return valueMatches;
    }
    return true;
  }).filter((element) => {
    if (name === void 0) {
      return true;
    }
    return matches$1(computeAccessibleName$1(element, {
      computedStyleSupportsPseudoElements: getConfig$1().computedStyleSupportsPseudoElements
    }), element, name, (text) => text);
  }).filter((element) => {
    if (description === void 0) {
      return true;
    }
    return matches$1(computeAccessibleDescription$1(element, {
      computedStyleSupportsPseudoElements: getConfig$1().computedStyleSupportsPseudoElements
    }), element, description, (text) => text);
  }).filter((element) => {
    return hidden === false ? isInaccessible$1(element, {
      isSubtreeInaccessible: cachedIsSubtreeInaccessible
    }) === false : true;
  });
};
function makeRoleSelector(role) {
  var _roleElements$get;
  const explicitRoleSelector = '*[role~="' + role + '"]';
  const roleRelations = (_roleElements$get = libExports.roleElements.get(role)) != null ? _roleElements$get : /* @__PURE__ */ new Set();
  const implicitRoleSelectors = new Set(Array.from(roleRelations).map((_ref) => {
    let {
      name
    } = _ref;
    return name;
  }));
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",");
}
const getNameHint = (name) => {
  let nameHint = "";
  if (name === void 0) {
    nameHint = "";
  } else if (typeof name === "string") {
    nameHint = ' and name "' + name + '"';
  } else {
    nameHint = " and name `" + name + "`";
  }
  return nameHint;
};
const getMultipleError$1 = function(c2, role, _temp2) {
  let {
    name
  } = _temp2 === void 0 ? {} : _temp2;
  return 'Found multiple elements with the role "' + role + '"' + getNameHint(name);
};
const getMissingError$1 = function(container, role, _temp3) {
  let {
    hidden = getConfig$1().defaultHidden,
    name,
    description
  } = _temp3 === void 0 ? {} : _temp3;
  if (getConfig$1()._disableExpensiveErrorDiagnostics) {
    return 'Unable to find role="' + role + '"' + getNameHint(name);
  }
  let roles2 = "";
  Array.from(container.children).forEach((childElement) => {
    roles2 += prettyRoles(childElement, {
      hidden,
      includeDescription: description !== void 0
    });
  });
  let roleMessage;
  if (roles2.length === 0) {
    if (hidden === false) {
      roleMessage = "There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole";
    } else {
      roleMessage = "There are no available roles.";
    }
  } else {
    roleMessage = ("\nHere are the " + (hidden === false ? "accessible" : "available") + " roles:\n\n  " + roles2.replace(/\n/g, "\n  ").replace(/\n\s\s\n/g, "\n\n") + "\n").trim();
  }
  let nameHint = "";
  if (name === void 0) {
    nameHint = "";
  } else if (typeof name === "string") {
    nameHint = ' and name "' + name + '"';
  } else {
    nameHint = " and name `" + name + "`";
  }
  let descriptionHint = "";
  if (description === void 0) {
    descriptionHint = "";
  } else if (typeof description === "string") {
    descriptionHint = ' and description "' + description + '"';
  } else {
    descriptionHint = " and description `" + description + "`";
  }
  return ("\nUnable to find an " + (hidden === false ? "accessible " : "") + 'element with the role "' + role + '"' + nameHint + descriptionHint + "\n\n" + roleMessage).trim();
};
const queryAllByRoleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByRole$1, queryAllByRole$1.name, "queryAll");
const [queryByRole$1, getAllByRole$1, getByRole$1, findAllByRole$1, findByRole$1] = buildQueries$1(queryAllByRole$1, getMultipleError$1, getMissingError$1);
const getTestIdAttribute = () => getConfig$1().testIdAttribute;
const queryAllByTestId$1 = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  checkContainerType(args[0]);
  return queryAllByAttribute$1(getTestIdAttribute(), ...args);
};
const getMultipleError = (c2, id) => "Found multiple elements by: [" + getTestIdAttribute() + '="' + id + '"]';
const getMissingError = (c2, id) => "Unable to find an element by: [" + getTestIdAttribute() + '="' + id + '"]';
const queryAllByTestIdWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTestId$1, queryAllByTestId$1.name, "queryAll");
const [queryByTestId$1, getAllByTestId$1, getByTestId$1, findAllByTestId$1, findByTestId$1] = buildQueries$1(queryAllByTestId$1, getMultipleError, getMissingError);
var queries$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  queryAllByLabelText: queryAllByLabelTextWithSuggestions,
  queryByLabelText: queryByLabelText$1,
  getAllByLabelText: getAllByLabelTextWithSuggestions,
  getByLabelText: getByLabelTextWithSuggestions,
  findAllByLabelText: findAllByLabelText$1,
  findByLabelText: findByLabelText$1,
  queryByPlaceholderText: queryByPlaceholderText$1,
  queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions,
  getByPlaceholderText: getByPlaceholderText$1,
  getAllByPlaceholderText: getAllByPlaceholderText$1,
  findAllByPlaceholderText: findAllByPlaceholderText$1,
  findByPlaceholderText: findByPlaceholderText$1,
  queryByText: queryByText$1,
  queryAllByText: queryAllByTextWithSuggestions,
  getByText: getByText$1,
  getAllByText: getAllByText$1,
  findAllByText: findAllByText$1,
  findByText: findByText$1,
  queryByDisplayValue: queryByDisplayValue$1,
  queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions,
  getByDisplayValue: getByDisplayValue$1,
  getAllByDisplayValue: getAllByDisplayValue$1,
  findAllByDisplayValue: findAllByDisplayValue$1,
  findByDisplayValue: findByDisplayValue$1,
  queryByAltText: queryByAltText$1,
  queryAllByAltText: queryAllByAltTextWithSuggestions,
  getByAltText: getByAltText$1,
  getAllByAltText: getAllByAltText$1,
  findAllByAltText: findAllByAltText$1,
  findByAltText: findByAltText$1,
  queryByTitle: queryByTitle$1,
  queryAllByTitle: queryAllByTitleWithSuggestions,
  getByTitle: getByTitle$1,
  getAllByTitle: getAllByTitle$1,
  findAllByTitle: findAllByTitle$1,
  findByTitle: findByTitle$1,
  queryByRole: queryByRole$1,
  queryAllByRole: queryAllByRoleWithSuggestions,
  getAllByRole: getAllByRole$1,
  getByRole: getByRole$1,
  findAllByRole: findAllByRole$1,
  findByRole: findByRole$1,
  queryByTestId: queryByTestId$1,
  queryAllByTestId: queryAllByTestIdWithSuggestions,
  getByTestId: getByTestId$1,
  getAllByTestId: getAllByTestId$1,
  findAllByTestId: findAllByTestId$1,
  findByTestId: findByTestId$1
});
function getQueriesForElement$1(element, queries$1$1, initialValue2) {
  if (queries$1$1 === void 0) {
    queries$1$1 = queries$1;
  }
  if (initialValue2 === void 0) {
    initialValue2 = {};
  }
  return Object.keys(queries$1$1).reduce((helpers2, key) => {
    const fn = queries$1$1[key];
    helpers2[key] = fn.bind(null, element);
    return helpers2;
  }, initialValue2);
}
const eventMap$2 = {
  // Clipboard Events
  copy: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  cut: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  paste: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Composition Events
  compositionEnd: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  compositionStart: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  compositionUpdate: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Keyboard Events
  keyDown: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  keyPress: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  keyUp: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  // Focus Events
  focus: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  blur: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  focusIn: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  focusOut: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  // Form Events
  change: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  input: {
    EventType: "InputEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  invalid: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: true
    }
  },
  submit: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  reset: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  // Mouse Events
  click: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      button: 0,
      composed: true
    }
  },
  contextMenu: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dblClick: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  drag: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragEnd: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragEnter: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragExit: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragLeave: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragOver: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragStart: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  drop: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseDown: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseEnter: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  mouseLeave: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  mouseMove: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseOut: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseOver: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseUp: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Selection Events
  select: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // Touch Events
  touchCancel: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  touchEnd: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  touchMove: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  touchStart: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // UI Events
  resize: {
    EventType: "UIEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  scroll: {
    EventType: "UIEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Wheel Events
  wheel: {
    EventType: "WheelEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Media Events
  abort: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  canPlay: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  canPlayThrough: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  durationChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  emptied: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  encrypted: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  ended: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadedData: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadedMetadata: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadStart: {
    EventType: "ProgressEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pause: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  play: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  playing: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  progress: {
    EventType: "ProgressEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  rateChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  seeked: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  seeking: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  stalled: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  suspend: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  timeUpdate: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  volumeChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  waiting: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Events
  load: {
    // TODO: load events can be UIEvent or Event depending on what generated them
    // This is where this abstraction breaks down.
    // But the common targets are <img />, <script /> and window.
    // Neither of these targets receive a UIEvent
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  error: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Animation Events
  animationStart: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  animationEnd: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  animationIteration: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // Transition Events
  transitionCancel: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  transitionEnd: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  transitionRun: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  transitionStart: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // pointer events
  pointerOver: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerEnter: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pointerDown: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerMove: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerUp: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerCancel: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  pointerOut: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerLeave: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  gotPointerCapture: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  lostPointerCapture: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  // history events
  popState: {
    EventType: "PopStateEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // window events
  offline: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  online: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pageHide: {
    EventType: "PageTransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  pageShow: {
    EventType: "PageTransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  }
};
const eventAliasMap = {
  doubleClick: "dblClick"
};
Object.keys(eventMap$2).forEach((key) => {
  const {
    EventType,
    defaultInit
  } = eventMap$2[key];
  key.toLowerCase();
});
Object.keys(eventAliasMap).forEach((aliasKey) => {
});
function unindent(string) {
  return string.replace(/[ \t]*[\n][ \t]*/g, "\n");
}
function encode(value) {
  return lzString.compressToEncodedURIComponent(unindent(value));
}
function getPlaygroundUrl(markup2) {
  return "https://testing-playground.com/#markup=" + encode(markup2);
}
const debug = (element, maxLength, options) => Array.isArray(element) ? element.forEach((el) => logDOM$1(el, maxLength, options)) : logDOM$1(element, maxLength, options);
const logTestingPlaygroundURL = function(element) {
  if (element === void 0) {
    element = getDocument$1().body;
  }
  if (!element || !("innerHTML" in element)) {
    console.log("The element you're providing isn't a valid DOM element.");
    return;
  }
  if (!element.innerHTML) {
    console.log("The provided element doesn't have any children.");
    return;
  }
  const playgroundUrl = getPlaygroundUrl(element.innerHTML);
  console.log("Open this URL in your browser\n\n" + playgroundUrl);
  return playgroundUrl;
};
const initialValue = {
  debug,
  logTestingPlaygroundURL
};
typeof document !== "undefined" && document.body ? getQueriesForElement$1(document.body, queries$1, initialValue) : Object.keys(queries$1).reduce((helpers2, key) => {
  helpers2[key] = () => {
    throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error");
  };
  return helpers2;
}, initialValue);
function wrapEvent(cb, _element) {
  return getConfig$1().eventWrapper(cb);
}
function focusElement(element) {
  const target = findClosest(element, isFocusable);
  const activeElement = getActiveElement(element.ownerDocument);
  if ((target !== null && target !== void 0 ? target : element.ownerDocument.body) === activeElement) {
    return;
  } else if (target) {
    wrapEvent(() => target.focus());
  } else {
    wrapEvent(() => {
      var ref2;
      return (ref2 = activeElement) === null || ref2 === void 0 ? void 0 : ref2.blur();
    });
  }
  updateSelectionOnFocus(target !== null && target !== void 0 ? target : element.ownerDocument.body);
}
function blurElement(element) {
  if (!isFocusable(element)) return;
  const wasActive = getActiveElement(element.ownerDocument) === element;
  if (!wasActive) return;
  wrapEvent(() => element.blur());
}
const behavior = {};
behavior.click = (event, target, instance) => {
  const context = target.closest("button,input,label,select,textarea");
  const control = context && isElementType(context, "label") && context.control;
  if (control) {
    return () => {
      if (isFocusable(control)) {
        focusElement(control);
      }
      instance.dispatchEvent(control, cloneEvent(event));
    };
  } else if (isElementType(target, "input", {
    type: "file"
  })) {
    return () => {
      blurElement(target);
      target.dispatchEvent(new (getWindow(target)).Event("fileDialog"));
      focusElement(target);
    };
  }
};
const UIValue = Symbol("Displayed value in UI");
const UISelection = Symbol("Displayed selection in UI");
const InitialValue = Symbol("Initial value to compare on blur");
function isUIValue(value) {
  return typeof value === "object" && UIValue in value;
}
function isUISelectionStart(start) {
  return !!start && typeof start === "object" && UISelection in start;
}
function setUIValue(element, value) {
  if (element[InitialValue] === void 0) {
    element[InitialValue] = element.value;
  }
  element[UIValue] = value;
  element.value = Object.assign(new String(value), {
    [UIValue]: true
  });
}
function getUIValue(element) {
  return element[UIValue] === void 0 ? element.value : String(element[UIValue]);
}
function setUIValueClean(element) {
  element[UIValue] = void 0;
}
function clearInitialValue(element) {
  element[InitialValue] = void 0;
}
function getInitialValue(element) {
  return element[InitialValue];
}
function setUISelectionRaw(element, selection) {
  element[UISelection] = selection;
}
function setUISelection(element, { focusOffset: focusOffsetParam, anchorOffset: anchorOffsetParam = focusOffsetParam }, mode = "replace") {
  const valueLength = getUIValue(element).length;
  const sanitizeOffset = (o2) => Math.max(0, Math.min(valueLength, o2));
  const anchorOffset = mode === "replace" || element[UISelection] === void 0 ? sanitizeOffset(anchorOffsetParam) : element[UISelection].anchorOffset;
  const focusOffset = sanitizeOffset(focusOffsetParam);
  const startOffset = Math.min(anchorOffset, focusOffset);
  const endOffset = Math.max(anchorOffset, focusOffset);
  element[UISelection] = {
    anchorOffset,
    focusOffset
  };
  if (element.selectionStart === startOffset && element.selectionEnd === endOffset) {
    return;
  }
  const startObj = Object.assign(new Number(startOffset), {
    [UISelection]: true
  });
  try {
    element.setSelectionRange(startObj, endOffset);
  } catch {
  }
}
function getUISelection(element) {
  var _selectionStart, _selectionEnd, _UISelection;
  const sel = (_UISelection = element[UISelection]) !== null && _UISelection !== void 0 ? _UISelection : {
    anchorOffset: (_selectionStart = element.selectionStart) !== null && _selectionStart !== void 0 ? _selectionStart : 0,
    focusOffset: (_selectionEnd = element.selectionEnd) !== null && _selectionEnd !== void 0 ? _selectionEnd : 0
  };
  return {
    ...sel,
    startOffset: Math.min(sel.anchorOffset, sel.focusOffset),
    endOffset: Math.max(sel.anchorOffset, sel.focusOffset)
  };
}
function hasUISelection(element) {
  return !!element[UISelection];
}
function setUISelectionClean(element) {
  element[UISelection] = void 0;
}
const parseInt$1 = globalThis.parseInt;
function buildTimeValue(value) {
  const onlyDigitsValue = value.replace(/\D/g, "");
  if (onlyDigitsValue.length < 2) {
    return value;
  }
  const firstDigit = parseInt$1(onlyDigitsValue[0], 10);
  const secondDigit = parseInt$1(onlyDigitsValue[1], 10);
  if (firstDigit >= 3 || firstDigit === 2 && secondDigit >= 4) {
    let index2;
    if (firstDigit >= 3) {
      index2 = 1;
    } else {
      index2 = 2;
    }
    return build$1(onlyDigitsValue, index2);
  }
  if (value.length === 2) {
    return value;
  }
  return build$1(onlyDigitsValue, 2);
}
function build$1(onlyDigitsValue, index2) {
  const hours = onlyDigitsValue.slice(0, index2);
  const validHours = Math.min(parseInt$1(hours, 10), 23);
  const minuteCharacters = onlyDigitsValue.slice(index2);
  const parsedMinutes = parseInt$1(minuteCharacters, 10);
  const validMinutes = Math.min(parsedMinutes, 59);
  return `${validHours.toString().padStart(2, "0")}:${validMinutes.toString().padStart(2, "0")}`;
}
function isValidDateOrTimeValue(element, value) {
  const clone = element.cloneNode();
  clone.value = value;
  return clone.value === value;
}
function getNextCursorPosition(node, offset, direction, inputType) {
  if (isTextNode(node) && offset + direction >= 0 && offset + direction <= node.nodeValue.length) {
    return {
      node,
      offset: offset + direction
    };
  }
  const nextNode = getNextCharacterContentNode(node, offset, direction);
  if (nextNode) {
    if (isTextNode(nextNode)) {
      return {
        node: nextNode,
        offset: direction > 0 ? Math.min(1, nextNode.nodeValue.length) : Math.max(nextNode.nodeValue.length - 1, 0)
      };
    } else if (isElementType(nextNode, "br")) {
      const nextPlusOne = getNextCharacterContentNode(nextNode, void 0, direction);
      if (!nextPlusOne) {
        if (direction < 0 && inputType === "deleteContentBackward") {
          return {
            node: nextNode.parentNode,
            offset: getOffset(nextNode)
          };
        }
        return void 0;
      } else if (isTextNode(nextPlusOne)) {
        return {
          node: nextPlusOne,
          offset: direction > 0 ? 0 : nextPlusOne.nodeValue.length
        };
      } else if (direction < 0 && isElementType(nextPlusOne, "br")) {
        return {
          node: nextNode.parentNode,
          offset: getOffset(nextNode)
        };
      } else {
        return {
          node: nextPlusOne.parentNode,
          offset: getOffset(nextPlusOne) + (direction > 0 ? 0 : 1)
        };
      }
    } else {
      return {
        node: nextNode.parentNode,
        offset: getOffset(nextNode) + (direction > 0 ? 1 : 0)
      };
    }
  }
}
function getNextCharacterContentNode(node, offset, direction) {
  const nextOffset = Number(offset) + (direction < 0 ? -1 : 0);
  if (offset !== void 0 && isElement$1(node) && nextOffset >= 0 && nextOffset < node.children.length) {
    node = node.children[nextOffset];
  }
  return walkNodes(node, direction === 1 ? "next" : "previous", isTreatedAsCharacterContent);
}
function isTreatedAsCharacterContent(node) {
  if (isTextNode(node)) {
    return true;
  }
  if (isElement$1(node)) {
    if (isElementType(node, [
      "input",
      "textarea"
    ])) {
      return node.type !== "hidden";
    } else if (isElementType(node, "br")) {
      return true;
    }
  }
  return false;
}
function getOffset(node) {
  let i2 = 0;
  while (node.previousSibling) {
    i2++;
    node = node.previousSibling;
  }
  return i2;
}
function isElement$1(node) {
  return node.nodeType === 1;
}
function isTextNode(node) {
  return node.nodeType === 3;
}
function walkNodes(node, direction, callback) {
  for (; ; ) {
    var ref2;
    const sibling = node[`${direction}Sibling`];
    if (sibling) {
      node = getDescendant(sibling, direction === "next" ? "first" : "last");
      if (callback(node)) {
        return node;
      }
    } else if (node.parentNode && (!isElement$1(node.parentNode) || !isContentEditable(node.parentNode) && node.parentNode !== ((ref2 = node.ownerDocument) === null || ref2 === void 0 ? void 0 : ref2.body))) {
      node = node.parentNode;
    } else {
      break;
    }
  }
}
function getDescendant(node, direction) {
  while (node.hasChildNodes()) {
    node = node[`${direction}Child`];
  }
  return node;
}
const TrackChanges = Symbol("Track programmatic changes for React workaround");
function isReact17Element(element) {
  return Object.getOwnPropertyNames(element).some((k) => k.startsWith("__react")) && getWindow(element).REACT_VERSION === 17;
}
function startTrackValue(element) {
  if (!isReact17Element(element)) {
    return;
  }
  element[TrackChanges] = {
    previousValue: String(element.value),
    tracked: []
  };
}
function trackOrSetValue(element, v) {
  var ref2, ref1;
  (ref2 = element[TrackChanges]) === null || ref2 === void 0 ? void 0 : (ref1 = ref2.tracked) === null || ref1 === void 0 ? void 0 : ref1.push(v);
  if (!element[TrackChanges]) {
    setUIValueClean(element);
    setUISelection(element, {
      focusOffset: v.length
    });
  }
}
function commitValueAfterInput(element, cursorOffset) {
  var ref2;
  const changes = element[TrackChanges];
  element[TrackChanges] = void 0;
  if (!(changes === null || changes === void 0 ? void 0 : (ref2 = changes.tracked) === null || ref2 === void 0 ? void 0 : ref2.length)) {
    return;
  }
  const isJustReactStateUpdate = changes.tracked.length === 2 && changes.tracked[0] === changes.previousValue && changes.tracked[1] === element.value;
  if (!isJustReactStateUpdate) {
    setUIValueClean(element);
  }
  if (hasUISelection(element)) {
    setUISelection(element, {
      focusOffset: isJustReactStateUpdate ? cursorOffset : element.value.length
    });
  }
}
function getTargetTypeAndSelection(node) {
  const element = getElement(node);
  if (element && hasOwnSelection(element)) {
    return {
      type: "input",
      selection: getUISelection(element)
    };
  }
  const selection = element === null || element === void 0 ? void 0 : element.ownerDocument.getSelection();
  const isCE = getContentEditable(node) && (selection === null || selection === void 0 ? void 0 : selection.anchorNode) && getContentEditable(selection.anchorNode);
  return {
    type: isCE ? "contenteditable" : "default",
    selection
  };
}
function getElement(node) {
  return node.nodeType === 1 ? node : node.parentElement;
}
function getInputRange(focusNode) {
  const typeAndSelection = getTargetTypeAndSelection(focusNode);
  if (typeAndSelection.type === "input") {
    return typeAndSelection.selection;
  } else if (typeAndSelection.type === "contenteditable") {
    var ref2;
    return (ref2 = typeAndSelection.selection) === null || ref2 === void 0 ? void 0 : ref2.getRangeAt(0);
  }
}
function setSelection({ focusNode, focusOffset, anchorNode = focusNode, anchorOffset = focusOffset }) {
  var ref2, ref1;
  const typeAndSelection = getTargetTypeAndSelection(focusNode);
  if (typeAndSelection.type === "input") {
    return setUISelection(focusNode, {
      anchorOffset,
      focusOffset
    });
  }
  (ref1 = (ref2 = anchorNode.ownerDocument) === null || ref2 === void 0 ? void 0 : ref2.getSelection()) === null || ref1 === void 0 ? void 0 : ref1.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);
}
function isDateOrTime(element) {
  return isElementType(element, "input") && [
    "date",
    "time"
  ].includes(element.type);
}
function input(instance, element, data, inputType = "insertText") {
  const inputRange = getInputRange(element);
  if (!inputRange) {
    return;
  }
  if (!isDateOrTime(element)) {
    const unprevented = instance.dispatchUIEvent(element, "beforeinput", {
      inputType,
      data
    });
    if (!unprevented) {
      return;
    }
  }
  if ("startContainer" in inputRange) {
    editContenteditable(instance, element, inputRange, data, inputType);
  } else {
    editInputElement(instance, element, inputRange, data, inputType);
  }
}
function editContenteditable(instance, element, inputRange, data, inputType) {
  let del = false;
  if (!inputRange.collapsed) {
    del = true;
    inputRange.deleteContents();
  } else if ([
    "deleteContentBackward",
    "deleteContentForward"
  ].includes(inputType)) {
    const nextPosition = getNextCursorPosition(inputRange.startContainer, inputRange.startOffset, inputType === "deleteContentBackward" ? -1 : 1, inputType);
    if (nextPosition) {
      del = true;
      const delRange = inputRange.cloneRange();
      if (delRange.comparePoint(nextPosition.node, nextPosition.offset) < 0) {
        delRange.setStart(nextPosition.node, nextPosition.offset);
      } else {
        delRange.setEnd(nextPosition.node, nextPosition.offset);
      }
      delRange.deleteContents();
    }
  }
  if (data) {
    if (inputRange.endContainer.nodeType === 3) {
      const offset = inputRange.endOffset;
      inputRange.endContainer.insertData(offset, data);
      inputRange.setStart(inputRange.endContainer, offset + data.length);
      inputRange.setEnd(inputRange.endContainer, offset + data.length);
    } else {
      const text = element.ownerDocument.createTextNode(data);
      inputRange.insertNode(text);
      inputRange.setStart(text, data.length);
      inputRange.setEnd(text, data.length);
    }
  }
  if (del || data) {
    instance.dispatchUIEvent(element, "input", {
      inputType
    });
  }
}
function editInputElement(instance, element, inputRange, data, inputType) {
  let dataToInsert = data;
  if (supportsMaxLength(element)) {
    const maxLength = getMaxLength(element);
    if (maxLength !== void 0 && data.length > 0) {
      const spaceUntilMaxLength = maxLength - element.value.length;
      if (spaceUntilMaxLength > 0) {
        dataToInsert = data.substring(0, spaceUntilMaxLength);
      } else {
        return;
      }
    }
  }
  const { newValue, newOffset, oldValue } = calculateNewValue(dataToInsert, element, inputRange, inputType);
  if (newValue === oldValue && newOffset === inputRange.startOffset && newOffset === inputRange.endOffset) {
    return;
  }
  if (isElementType(element, "input", {
    type: "number"
  }) && !isValidNumberInput(newValue)) {
    return;
  }
  setUIValue(element, newValue);
  setSelection({
    focusNode: element,
    anchorOffset: newOffset,
    focusOffset: newOffset
  });
  if (isDateOrTime(element)) {
    if (isValidDateOrTimeValue(element, newValue)) {
      commitInput(instance, element, newOffset, {});
      instance.dispatchUIEvent(element, "change");
      clearInitialValue(element);
    }
  } else {
    commitInput(instance, element, newOffset, {
      data,
      inputType
    });
  }
}
function calculateNewValue(inputData, node, { startOffset, endOffset }, inputType) {
  const value = getUIValue(node);
  const prologEnd = Math.max(0, startOffset === endOffset && inputType === "deleteContentBackward" ? startOffset - 1 : startOffset);
  const prolog = value.substring(0, prologEnd);
  const epilogStart = Math.min(value.length, startOffset === endOffset && inputType === "deleteContentForward" ? startOffset + 1 : endOffset);
  const epilog = value.substring(epilogStart, value.length);
  let newValue = `${prolog}${inputData}${epilog}`;
  let newOffset = prologEnd + inputData.length;
  if (isElementType(node, "input", {
    type: "time"
  })) {
    const builtValue = buildTimeValue(newValue);
    if (builtValue !== "" && isValidDateOrTimeValue(node, builtValue)) {
      newValue = builtValue;
      newOffset = builtValue.length;
    }
  }
  return {
    oldValue: value,
    newValue,
    newOffset
  };
}
function commitInput(instance, element, newOffset, inputInit) {
  instance.dispatchUIEvent(element, "input", inputInit);
  commitValueAfterInput(element, newOffset);
}
function isValidNumberInput(value) {
  var ref2, ref1;
  const valueParts = value.split("e", 2);
  return !(/[^\d.\-e]/.test(value) || Number((ref2 = value.match(/-/g)) === null || ref2 === void 0 ? void 0 : ref2.length) > 2 || Number((ref1 = value.match(/\./g)) === null || ref1 === void 0 ? void 0 : ref1.length) > 1 || valueParts[1] && !/^-?\d*$/.test(valueParts[1]));
}
behavior.cut = (event, target, instance) => {
  return () => {
    if (isEditable(target)) {
      input(instance, target, "", "deleteByCut");
    }
  };
};
function getValueOrTextContent(element) {
  if (!element) {
    return null;
  }
  if (isContentEditable(element)) {
    return element.textContent;
  }
  return getUIValue(element);
}
function isVisible(element) {
  const window2 = getWindow(element);
  for (let el = element; el === null || el === void 0 ? void 0 : el.ownerDocument; el = el.parentElement) {
    const { display: display2, visibility } = window2.getComputedStyle(el);
    if (display2 === "none") {
      return false;
    }
    if (visibility === "hidden") {
      return false;
    }
  }
  return true;
}
function getTabDestination(activeElement, shift) {
  const document2 = activeElement.ownerDocument;
  const focusableElements = document2.querySelectorAll(FOCUSABLE_SELECTOR);
  const enabledElements = Array.from(focusableElements).filter((el) => el === activeElement || !(Number(el.getAttribute("tabindex")) < 0 || isDisabled(el)));
  if (Number(activeElement.getAttribute("tabindex")) >= 0) {
    enabledElements.sort((a, b) => {
      const i2 = Number(a.getAttribute("tabindex"));
      const j = Number(b.getAttribute("tabindex"));
      if (i2 === j) {
        return 0;
      } else if (i2 === 0) {
        return 1;
      } else if (j === 0) {
        return -1;
      }
      return i2 - j;
    });
  }
  const checkedRadio = {};
  let prunedElements = [
    document2.body
  ];
  const activeRadioGroup = isElementType(activeElement, "input", {
    type: "radio"
  }) ? activeElement.name : void 0;
  enabledElements.forEach((currentElement) => {
    const el = currentElement;
    if (isElementType(el, "input", {
      type: "radio"
    }) && el.name) {
      if (el === activeElement) {
        prunedElements.push(el);
        return;
      } else if (el.name === activeRadioGroup) {
        return;
      }
      if (el.checked) {
        prunedElements = prunedElements.filter((e2) => !isElementType(e2, "input", {
          type: "radio",
          name: el.name
        }));
        prunedElements.push(el);
        checkedRadio[el.name] = el;
        return;
      }
      if (typeof checkedRadio[el.name] !== "undefined") {
        return;
      }
    }
    prunedElements.push(el);
  });
  for (let index2 = prunedElements.findIndex((el) => el === activeElement); ; ) {
    index2 += shift ? -1 : 1;
    if (index2 === prunedElements.length) {
      index2 = 0;
    } else if (index2 === -1) {
      index2 = prunedElements.length - 1;
    }
    if (prunedElements[index2] === activeElement || prunedElements[index2] === document2.body || isVisible(prunedElements[index2])) {
      return prunedElements[index2];
    }
  }
}
function moveSelection(node, direction) {
  if (hasOwnSelection(node)) {
    const selection = getUISelection(node);
    setSelection({
      focusNode: node,
      focusOffset: selection.startOffset === selection.endOffset ? selection.focusOffset + direction : direction < 0 ? selection.startOffset : selection.endOffset
    });
  } else {
    const selection1 = node.ownerDocument.getSelection();
    if (!(selection1 === null || selection1 === void 0 ? void 0 : selection1.focusNode)) {
      return;
    }
    if (selection1.isCollapsed) {
      const nextPosition = getNextCursorPosition(selection1.focusNode, selection1.focusOffset, direction);
      if (nextPosition) {
        setSelection({
          focusNode: nextPosition.node,
          focusOffset: nextPosition.offset
        });
      }
    } else {
      selection1[direction < 0 ? "collapseToStart" : "collapseToEnd"]();
    }
  }
}
function selectAll(target) {
  if (hasOwnSelection(target)) {
    return setSelection({
      focusNode: target,
      anchorOffset: 0,
      focusOffset: getUIValue(target).length
    });
  }
  var ref2;
  const focusNode = (ref2 = getContentEditable(target)) !== null && ref2 !== void 0 ? ref2 : target.ownerDocument.body;
  setSelection({
    focusNode,
    anchorOffset: 0,
    focusOffset: focusNode.childNodes.length
  });
}
function isAllSelected(target) {
  if (hasOwnSelection(target)) {
    return getUISelection(target).startOffset === 0 && getUISelection(target).endOffset === getUIValue(target).length;
  }
  var ref2;
  const focusNode = (ref2 = getContentEditable(target)) !== null && ref2 !== void 0 ? ref2 : target.ownerDocument.body;
  const selection = target.ownerDocument.getSelection();
  return (selection === null || selection === void 0 ? void 0 : selection.anchorNode) === focusNode && selection.focusNode === focusNode && selection.anchorOffset === 0 && selection.focusOffset === focusNode.childNodes.length;
}
function setSelectionRange(element, anchorOffset, focusOffset) {
  var ref2;
  if (hasOwnSelection(element)) {
    return setSelection({
      focusNode: element,
      anchorOffset,
      focusOffset
    });
  }
  if (isContentEditable(element) && ((ref2 = element.firstChild) === null || ref2 === void 0 ? void 0 : ref2.nodeType) === 3) {
    return setSelection({
      focusNode: element.firstChild,
      anchorOffset,
      focusOffset
    });
  }
  throw new Error("Not implemented. The result of this interaction is unreliable.");
}
function walkRadio(instance, el, direction) {
  const window2 = getWindow(el);
  const group = Array.from(el.ownerDocument.querySelectorAll(el.name ? `input[type="radio"][name="${window2.CSS.escape(el.name)}"]` : `input[type="radio"][name=""], input[type="radio"]:not([name])`));
  for (let i2 = group.findIndex((e2) => e2 === el) + direction; ; i2 += direction) {
    if (!group[i2]) {
      i2 = direction > 0 ? 0 : group.length - 1;
    }
    if (group[i2] === el) {
      return;
    }
    if (isDisabled(group[i2])) {
      continue;
    }
    focusElement(group[i2]);
    instance.dispatchUIEvent(group[i2], "click");
  }
}
behavior.keydown = (event, target, instance) => {
  var ref2;
  var ref1;
  return (ref1 = (ref2 = keydownBehavior[event.key]) === null || ref2 === void 0 ? void 0 : ref2.call(keydownBehavior, event, target, instance)) !== null && ref1 !== void 0 ? ref1 : combinationBehavior(event, target, instance);
};
const keydownBehavior = {
  ArrowDown: (event, target, instance) => {
    if (isElementType(target, "input", {
      type: "radio"
    })) {
      return () => walkRadio(instance, target, -1);
    }
  },
  ArrowLeft: (event, target, instance) => {
    if (isElementType(target, "input", {
      type: "radio"
    })) {
      return () => walkRadio(instance, target, -1);
    }
    return () => moveSelection(target, -1);
  },
  ArrowRight: (event, target, instance) => {
    if (isElementType(target, "input", {
      type: "radio"
    })) {
      return () => walkRadio(instance, target, 1);
    }
    return () => moveSelection(target, 1);
  },
  ArrowUp: (event, target, instance) => {
    if (isElementType(target, "input", {
      type: "radio"
    })) {
      return () => walkRadio(instance, target, 1);
    }
  },
  Backspace: (event, target, instance) => {
    if (isEditable(target)) {
      return () => {
        input(instance, target, "", "deleteContentBackward");
      };
    }
  },
  Delete: (event, target, instance) => {
    if (isEditable(target)) {
      return () => {
        input(instance, target, "", "deleteContentForward");
      };
    }
  },
  End: (event, target) => {
    if (isElementType(target, [
      "input",
      "textarea"
    ]) || isContentEditable(target)) {
      return () => {
        var ref2;
        var ref1;
        const newPos = (ref1 = (ref2 = getValueOrTextContent(target)) === null || ref2 === void 0 ? void 0 : ref2.length) !== null && ref1 !== void 0 ? ref1 : (
          /* istanbul ignore next */
          0
        );
        setSelectionRange(target, newPos, newPos);
      };
    }
  },
  Home: (event, target) => {
    if (isElementType(target, [
      "input",
      "textarea"
    ]) || isContentEditable(target)) {
      return () => {
        setSelectionRange(target, 0, 0);
      };
    }
  },
  PageDown: (event, target) => {
    if (isElementType(target, [
      "input"
    ])) {
      return () => {
        const newPos = getUIValue(target).length;
        setSelectionRange(target, newPos, newPos);
      };
    }
  },
  PageUp: (event, target) => {
    if (isElementType(target, [
      "input"
    ])) {
      return () => {
        setSelectionRange(target, 0, 0);
      };
    }
  },
  Tab: (event, target, instance) => {
    return () => {
      const dest = getTabDestination(target, instance.system.keyboard.modifiers.Shift);
      focusElement(dest);
      if (hasOwnSelection(dest)) {
        setUISelection(dest, {
          anchorOffset: 0,
          focusOffset: dest.value.length
        });
      }
    };
  }
};
const combinationBehavior = (event, target, instance) => {
  if (event.code === "KeyA" && instance.system.keyboard.modifiers.Control) {
    return () => selectAll(target);
  }
};
behavior.keypress = (event, target, instance) => {
  if (event.key === "Enter") {
    if (isElementType(target, "button") || isElementType(target, "input") && ClickInputOnEnter.includes(target.type) || isElementType(target, "a") && Boolean(target.href)) {
      return () => {
        instance.dispatchUIEvent(target, "click");
      };
    } else if (isElementType(target, "input")) {
      const form = target.form;
      const submit = form === null || form === void 0 ? void 0 : form.querySelector('input[type="submit"], button:not([type]), button[type="submit"]');
      if (submit) {
        return () => instance.dispatchUIEvent(submit, "click");
      } else if (form && SubmitSingleInputOnEnter.includes(target.type) && form.querySelectorAll("input").length === 1) {
        return () => instance.dispatchUIEvent(form, "submit");
      } else {
        return;
      }
    }
  }
  if (isEditable(target)) {
    const inputType = event.key === "Enter" ? isContentEditable(target) && !instance.system.keyboard.modifiers.Shift ? "insertParagraph" : "insertLineBreak" : "insertText";
    const inputData = event.key === "Enter" ? "\n" : event.key;
    return () => input(instance, target, inputData, inputType);
  }
};
const ClickInputOnEnter = [
  "button",
  "color",
  "file",
  "image",
  "reset",
  "submit"
];
const SubmitSingleInputOnEnter = [
  "email",
  "month",
  "password",
  "search",
  "tel",
  "text",
  "url",
  "week"
];
behavior.keyup = (event, target, instance) => {
  var ref2;
  return (ref2 = keyupBehavior[event.key]) === null || ref2 === void 0 ? void 0 : ref2.call(keyupBehavior, event, target, instance);
};
const keyupBehavior = {
  " ": (event, target, instance) => {
    if (isClickableInput(target)) {
      return () => instance.dispatchUIEvent(target, "click");
    }
  }
};
behavior.paste = (event, target, instance) => {
  if (isEditable(target)) {
    return () => {
      var ref2;
      const insertData = (ref2 = event.clipboardData) === null || ref2 === void 0 ? void 0 : ref2.getData("text");
      if (insertData) {
        input(instance, target, insertData, "insertFromPaste");
      }
    };
  }
};
var eventMap$1 = {};
var hasRequiredEventMap;
function requireEventMap() {
  if (hasRequiredEventMap) return eventMap$1;
  hasRequiredEventMap = 1;
  Object.defineProperty(eventMap$1, "__esModule", {
    value: true
  });
  eventMap$1.eventMap = eventMap$1.eventAliasMap = void 0;
  eventMap$1.eventMap = {
    // Clipboard Events
    copy: {
      EventType: "ClipboardEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    cut: {
      EventType: "ClipboardEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    paste: {
      EventType: "ClipboardEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    // Composition Events
    compositionEnd: {
      EventType: "CompositionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    compositionStart: {
      EventType: "CompositionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    compositionUpdate: {
      EventType: "CompositionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    // Keyboard Events
    keyDown: {
      EventType: "KeyboardEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        charCode: 0,
        composed: true
      }
    },
    keyPress: {
      EventType: "KeyboardEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        charCode: 0,
        composed: true
      }
    },
    keyUp: {
      EventType: "KeyboardEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        charCode: 0,
        composed: true
      }
    },
    // Focus Events
    focus: {
      EventType: "FocusEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false,
        composed: true
      }
    },
    blur: {
      EventType: "FocusEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false,
        composed: true
      }
    },
    focusIn: {
      EventType: "FocusEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    focusOut: {
      EventType: "FocusEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    // Form Events
    change: {
      EventType: "Event",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    input: {
      EventType: "InputEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    invalid: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: true
      }
    },
    submit: {
      EventType: "Event",
      defaultInit: {
        bubbles: true,
        cancelable: true
      }
    },
    reset: {
      EventType: "Event",
      defaultInit: {
        bubbles: true,
        cancelable: true
      }
    },
    // Mouse Events
    click: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        button: 0,
        composed: true
      }
    },
    contextMenu: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    dblClick: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    drag: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    dragEnd: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    dragEnter: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    dragExit: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    dragLeave: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    dragOver: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    dragStart: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    drop: {
      EventType: "DragEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    mouseDown: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    mouseEnter: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false,
        composed: true
      }
    },
    mouseLeave: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false,
        composed: true
      }
    },
    mouseMove: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    mouseOut: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    mouseOver: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    mouseUp: {
      EventType: "MouseEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    // Selection Events
    select: {
      EventType: "Event",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    // Touch Events
    touchCancel: {
      EventType: "TouchEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    touchEnd: {
      EventType: "TouchEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    touchMove: {
      EventType: "TouchEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    touchStart: {
      EventType: "TouchEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    // UI Events
    resize: {
      EventType: "UIEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    scroll: {
      EventType: "UIEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    // Wheel Events
    wheel: {
      EventType: "WheelEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    // Media Events
    abort: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    canPlay: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    canPlayThrough: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    durationChange: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    emptied: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    encrypted: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    ended: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    loadedData: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    loadedMetadata: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    loadStart: {
      EventType: "ProgressEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    pause: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    play: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    playing: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    progress: {
      EventType: "ProgressEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    rateChange: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    seeked: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    seeking: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    stalled: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    suspend: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    timeUpdate: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    volumeChange: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    waiting: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    // Events
    load: {
      // TODO: load events can be UIEvent or Event depending on what generated them
      // This is where this abstraction breaks down.
      // But the common targets are <img />, <script /> and window.
      // Neither of these targets receive a UIEvent
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    error: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    // Animation Events
    animationStart: {
      EventType: "AnimationEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    animationEnd: {
      EventType: "AnimationEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    animationIteration: {
      EventType: "AnimationEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    // Transition Events
    transitionCancel: {
      EventType: "TransitionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    transitionEnd: {
      EventType: "TransitionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true
      }
    },
    transitionRun: {
      EventType: "TransitionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    transitionStart: {
      EventType: "TransitionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    // pointer events
    pointerOver: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    pointerEnter: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    pointerDown: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    pointerMove: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    pointerUp: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    pointerCancel: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    pointerOut: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true,
        composed: true
      }
    },
    pointerLeave: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    gotPointerCapture: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    lostPointerCapture: {
      EventType: "PointerEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false,
        composed: true
      }
    },
    // history events
    popState: {
      EventType: "PopStateEvent",
      defaultInit: {
        bubbles: true,
        cancelable: false
      }
    },
    // window events
    offline: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    online: {
      EventType: "Event",
      defaultInit: {
        bubbles: false,
        cancelable: false
      }
    },
    pageHide: {
      EventType: "PageTransitionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true
      }
    },
    pageShow: {
      EventType: "PageTransitionEvent",
      defaultInit: {
        bubbles: true,
        cancelable: true
      }
    }
  };
  eventMap$1.eventAliasMap = {
    doubleClick: "dblClick"
  };
  return eventMap$1;
}
var eventMapExports = requireEventMap();
const eventMap = {
  ...eventMapExports.eventMap,
  click: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  auxclick: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  contextmenu: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  beforeInput: {
    EventType: "InputEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  }
};
const eventMapKeys = Object.fromEntries(Object.keys(eventMap).map((k) => [
  k.toLowerCase(),
  k
]));
function getEventClass(type2) {
  const k = eventMapKeys[type2];
  return k && eventMap[k].EventType;
}
const mouseEvents = [
  "MouseEvent",
  "PointerEvent"
];
function isMouseEvent(type2) {
  return mouseEvents.includes(getEventClass(type2));
}
function isKeyboardEvent(type2) {
  return getEventClass(type2) === "KeyboardEvent";
}
const eventInitializer = {
  ClipboardEvent: [
    initClipboardEvent
  ],
  InputEvent: [
    initUIEvent,
    initInputEvent
  ],
  MouseEvent: [
    initUIEvent,
    initUIEventModififiers,
    initMouseEvent
  ],
  PointerEvent: [
    initUIEvent,
    initUIEventModififiers,
    initMouseEvent,
    initPointerEvent
  ],
  KeyboardEvent: [
    initUIEvent,
    initUIEventModififiers,
    initKeyboardEvent
  ]
};
function createEvent$1(type2, target, init) {
  var ref2;
  const window2 = getWindow(target);
  const { EventType, defaultInit } = eventMap[eventMapKeys[type2]];
  const event = new (getEventConstructors(window2))[EventType](type2, defaultInit);
  (ref2 = eventInitializer[EventType]) === null || ref2 === void 0 ? void 0 : ref2.forEach((f) => f(event, init !== null && init !== void 0 ? init : {}));
  return event;
}
function getEventConstructors(window2) {
  var _Event;
  const Event = (_Event = window2.Event) !== null && _Event !== void 0 ? _Event : class Event {
  };
  var _AnimationEvent;
  const AnimationEvent = (_AnimationEvent = window2.AnimationEvent) !== null && _AnimationEvent !== void 0 ? _AnimationEvent : class AnimationEvent extends Event {
  };
  var _ClipboardEvent;
  const ClipboardEvent = (_ClipboardEvent = window2.ClipboardEvent) !== null && _ClipboardEvent !== void 0 ? _ClipboardEvent : class ClipboardEvent extends Event {
  };
  var _PopStateEvent;
  const PopStateEvent = (_PopStateEvent = window2.PopStateEvent) !== null && _PopStateEvent !== void 0 ? _PopStateEvent : class PopStateEvent extends Event {
  };
  var _ProgressEvent;
  const ProgressEvent = (_ProgressEvent = window2.ProgressEvent) !== null && _ProgressEvent !== void 0 ? _ProgressEvent : class ProgressEvent extends Event {
  };
  var _TransitionEvent;
  const TransitionEvent = (_TransitionEvent = window2.TransitionEvent) !== null && _TransitionEvent !== void 0 ? _TransitionEvent : class TransitionEvent extends Event {
  };
  var _UIEvent;
  const UIEvent = (_UIEvent = window2.UIEvent) !== null && _UIEvent !== void 0 ? _UIEvent : class UIEvent extends Event {
  };
  var _CompositionEvent;
  const CompositionEvent = (_CompositionEvent = window2.CompositionEvent) !== null && _CompositionEvent !== void 0 ? _CompositionEvent : class CompositionEvent extends UIEvent {
  };
  var _FocusEvent;
  const FocusEvent = (_FocusEvent = window2.FocusEvent) !== null && _FocusEvent !== void 0 ? _FocusEvent : class FocusEvent extends UIEvent {
  };
  var _InputEvent;
  const InputEvent = (_InputEvent = window2.InputEvent) !== null && _InputEvent !== void 0 ? _InputEvent : class InputEvent extends UIEvent {
  };
  var _KeyboardEvent;
  const KeyboardEvent = (_KeyboardEvent = window2.KeyboardEvent) !== null && _KeyboardEvent !== void 0 ? _KeyboardEvent : class KeyboardEvent extends UIEvent {
  };
  var _MouseEvent;
  const MouseEvent = (_MouseEvent = window2.MouseEvent) !== null && _MouseEvent !== void 0 ? _MouseEvent : class MouseEvent extends UIEvent {
  };
  var _DragEvent;
  const DragEvent = (_DragEvent = window2.DragEvent) !== null && _DragEvent !== void 0 ? _DragEvent : class DragEvent extends MouseEvent {
  };
  var _PointerEvent;
  const PointerEvent = (_PointerEvent = window2.PointerEvent) !== null && _PointerEvent !== void 0 ? _PointerEvent : class PointerEvent extends MouseEvent {
  };
  var _TouchEvent;
  const TouchEvent = (_TouchEvent = window2.TouchEvent) !== null && _TouchEvent !== void 0 ? _TouchEvent : class TouchEvent extends UIEvent {
  };
  return {
    Event,
    AnimationEvent,
    ClipboardEvent,
    PopStateEvent,
    ProgressEvent,
    TransitionEvent,
    UIEvent,
    CompositionEvent,
    FocusEvent,
    InputEvent,
    KeyboardEvent,
    MouseEvent,
    DragEvent,
    PointerEvent,
    TouchEvent
  };
}
function assignProps(obj, props) {
  for (const [key, value] of Object.entries(props)) {
    Object.defineProperty(obj, key, {
      get: () => value !== null && value !== void 0 ? value : null
    });
  }
}
function sanitizeNumber(n2) {
  return Number(n2 !== null && n2 !== void 0 ? n2 : 0);
}
function initClipboardEvent(event, { clipboardData }) {
  assignProps(event, {
    clipboardData
  });
}
function initInputEvent(event, { data, inputType, isComposing }) {
  assignProps(event, {
    data,
    isComposing: Boolean(isComposing),
    inputType: String(inputType)
  });
}
function initUIEvent(event, { view, detail }) {
  assignProps(event, {
    view,
    detail: sanitizeNumber(detail !== null && detail !== void 0 ? detail : 0)
  });
}
function initUIEventModififiers(event, { altKey, ctrlKey, metaKey, shiftKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierNumLock, modifierScrollLock, modifierSymbol, modifierSymbolLock }) {
  assignProps(event, {
    altKey: Boolean(altKey),
    ctrlKey: Boolean(ctrlKey),
    metaKey: Boolean(metaKey),
    shiftKey: Boolean(shiftKey),
    getModifierState(k) {
      return Boolean({
        Alt: altKey,
        AltGraph: modifierAltGraph,
        CapsLock: modifierCapsLock,
        Control: ctrlKey,
        Fn: modifierFn,
        FnLock: modifierFnLock,
        Meta: metaKey,
        NumLock: modifierNumLock,
        ScrollLock: modifierScrollLock,
        Shift: shiftKey,
        Symbol: modifierSymbol,
        SymbolLock: modifierSymbolLock
      }[k]);
    }
  });
}
function initKeyboardEvent(event, { key, code, location, repeat, isComposing, charCode }) {
  assignProps(event, {
    key: String(key),
    code: String(code),
    location: sanitizeNumber(location),
    repeat: Boolean(repeat),
    isComposing: Boolean(isComposing),
    charCode
  });
}
function initMouseEvent(event, { x, y, screenX, screenY, clientX = x, clientY = y, button, buttons, relatedTarget }) {
  assignProps(event, {
    screenX: sanitizeNumber(screenX),
    screenY: sanitizeNumber(screenY),
    clientX: sanitizeNumber(clientX),
    x: sanitizeNumber(clientX),
    clientY: sanitizeNumber(clientY),
    y: sanitizeNumber(clientY),
    button: sanitizeNumber(button),
    buttons: sanitizeNumber(buttons),
    relatedTarget
  });
}
function initPointerEvent(event, { pointerId, width, height, pressure, tangentialPressure, tiltX, tiltY, twist, pointerType, isPrimary }) {
  assignProps(event, {
    pointerId: sanitizeNumber(pointerId),
    width: sanitizeNumber(width),
    height: sanitizeNumber(height),
    pressure: sanitizeNumber(pressure),
    tangentialPressure: sanitizeNumber(tangentialPressure),
    tiltX: sanitizeNumber(tiltX),
    tiltY: sanitizeNumber(tiltY),
    twist: sanitizeNumber(twist),
    pointerType: String(pointerType),
    isPrimary: Boolean(isPrimary)
  });
}
function dispatchUIEvent(target, type2, init, preventDefault = false) {
  if (isMouseEvent(type2) || isKeyboardEvent(type2)) {
    init = {
      ...init,
      ...this.system.getUIEventModifiers()
    };
  }
  const event = createEvent$1(type2, target, init);
  return dispatchEvent.call(this, target, event, preventDefault);
}
function dispatchEvent(target, event, preventDefault = false) {
  var ref2;
  const type2 = event.type;
  const behaviorImplementation = preventDefault ? () => {
  } : (ref2 = behavior[type2]) === null || ref2 === void 0 ? void 0 : ref2(event, target, this);
  if (behaviorImplementation) {
    event.preventDefault();
    let defaultPrevented = false;
    Object.defineProperty(event, "defaultPrevented", {
      get: () => defaultPrevented
    });
    Object.defineProperty(event, "preventDefault", {
      value: () => {
        defaultPrevented = event.cancelable;
      }
    });
    wrapEvent(() => target.dispatchEvent(event));
    if (!defaultPrevented) {
      behaviorImplementation();
    }
    return !defaultPrevented;
  }
  return wrapEvent(() => target.dispatchEvent(event));
}
function dispatchDOMEvent(target, type2, init) {
  const event = createEvent$1(type2, target, init);
  wrapEvent(() => target.dispatchEvent(event));
}
const Interceptor = Symbol("Interceptor for programmatical calls");
function prepareInterceptor(element, propName, interceptorImpl) {
  const prototypeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName);
  const objectDescriptor = Object.getOwnPropertyDescriptor(element, propName);
  const target = (prototypeDescriptor === null || prototypeDescriptor === void 0 ? void 0 : prototypeDescriptor.set) ? "set" : "value";
  if (typeof (prototypeDescriptor === null || prototypeDescriptor === void 0 ? void 0 : prototypeDescriptor[target]) !== "function" || prototypeDescriptor[target][Interceptor]) {
    throw new Error(`Element ${element.tagName} does not implement "${String(propName)}".`);
  }
  function intercept(...args) {
    const { applyNative = false, realArgs, then } = interceptorImpl.call(this, ...args);
    const realFunc = (!applyNative && objectDescriptor || prototypeDescriptor)[target];
    if (target === "set") {
      realFunc.call(this, realArgs);
    } else {
      realFunc.call(this, ...realArgs);
    }
    then === null || then === void 0 ? void 0 : then();
  }
  intercept[Interceptor] = Interceptor;
  Object.defineProperty(element, propName, {
    ...objectDescriptor !== null && objectDescriptor !== void 0 ? objectDescriptor : prototypeDescriptor,
    [target]: intercept
  });
}
function prepareValueInterceptor(element) {
  prepareInterceptor(element, "value", function interceptorImpl(v) {
    const isUI = isUIValue(v);
    if (isUI) {
      startTrackValue(this);
    }
    return {
      applyNative: !!isUI,
      realArgs: sanitizeValue(this, v),
      then: isUI ? void 0 : () => trackOrSetValue(this, String(v))
    };
  });
}
function sanitizeValue(element, v) {
  if (isElementType(element, "input", {
    type: "number"
  }) && String(v) !== "" && !Number.isNaN(Number(v))) {
    return String(Number(v));
  }
  return String(v);
}
function prepareSelectionInterceptor(element) {
  prepareInterceptor(element, "setSelectionRange", function interceptorImpl(start, ...others) {
    const isUI = isUISelectionStart(start);
    return {
      applyNative: !!isUI,
      realArgs: [
        Number(start),
        ...others
      ],
      then: () => isUI ? void 0 : setUISelectionClean(element)
    };
  });
  prepareInterceptor(element, "selectionStart", function interceptorImpl(v) {
    return {
      realArgs: v,
      then: () => setUISelectionClean(element)
    };
  });
  prepareInterceptor(element, "selectionEnd", function interceptorImpl(v) {
    return {
      realArgs: v,
      then: () => setUISelectionClean(element)
    };
  });
  prepareInterceptor(element, "select", function interceptorImpl() {
    return {
      realArgs: [],
      then: () => setUISelectionRaw(element, {
        anchorOffset: 0,
        focusOffset: getUIValue(element).length
      })
    };
  });
}
function prepareRangeTextInterceptor(element) {
  prepareInterceptor(element, "setRangeText", function interceptorImpl(...realArgs) {
    return {
      realArgs,
      then: () => {
        setUIValueClean(element);
        setUISelectionClean(element);
      }
    };
  });
}
const isPrepared = Symbol("Node prepared with document state workarounds");
function prepareDocument(document2) {
  if (document2[isPrepared]) {
    return;
  }
  document2.addEventListener("focus", (e2) => {
    const el = e2.target;
    prepareElement(el);
  }, {
    capture: true,
    passive: true
  });
  if (document2.activeElement) {
    prepareElement(document2.activeElement);
  }
  document2.addEventListener("blur", (e2) => {
    const el = e2.target;
    const initialValue2 = getInitialValue(el);
    if (initialValue2 !== void 0) {
      if (el.value !== initialValue2) {
        dispatchDOMEvent(el, "change");
      }
      clearInitialValue(el);
    }
  }, {
    capture: true,
    passive: true
  });
  document2[isPrepared] = isPrepared;
}
function prepareElement(el) {
  if (el[isPrepared]) {
    return;
  }
  if (isElementType(el, [
    "input",
    "textarea"
  ])) {
    prepareValueInterceptor(el);
    prepareSelectionInterceptor(el);
    prepareRangeTextInterceptor(el);
  }
  el[isPrepared] = isPrepared;
}
function getDocumentFromNode(el) {
  return isDocument(el) ? el : el.ownerDocument;
}
function isDocument(node) {
  return node.nodeType === 9;
}
function wait(config2) {
  const delay = config2.delay;
  if (typeof delay !== "number") {
    return;
  }
  return Promise.all([
    new Promise((resolve) => globalThis.setTimeout(() => resolve(), delay)),
    config2.advanceTimers(delay)
  ]);
}
var _pressed, _code, _code1;
var DOM_KEY_LOCATION;
(function(DOM_KEY_LOCATION2) {
  DOM_KEY_LOCATION2[DOM_KEY_LOCATION2["STANDARD"] = 0] = "STANDARD";
  DOM_KEY_LOCATION2[DOM_KEY_LOCATION2["LEFT"] = 1] = "LEFT";
  DOM_KEY_LOCATION2[DOM_KEY_LOCATION2["RIGHT"] = 2] = "RIGHT";
  DOM_KEY_LOCATION2[DOM_KEY_LOCATION2["NUMPAD"] = 3] = "NUMPAD";
})(DOM_KEY_LOCATION || (DOM_KEY_LOCATION = {}));
const modifierKeys = [
  "Alt",
  "AltGraph",
  "Control",
  "Fn",
  "Meta",
  "Shift",
  "Symbol"
];
function isModifierKey(key) {
  return modifierKeys.includes(key);
}
const modifierLocks = [
  "CapsLock",
  "FnLock",
  "NumLock",
  "ScrollLock",
  "SymbolLock"
];
function isModifierLock(key) {
  return modifierLocks.includes(key);
}
class KeyboardHost {
  isKeyPressed(keyDef) {
    return !!this.pressed[String(keyDef.code)];
  }
  getPressedKeys() {
    return Object.values(this.pressed).map((p) => p.keyDef);
  }
  /** Press a key */
  async keydown(instance, keyDef) {
    const key = String(keyDef.key);
    const code = String(keyDef.code);
    const target = getActiveElementOrBody(instance.config.document);
    this.setKeydownTarget(target);
    var ref2;
    (ref2 = (_pressed = this.pressed)[_code = code]) !== null && ref2 !== void 0 ? ref2 : _pressed[_code] = {
      keyDef,
      unpreventedDefault: false
    };
    if (isModifierKey(key)) {
      this.modifiers[key] = true;
    }
    const unprevented = instance.dispatchUIEvent(target, "keydown", {
      key,
      code
    });
    if (isModifierLock(key) && !this.modifiers[key]) {
      this.modifiers[key] = true;
      this.modifierLockStart[key] = true;
    }
    (_code1 = this.pressed[code]).unpreventedDefault || (_code1.unpreventedDefault = unprevented);
    if (unprevented && this.hasKeyPress(key)) {
      instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document), "keypress", {
        key,
        code,
        charCode: keyDef.key === "Enter" ? 13 : String(keyDef.key).charCodeAt(0)
      });
    }
  }
  /** Release a key */
  async keyup(instance, keyDef) {
    const key = String(keyDef.key);
    const code = String(keyDef.code);
    const unprevented = this.pressed[code].unpreventedDefault;
    delete this.pressed[code];
    if (isModifierKey(key) && !Object.values(this.pressed).find((p) => p.keyDef.key === key)) {
      this.modifiers[key] = false;
    }
    instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document), "keyup", {
      key,
      code
    }, !unprevented);
    if (isModifierLock(key) && this.modifiers[key]) {
      if (this.modifierLockStart[key]) {
        this.modifierLockStart[key] = false;
      } else {
        this.modifiers[key] = false;
      }
    }
  }
  setKeydownTarget(target) {
    if (target !== this.lastKeydownTarget) {
      this.carryChar = "";
    }
    this.lastKeydownTarget = target;
  }
  hasKeyPress(key) {
    return (key.length === 1 || key === "Enter") && !this.modifiers.Control && !this.modifiers.Alt;
  }
  constructor(system) {
    this.modifiers = {
      Alt: false,
      AltGraph: false,
      CapsLock: false,
      Control: false,
      Fn: false,
      FnLock: false,
      Meta: false,
      NumLock: false,
      ScrollLock: false,
      Shift: false,
      Symbol: false,
      SymbolLock: false
    };
    this.pressed = {};
    this.carryChar = "";
    this.lastKeydownTarget = void 0;
    this.modifierLockStart = {};
    this.system = system;
  }
}
const defaultKeyMap$1 = [
  // alphanumeric keys
  ..."0123456789".split("").map((c2) => ({
    code: `Digit${c2}`,
    key: c2
  })),
  ...")!@#$%^&*(".split("").map((c2, i2) => ({
    code: `Digit${i2}`,
    key: c2,
    shiftKey: true
  })),
  ..."abcdefghijklmnopqrstuvwxyz".split("").map((c2) => ({
    code: `Key${c2.toUpperCase()}`,
    key: c2
  })),
  ..."ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").map((c2) => ({
    code: `Key${c2}`,
    key: c2,
    shiftKey: true
  })),
  // alphanumeric block - functional
  {
    code: "Space",
    key: " "
  },
  {
    code: "AltLeft",
    key: "Alt",
    location: DOM_KEY_LOCATION.LEFT
  },
  {
    code: "AltRight",
    key: "Alt",
    location: DOM_KEY_LOCATION.RIGHT
  },
  {
    code: "ShiftLeft",
    key: "Shift",
    location: DOM_KEY_LOCATION.LEFT
  },
  {
    code: "ShiftRight",
    key: "Shift",
    location: DOM_KEY_LOCATION.RIGHT
  },
  {
    code: "ControlLeft",
    key: "Control",
    location: DOM_KEY_LOCATION.LEFT
  },
  {
    code: "ControlRight",
    key: "Control",
    location: DOM_KEY_LOCATION.RIGHT
  },
  {
    code: "MetaLeft",
    key: "Meta",
    location: DOM_KEY_LOCATION.LEFT
  },
  {
    code: "MetaRight",
    key: "Meta",
    location: DOM_KEY_LOCATION.RIGHT
  },
  {
    code: "OSLeft",
    key: "OS",
    location: DOM_KEY_LOCATION.LEFT
  },
  {
    code: "OSRight",
    key: "OS",
    location: DOM_KEY_LOCATION.RIGHT
  },
  {
    code: "Tab",
    key: "Tab"
  },
  {
    code: "CapsLock",
    key: "CapsLock"
  },
  {
    code: "Backspace",
    key: "Backspace"
  },
  {
    code: "Enter",
    key: "Enter"
  },
  // function
  {
    code: "Escape",
    key: "Escape"
  },
  // arrows
  {
    code: "ArrowUp",
    key: "ArrowUp"
  },
  {
    code: "ArrowDown",
    key: "ArrowDown"
  },
  {
    code: "ArrowLeft",
    key: "ArrowLeft"
  },
  {
    code: "ArrowRight",
    key: "ArrowRight"
  },
  // control pad
  {
    code: "Home",
    key: "Home"
  },
  {
    code: "End",
    key: "End"
  },
  {
    code: "Delete",
    key: "Delete"
  },
  {
    code: "PageUp",
    key: "PageUp"
  },
  {
    code: "PageDown",
    key: "PageDown"
  },
  // Special keys that are not part of a default US-layout but included for specific behavior
  {
    code: "Fn",
    key: "Fn"
  },
  {
    code: "Symbol",
    key: "Symbol"
  },
  {
    code: "AltRight",
    key: "AltGraph"
  }
];
const defaultKeyMap = [
  {
    name: "MouseLeft",
    pointerType: "mouse",
    button: "primary"
  },
  {
    name: "MouseRight",
    pointerType: "mouse",
    button: "secondary"
  },
  {
    name: "MouseMiddle",
    pointerType: "mouse",
    button: "auxiliary"
  },
  {
    name: "TouchA",
    pointerType: "touch"
  },
  {
    name: "TouchB",
    pointerType: "touch"
  },
  {
    name: "TouchC",
    pointerType: "touch"
  }
];
class Buttons {
  getButtons() {
    let v = 0;
    for (const button of Object.keys(this.pressed)) {
      v |= 2 ** Number(button);
    }
    return v;
  }
  down(keyDef) {
    const button = getMouseButtonId(keyDef.button);
    if (button in this.pressed) {
      this.pressed[button].push(keyDef);
      return void 0;
    }
    this.pressed[button] = [
      keyDef
    ];
    return button;
  }
  up(keyDef) {
    const button = getMouseButtonId(keyDef.button);
    if (button in this.pressed) {
      this.pressed[button] = this.pressed[button].filter((k) => k.name !== keyDef.name);
      if (this.pressed[button].length === 0) {
        delete this.pressed[button];
        return button;
      }
    }
    return void 0;
  }
  constructor() {
    this.pressed = {};
  }
}
const MouseButton = {
  primary: 0,
  secondary: 1,
  auxiliary: 2,
  back: 3,
  X1: 3,
  forward: 4,
  X2: 4
};
function getMouseButtonId(button = 0) {
  if (button in MouseButton) {
    return MouseButton[button];
  }
  return Number(button);
}
const MouseButtonFlip = {
  1: 2,
  2: 1
};
function getMouseEventButton(button) {
  button = getMouseButtonId(button);
  if (button in MouseButtonFlip) {
    return MouseButtonFlip[button];
  }
  return button;
}
class Device {
  get countPressed() {
    return this.pressedKeys.size;
  }
  isPressed(keyDef) {
    return this.pressedKeys.has(keyDef.name);
  }
  addPressed(keyDef) {
    return this.pressedKeys.add(keyDef.name);
  }
  removePressed(keyDef) {
    return this.pressedKeys.delete(keyDef.name);
  }
  constructor() {
    this.pressedKeys = /* @__PURE__ */ new Set();
  }
}
function getTreeDiff(a, b) {
  const treeA = [];
  for (let el = a; el; el = el.parentElement) {
    treeA.push(el);
  }
  const treeB = [];
  for (let el1 = b; el1; el1 = el1.parentElement) {
    treeB.push(el1);
  }
  let i2 = 0;
  for (; ; i2++) {
    if (i2 >= treeA.length || i2 >= treeB.length || treeA[treeA.length - 1 - i2] !== treeB[treeB.length - 1 - i2]) {
      break;
    }
  }
  return [
    treeA.slice(0, treeA.length - i2),
    treeB.slice(0, treeB.length - i2),
    treeB.slice(treeB.length - i2)
  ];
}
function resolveCaretPosition({ target, node, offset }) {
  if (hasOwnSelection(target)) {
    return {
      node: target,
      offset: offset !== null && offset !== void 0 ? offset : getUIValue(target).length
    };
  } else if (node) {
    return {
      node,
      offset: offset !== null && offset !== void 0 ? offset : node.nodeType === 3 ? node.nodeValue.length : node.childNodes.length
    };
  }
  return findNodeAtTextOffset(target, offset);
}
function findNodeAtTextOffset(node, offset, isRoot = true) {
  let i2 = offset === void 0 ? node.childNodes.length - 1 : 0;
  const step = offset === void 0 ? -1 : 1;
  while (offset === void 0 ? i2 >= (isRoot ? Math.max(node.childNodes.length - 1, 0) : 0) : i2 <= node.childNodes.length) {
    if (offset && i2 === node.childNodes.length) {
      throw new Error("The given offset is out of bounds.");
    }
    const c2 = node.childNodes.item(i2);
    const text = String(c2.textContent);
    if (text.length) {
      if (offset !== void 0 && text.length < offset) {
        offset -= text.length;
      } else if (c2.nodeType === 1) {
        return findNodeAtTextOffset(c2, offset, false);
      } else {
        if (c2.nodeType === 3) {
          return {
            node: c2,
            offset: offset !== null && offset !== void 0 ? offset : c2.nodeValue.length
          };
        }
      }
    }
    i2 += step;
  }
  return {
    node,
    offset: node.childNodes.length
  };
}
function setSelectionPerMouseDown({ document: document2, target, clickCount, node, offset }) {
  if (hasNoSelection(target)) {
    return;
  }
  const targetHasOwnSelection = hasOwnSelection(target);
  const text = String(targetHasOwnSelection ? getUIValue(target) : target.textContent);
  const [start, end] = node ? (
    // which elements might be considered in the same line of text.
    // TODO: support expanding initial range on multiple clicks if node is given
    [
      offset,
      offset
    ]
  ) : getTextRange(text, offset, clickCount);
  if (targetHasOwnSelection) {
    setUISelection(target, {
      anchorOffset: start !== null && start !== void 0 ? start : text.length,
      focusOffset: end !== null && end !== void 0 ? end : text.length
    });
    return {
      node: target,
      start: start !== null && start !== void 0 ? start : 0,
      end: end !== null && end !== void 0 ? end : text.length
    };
  } else {
    const { node: startNode, offset: startOffset } = resolveCaretPosition({
      target,
      node,
      offset: start
    });
    const { node: endNode, offset: endOffset } = resolveCaretPosition({
      target,
      node,
      offset: end
    });
    const range2 = target.ownerDocument.createRange();
    try {
      range2.setStart(startNode, startOffset);
      range2.setEnd(endNode, endOffset);
    } catch (e2) {
      throw new Error("The given offset is out of bounds.");
    }
    const selection = document2.getSelection();
    selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
    selection === null || selection === void 0 ? void 0 : selection.addRange(range2.cloneRange());
    return range2;
  }
}
function getTextRange(text, pos, clickCount) {
  if (clickCount % 3 === 1 || text.length === 0) {
    return [
      pos,
      pos
    ];
  }
  const textPos = pos !== null && pos !== void 0 ? pos : text.length;
  if (clickCount % 3 === 2) {
    return [
      textPos - text.substr(0, pos).match(/(\w+|\s+|\W)?$/)[0].length,
      pos === void 0 ? pos : pos + text.substr(pos).match(/^(\w+|\s+|\W)?/)[0].length
    ];
  }
  return [
    textPos - text.substr(0, pos).match(/[^\r\n]*$/)[0].length,
    pos === void 0 ? pos : pos + text.substr(pos).match(/^[^\r\n]*/)[0].length
  ];
}
function modifySelectionPerMouseMove(selectionRange, { document: document2, target, node, offset }) {
  const selectionFocus = resolveCaretPosition({
    target,
    node,
    offset
  });
  if ("node" in selectionRange) {
    if (selectionFocus.node === selectionRange.node) {
      const anchorOffset = selectionFocus.offset < selectionRange.start ? selectionRange.end : selectionRange.start;
      const focusOffset = selectionFocus.offset > selectionRange.end || selectionFocus.offset < selectionRange.start ? selectionFocus.offset : selectionRange.end;
      setUISelection(selectionRange.node, {
        anchorOffset,
        focusOffset
      });
    }
  } else {
    const range2 = selectionRange.cloneRange();
    const cmp = range2.comparePoint(selectionFocus.node, selectionFocus.offset);
    if (cmp < 0) {
      range2.setStart(selectionFocus.node, selectionFocus.offset);
    } else if (cmp > 0) {
      range2.setEnd(selectionFocus.node, selectionFocus.offset);
    }
    const selection = document2.getSelection();
    selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
    selection === null || selection === void 0 ? void 0 : selection.addRange(range2.cloneRange());
  }
}
function isDifferentPointerPosition(positionA, positionB) {
  var ref2, ref1, ref22, ref3, ref4, ref5, ref6, ref7;
  return positionA.target !== positionB.target || ((ref2 = positionA.coords) === null || ref2 === void 0 ? void 0 : ref2.x) !== ((ref1 = positionB.coords) === null || ref1 === void 0 ? void 0 : ref1.y) || ((ref22 = positionA.coords) === null || ref22 === void 0 ? void 0 : ref22.y) !== ((ref3 = positionB.coords) === null || ref3 === void 0 ? void 0 : ref3.y) || ((ref4 = positionA.caret) === null || ref4 === void 0 ? void 0 : ref4.node) !== ((ref5 = positionB.caret) === null || ref5 === void 0 ? void 0 : ref5.node) || ((ref6 = positionA.caret) === null || ref6 === void 0 ? void 0 : ref6.offset) !== ((ref7 = positionB.caret) === null || ref7 === void 0 ? void 0 : ref7.offset);
}
class Mouse {
  move(instance, position) {
    const prevPosition = this.position;
    const prevTarget = this.getTarget(instance);
    this.position = position;
    if (!isDifferentPointerPosition(prevPosition, position)) {
      return;
    }
    const nextTarget = this.getTarget(instance);
    const init = this.getEventInit("mousemove");
    const [leave, enter] = getTreeDiff(prevTarget, nextTarget);
    return {
      leave: () => {
        if (prevTarget !== nextTarget) {
          instance.dispatchUIEvent(prevTarget, "mouseout", init);
          leave.forEach((el) => instance.dispatchUIEvent(el, "mouseleave", init));
        }
      },
      enter: () => {
        if (prevTarget !== nextTarget) {
          instance.dispatchUIEvent(nextTarget, "mouseover", init);
          enter.forEach((el) => instance.dispatchUIEvent(el, "mouseenter", init));
        }
      },
      move: () => {
        instance.dispatchUIEvent(nextTarget, "mousemove", init);
        this.modifySelecting(instance);
      }
    };
  }
  down(instance, keyDef, pointer2) {
    const button = this.buttons.down(keyDef);
    if (button === void 0) {
      return;
    }
    const target = this.getTarget(instance);
    this.buttonDownTarget[button] = target;
    const disabled = isDisabled(target);
    const init = this.getEventInit("mousedown", keyDef.button);
    if (disabled || instance.dispatchUIEvent(target, "mousedown", init)) {
      this.startSelecting(instance, init.detail);
      focusElement(target);
    }
    if (!disabled && getMouseEventButton(keyDef.button) === 2) {
      instance.dispatchUIEvent(target, "contextmenu", this.getEventInit("contextmenu", keyDef.button, pointer2));
    }
  }
  up(instance, keyDef, pointer2) {
    const button = this.buttons.up(keyDef);
    if (button === void 0) {
      return;
    }
    const target = this.getTarget(instance);
    if (!isDisabled(target)) {
      instance.dispatchUIEvent(target, "mouseup", this.getEventInit("mouseup", keyDef.button));
      this.endSelecting();
      const clickTarget = getTreeDiff(this.buttonDownTarget[button], target)[2][0];
      if (clickTarget) {
        const init = this.getEventInit("click", keyDef.button, pointer2);
        if (init.detail) {
          instance.dispatchUIEvent(clickTarget, init.button === 0 ? "click" : "auxclick", init);
          if (init.button === 0 && init.detail === 2) {
            instance.dispatchUIEvent(clickTarget, "dblclick", {
              ...this.getEventInit("dblclick", keyDef.button),
              detail: init.detail
            });
          }
        }
      }
    }
  }
  resetClickCount() {
    this.clickCount.reset();
  }
  getEventInit(type2, button, pointer2) {
    const init = {
      ...this.position.coords
    };
    if (pointer2) {
      init.pointerId = pointer2.pointerId;
      init.pointerType = pointer2.pointerType;
      init.isPrimary = pointer2.isPrimary;
    }
    init.button = getMouseEventButton(button);
    init.buttons = this.buttons.getButtons();
    if (type2 === "mousedown") {
      init.detail = this.clickCount.getOnDown(init.button);
    } else if (type2 === "mouseup") {
      init.detail = this.clickCount.getOnUp(init.button);
    } else if (type2 === "click" || type2 === "auxclick") {
      init.detail = this.clickCount.incOnClick(init.button);
    }
    return init;
  }
  getTarget(instance) {
    var _target;
    return (_target = this.position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;
  }
  startSelecting(instance, clickCount) {
    var ref2, ref1;
    this.selecting = setSelectionPerMouseDown({
      document: instance.config.document,
      target: this.getTarget(instance),
      node: (ref2 = this.position.caret) === null || ref2 === void 0 ? void 0 : ref2.node,
      offset: (ref1 = this.position.caret) === null || ref1 === void 0 ? void 0 : ref1.offset,
      clickCount
    });
  }
  modifySelecting(instance) {
    var ref2, ref1;
    if (!this.selecting) {
      return;
    }
    modifySelectionPerMouseMove(this.selecting, {
      document: instance.config.document,
      target: this.getTarget(instance),
      node: (ref2 = this.position.caret) === null || ref2 === void 0 ? void 0 : ref2.node,
      offset: (ref1 = this.position.caret) === null || ref1 === void 0 ? void 0 : ref1.offset
    });
  }
  endSelecting() {
    this.selecting = void 0;
  }
  constructor() {
    this.position = {};
    this.buttons = new Buttons();
    this.buttonDownTarget = {};
    this.clickCount = new class {
      incOnClick(button) {
        const current = this.down[button] === void 0 ? void 0 : Number(this.down[button]) + 1;
        this.count = this.count[button] === void 0 ? {} : {
          [button]: Number(this.count[button]) + 1
        };
        return current;
      }
      getOnDown(button) {
        var _button;
        this.down = {
          [button]: (_button = this.count[button]) !== null && _button !== void 0 ? _button : 0
        };
        var _button1;
        this.count = {
          [button]: (_button1 = this.count[button]) !== null && _button1 !== void 0 ? _button1 : 0
        };
        return Number(this.count[button]) + 1;
      }
      getOnUp(button) {
        return this.down[button] === void 0 ? void 0 : Number(this.down[button]) + 1;
      }
      reset() {
        this.count = {};
      }
      constructor() {
        this.down = {};
        this.count = {};
      }
    }();
  }
}
function hasPointerEvents(instance, element) {
  var ref2;
  return ((ref2 = checkPointerEvents(instance, element)) === null || ref2 === void 0 ? void 0 : ref2.pointerEvents) !== "none";
}
function closestPointerEventsDeclaration(element) {
  const window2 = getWindow(element);
  for (let el = element, tree = []; el === null || el === void 0 ? void 0 : el.ownerDocument; el = el.parentElement) {
    tree.push(el);
    const pointerEvents = window2.getComputedStyle(el).pointerEvents;
    if (pointerEvents && ![
      "inherit",
      "unset"
    ].includes(pointerEvents)) {
      return {
        pointerEvents,
        tree
      };
    }
  }
  return void 0;
}
const PointerEventsCheck = Symbol("Last check for pointer-events");
function checkPointerEvents(instance, element) {
  const lastCheck = element[PointerEventsCheck];
  const needsCheck = instance.config.pointerEventsCheck !== PointerEventsCheckLevel.Never && (!lastCheck || hasBitFlag(instance.config.pointerEventsCheck, PointerEventsCheckLevel.EachApiCall) && lastCheck[ApiLevel.Call] !== getLevelRef(instance, ApiLevel.Call) || hasBitFlag(instance.config.pointerEventsCheck, PointerEventsCheckLevel.EachTrigger) && lastCheck[ApiLevel.Trigger] !== getLevelRef(instance, ApiLevel.Trigger));
  if (!needsCheck) {
    return lastCheck === null || lastCheck === void 0 ? void 0 : lastCheck.result;
  }
  const declaration = closestPointerEventsDeclaration(element);
  element[PointerEventsCheck] = {
    [ApiLevel.Call]: getLevelRef(instance, ApiLevel.Call),
    [ApiLevel.Trigger]: getLevelRef(instance, ApiLevel.Trigger),
    result: declaration
  };
  return declaration;
}
function assertPointerEvents(instance, element) {
  const declaration = checkPointerEvents(instance, element);
  if ((declaration === null || declaration === void 0 ? void 0 : declaration.pointerEvents) === "none") {
    throw new Error([
      `Unable to perform pointer interaction as the element ${declaration.tree.length > 1 ? "inherits" : "has"} \`pointer-events: none\`:`,
      "",
      printTree(declaration.tree)
    ].join("\n"));
  }
}
function printTree(tree) {
  return tree.reverse().map((el, i2) => [
    "".padEnd(i2),
    el.tagName,
    el.id && `#${el.id}`,
    el.hasAttribute("data-testid") && `(testId=${el.getAttribute("data-testid")})`,
    getLabelDescr(el),
    tree.length > 1 && i2 === 0 && "  <-- This element declared `pointer-events: none`",
    tree.length > 1 && i2 === tree.length - 1 && "  <-- Asserted pointer events here"
  ].filter(Boolean).join("")).join("\n");
}
function getLabelDescr(element) {
  var ref2;
  let label;
  if (element.hasAttribute("aria-label")) {
    label = element.getAttribute("aria-label");
  } else if (element.hasAttribute("aria-labelledby")) {
    var ref1, ref22;
    label = (ref1 = element.ownerDocument.getElementById(element.getAttribute("aria-labelledby"))) === null || ref1 === void 0 ? void 0 : (ref22 = ref1.textContent) === null || ref22 === void 0 ? void 0 : ref22.trim();
  } else if (isElementType(element, [
    "button",
    "input",
    "meter",
    "output",
    "progress",
    "select",
    "textarea"
  ]) && ((ref2 = element.labels) === null || ref2 === void 0 ? void 0 : ref2.length)) {
    label = Array.from(element.labels).map((el) => {
      var ref4;
      return (ref4 = el.textContent) === null || ref4 === void 0 ? void 0 : ref4.trim();
    }).join("|");
  } else if (isElementType(element, "button")) {
    var ref3;
    label = (ref3 = element.textContent) === null || ref3 === void 0 ? void 0 : ref3.trim();
  }
  label = label === null || label === void 0 ? void 0 : label.replace(/\n/g, "  ");
  if (Number(label === null || label === void 0 ? void 0 : label.length) > 30) {
    label = `${label === null || label === void 0 ? void 0 : label.substring(0, 29)}…`;
  }
  return label ? `(label=${label})` : "";
}
function hasBitFlag(conf, flag) {
  return (conf & flag) > 0;
}
class Pointer {
  init(instance, position) {
    this.position = position;
    const target = this.getTarget(instance);
    const [, enter] = getTreeDiff(null, target);
    const init = this.getEventInit();
    assertPointerEvents(instance, target);
    instance.dispatchUIEvent(target, "pointerover", init);
    enter.forEach((el) => instance.dispatchUIEvent(el, "pointerenter", init));
    return this;
  }
  move(instance, position) {
    const prevPosition = this.position;
    const prevTarget = this.getTarget(instance);
    this.position = position;
    if (!isDifferentPointerPosition(prevPosition, position)) {
      return;
    }
    const nextTarget = this.getTarget(instance);
    const init = this.getEventInit();
    const [leave, enter] = getTreeDiff(prevTarget, nextTarget);
    return {
      leave: () => {
        if (hasPointerEvents(instance, prevTarget)) {
          if (prevTarget !== nextTarget) {
            instance.dispatchUIEvent(prevTarget, "pointerout", init);
            leave.forEach((el) => instance.dispatchUIEvent(el, "pointerleave", init));
          }
        }
      },
      enter: () => {
        assertPointerEvents(instance, nextTarget);
        if (prevTarget !== nextTarget) {
          instance.dispatchUIEvent(nextTarget, "pointerover", init);
          enter.forEach((el) => instance.dispatchUIEvent(el, "pointerenter", init));
        }
      },
      move: () => {
        instance.dispatchUIEvent(nextTarget, "pointermove", init);
      }
    };
  }
  down(instance, _keyDef) {
    if (this.isDown) {
      return;
    }
    const target = this.getTarget(instance);
    assertPointerEvents(instance, target);
    this.isDown = true;
    this.isPrevented = !instance.dispatchUIEvent(target, "pointerdown", this.getEventInit());
  }
  up(instance, _keyDef) {
    if (!this.isDown) {
      return;
    }
    const target = this.getTarget(instance);
    assertPointerEvents(instance, target);
    this.isDown = false;
    instance.dispatchUIEvent(target, "pointerup", this.getEventInit());
  }
  release(instance) {
    const target = this.getTarget(instance);
    const [leave] = getTreeDiff(target, null);
    const init = this.getEventInit();
    if (hasPointerEvents(instance, target)) {
      instance.dispatchUIEvent(target, "pointerout", init);
      leave.forEach((el) => instance.dispatchUIEvent(el, "pointerleave", init));
    }
    this.isCancelled = true;
  }
  getTarget(instance) {
    var _target;
    return (_target = this.position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;
  }
  getEventInit() {
    return {
      ...this.position.coords,
      pointerId: this.pointerId,
      pointerType: this.pointerType,
      isPrimary: this.isPrimary
    };
  }
  constructor({ pointerId, pointerType, isPrimary }) {
    this.isMultitouch = false;
    this.isCancelled = false;
    this.isDown = false;
    this.isPrevented = false;
    this.position = {};
    this.pointerId = pointerId;
    this.pointerType = pointerType;
    this.isPrimary = isPrimary;
    this.isMultitouch = !isPrimary;
  }
}
var _registry, _k;
class PointerHost {
  isKeyPressed(keyDef) {
    return this.devices.get(keyDef.pointerType).isPressed(keyDef);
  }
  async press(instance, keyDef, position) {
    const pointerName = this.getPointerName(keyDef);
    const pointer2 = keyDef.pointerType === "touch" ? this.pointers.new(pointerName, keyDef).init(instance, position) : this.pointers.get(pointerName);
    pointer2.position = position;
    if (pointer2.pointerType !== "touch") {
      this.mouse.position = position;
    }
    this.devices.get(keyDef.pointerType).addPressed(keyDef);
    this.buttons.down(keyDef);
    pointer2.down(instance, keyDef);
    if (pointer2.pointerType !== "touch" && !pointer2.isPrevented) {
      this.mouse.down(instance, keyDef, pointer2);
    }
  }
  async move(instance, pointerName, position) {
    const pointer2 = this.pointers.get(pointerName);
    const pointermove = pointer2.move(instance, position);
    const mousemove = pointer2.pointerType === "touch" || pointer2.isPrevented && pointer2.isDown ? void 0 : this.mouse.move(instance, position);
    pointermove === null || pointermove === void 0 ? void 0 : pointermove.leave();
    mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();
    pointermove === null || pointermove === void 0 ? void 0 : pointermove.enter();
    mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();
    pointermove === null || pointermove === void 0 ? void 0 : pointermove.move();
    mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();
  }
  async release(instance, keyDef, position) {
    const device = this.devices.get(keyDef.pointerType);
    device.removePressed(keyDef);
    this.buttons.up(keyDef);
    const pointer2 = this.pointers.get(this.getPointerName(keyDef));
    pointer2.position = position;
    if (pointer2.pointerType !== "touch") {
      this.mouse.position = position;
    }
    if (device.countPressed === 0) {
      pointer2.up(instance, keyDef);
    }
    if (pointer2.pointerType === "touch") {
      pointer2.release(instance);
    }
    if (!pointer2.isPrevented) {
      if (pointer2.pointerType === "touch" && !pointer2.isMultitouch) {
        const mousemove = this.mouse.move(instance, pointer2.position);
        mousemove === null || mousemove === void 0 ? void 0 : mousemove.leave();
        mousemove === null || mousemove === void 0 ? void 0 : mousemove.enter();
        mousemove === null || mousemove === void 0 ? void 0 : mousemove.move();
        this.mouse.down(instance, keyDef, pointer2);
      }
      if (!pointer2.isMultitouch) {
        const mousemove1 = this.mouse.move(instance, pointer2.position);
        mousemove1 === null || mousemove1 === void 0 ? void 0 : mousemove1.leave();
        mousemove1 === null || mousemove1 === void 0 ? void 0 : mousemove1.enter();
        mousemove1 === null || mousemove1 === void 0 ? void 0 : mousemove1.move();
        this.mouse.up(instance, keyDef, pointer2);
      }
    }
  }
  getPointerName(keyDef) {
    return keyDef.pointerType === "touch" ? keyDef.name : keyDef.pointerType;
  }
  getPreviousPosition(pointerName) {
    return this.pointers.has(pointerName) ? this.pointers.get(pointerName).position : void 0;
  }
  resetClickCount() {
    this.mouse.resetClickCount();
  }
  getMouseTarget(instance) {
    var _target;
    return (_target = this.mouse.position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;
  }
  setMousePosition(position) {
    this.mouse.position = position;
    this.pointers.get("mouse").position = position;
  }
  constructor(system) {
    this.devices = new class {
      get(k) {
        var ref2;
        (ref2 = (_registry = this.registry)[_k = k]) !== null && ref2 !== void 0 ? ref2 : _registry[_k] = new Device();
        return this.registry[k];
      }
      constructor() {
        this.registry = {};
      }
    }();
    this.pointers = new class {
      new(pointerName, keyDef) {
        const isPrimary = keyDef.pointerType !== "touch" || !Object.values(this.registry).some((p) => p.pointerType === "touch" && !p.isCancelled);
        if (!isPrimary) {
          Object.values(this.registry).forEach((p) => {
            if (p.pointerType === keyDef.pointerType && !p.isCancelled) {
              p.isMultitouch = true;
            }
          });
        }
        this.registry[pointerName] = new Pointer({
          pointerId: this.nextId++,
          pointerType: keyDef.pointerType,
          isPrimary
        });
        return this.registry[pointerName];
      }
      get(pointerName) {
        if (!this.has(pointerName)) {
          throw new Error(`Trying to access pointer "${pointerName}" which does not exist.`);
        }
        return this.registry[pointerName];
      }
      has(pointerName) {
        return pointerName in this.registry;
      }
      constructor() {
        this.registry = {
          mouse: new Pointer({
            pointerId: 1,
            pointerType: "mouse",
            isPrimary: true
          })
        };
        this.nextId = 2;
      }
    }();
    this.system = system;
    this.buttons = new Buttons();
    this.mouse = new Mouse();
  }
}
class System {
  getUIEventModifiers() {
    return {
      altKey: this.keyboard.modifiers.Alt,
      ctrlKey: this.keyboard.modifiers.Control,
      metaKey: this.keyboard.modifiers.Meta,
      shiftKey: this.keyboard.modifiers.Shift,
      modifierAltGraph: this.keyboard.modifiers.AltGraph,
      modifierCapsLock: this.keyboard.modifiers.CapsLock,
      modifierFn: this.keyboard.modifiers.Fn,
      modifierFnLock: this.keyboard.modifiers.FnLock,
      modifierNumLock: this.keyboard.modifiers.NumLock,
      modifierScrollLock: this.keyboard.modifiers.ScrollLock,
      modifierSymbol: this.keyboard.modifiers.Symbol,
      modifierSymbolLock: this.keyboard.modifiers.SymbolLock
    };
  }
  constructor() {
    this.keyboard = new KeyboardHost(this);
    this.pointer = new PointerHost(this);
  }
}
async function click$1(element) {
  const pointerIn = [];
  if (!this.config.skipHover) {
    pointerIn.push({
      target: element
    });
  }
  pointerIn.push({
    keys: "[MouseLeft]",
    target: element
  });
  return this.pointer(pointerIn);
}
async function dblClick$1(element) {
  return this.pointer([
    {
      target: element
    },
    "[MouseLeft][MouseLeft]"
  ]);
}
async function tripleClick$1(element) {
  return this.pointer([
    {
      target: element
    },
    "[MouseLeft][MouseLeft][MouseLeft]"
  ]);
}
async function hover$1(element) {
  return this.pointer({
    target: element
  });
}
async function unhover$1(element) {
  assertPointerEvents(this, this.system.pointer.getMouseTarget(this));
  return this.pointer({
    target: element.ownerDocument.body
  });
}
async function tab$1({ shift } = {}) {
  return this.keyboard(shift === true ? "{Shift>}{Tab}{/Shift}" : shift === false ? "[/ShiftLeft][/ShiftRight]{Tab}" : "{Tab}");
}
function parseKeyDef$1(keyboardMap, text) {
  const defs = [];
  do {
    const { type: type2, descriptor, consumedLength, releasePrevious, releaseSelf = true, repeat } = readNextDescriptor(text, "keyboard");
    var ref2;
    const keyDef = (ref2 = keyboardMap.find((def) => {
      if (type2 === "[") {
        var ref3;
        return ((ref3 = def.code) === null || ref3 === void 0 ? void 0 : ref3.toLowerCase()) === descriptor.toLowerCase();
      } else if (type2 === "{") {
        var ref1;
        return ((ref1 = def.key) === null || ref1 === void 0 ? void 0 : ref1.toLowerCase()) === descriptor.toLowerCase();
      }
      return def.key === descriptor;
    })) !== null && ref2 !== void 0 ? ref2 : {
      key: "Unknown",
      code: "Unknown",
      [type2 === "[" ? "code" : "key"]: descriptor
    };
    defs.push({
      keyDef,
      releasePrevious,
      releaseSelf,
      repeat
    });
    text = text.slice(consumedLength);
  } while (text);
  return defs;
}
async function keyboard$1(text) {
  const actions = parseKeyDef$1(this.config.keyboardMap, text);
  for (let i2 = 0; i2 < actions.length; i2++) {
    await wait(this.config);
    await keyboardAction(this, actions[i2]);
  }
}
async function keyboardAction(instance, { keyDef, releasePrevious, releaseSelf, repeat }) {
  const { system } = instance;
  if (system.keyboard.isKeyPressed(keyDef)) {
    await system.keyboard.keyup(instance, keyDef);
  }
  if (!releasePrevious) {
    for (let i2 = 1; i2 <= repeat; i2++) {
      await system.keyboard.keydown(instance, keyDef);
      if (i2 < repeat) {
        await wait(instance.config);
      }
    }
    if (releaseSelf) {
      await system.keyboard.keyup(instance, keyDef);
    }
  }
}
async function releaseAllKeys(instance) {
  for (const k of instance.system.keyboard.getPressedKeys()) {
    await instance.system.keyboard.keyup(instance, k);
  }
}
function copySelection(target) {
  const data = hasOwnSelection(target) ? {
    "text/plain": readSelectedValueFromInput(target)
  } : {
    "text/plain": String(target.ownerDocument.getSelection())
  };
  const dt = createDataTransfer(getWindow(target));
  for (const type2 in data) {
    if (data[type2]) {
      dt.setData(type2, data[type2]);
    }
  }
  return dt;
}
function readSelectedValueFromInput(target) {
  const sel = getUISelection(target);
  const val = getUIValue(target);
  return val.substring(sel.startOffset, sel.endOffset);
}
async function copy$1() {
  const doc = this.config.document;
  var _activeElement;
  const target = (_activeElement = doc.activeElement) !== null && _activeElement !== void 0 ? _activeElement : (
    /* istanbul ignore next */
    doc.body
  );
  const clipboardData = copySelection(target);
  if (clipboardData.items.length === 0) {
    return;
  }
  if (this.dispatchUIEvent(target, "copy", {
    clipboardData
  }) && this.config.writeToClipboard) {
    await writeDataTransferToClipboard(doc, clipboardData);
  }
  return clipboardData;
}
async function cut$1() {
  const doc = this.config.document;
  var _activeElement;
  const target = (_activeElement = doc.activeElement) !== null && _activeElement !== void 0 ? _activeElement : (
    /* istanbul ignore next */
    doc.body
  );
  const clipboardData = copySelection(target);
  if (clipboardData.items.length === 0) {
    return;
  }
  if (this.dispatchUIEvent(target, "cut", {
    clipboardData
  }) && this.config.writeToClipboard) {
    await writeDataTransferToClipboard(target.ownerDocument, clipboardData);
  }
  return clipboardData;
}
async function paste$1(clipboardData) {
  const doc = this.config.document;
  var _activeElement;
  const target = (_activeElement = doc.activeElement) !== null && _activeElement !== void 0 ? _activeElement : (
    /* istanbul ignore next */
    doc.body
  );
  var ref2;
  const dataTransfer = (ref2 = typeof clipboardData === "string" ? getClipboardDataFromString(doc, clipboardData) : clipboardData) !== null && ref2 !== void 0 ? ref2 : await readDataTransferFromClipboard(doc).catch(() => {
    throw new Error("`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.");
  });
  this.dispatchUIEvent(target, "paste", {
    clipboardData: dataTransfer
  });
}
function getClipboardDataFromString(doc, text) {
  const dt = createDataTransfer(getWindow(doc));
  dt.setData("text", text);
  return dt;
}
function parseKeyDef(pointerMap, keys) {
  const defs = [];
  do {
    const { descriptor, consumedLength, releasePrevious, releaseSelf = true } = readNextDescriptor(keys, "pointer");
    const keyDef = pointerMap.find((p) => p.name === descriptor);
    if (keyDef) {
      defs.push({
        keyDef,
        releasePrevious,
        releaseSelf
      });
    }
    keys = keys.slice(consumedLength);
  } while (keys);
  return defs;
}
async function pointer$1(input2) {
  const { pointerMap } = this.config;
  const actions = [];
  (Array.isArray(input2) ? input2 : [
    input2
  ]).forEach((actionInput) => {
    if (typeof actionInput === "string") {
      actions.push(...parseKeyDef(pointerMap, actionInput));
    } else if ("keys" in actionInput) {
      actions.push(...parseKeyDef(pointerMap, actionInput.keys).map((i2) => ({
        ...actionInput,
        ...i2
      })));
    } else {
      actions.push(actionInput);
    }
  });
  for (let i2 = 0; i2 < actions.length; i2++) {
    await wait(this.config);
    await pointerAction(this, actions[i2]);
  }
  this.system.pointer.resetClickCount();
}
async function pointerAction(instance, action) {
  var ref2, ref1;
  const pointerName = "pointerName" in action && action.pointerName ? action.pointerName : "keyDef" in action ? instance.system.pointer.getPointerName(action.keyDef) : "mouse";
  const previousPosition = instance.system.pointer.getPreviousPosition(pointerName);
  var _target, _coords, _node, _offset;
  const position = {
    target: (_target = action.target) !== null && _target !== void 0 ? _target : getPrevTarget(instance, previousPosition),
    coords: (_coords = action.coords) !== null && _coords !== void 0 ? _coords : previousPosition === null || previousPosition === void 0 ? void 0 : previousPosition.coords,
    caret: {
      node: (_node = action.node) !== null && _node !== void 0 ? _node : hasCaretPosition(action) ? void 0 : previousPosition === null || previousPosition === void 0 ? void 0 : (ref2 = previousPosition.caret) === null || ref2 === void 0 ? void 0 : ref2.node,
      offset: (_offset = action.offset) !== null && _offset !== void 0 ? _offset : hasCaretPosition(action) ? void 0 : previousPosition === null || previousPosition === void 0 ? void 0 : (ref1 = previousPosition.caret) === null || ref1 === void 0 ? void 0 : ref1.offset
    }
  };
  if ("keyDef" in action) {
    if (instance.system.pointer.isKeyPressed(action.keyDef)) {
      setLevelRef(instance, ApiLevel.Trigger);
      await instance.system.pointer.release(instance, action.keyDef, position);
    }
    if (!action.releasePrevious) {
      setLevelRef(instance, ApiLevel.Trigger);
      await instance.system.pointer.press(instance, action.keyDef, position);
      if (action.releaseSelf) {
        setLevelRef(instance, ApiLevel.Trigger);
        await instance.system.pointer.release(instance, action.keyDef, position);
      }
    }
  } else {
    setLevelRef(instance, ApiLevel.Trigger);
    await instance.system.pointer.move(instance, pointerName, position);
  }
}
function hasCaretPosition(action) {
  var _target, ref2;
  return !!((ref2 = (_target = action.target) !== null && _target !== void 0 ? _target : action.node) !== null && ref2 !== void 0 ? ref2 : action.offset !== void 0);
}
function getPrevTarget(instance, position) {
  if (!position) {
    throw new Error("This pointer has no previous position. Provide a target property!");
  }
  var _target;
  return (_target = position.target) !== null && _target !== void 0 ? _target : instance.config.document.body;
}
async function clear$1(element) {
  if (!isEditable(element) || isDisabled(element)) {
    throw new Error("clear()` is only supported on editable elements.");
  }
  focusElement(element);
  if (element.ownerDocument.activeElement !== element) {
    throw new Error("The element to be cleared could not be focused.");
  }
  selectAll(element);
  if (!isAllSelected(element)) {
    throw new Error("The element content to be cleared could not be selected.");
  }
  input(this, element, "", "deleteContentBackward");
}
async function selectOptions$1(select, values) {
  return selectOptionsBase.call(this, true, select, values);
}
async function deselectOptions$1(select, values) {
  return selectOptionsBase.call(this, false, select, values);
}
async function selectOptionsBase(newValue, select, values) {
  if (!newValue && !select.multiple) {
    throw getConfig$1().getElementError(`Unable to deselect an option in a non-multiple select. Use selectOptions to change the selection instead.`, select);
  }
  const valArray = Array.isArray(values) ? values : [
    values
  ];
  const allOptions = Array.from(select.querySelectorAll('option, [role="option"]'));
  const selectedOptions = valArray.map((val) => {
    if (typeof val !== "string" && allOptions.includes(val)) {
      return val;
    } else {
      const matchingOption = allOptions.find((o2) => o2.value === val || o2.innerHTML === val);
      if (matchingOption) {
        return matchingOption;
      } else {
        throw getConfig$1().getElementError(`Value "${String(val)}" not found in options`, select);
      }
    }
  }).filter((option) => !isDisabled(option));
  if (isDisabled(select) || !selectedOptions.length) return;
  const selectOption = (option) => {
    option.selected = newValue;
    this.dispatchUIEvent(select, "input", {
      bubbles: true,
      cancelable: false,
      composed: true
    });
    this.dispatchUIEvent(select, "change");
  };
  if (isElementType(select, "select")) {
    if (select.multiple) {
      for (const option of selectedOptions) {
        const withPointerEvents = this.config.pointerEventsCheck === 0 ? true : hasPointerEvents(this, option);
        if (withPointerEvents) {
          this.dispatchUIEvent(option, "pointerover");
          this.dispatchUIEvent(select, "pointerenter");
          this.dispatchUIEvent(option, "mouseover");
          this.dispatchUIEvent(select, "mouseenter");
          this.dispatchUIEvent(option, "pointermove");
          this.dispatchUIEvent(option, "mousemove");
          this.dispatchUIEvent(option, "pointerdown");
          this.dispatchUIEvent(option, "mousedown");
        }
        focusElement(select);
        if (withPointerEvents) {
          this.dispatchUIEvent(option, "pointerup");
          this.dispatchUIEvent(option, "mouseup");
        }
        selectOption(option);
        if (withPointerEvents) {
          this.dispatchUIEvent(option, "click");
        }
        await wait(this.config);
      }
    } else if (selectedOptions.length === 1) {
      const withPointerEvents1 = this.config.pointerEventsCheck === 0 ? true : hasPointerEvents(this, select);
      if (withPointerEvents1) {
        await this.click(select);
      } else {
        focusElement(select);
      }
      selectOption(selectedOptions[0]);
      if (withPointerEvents1) {
        this.dispatchUIEvent(select, "pointerover");
        this.dispatchUIEvent(select, "pointerenter");
        this.dispatchUIEvent(select, "mouseover");
        this.dispatchUIEvent(select, "mouseenter");
        this.dispatchUIEvent(select, "pointerup");
        this.dispatchUIEvent(select, "mouseup");
        this.dispatchUIEvent(select, "click");
      }
      await wait(this.config);
    } else {
      throw getConfig$1().getElementError(`Cannot select multiple options on a non-multiple select`, select);
    }
  } else if (select.getAttribute("role") === "listbox") {
    for (const option1 of selectedOptions) {
      await this.click(option1);
      await this.unhover(option1);
    }
  } else {
    throw getConfig$1().getElementError(`Cannot select options on elements that are neither select nor listbox elements`, select);
  }
}
async function type$1(element, text, { skipClick = this.config.skipClick, skipAutoClose = this.config.skipAutoClose, initialSelectionStart, initialSelectionEnd } = {}) {
  if (element.disabled) return;
  if (!skipClick) {
    await this.click(element);
  }
  if (initialSelectionStart !== void 0) {
    setSelectionRange(element, initialSelectionStart, initialSelectionEnd !== null && initialSelectionEnd !== void 0 ? initialSelectionEnd : initialSelectionStart);
  }
  await this.keyboard(text);
  if (!skipAutoClose) {
    await releaseAllKeys(this);
  }
}
const fakeFiles = Symbol("files and value properties are mocked");
function restoreProperty(obj, prop, descriptor) {
  if (descriptor) {
    Object.defineProperty(obj, prop, descriptor);
  } else {
    delete obj[prop];
  }
}
function setFiles(el, files) {
  var ref2;
  (ref2 = el[fakeFiles]) === null || ref2 === void 0 ? void 0 : ref2.restore();
  const typeDescr = Object.getOwnPropertyDescriptor(el, "type");
  const valueDescr = Object.getOwnPropertyDescriptor(el, "value");
  const filesDescr = Object.getOwnPropertyDescriptor(el, "files");
  function restore() {
    restoreProperty(el, "type", typeDescr);
    restoreProperty(el, "value", valueDescr);
    restoreProperty(el, "files", filesDescr);
  }
  el[fakeFiles] = {
    restore
  };
  Object.defineProperties(el, {
    files: {
      configurable: true,
      get: () => files
    },
    value: {
      configurable: true,
      get: () => files.length ? `C:\\fakepath\\${files[0].name}` : "",
      set(v) {
        if (v === "") {
          restore();
        } else {
          var ref3;
          valueDescr === null || valueDescr === void 0 ? void 0 : (ref3 = valueDescr.set) === null || ref3 === void 0 ? void 0 : ref3.call(el, v);
        }
      }
    },
    type: {
      configurable: true,
      get: () => "file",
      set(v) {
        if (v !== "file") {
          restore();
          el.type = v;
        }
      }
    }
  });
}
async function upload$1(element, fileOrFiles) {
  const input2 = isElementType(element, "label") ? element.control : element;
  if (!input2 || !isElementType(input2, "input", {
    type: "file"
  })) {
    throw new TypeError(`The ${input2 === element ? "given" : "associated"} ${input2 === null || input2 === void 0 ? void 0 : input2.tagName} element does not accept file uploads`);
  }
  if (isDisabled(element)) return;
  const files = (Array.isArray(fileOrFiles) ? fileOrFiles : [
    fileOrFiles
  ]).filter((file) => !this.config.applyAccept || isAcceptableFile(file, input2.accept)).slice(0, input2.multiple ? void 0 : 1);
  const fileDialog = () => {
    var ref2;
    if (files.length === ((ref2 = input2.files) === null || ref2 === void 0 ? void 0 : ref2.length) && files.every((f, i2) => {
      var ref3;
      return f === ((ref3 = input2.files) === null || ref3 === void 0 ? void 0 : ref3.item(i2));
    })) {
      return;
    }
    setFiles(input2, createFileList(getWindow(element), files));
    this.dispatchUIEvent(input2, "input");
    this.dispatchUIEvent(input2, "change");
  };
  input2.addEventListener("fileDialog", fileDialog);
  await this.click(element);
  input2.removeEventListener("fileDialog", fileDialog);
}
function isAcceptableFile(file, accept) {
  if (!accept) {
    return true;
  }
  const wildcards = [
    "audio/*",
    "image/*",
    "video/*"
  ];
  return accept.split(",").some((acceptToken) => {
    if (acceptToken.startsWith(".")) {
      return file.name.endsWith(acceptToken);
    } else if (wildcards.includes(acceptToken)) {
      return file.type.startsWith(acceptToken.substr(0, acceptToken.length - 1));
    }
    return file.type === acceptToken;
  });
}
const api = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  clear: clear$1,
  click: click$1,
  copy: copy$1,
  cut: cut$1,
  dblClick: dblClick$1,
  deselectOptions: deselectOptions$1,
  hover: hover$1,
  keyboard: keyboard$1,
  paste: paste$1,
  pointer: pointer$1,
  selectOptions: selectOptions$1,
  tab: tab$1,
  tripleClick: tripleClick$1,
  type: type$1,
  unhover: unhover$1,
  upload: upload$1
}, Symbol.toStringTag, { value: "Module" }));
function wrapAsync(implementation2) {
  return getConfig$1().asyncWrapper(implementation2);
}
const defaultOptionsDirect = {
  applyAccept: true,
  autoModify: true,
  delay: 0,
  document: globalThis.document,
  keyboardMap: defaultKeyMap$1,
  pointerMap: defaultKeyMap,
  pointerEventsCheck: PointerEventsCheckLevel.EachApiCall,
  skipAutoClose: false,
  skipClick: false,
  skipHover: false,
  writeToClipboard: false,
  advanceTimers: () => Promise.resolve()
};
const defaultOptionsSetup = {
  ...defaultOptionsDirect,
  writeToClipboard: true
};
function createConfig(options = {}, defaults = defaultOptionsSetup, node) {
  const document2 = getDocument(options, node, defaults);
  return {
    ...defaults,
    ...options,
    document: document2
  };
}
function setupMain(options = {}) {
  const config2 = createConfig(options);
  prepareDocument(config2.document);
  var _defaultView;
  const view = (_defaultView = config2.document.defaultView) !== null && _defaultView !== void 0 ? _defaultView : (
    /* istanbul ignore next */
    globalThis.window
  );
  attachClipboardStubToView(view);
  return createInstance(config2).api;
}
function setupDirect({ keyboardState, pointerState, ...options } = {}, node) {
  const config2 = createConfig(options, defaultOptionsDirect, node);
  prepareDocument(config2.document);
  var ref2;
  const system = (ref2 = pointerState !== null && pointerState !== void 0 ? pointerState : keyboardState) !== null && ref2 !== void 0 ? ref2 : new System();
  return {
    api: createInstance(config2, system).api,
    system
  };
}
function setupSub(options) {
  return createInstance({
    ...this.config,
    ...options
  }, this.system).api;
}
function wrapAndBindImpl(instance, impl) {
  function method(...args) {
    setLevelRef(instance, ApiLevel.Call);
    return wrapAsync(() => impl.apply(instance, args).then(async (ret) => {
      await wait(instance.config);
      return ret;
    }));
  }
  Object.defineProperty(method, "name", {
    get: () => impl.name
  });
  return method;
}
function createInstance(config2, system = new System()) {
  const instance = {};
  Object.assign(instance, {
    config: config2,
    dispatchEvent: dispatchEvent.bind(instance),
    dispatchUIEvent: dispatchUIEvent.bind(instance),
    system,
    levelRefs: {},
    ...api
  });
  return {
    instance,
    api: {
      ...Object.fromEntries(Object.entries(api).map(([name, api2]) => [
        name,
        wrapAndBindImpl(instance, api2)
      ])),
      setup: setupSub.bind(instance)
    }
  };
}
function getDocument(options, node, defaults) {
  var _document, ref2;
  return (ref2 = (_document = options.document) !== null && _document !== void 0 ? _document : node && getDocumentFromNode(node)) !== null && ref2 !== void 0 ? ref2 : defaults.document;
}
function clear(element) {
  return setupDirect().api.clear(element);
}
function click(element, options = {}) {
  return setupDirect(options, element).api.click(element);
}
function copy(options = {}) {
  return setupDirect(options).api.copy();
}
function cut(options = {}) {
  return setupDirect(options).api.cut();
}
function dblClick(element, options = {}) {
  return setupDirect(options).api.dblClick(element);
}
function deselectOptions(select, values, options = {}) {
  return setupDirect(options).api.deselectOptions(select, values);
}
function hover(element, options = {}) {
  return setupDirect(options).api.hover(element);
}
async function keyboard(text, options = {}) {
  const { api: api2, system } = setupDirect(options);
  return api2.keyboard(text).then(() => system);
}
async function pointer(input2, options = {}) {
  const { api: api2, system } = setupDirect(options);
  return api2.pointer(input2).then(() => system);
}
function paste(clipboardData, options) {
  return setupDirect(options).api.paste(clipboardData);
}
function selectOptions(select, values, options = {}) {
  return setupDirect(options).api.selectOptions(select, values);
}
function tripleClick(element, options = {}) {
  return setupDirect(options).api.tripleClick(element);
}
function type(element, text, options = {}) {
  return setupDirect(options, element).api.type(element, text, options);
}
function unhover(element, options = {}) {
  const { api: api2, system } = setupDirect(options);
  system.pointer.setMousePosition({
    target: element
  });
  return api2.unhover(element);
}
function upload(element, fileOrFiles, options = {}) {
  return setupDirect(options).api.upload(element, fileOrFiles);
}
function tab(options = {}) {
  return setupDirect().api.tab(options);
}
const directApi = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  clear,
  click,
  copy,
  cut,
  dblClick,
  deselectOptions,
  hover,
  keyboard,
  paste,
  pointer,
  selectOptions,
  tab,
  tripleClick,
  type,
  unhover,
  upload
}, Symbol.toStringTag, { value: "Module" }));
const userEvent$1 = {
  ...directApi,
  setup: setupMain
};
var scope$1 = (() => {
  let win;
  return typeof window < "u" ? win = window : typeof globalThis < "u" ? win = globalThis : typeof global < "u" ? win = global : typeof self < "u" ? win = self : win = {}, win;
})();
var { LOGLEVEL: LOGLEVEL$1 } = scope$1, levels$1 = { trace: 1, debug: 2, info: 3, warn: 4, error: 5, silent: 10 }, currentLogLevelString$1 = LOGLEVEL$1, currentLogLevelNumber$1 = levels$1[currentLogLevelString$1] || levels$1.info, logger$1 = { trace: (message, ...rest) => {
  currentLogLevelNumber$1 <= levels$1.trace && console.trace(message, ...rest);
}, debug: (message, ...rest) => {
  currentLogLevelNumber$1 <= levels$1.debug && console.debug(message, ...rest);
}, info: (message, ...rest) => {
  currentLogLevelNumber$1 <= levels$1.info && console.info(message, ...rest);
}, warn: (message, ...rest) => {
  currentLogLevelNumber$1 <= levels$1.warn && console.warn(message, ...rest);
}, error: (message, ...rest) => {
  currentLogLevelNumber$1 <= levels$1.error && console.error(message, ...rest);
}, log: (message, ...rest) => {
  currentLogLevelNumber$1 < levels$1.silent && console.log(message, ...rest);
} }, logged$1 = /* @__PURE__ */ new Set(), once$1 = (type2) => (message, ...rest) => {
  if (!logged$1.has(message))
    return logged$1.add(message), logger$1[type2](message, ...rest);
};
once$1.clear = () => logged$1.clear();
once$1.trace = once$1("trace");
once$1.debug = once$1("debug");
once$1.info = once$1("info");
once$1.warn = once$1("warn");
once$1.error = once$1("error");
once$1.log = once$1("log");
var isMulti$1 = (args) => args.transports !== void 0, generateRandomId$1 = () => Math.random().toString(16).slice(2), Channel$1 = class Channel {
  constructor(input2 = {}) {
    this.sender = generateRandomId$1(), this.events = {}, this.data = {}, this.transports = [], this.isAsync = input2.async || false, isMulti$1(input2) ? (this.transports = input2.transports || [], this.transports.forEach((t2) => {
      t2.setHandler((event) => this.handleEvent(event));
    })) : this.transports = input2.transport ? [input2.transport] : [], this.transports.forEach((t2) => {
      t2.setHandler((event) => this.handleEvent(event));
    });
  }
  get hasTransport() {
    return this.transports.length > 0;
  }
  addListener(eventName, listener) {
    this.events[eventName] = this.events[eventName] || [], this.events[eventName].push(listener);
  }
  emit(eventName, ...args) {
    let event = { type: eventName, args, from: this.sender }, options = {};
    args.length >= 1 && args[0] && args[0].options && (options = args[0].options);
    let handler = () => {
      this.transports.forEach((t2) => {
        t2.send(event, options);
      }), this.handleEvent(event);
    };
    this.isAsync ? setImmediate(handler) : handler();
  }
  last(eventName) {
    return this.data[eventName];
  }
  eventNames() {
    return Object.keys(this.events);
  }
  listenerCount(eventName) {
    let listeners = this.listeners(eventName);
    return listeners ? listeners.length : 0;
  }
  listeners(eventName) {
    return this.events[eventName] || void 0;
  }
  once(eventName, listener) {
    let onceListener = this.onceListener(eventName, listener);
    this.addListener(eventName, onceListener);
  }
  removeAllListeners(eventName) {
    eventName ? this.events[eventName] && delete this.events[eventName] : this.events = {};
  }
  removeListener(eventName, listener) {
    let listeners = this.listeners(eventName);
    listeners && (this.events[eventName] = listeners.filter((l) => l !== listener));
  }
  on(eventName, listener) {
    this.addListener(eventName, listener);
  }
  off(eventName, listener) {
    this.removeListener(eventName, listener);
  }
  handleEvent(event) {
    let listeners = this.listeners(event.type);
    listeners && listeners.length && listeners.forEach((fn) => {
      fn.apply(event, event.args);
    }), this.data[event.type] = event.args;
  }
  onceListener(eventName, listener) {
    let onceListener = (...args) => (this.removeListener(eventName, onceListener), listener(...args));
    return onceListener;
  }
};
var events$1 = ((events2) => (events2.CHANNEL_CREATED = "channelCreated", events2.CONFIG_ERROR = "configError", events2.STORY_INDEX_INVALIDATED = "storyIndexInvalidated", events2.STORY_SPECIFIED = "storySpecified", events2.SET_CONFIG = "setConfig", events2.SET_STORIES = "setStories", events2.SET_INDEX = "setIndex", events2.SET_CURRENT_STORY = "setCurrentStory", events2.CURRENT_STORY_WAS_SET = "currentStoryWasSet", events2.FORCE_RE_RENDER = "forceReRender", events2.FORCE_REMOUNT = "forceRemount", events2.PRELOAD_ENTRIES = "preloadStories", events2.STORY_PREPARED = "storyPrepared", events2.DOCS_PREPARED = "docsPrepared", events2.STORY_CHANGED = "storyChanged", events2.STORY_UNCHANGED = "storyUnchanged", events2.STORY_RENDERED = "storyRendered", events2.STORY_MISSING = "storyMissing", events2.STORY_ERRORED = "storyErrored", events2.STORY_THREW_EXCEPTION = "storyThrewException", events2.STORY_RENDER_PHASE_CHANGED = "storyRenderPhaseChanged", events2.PLAY_FUNCTION_THREW_EXCEPTION = "playFunctionThrewException", events2.UPDATE_STORY_ARGS = "updateStoryArgs", events2.STORY_ARGS_UPDATED = "storyArgsUpdated", events2.RESET_STORY_ARGS = "resetStoryArgs", events2.SET_GLOBALS = "setGlobals", events2.UPDATE_GLOBALS = "updateGlobals", events2.GLOBALS_UPDATED = "globalsUpdated", events2.REGISTER_SUBSCRIPTION = "registerSubscription", events2.PREVIEW_KEYDOWN = "previewKeydown", events2.PREVIEW_BUILDER_PROGRESS = "preview_builder_progress", events2.SELECT_STORY = "selectStory", events2.STORIES_COLLAPSE_ALL = "storiesCollapseAll", events2.STORIES_EXPAND_ALL = "storiesExpandAll", events2.DOCS_RENDERED = "docsRendered", events2.SHARED_STATE_CHANGED = "sharedStateChanged", events2.SHARED_STATE_SET = "sharedStateSet", events2.NAVIGATE_URL = "navigateUrl", events2.UPDATE_QUERY_PARAMS = "updateQueryParams", events2.REQUEST_WHATS_NEW_DATA = "requestWhatsNewData", events2.RESULT_WHATS_NEW_DATA = "resultWhatsNewData", events2.SET_WHATS_NEW_CACHE = "setWhatsNewCache", events2.TOGGLE_WHATS_NEW_NOTIFICATIONS = "toggleWhatsNewNotifications", events2.TELEMETRY_ERROR = "telemetryError", events2))(events$1 || {});
var { CHANNEL_CREATED: CHANNEL_CREATED$1, CONFIG_ERROR: CONFIG_ERROR$1, CURRENT_STORY_WAS_SET: CURRENT_STORY_WAS_SET$1, DOCS_PREPARED: DOCS_PREPARED$1, DOCS_RENDERED: DOCS_RENDERED$1, FORCE_RE_RENDER: FORCE_RE_RENDER$1, FORCE_REMOUNT: FORCE_REMOUNT$1, GLOBALS_UPDATED: GLOBALS_UPDATED$1, NAVIGATE_URL: NAVIGATE_URL$1, PLAY_FUNCTION_THREW_EXCEPTION: PLAY_FUNCTION_THREW_EXCEPTION$1, PRELOAD_ENTRIES: PRELOAD_ENTRIES$1, PREVIEW_BUILDER_PROGRESS: PREVIEW_BUILDER_PROGRESS$1, PREVIEW_KEYDOWN: PREVIEW_KEYDOWN$1, REGISTER_SUBSCRIPTION: REGISTER_SUBSCRIPTION$1, RESET_STORY_ARGS: RESET_STORY_ARGS$1, SELECT_STORY: SELECT_STORY$1, SET_CONFIG: SET_CONFIG$1, SET_CURRENT_STORY: SET_CURRENT_STORY$1, SET_GLOBALS: SET_GLOBALS$1, SET_INDEX: SET_INDEX$1, SET_STORIES: SET_STORIES$1, SHARED_STATE_CHANGED: SHARED_STATE_CHANGED$1, SHARED_STATE_SET: SHARED_STATE_SET$1, STORIES_COLLAPSE_ALL: STORIES_COLLAPSE_ALL$1, STORIES_EXPAND_ALL: STORIES_EXPAND_ALL$1, STORY_ARGS_UPDATED: STORY_ARGS_UPDATED$1, STORY_CHANGED: STORY_CHANGED$1, STORY_ERRORED: STORY_ERRORED$1, STORY_INDEX_INVALIDATED: STORY_INDEX_INVALIDATED$1, STORY_MISSING: STORY_MISSING$1, STORY_PREPARED: STORY_PREPARED$1, STORY_RENDER_PHASE_CHANGED: STORY_RENDER_PHASE_CHANGED$1, STORY_RENDERED: STORY_RENDERED$1, STORY_SPECIFIED: STORY_SPECIFIED$1, STORY_THREW_EXCEPTION: STORY_THREW_EXCEPTION$1, STORY_UNCHANGED: STORY_UNCHANGED$1, UPDATE_GLOBALS: UPDATE_GLOBALS$1, UPDATE_QUERY_PARAMS: UPDATE_QUERY_PARAMS$1, UPDATE_STORY_ARGS: UPDATE_STORY_ARGS$1, REQUEST_WHATS_NEW_DATA: REQUEST_WHATS_NEW_DATA$1, RESULT_WHATS_NEW_DATA: RESULT_WHATS_NEW_DATA$1, SET_WHATS_NEW_CACHE: SET_WHATS_NEW_CACHE$1, TOGGLE_WHATS_NEW_NOTIFICATIONS: TOGGLE_WHATS_NEW_NOTIFICATIONS$1, TELEMETRY_ERROR: TELEMETRY_ERROR$1 } = events$1, IGNORED_EXCEPTION$1 = new Error("ignoredException");
var { CONFIG_TYPE: CONFIG_TYPE$1 } = scope$1;
function mockChannel$1() {
  let transport = { setHandler: () => {
  }, send: () => {
  } };
  return new Channel$1({ transport });
}
var AddonStore$1 = class AddonStore {
  constructor() {
    this.getChannel = () => {
      if (!this.channel) {
        let channel = mockChannel$1();
        return this.setChannel(channel), channel;
      }
      return this.channel;
    }, this.getServerChannel = () => {
      if (!this.serverChannel)
        throw new Error("Accessing non-existent serverChannel");
      return this.serverChannel;
    }, this.ready = () => this.promise, this.hasChannel = () => !!this.channel, this.hasServerChannel = () => !!this.serverChannel, this.setChannel = (channel) => {
      this.channel = channel, this.resolve();
    }, this.setServerChannel = (channel) => {
      this.serverChannel = channel;
    }, this.promise = new Promise((res) => {
      this.resolve = () => res(this.getChannel());
    });
  }
}, KEY$1 = "__STORYBOOK_ADDONS_PREVIEW";
function getAddonsStore$1() {
  return scope$1[KEY$1] || (scope$1[KEY$1] = new AddonStore$1()), scope$1[KEY$1];
}
var addons$1 = getAddonsStore$1();
var CallStates$1 = ((CallStates2) => (CallStates2.DONE = "done", CallStates2.ERROR = "error", CallStates2.ACTIVE = "active", CallStates2.WAITING = "waiting", CallStates2))(CallStates$1 || {}), EVENTS$1 = { CALL: "storybook/instrumenter/call", SYNC: "storybook/instrumenter/sync", START: "storybook/instrumenter/start", BACK: "storybook/instrumenter/back", GOTO: "storybook/instrumenter/goto", NEXT: "storybook/instrumenter/next", END: "storybook/instrumenter/end" }, controlsDisabled$1 = { start: false, back: false, goto: false, next: false, end: false }, alreadyCompletedException$1 = new Error("This function ran after the play function completed. Did you forget to `await` it?"), isObject$1 = (o2) => Object.prototype.toString.call(o2) === "[object Object]", isModule$1 = (o2) => Object.prototype.toString.call(o2) === "[object Module]", isInstrumentable$1 = (o2) => {
  if (!isObject$1(o2) && !isModule$1(o2))
    return false;
  if (o2.constructor === void 0)
    return true;
  let proto = o2.constructor.prototype;
  return !(!isObject$1(proto) || Object.prototype.hasOwnProperty.call(proto, "isPrototypeOf") === false);
}, construct$1 = (obj) => {
  try {
    return new obj.constructor();
  } catch {
    return {};
  }
}, getInitialState$1 = () => ({ renderPhase: void 0, isDebugging: false, isPlaying: false, isLocked: false, cursor: 0, calls: [], shadowCalls: [], callRefsByResult: /* @__PURE__ */ new Map(), chainedCallIds: /* @__PURE__ */ new Set(), ancestors: [], playUntil: void 0, resolvers: {}, syncTimeout: void 0 }), getRetainedState$1 = (state, isDebugging = false) => {
  let calls = (isDebugging ? state.shadowCalls : state.calls).filter((call) => call.retain);
  if (!calls.length)
    return;
  let callRefsByResult = new Map(Array.from(state.callRefsByResult.entries()).filter(([, ref2]) => ref2.retain));
  return { cursor: calls.length, calls, callRefsByResult };
}, Instrumenter$1 = class Instrumenter {
  constructor() {
    this.initialized = false, this.channel = addons$1.getChannel(), this.state = scope$1.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ || {};
    let resetState = ({ storyId, isPlaying = true, isDebugging = false }) => {
      let state = this.getState(storyId);
      this.setState(storyId, { ...getInitialState$1(), ...getRetainedState$1(state, isDebugging), shadowCalls: isDebugging ? state.shadowCalls : [], chainedCallIds: isDebugging ? state.chainedCallIds : /* @__PURE__ */ new Set(), playUntil: isDebugging ? state.playUntil : void 0, isPlaying, isDebugging }), this.sync(storyId);
    };
    this.channel.on(FORCE_REMOUNT$1, resetState), this.channel.on(STORY_RENDER_PHASE_CHANGED$1, ({ storyId, newPhase }) => {
      let { isDebugging } = this.getState(storyId);
      this.setState(storyId, { renderPhase: newPhase }), newPhase === "preparing" && isDebugging && resetState({ storyId }), newPhase === "playing" && resetState({ storyId, isDebugging }), newPhase === "played" && this.setState(storyId, { isLocked: false, isPlaying: false, isDebugging: false }), newPhase === "errored" && this.setState(storyId, { isLocked: false, isPlaying: false });
    }), this.channel.on(SET_CURRENT_STORY$1, () => {
      this.initialized ? this.cleanup() : this.initialized = true;
    });
    let start = ({ storyId, playUntil }) => {
      this.getState(storyId).isDebugging || this.setState(storyId, ({ calls }) => ({ calls: [], shadowCalls: calls.map((call) => ({ ...call, status: "waiting" })), isDebugging: true }));
      let log = this.getLog(storyId);
      this.setState(storyId, ({ shadowCalls }) => {
        if (playUntil || !log.length)
          return { playUntil };
        let firstRowIndex = shadowCalls.findIndex((call) => call.id === log[0].callId);
        return { playUntil: shadowCalls.slice(0, firstRowIndex).filter((call) => call.interceptable && !call.ancestors.length).slice(-1)[0]?.id };
      }), this.channel.emit(FORCE_REMOUNT$1, { storyId, isDebugging: true });
    }, back = ({ storyId }) => {
      let log = this.getLog(storyId).filter((call) => !call.ancestors.length), last = log.reduceRight((res, item, index2) => res >= 0 || item.status === "waiting" ? res : index2, -1);
      start({ storyId, playUntil: log[last - 1]?.callId });
    }, goto = ({ storyId, callId }) => {
      let { calls, shadowCalls, resolvers } = this.getState(storyId), call = calls.find(({ id }) => id === callId), shadowCall = shadowCalls.find(({ id }) => id === callId);
      if (!call && shadowCall && Object.values(resolvers).length > 0) {
        let nextId = this.getLog(storyId).find((c2) => c2.status === "waiting")?.callId;
        shadowCall.id !== nextId && this.setState(storyId, { playUntil: shadowCall.id }), Object.values(resolvers).forEach((resolve) => resolve());
      } else
        start({ storyId, playUntil: callId });
    }, next = ({ storyId }) => {
      let { resolvers } = this.getState(storyId);
      if (Object.values(resolvers).length > 0)
        Object.values(resolvers).forEach((resolve) => resolve());
      else {
        let nextId = this.getLog(storyId).find((c2) => c2.status === "waiting")?.callId;
        nextId ? start({ storyId, playUntil: nextId }) : end({ storyId });
      }
    }, end = ({ storyId }) => {
      this.setState(storyId, { playUntil: void 0, isDebugging: false }), Object.values(this.getState(storyId).resolvers).forEach((resolve) => resolve());
    };
    this.channel.on(EVENTS$1.START, start), this.channel.on(EVENTS$1.BACK, back), this.channel.on(EVENTS$1.GOTO, goto), this.channel.on(EVENTS$1.NEXT, next), this.channel.on(EVENTS$1.END, end);
  }
  getState(storyId) {
    return this.state[storyId] || getInitialState$1();
  }
  setState(storyId, update) {
    let state = this.getState(storyId), patch = typeof update == "function" ? update(state) : update;
    this.state = { ...this.state, [storyId]: { ...state, ...patch } }, scope$1.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state;
  }
  cleanup() {
    this.state = Object.entries(this.state).reduce((acc, [storyId, state]) => {
      let retainedState = getRetainedState$1(state);
      return retainedState && (acc[storyId] = Object.assign(getInitialState$1(), retainedState)), acc;
    }, {});
    let payload = { controlStates: controlsDisabled$1, logItems: [] };
    this.channel.emit(EVENTS$1.SYNC, payload), scope$1.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state;
  }
  getLog(storyId) {
    let { calls, shadowCalls } = this.getState(storyId), merged = [...shadowCalls];
    calls.forEach((call, index2) => {
      merged[index2] = call;
    });
    let seen = /* @__PURE__ */ new Set();
    return merged.reduceRight((acc, call) => (call.args.forEach((arg) => {
      arg?.__callId__ && seen.add(arg.__callId__);
    }), call.path.forEach((node) => {
      node.__callId__ && seen.add(node.__callId__);
    }), (call.interceptable || call.exception) && !seen.has(call.id) && (acc.unshift({ callId: call.id, status: call.status, ancestors: call.ancestors }), seen.add(call.id)), acc), []);
  }
  instrument(obj, options) {
    if (!isInstrumentable$1(obj))
      return obj;
    let { mutate = false, path = [] } = options;
    return Object.keys(obj).reduce((acc, key) => {
      let value = obj[key];
      return typeof value != "function" ? (acc[key] = this.instrument(value, { ...options, path: path.concat(key) }), acc) : typeof value.__originalFn__ == "function" ? (acc[key] = value, acc) : (acc[key] = (...args) => this.track(key, value, args, options), acc[key].__originalFn__ = value, Object.defineProperty(acc[key], "name", { value: key, writable: false }), Object.keys(value).length > 0 && Object.assign(acc[key], this.instrument({ ...value }, { ...options, path: path.concat(key) })), acc);
    }, mutate ? obj : construct$1(obj));
  }
  track(method, fn, args, options) {
    let storyId = args?.[0]?.__storyId__ || scope$1.__STORYBOOK_PREVIEW__?.selectionStore?.selection?.storyId, { cursor, ancestors } = this.getState(storyId);
    this.setState(storyId, { cursor: cursor + 1 });
    let id = `${ancestors.slice(-1)[0] || storyId} [${cursor}] ${method}`, { path = [], intercept = false, retain = false } = options, interceptable = typeof intercept == "function" ? intercept(method, path) : intercept, call = { id, cursor, storyId, ancestors, path, method, args, interceptable, retain }, result = (interceptable && !ancestors.length ? this.intercept : this.invoke).call(this, fn, call, options);
    return this.instrument(result, { ...options, mutate: true, path: [{ __callId__: call.id }] });
  }
  intercept(fn, call, options) {
    let { chainedCallIds, isDebugging, playUntil } = this.getState(call.storyId), isChainedUpon = chainedCallIds.has(call.id);
    return !isDebugging || isChainedUpon || playUntil ? (playUntil === call.id && this.setState(call.storyId, { playUntil: void 0 }), this.invoke(fn, call, options)) : new Promise((resolve) => {
      this.setState(call.storyId, ({ resolvers }) => ({ isLocked: false, resolvers: { ...resolvers, [call.id]: resolve } }));
    }).then(() => (this.setState(call.storyId, (state) => {
      let { [call.id]: _, ...resolvers } = state.resolvers;
      return { isLocked: true, resolvers };
    }), this.invoke(fn, call, options)));
  }
  invoke(fn, call, options) {
    let { callRefsByResult, renderPhase } = this.getState(call.storyId), serializeValues = (value) => {
      if (callRefsByResult.has(value))
        return callRefsByResult.get(value);
      if (value instanceof Array)
        return value.map(serializeValues);
      if (value instanceof Date)
        return { __date__: { value: value.toISOString() } };
      if (value instanceof Error) {
        let { name, message, stack } = value;
        return { __error__: { name, message, stack } };
      }
      if (value instanceof RegExp) {
        let { flags, source } = value;
        return { __regexp__: { flags, source } };
      }
      if (value instanceof scope$1.window.HTMLElement) {
        let { prefix, localName, id, classList, innerText } = value, classNames = Array.from(classList);
        return { __element__: { prefix, localName, id, classNames, innerText } };
      }
      return typeof value == "function" ? { __function__: { name: value.name } } : typeof value == "symbol" ? { __symbol__: { description: value.description } } : typeof value == "object" && value?.constructor?.name && value?.constructor?.name !== "Object" ? { __class__: { name: value.constructor.name } } : Object.prototype.toString.call(value) === "[object Object]" ? Object.fromEntries(Object.entries(value).map(([key, val]) => [key, serializeValues(val)])) : value;
    }, info = { ...call, args: call.args.map(serializeValues) };
    call.path.forEach((ref2) => {
      ref2?.__callId__ && this.setState(call.storyId, ({ chainedCallIds }) => ({ chainedCallIds: new Set(Array.from(chainedCallIds).concat(ref2.__callId__)) }));
    });
    let handleException = (e2) => {
      if (e2 instanceof Error) {
        let { name, message, stack, callId = call.id } = e2, exception = { name, message, stack, callId };
        if (this.update({ ...info, status: "error", exception }), this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [e2, { __callId__: call.id, retain: call.retain }]]) })), call.ancestors.length)
          throw Object.prototype.hasOwnProperty.call(e2, "callId") || Object.defineProperty(e2, "callId", { value: call.id }), e2;
        if (e2 !== alreadyCompletedException$1)
          throw logger$1.warn(e2), IGNORED_EXCEPTION$1;
      }
      throw e2;
    };
    try {
      if (renderPhase === "played" && !call.retain)
        throw alreadyCompletedException$1;
      let finalArgs = (options.getArgs ? options.getArgs(call, this.getState(call.storyId)) : call.args).map((arg) => typeof arg != "function" || Object.keys(arg).length ? arg : (...args) => {
        let { cursor, ancestors } = this.getState(call.storyId);
        this.setState(call.storyId, { cursor: 0, ancestors: [...ancestors, call.id] });
        let restore = () => this.setState(call.storyId, { cursor, ancestors }), willRestore = false;
        try {
          let res = arg(...args);
          return res instanceof Promise ? (willRestore = true, res.finally(restore)) : res;
        } finally {
          willRestore || restore();
        }
      }), result = fn(...finalArgs);
      return result && ["object", "function", "symbol"].includes(typeof result) && this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [result, { __callId__: call.id, retain: call.retain }]]) })), this.update({ ...info, status: result instanceof Promise ? "active" : "done" }), result instanceof Promise ? result.then((value) => (this.update({ ...info, status: "done" }), value), handleException) : result;
    } catch (e2) {
      return handleException(e2);
    }
  }
  update(call) {
    this.channel.emit(EVENTS$1.CALL, call), this.setState(call.storyId, ({ calls }) => {
      let callsById = calls.concat(call).reduce((a, c2) => Object.assign(a, { [c2.id]: c2 }), {});
      return { calls: Object.values(callsById).sort((a, b) => a.id.localeCompare(b.id, void 0, { numeric: true })) };
    }), this.sync(call.storyId);
  }
  sync(storyId) {
    let synchronize = () => {
      let { isLocked, isPlaying } = this.getState(storyId), logItems = this.getLog(storyId), pausedAt = logItems.filter(({ ancestors }) => !ancestors.length).find((item) => item.status === "waiting")?.callId, hasActive = logItems.some((item) => item.status === "active");
      if (isLocked || hasActive || logItems.length === 0) {
        let payload2 = { controlStates: controlsDisabled$1, logItems };
        this.channel.emit(EVENTS$1.SYNC, payload2);
        return;
      }
      let hasPrevious = logItems.some((item) => item.status === "done" || item.status === "error"), payload = { controlStates: { start: hasPrevious, back: hasPrevious, goto: true, next: isPlaying, end: isPlaying }, logItems, pausedAt };
      this.channel.emit(EVENTS$1.SYNC, payload);
    };
    this.setState(storyId, ({ syncTimeout }) => (clearTimeout(syncTimeout), { syncTimeout: setTimeout(synchronize, 0) }));
  }
};
function instrument$1(obj, options = {}) {
  try {
    let forceInstrument = false, skipInstrument = false;
    return scope$1.window.location?.search?.includes("instrument=true") ? forceInstrument = true : scope$1.window.location?.search?.includes("instrument=false") && (skipInstrument = true), scope$1.window.parent === scope$1.window && !forceInstrument || skipInstrument ? obj : (scope$1.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ || (scope$1.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ = new Instrumenter$1()), scope$1.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__.instrument(obj, options));
  } catch (e2) {
    return once$1.warn(e2), obj;
  }
}
var _userEvent = userEvent$1.default || userEvent$1, testingLibrary = instrument$1(
  { ...domTestingLibrary },
  {
    intercept: (method, path) => path[0] === "fireEvent" || method.startsWith("findBy") || method.startsWith("waitFor")
  }
);
testingLibrary.screen = Object.entries(testingLibrary.screen).reduce(
  (acc, [key, val]) => Object.defineProperty(acc, key, {
    get() {
      return once$1.warn(dedent`
          You are using Testing Library's \`screen\` object. Use \`within(canvasElement)\` instead.
          More info: https://storybook.js.org/docs/react/essentials/interactions
        `), val;
    }
  }),
  { ...testingLibrary.screen }
);
var {
  buildQueries,
  configure,
  createEvent,
  findAllByAltText,
  findAllByDisplayValue,
  findAllByLabelText,
  findAllByPlaceholderText,
  findAllByRole,
  findAllByTestId,
  findAllByText,
  findAllByTitle,
  findByAltText,
  findByDisplayValue,
  findByLabelText,
  findByPlaceholderText,
  findByRole,
  findByTestId,
  findByText,
  findByTitle,
  fireEvent,
  getAllByAltText,
  getAllByDisplayValue,
  getAllByLabelText,
  getAllByPlaceholderText,
  getAllByRole,
  getAllByTestId,
  getAllByText,
  getAllByTitle,
  getByAltText,
  getByDisplayValue,
  getByLabelText,
  getByPlaceholderText,
  getByRole,
  getByTestId,
  getByText,
  getByTitle,
  getConfig,
  getDefaultNormalizer,
  getElementError,
  getNodeText,
  getQueriesForElement,
  getRoles,
  getSuggestedQuery,
  isInaccessible,
  logDOM,
  logRoles,
  prettyDOM,
  queries,
  queryAllByAltText,
  queryAllByAttribute,
  queryAllByDisplayValue,
  queryAllByLabelText,
  queryAllByPlaceholderText,
  queryAllByRole,
  queryAllByTestId,
  queryAllByText,
  queryAllByTitle,
  queryByAltText,
  queryByAttribute,
  queryByDisplayValue,
  queryByLabelText,
  queryByPlaceholderText,
  queryByRole,
  queryByTestId,
  queryByText,
  queryByTitle,
  queryHelpers,
  screen,
  waitFor,
  waitForElementToBeRemoved,
  within,
  prettyFormat
} = testingLibrary, userEvent = instrument$1(
  { userEvent: _userEvent },
  { intercept: true }
).userEvent;
var define_process_env_default = {};
var e$1 = { "./node_modules/@babel/highlight/node_modules/ansi-styles/index.js": (e2, t2, n2) => {
  e2 = n2.nmd(e2);
  const r2 = n2("./node_modules/@babel/highlight/node_modules/color-convert/index.js"), o2 = (e3, t3) => function() {
    return `\x1B[${e3.apply(r2, arguments) + t3}m`;
  }, i2 = (e3, t3) => function() {
    const n3 = e3.apply(r2, arguments);
    return `\x1B[${38 + t3};5;${n3}m`;
  }, s2 = (e3, t3) => function() {
    const n3 = e3.apply(r2, arguments);
    return `\x1B[${38 + t3};2;${n3[0]};${n3[1]};${n3[2]}m`;
  };
  Object.defineProperty(e2, "exports", { enumerable: true, get: function() {
    const e3 = /* @__PURE__ */ new Map(), t3 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], gray: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
    t3.color.grey = t3.color.gray;
    for (const n4 of Object.keys(t3)) {
      const r3 = t3[n4];
      for (const n5 of Object.keys(r3)) {
        const o3 = r3[n5];
        t3[n5] = { open: `\x1B[${o3[0]}m`, close: `\x1B[${o3[1]}m` }, r3[n5] = t3[n5], e3.set(o3[0], o3[1]);
      }
      Object.defineProperty(t3, n4, { value: r3, enumerable: false }), Object.defineProperty(t3, "codes", { value: e3, enumerable: false });
    }
    const n3 = (e4) => e4, a = (e4, t4, n4) => [e4, t4, n4];
    t3.color.close = "\x1B[39m", t3.bgColor.close = "\x1B[49m", t3.color.ansi = { ansi: o2(n3, 0) }, t3.color.ansi256 = { ansi256: i2(n3, 0) }, t3.color.ansi16m = { rgb: s2(a, 0) }, t3.bgColor.ansi = { ansi: o2(n3, 10) }, t3.bgColor.ansi256 = { ansi256: i2(n3, 10) }, t3.bgColor.ansi16m = { rgb: s2(a, 10) };
    for (let e4 of Object.keys(r2)) {
      if ("object" != typeof r2[e4]) continue;
      const n4 = r2[e4];
      "ansi16" === e4 && (e4 = "ansi"), "ansi16" in n4 && (t3.color.ansi[e4] = o2(n4.ansi16, 0), t3.bgColor.ansi[e4] = o2(n4.ansi16, 10)), "ansi256" in n4 && (t3.color.ansi256[e4] = i2(n4.ansi256, 0), t3.bgColor.ansi256[e4] = i2(n4.ansi256, 10)), "rgb" in n4 && (t3.color.ansi16m[e4] = s2(n4.rgb, 0), t3.bgColor.ansi16m[e4] = s2(n4.rgb, 10));
    }
    return t3;
  } });
}, "./node_modules/@babel/highlight/node_modules/chalk/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  const o2 = n2("./node_modules/escape-string-regexp/index.js"), i2 = n2("./node_modules/@babel/highlight/node_modules/ansi-styles/index.js"), s2 = n2("./node_modules/@babel/highlight/node_modules/supports-color/browser.js").stdout, a = n2("./node_modules/@babel/highlight/node_modules/chalk/templates.js"), l = "win32" === r2.platform && !(r2.env.TERM || "").toLowerCase().startsWith("xterm"), u = ["ansi", "ansi", "ansi256", "ansi16m"], c2 = /* @__PURE__ */ new Set(["gray"]), f = /* @__PURE__ */ Object.create(null);
  function p(e3, t3) {
    t3 = t3 || {};
    const n3 = s2 ? s2.level : 0;
    e3.level = void 0 === t3.level ? n3 : t3.level, e3.enabled = "enabled" in t3 ? t3.enabled : e3.level > 0;
  }
  function d(e3) {
    if (!this || !(this instanceof d) || this.template) {
      const t3 = {};
      return p(t3, e3), t3.template = function() {
        const e4 = [].slice.call(arguments);
        return y.apply(null, [t3.template].concat(e4));
      }, Object.setPrototypeOf(t3, d.prototype), Object.setPrototypeOf(t3.template, t3), t3.template.constructor = d, t3.template;
    }
    p(this, e3);
  }
  l && (i2.blue.open = "\x1B[94m");
  for (const e3 of Object.keys(i2)) i2[e3].closeRe = new RegExp(o2(i2[e3].close), "g"), f[e3] = { get() {
    const t3 = i2[e3];
    return g.call(this, this._styles ? this._styles.concat(t3) : [t3], this._empty, e3);
  } };
  f.visible = { get() {
    return g.call(this, this._styles || [], true, "visible");
  } }, i2.color.closeRe = new RegExp(o2(i2.color.close), "g");
  for (const e3 of Object.keys(i2.color.ansi)) c2.has(e3) || (f[e3] = { get() {
    const t3 = this.level;
    return function() {
      const n3 = { open: i2.color[u[t3]][e3].apply(null, arguments), close: i2.color.close, closeRe: i2.color.closeRe };
      return g.call(this, this._styles ? this._styles.concat(n3) : [n3], this._empty, e3);
    };
  } });
  i2.bgColor.closeRe = new RegExp(o2(i2.bgColor.close), "g");
  for (const e3 of Object.keys(i2.bgColor.ansi)) {
    if (c2.has(e3)) continue;
    f["bg" + e3[0].toUpperCase() + e3.slice(1)] = { get() {
      const t3 = this.level;
      return function() {
        const n3 = { open: i2.bgColor[u[t3]][e3].apply(null, arguments), close: i2.bgColor.close, closeRe: i2.bgColor.closeRe };
        return g.call(this, this._styles ? this._styles.concat(n3) : [n3], this._empty, e3);
      };
    } };
  }
  const h = Object.defineProperties((() => {
  }), f);
  function g(e3, t3, n3) {
    const r3 = function() {
      return m2.apply(r3, arguments);
    };
    r3._styles = e3, r3._empty = t3;
    const o3 = this;
    return Object.defineProperty(r3, "level", { enumerable: true, get: () => o3.level, set(e4) {
      o3.level = e4;
    } }), Object.defineProperty(r3, "enabled", { enumerable: true, get: () => o3.enabled, set(e4) {
      o3.enabled = e4;
    } }), r3.hasGrey = this.hasGrey || "gray" === n3 || "grey" === n3, r3.__proto__ = h, r3;
  }
  function m2() {
    const e3 = arguments, t3 = e3.length;
    let n3 = String(arguments[0]);
    if (0 === t3) return "";
    if (t3 > 1) for (let r4 = 1; r4 < t3; r4++) n3 += " " + e3[r4];
    if (!this.enabled || this.level <= 0 || !n3) return this._empty ? "" : n3;
    const r3 = i2.dim.open;
    l && this.hasGrey && (i2.dim.open = "");
    for (const e4 of this._styles.slice().reverse()) n3 = e4.open + n3.replace(e4.closeRe, e4.open) + e4.close, n3 = n3.replace(/\r?\n/g, `${e4.close}$&${e4.open}`);
    return i2.dim.open = r3, n3;
  }
  function y(e3, t3) {
    if (!Array.isArray(t3)) return [].slice.call(arguments, 1).join(" ");
    const n3 = [].slice.call(arguments, 2), r3 = [t3.raw[0]];
    for (let e4 = 1; e4 < t3.length; e4++) r3.push(String(n3[e4 - 1]).replace(/[{}\\]/g, "\\$&")), r3.push(String(t3.raw[e4]));
    return a(e3, r3.join(""));
  }
  Object.defineProperties(d.prototype, f), e2.exports = d(), e2.exports.supportsColor = s2, e2.exports.default = e2.exports;
}, "./node_modules/@babel/highlight/node_modules/chalk/templates.js": (e2) => {
  const t2 = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi, n2 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g, r2 = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/, o2 = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi, i2 = /* @__PURE__ */ new Map([["n", "\n"], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
  function s2(e3) {
    return "u" === e3[0] && 5 === e3.length || "x" === e3[0] && 3 === e3.length ? String.fromCharCode(parseInt(e3.slice(1), 16)) : i2.get(e3) || e3;
  }
  function a(e3, t3) {
    const n3 = [], i22 = t3.trim().split(/\s*,\s*/g);
    let a2;
    for (const t4 of i22) if (isNaN(t4)) {
      if (!(a2 = t4.match(r2))) throw new Error(`Invalid Chalk template style argument: ${t4} (in style '${e3}')`);
      n3.push(a2[2].replace(o2, ((e4, t5, n4) => t5 ? s2(t5) : n4)));
    } else n3.push(Number(t4));
    return n3;
  }
  function l(e3) {
    n2.lastIndex = 0;
    const t3 = [];
    let r3;
    for (; null !== (r3 = n2.exec(e3)); ) {
      const e4 = r3[1];
      if (r3[2]) {
        const n3 = a(e4, r3[2]);
        t3.push([e4].concat(n3));
      } else t3.push([e4]);
    }
    return t3;
  }
  function u(e3, t3) {
    const n3 = {};
    for (const e4 of t3) for (const t4 of e4.styles) n3[t4[0]] = e4.inverse ? null : t4.slice(1);
    let r3 = e3;
    for (const e4 of Object.keys(n3)) if (Array.isArray(n3[e4])) {
      if (!(e4 in r3)) throw new Error(`Unknown Chalk style: ${e4}`);
      r3 = n3[e4].length > 0 ? r3[e4].apply(r3, n3[e4]) : r3[e4];
    }
    return r3;
  }
  e2.exports = (e3, n3) => {
    const r3 = [], o3 = [];
    let i22 = [];
    if (n3.replace(t2, ((t3, n4, a2, c2, f, p) => {
      if (n4) i22.push(s2(n4));
      else if (c2) {
        const t4 = i22.join("");
        i22 = [], o3.push(0 === r3.length ? t4 : u(e3, r3)(t4)), r3.push({ inverse: a2, styles: l(c2) });
      } else if (f) {
        if (0 === r3.length) throw new Error("Found extraneous } in Chalk template literal");
        o3.push(u(e3, r3)(i22.join(""))), i22 = [], r3.pop();
      } else i22.push(p);
    })), o3.push(i22.join("")), r3.length > 0) {
      const e4 = `Chalk template literal is missing ${r3.length} closing bracket${1 === r3.length ? "" : "s"} (\`}\`)`;
      throw new Error(e4);
    }
    return o3.join("");
  };
}, "./node_modules/@babel/highlight/node_modules/color-convert/conversions.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/@babel/highlight/node_modules/color-name/index.js"), o2 = {};
  for (var i2 in r2) r2.hasOwnProperty(i2) && (o2[r2[i2]] = i2);
  var s2 = e2.exports = { rgb: { channels: 3, labels: "rgb" }, hsl: { channels: 3, labels: "hsl" }, hsv: { channels: 3, labels: "hsv" }, hwb: { channels: 3, labels: "hwb" }, cmyk: { channels: 4, labels: "cmyk" }, xyz: { channels: 3, labels: "xyz" }, lab: { channels: 3, labels: "lab" }, lch: { channels: 3, labels: "lch" }, hex: { channels: 1, labels: ["hex"] }, keyword: { channels: 1, labels: ["keyword"] }, ansi16: { channels: 1, labels: ["ansi16"] }, ansi256: { channels: 1, labels: ["ansi256"] }, hcg: { channels: 3, labels: ["h", "c", "g"] }, apple: { channels: 3, labels: ["r16", "g16", "b16"] }, gray: { channels: 1, labels: ["gray"] } };
  for (var a in s2) if (s2.hasOwnProperty(a)) {
    if (!("channels" in s2[a])) throw new Error("missing channels property: " + a);
    if (!("labels" in s2[a])) throw new Error("missing channel labels property: " + a);
    if (s2[a].labels.length !== s2[a].channels) throw new Error("channel and label counts mismatch: " + a);
    var l = s2[a].channels, u = s2[a].labels;
    delete s2[a].channels, delete s2[a].labels, Object.defineProperty(s2[a], "channels", { value: l }), Object.defineProperty(s2[a], "labels", { value: u });
  }
  s2.rgb.hsl = function(e3) {
    var t3, n3, r3 = e3[0] / 255, o3 = e3[1] / 255, i22 = e3[2] / 255, s22 = Math.min(r3, o3, i22), a2 = Math.max(r3, o3, i22), l2 = a2 - s22;
    return a2 === s22 ? t3 = 0 : r3 === a2 ? t3 = (o3 - i22) / l2 : o3 === a2 ? t3 = 2 + (i22 - r3) / l2 : i22 === a2 && (t3 = 4 + (r3 - o3) / l2), (t3 = Math.min(60 * t3, 360)) < 0 && (t3 += 360), n3 = (s22 + a2) / 2, [t3, 100 * (a2 === s22 ? 0 : n3 <= 0.5 ? l2 / (a2 + s22) : l2 / (2 - a2 - s22)), 100 * n3];
  }, s2.rgb.hsv = function(e3) {
    var t3, n3, r3, o3, i22, s22 = e3[0] / 255, a2 = e3[1] / 255, l2 = e3[2] / 255, u2 = Math.max(s22, a2, l2), c2 = u2 - Math.min(s22, a2, l2), f = function(e4) {
      return (u2 - e4) / 6 / c2 + 0.5;
    };
    return 0 === c2 ? o3 = i22 = 0 : (i22 = c2 / u2, t3 = f(s22), n3 = f(a2), r3 = f(l2), s22 === u2 ? o3 = r3 - n3 : a2 === u2 ? o3 = 1 / 3 + t3 - r3 : l2 === u2 && (o3 = 2 / 3 + n3 - t3), o3 < 0 ? o3 += 1 : o3 > 1 && (o3 -= 1)), [360 * o3, 100 * i22, 100 * u2];
  }, s2.rgb.hwb = function(e3) {
    var t3 = e3[0], n3 = e3[1], r3 = e3[2];
    return [s2.rgb.hsl(e3)[0], 100 * (1 / 255 * Math.min(t3, Math.min(n3, r3))), 100 * (r3 = 1 - 1 / 255 * Math.max(t3, Math.max(n3, r3)))];
  }, s2.rgb.cmyk = function(e3) {
    var t3, n3 = e3[0] / 255, r3 = e3[1] / 255, o3 = e3[2] / 255;
    return [100 * ((1 - n3 - (t3 = Math.min(1 - n3, 1 - r3, 1 - o3))) / (1 - t3) || 0), 100 * ((1 - r3 - t3) / (1 - t3) || 0), 100 * ((1 - o3 - t3) / (1 - t3) || 0), 100 * t3];
  }, s2.rgb.keyword = function(e3) {
    var t3 = o2[e3];
    if (t3) return t3;
    var n3, i22, s22, a2 = 1 / 0;
    for (var l2 in r2) if (r2.hasOwnProperty(l2)) {
      var u2 = r2[l2], c2 = (i22 = e3, s22 = u2, Math.pow(i22[0] - s22[0], 2) + Math.pow(i22[1] - s22[1], 2) + Math.pow(i22[2] - s22[2], 2));
      c2 < a2 && (a2 = c2, n3 = l2);
    }
    return n3;
  }, s2.keyword.rgb = function(e3) {
    return r2[e3];
  }, s2.rgb.xyz = function(e3) {
    var t3 = e3[0] / 255, n3 = e3[1] / 255, r3 = e3[2] / 255;
    return [100 * (0.4124 * (t3 = t3 > 0.04045 ? Math.pow((t3 + 0.055) / 1.055, 2.4) : t3 / 12.92) + 0.3576 * (n3 = n3 > 0.04045 ? Math.pow((n3 + 0.055) / 1.055, 2.4) : n3 / 12.92) + 0.1805 * (r3 = r3 > 0.04045 ? Math.pow((r3 + 0.055) / 1.055, 2.4) : r3 / 12.92)), 100 * (0.2126 * t3 + 0.7152 * n3 + 0.0722 * r3), 100 * (0.0193 * t3 + 0.1192 * n3 + 0.9505 * r3)];
  }, s2.rgb.lab = function(e3) {
    var t3 = s2.rgb.xyz(e3), n3 = t3[0], r3 = t3[1], o3 = t3[2];
    return r3 /= 100, o3 /= 108.883, n3 = (n3 /= 95.047) > 8856e-6 ? Math.pow(n3, 1 / 3) : 7.787 * n3 + 16 / 116, [116 * (r3 = r3 > 8856e-6 ? Math.pow(r3, 1 / 3) : 7.787 * r3 + 16 / 116) - 16, 500 * (n3 - r3), 200 * (r3 - (o3 = o3 > 8856e-6 ? Math.pow(o3, 1 / 3) : 7.787 * o3 + 16 / 116))];
  }, s2.hsl.rgb = function(e3) {
    var t3, n3, r3, o3, i22, s22 = e3[0] / 360, a2 = e3[1] / 100, l2 = e3[2] / 100;
    if (0 === a2) return [i22 = 255 * l2, i22, i22];
    t3 = 2 * l2 - (n3 = l2 < 0.5 ? l2 * (1 + a2) : l2 + a2 - l2 * a2), o3 = [0, 0, 0];
    for (var u2 = 0; u2 < 3; u2++) (r3 = s22 + 1 / 3 * -(u2 - 1)) < 0 && r3++, r3 > 1 && r3--, i22 = 6 * r3 < 1 ? t3 + 6 * (n3 - t3) * r3 : 2 * r3 < 1 ? n3 : 3 * r3 < 2 ? t3 + (n3 - t3) * (2 / 3 - r3) * 6 : t3, o3[u2] = 255 * i22;
    return o3;
  }, s2.hsl.hsv = function(e3) {
    var t3 = e3[0], n3 = e3[1] / 100, r3 = e3[2] / 100, o3 = n3, i22 = Math.max(r3, 0.01);
    return n3 *= (r3 *= 2) <= 1 ? r3 : 2 - r3, o3 *= i22 <= 1 ? i22 : 2 - i22, [t3, 100 * (0 === r3 ? 2 * o3 / (i22 + o3) : 2 * n3 / (r3 + n3)), 100 * ((r3 + n3) / 2)];
  }, s2.hsv.rgb = function(e3) {
    var t3 = e3[0] / 60, n3 = e3[1] / 100, r3 = e3[2] / 100, o3 = Math.floor(t3) % 6, i22 = t3 - Math.floor(t3), s22 = 255 * r3 * (1 - n3), a2 = 255 * r3 * (1 - n3 * i22), l2 = 255 * r3 * (1 - n3 * (1 - i22));
    switch (r3 *= 255, o3) {
      case 0:
        return [r3, l2, s22];
      case 1:
        return [a2, r3, s22];
      case 2:
        return [s22, r3, l2];
      case 3:
        return [s22, a2, r3];
      case 4:
        return [l2, s22, r3];
      case 5:
        return [r3, s22, a2];
    }
  }, s2.hsv.hsl = function(e3) {
    var t3, n3, r3, o3 = e3[0], i22 = e3[1] / 100, s22 = e3[2] / 100, a2 = Math.max(s22, 0.01);
    return r3 = (2 - i22) * s22, n3 = i22 * a2, [o3, 100 * (n3 = (n3 /= (t3 = (2 - i22) * a2) <= 1 ? t3 : 2 - t3) || 0), 100 * (r3 /= 2)];
  }, s2.hwb.rgb = function(e3) {
    var t3, n3, r3, o3, i22, s22, a2, l2 = e3[0] / 360, u2 = e3[1] / 100, c2 = e3[2] / 100, f = u2 + c2;
    switch (f > 1 && (u2 /= f, c2 /= f), r3 = 6 * l2 - (t3 = Math.floor(6 * l2)), 0 != (1 & t3) && (r3 = 1 - r3), o3 = u2 + r3 * ((n3 = 1 - c2) - u2), t3) {
      default:
      case 6:
      case 0:
        i22 = n3, s22 = o3, a2 = u2;
        break;
      case 1:
        i22 = o3, s22 = n3, a2 = u2;
        break;
      case 2:
        i22 = u2, s22 = n3, a2 = o3;
        break;
      case 3:
        i22 = u2, s22 = o3, a2 = n3;
        break;
      case 4:
        i22 = o3, s22 = u2, a2 = n3;
        break;
      case 5:
        i22 = n3, s22 = u2, a2 = o3;
    }
    return [255 * i22, 255 * s22, 255 * a2];
  }, s2.cmyk.rgb = function(e3) {
    var t3 = e3[0] / 100, n3 = e3[1] / 100, r3 = e3[2] / 100, o3 = e3[3] / 100;
    return [255 * (1 - Math.min(1, t3 * (1 - o3) + o3)), 255 * (1 - Math.min(1, n3 * (1 - o3) + o3)), 255 * (1 - Math.min(1, r3 * (1 - o3) + o3))];
  }, s2.xyz.rgb = function(e3) {
    var t3, n3, r3, o3 = e3[0] / 100, i22 = e3[1] / 100, s22 = e3[2] / 100;
    return n3 = -0.9689 * o3 + 1.8758 * i22 + 0.0415 * s22, r3 = 0.0557 * o3 + -0.204 * i22 + 1.057 * s22, t3 = (t3 = 3.2406 * o3 + -1.5372 * i22 + -0.4986 * s22) > 31308e-7 ? 1.055 * Math.pow(t3, 1 / 2.4) - 0.055 : 12.92 * t3, n3 = n3 > 31308e-7 ? 1.055 * Math.pow(n3, 1 / 2.4) - 0.055 : 12.92 * n3, r3 = r3 > 31308e-7 ? 1.055 * Math.pow(r3, 1 / 2.4) - 0.055 : 12.92 * r3, [255 * (t3 = Math.min(Math.max(0, t3), 1)), 255 * (n3 = Math.min(Math.max(0, n3), 1)), 255 * (r3 = Math.min(Math.max(0, r3), 1))];
  }, s2.xyz.lab = function(e3) {
    var t3 = e3[0], n3 = e3[1], r3 = e3[2];
    return n3 /= 100, r3 /= 108.883, t3 = (t3 /= 95.047) > 8856e-6 ? Math.pow(t3, 1 / 3) : 7.787 * t3 + 16 / 116, [116 * (n3 = n3 > 8856e-6 ? Math.pow(n3, 1 / 3) : 7.787 * n3 + 16 / 116) - 16, 500 * (t3 - n3), 200 * (n3 - (r3 = r3 > 8856e-6 ? Math.pow(r3, 1 / 3) : 7.787 * r3 + 16 / 116))];
  }, s2.lab.xyz = function(e3) {
    var t3, n3, r3, o3 = e3[0];
    t3 = e3[1] / 500 + (n3 = (o3 + 16) / 116), r3 = n3 - e3[2] / 200;
    var i22 = Math.pow(n3, 3), s22 = Math.pow(t3, 3), a2 = Math.pow(r3, 3);
    return n3 = i22 > 8856e-6 ? i22 : (n3 - 16 / 116) / 7.787, t3 = s22 > 8856e-6 ? s22 : (t3 - 16 / 116) / 7.787, r3 = a2 > 8856e-6 ? a2 : (r3 - 16 / 116) / 7.787, [t3 *= 95.047, n3 *= 100, r3 *= 108.883];
  }, s2.lab.lch = function(e3) {
    var t3, n3 = e3[0], r3 = e3[1], o3 = e3[2];
    return (t3 = 360 * Math.atan2(o3, r3) / 2 / Math.PI) < 0 && (t3 += 360), [n3, Math.sqrt(r3 * r3 + o3 * o3), t3];
  }, s2.lch.lab = function(e3) {
    var t3, n3 = e3[0], r3 = e3[1];
    return t3 = e3[2] / 360 * 2 * Math.PI, [n3, r3 * Math.cos(t3), r3 * Math.sin(t3)];
  }, s2.rgb.ansi16 = function(e3) {
    var t3 = e3[0], n3 = e3[1], r3 = e3[2], o3 = 1 in arguments ? arguments[1] : s2.rgb.hsv(e3)[2];
    if (0 === (o3 = Math.round(o3 / 50))) return 30;
    var i22 = 30 + (Math.round(r3 / 255) << 2 | Math.round(n3 / 255) << 1 | Math.round(t3 / 255));
    return 2 === o3 && (i22 += 60), i22;
  }, s2.hsv.ansi16 = function(e3) {
    return s2.rgb.ansi16(s2.hsv.rgb(e3), e3[2]);
  }, s2.rgb.ansi256 = function(e3) {
    var t3 = e3[0], n3 = e3[1], r3 = e3[2];
    return t3 === n3 && n3 === r3 ? t3 < 8 ? 16 : t3 > 248 ? 231 : Math.round((t3 - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(t3 / 255 * 5) + 6 * Math.round(n3 / 255 * 5) + Math.round(r3 / 255 * 5);
  }, s2.ansi16.rgb = function(e3) {
    var t3 = e3 % 10;
    if (0 === t3 || 7 === t3) return e3 > 50 && (t3 += 3.5), [t3 = t3 / 10.5 * 255, t3, t3];
    var n3 = 0.5 * (1 + ~~(e3 > 50));
    return [(1 & t3) * n3 * 255, (t3 >> 1 & 1) * n3 * 255, (t3 >> 2 & 1) * n3 * 255];
  }, s2.ansi256.rgb = function(e3) {
    if (e3 >= 232) {
      var t3 = 10 * (e3 - 232) + 8;
      return [t3, t3, t3];
    }
    var n3;
    return e3 -= 16, [Math.floor(e3 / 36) / 5 * 255, Math.floor((n3 = e3 % 36) / 6) / 5 * 255, n3 % 6 / 5 * 255];
  }, s2.rgb.hex = function(e3) {
    var t3 = (((255 & Math.round(e3[0])) << 16) + ((255 & Math.round(e3[1])) << 8) + (255 & Math.round(e3[2]))).toString(16).toUpperCase();
    return "000000".substring(t3.length) + t3;
  }, s2.hex.rgb = function(e3) {
    var t3 = e3.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!t3) return [0, 0, 0];
    var n3 = t3[0];
    3 === t3[0].length && (n3 = n3.split("").map((function(e4) {
      return e4 + e4;
    })).join(""));
    var r3 = parseInt(n3, 16);
    return [r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3];
  }, s2.rgb.hcg = function(e3) {
    var t3, n3 = e3[0] / 255, r3 = e3[1] / 255, o3 = e3[2] / 255, i22 = Math.max(Math.max(n3, r3), o3), s22 = Math.min(Math.min(n3, r3), o3), a2 = i22 - s22;
    return t3 = a2 <= 0 ? 0 : i22 === n3 ? (r3 - o3) / a2 % 6 : i22 === r3 ? 2 + (o3 - n3) / a2 : 4 + (n3 - r3) / a2 + 4, t3 /= 6, [360 * (t3 %= 1), 100 * a2, 100 * (a2 < 1 ? s22 / (1 - a2) : 0)];
  }, s2.hsl.hcg = function(e3) {
    var t3 = e3[1] / 100, n3 = e3[2] / 100, r3 = 1, o3 = 0;
    return (r3 = n3 < 0.5 ? 2 * t3 * n3 : 2 * t3 * (1 - n3)) < 1 && (o3 = (n3 - 0.5 * r3) / (1 - r3)), [e3[0], 100 * r3, 100 * o3];
  }, s2.hsv.hcg = function(e3) {
    var t3 = e3[1] / 100, n3 = e3[2] / 100, r3 = t3 * n3, o3 = 0;
    return r3 < 1 && (o3 = (n3 - r3) / (1 - r3)), [e3[0], 100 * r3, 100 * o3];
  }, s2.hcg.rgb = function(e3) {
    var t3 = e3[0] / 360, n3 = e3[1] / 100, r3 = e3[2] / 100;
    if (0 === n3) return [255 * r3, 255 * r3, 255 * r3];
    var o3, i22 = [0, 0, 0], s22 = t3 % 1 * 6, a2 = s22 % 1, l2 = 1 - a2;
    switch (Math.floor(s22)) {
      case 0:
        i22[0] = 1, i22[1] = a2, i22[2] = 0;
        break;
      case 1:
        i22[0] = l2, i22[1] = 1, i22[2] = 0;
        break;
      case 2:
        i22[0] = 0, i22[1] = 1, i22[2] = a2;
        break;
      case 3:
        i22[0] = 0, i22[1] = l2, i22[2] = 1;
        break;
      case 4:
        i22[0] = a2, i22[1] = 0, i22[2] = 1;
        break;
      default:
        i22[0] = 1, i22[1] = 0, i22[2] = l2;
    }
    return o3 = (1 - n3) * r3, [255 * (n3 * i22[0] + o3), 255 * (n3 * i22[1] + o3), 255 * (n3 * i22[2] + o3)];
  }, s2.hcg.hsv = function(e3) {
    var t3 = e3[1] / 100, n3 = t3 + e3[2] / 100 * (1 - t3), r3 = 0;
    return n3 > 0 && (r3 = t3 / n3), [e3[0], 100 * r3, 100 * n3];
  }, s2.hcg.hsl = function(e3) {
    var t3 = e3[1] / 100, n3 = e3[2] / 100 * (1 - t3) + 0.5 * t3, r3 = 0;
    return n3 > 0 && n3 < 0.5 ? r3 = t3 / (2 * n3) : n3 >= 0.5 && n3 < 1 && (r3 = t3 / (2 * (1 - n3))), [e3[0], 100 * r3, 100 * n3];
  }, s2.hcg.hwb = function(e3) {
    var t3 = e3[1] / 100, n3 = t3 + e3[2] / 100 * (1 - t3);
    return [e3[0], 100 * (n3 - t3), 100 * (1 - n3)];
  }, s2.hwb.hcg = function(e3) {
    var t3 = e3[1] / 100, n3 = 1 - e3[2] / 100, r3 = n3 - t3, o3 = 0;
    return r3 < 1 && (o3 = (n3 - r3) / (1 - r3)), [e3[0], 100 * r3, 100 * o3];
  }, s2.apple.rgb = function(e3) {
    return [e3[0] / 65535 * 255, e3[1] / 65535 * 255, e3[2] / 65535 * 255];
  }, s2.rgb.apple = function(e3) {
    return [e3[0] / 255 * 65535, e3[1] / 255 * 65535, e3[2] / 255 * 65535];
  }, s2.gray.rgb = function(e3) {
    return [e3[0] / 100 * 255, e3[0] / 100 * 255, e3[0] / 100 * 255];
  }, s2.gray.hsl = s2.gray.hsv = function(e3) {
    return [0, 0, e3[0]];
  }, s2.gray.hwb = function(e3) {
    return [0, 100, e3[0]];
  }, s2.gray.cmyk = function(e3) {
    return [0, 0, 0, e3[0]];
  }, s2.gray.lab = function(e3) {
    return [e3[0], 0, 0];
  }, s2.gray.hex = function(e3) {
    var t3 = 255 & Math.round(e3[0] / 100 * 255), n3 = ((t3 << 16) + (t3 << 8) + t3).toString(16).toUpperCase();
    return "000000".substring(n3.length) + n3;
  }, s2.rgb.gray = function(e3) {
    return [(e3[0] + e3[1] + e3[2]) / 3 / 255 * 100];
  };
}, "./node_modules/@babel/highlight/node_modules/color-convert/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/@babel/highlight/node_modules/color-convert/conversions.js"), o2 = n2("./node_modules/@babel/highlight/node_modules/color-convert/route.js"), i2 = {};
  Object.keys(r2).forEach((function(e3) {
    i2[e3] = {}, Object.defineProperty(i2[e3], "channels", { value: r2[e3].channels }), Object.defineProperty(i2[e3], "labels", { value: r2[e3].labels });
    var t3 = o2(e3);
    Object.keys(t3).forEach((function(n3) {
      var r3 = t3[n3];
      i2[e3][n3] = (function(e4) {
        var t4 = function(t5) {
          if (null == t5) return t5;
          arguments.length > 1 && (t5 = Array.prototype.slice.call(arguments));
          var n4 = e4(t5);
          if ("object" == typeof n4) for (var r4 = n4.length, o3 = 0; o3 < r4; o3++) n4[o3] = Math.round(n4[o3]);
          return n4;
        };
        return "conversion" in e4 && (t4.conversion = e4.conversion), t4;
      })(r3), i2[e3][n3].raw = (function(e4) {
        var t4 = function(t5) {
          return null == t5 ? t5 : (arguments.length > 1 && (t5 = Array.prototype.slice.call(arguments)), e4(t5));
        };
        return "conversion" in e4 && (t4.conversion = e4.conversion), t4;
      })(r3);
    }));
  })), e2.exports = i2;
}, "./node_modules/@babel/highlight/node_modules/color-convert/route.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/@babel/highlight/node_modules/color-convert/conversions.js");
  function o2(e3) {
    var t3 = (function() {
      for (var e4 = {}, t4 = Object.keys(r2), n4 = t4.length, o4 = 0; o4 < n4; o4++) e4[t4[o4]] = { distance: -1, parent: null };
      return e4;
    })(), n3 = [e3];
    for (t3[e3].distance = 0; n3.length; ) for (var o3 = n3.pop(), i22 = Object.keys(r2[o3]), s22 = i22.length, a = 0; a < s22; a++) {
      var l = i22[a], u = t3[l];
      -1 === u.distance && (u.distance = t3[o3].distance + 1, u.parent = o3, n3.unshift(l));
    }
    return t3;
  }
  function i2(e3, t3) {
    return function(n3) {
      return t3(e3(n3));
    };
  }
  function s2(e3, t3) {
    for (var n3 = [t3[e3].parent, e3], o3 = r2[t3[e3].parent][e3], s22 = t3[e3].parent; t3[s22].parent; ) n3.unshift(t3[s22].parent), o3 = i2(r2[t3[s22].parent][s22], o3), s22 = t3[s22].parent;
    return o3.conversion = n3, o3;
  }
  e2.exports = function(e3) {
    for (var t3 = o2(e3), n3 = {}, r3 = Object.keys(t3), i22 = r3.length, a = 0; a < i22; a++) {
      var l = r3[a];
      null !== t3[l].parent && (n3[l] = s2(l, t3));
    }
    return n3;
  };
}, "./node_modules/@babel/highlight/node_modules/color-name/index.js": (e2) => {
  e2.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
}, "./node_modules/@babel/highlight/node_modules/supports-color/browser.js": (e2) => {
  e2.exports = { stdout: false, stderr: false };
}, "./node_modules/@jest/expect-utils/build/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true });
  var r2 = { equals: true, isA: true };
  Object.defineProperty(t2, "equals", { enumerable: true, get: function() {
    return o2.equals;
  } }), Object.defineProperty(t2, "isA", { enumerable: true, get: function() {
    return o2.isA;
  } });
  var o2 = n2("./node_modules/@jest/expect-utils/build/jasmineUtils.js"), i2 = n2("./node_modules/@jest/expect-utils/build/utils.js");
  Object.keys(i2).forEach((function(e3) {
    "default" !== e3 && "__esModule" !== e3 && (Object.prototype.hasOwnProperty.call(r2, e3) || e3 in t2 && t2[e3] === i2[e3] || Object.defineProperty(t2, e3, { enumerable: true, get: function() {
      return i2[e3];
    } }));
  }));
}, "./node_modules/@jest/expect-utils/build/jasmineUtils.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.equals = void 0, t2.isA = s2, t2.isImmutableList = function(e3) {
    return !(!e3 || !e3[c2]);
  }, t2.isImmutableOrderedKeyed = function(e3) {
    return !!(e3 && e3[l] && e3[f]);
  }, t2.isImmutableOrderedSet = function(e3) {
    return !!(e3 && e3[u] && e3[f]);
  }, t2.isImmutableUnorderedKeyed = function(e3) {
    return !(!e3 || !e3[l] || e3[f]);
  }, t2.isImmutableUnorderedSet = function(e3) {
    return !(!e3 || !e3[u] || e3[f]);
  };
  function n2(e3) {
    return !!e3 && s2("Function", e3.asymmetricMatch);
  }
  function r2(e3, t3, s22, l2, u2, c22) {
    var f2 = true, p = (function(e4, t4) {
      var r3 = n2(e4), o3 = n2(t4);
      if (!r3 || !o3) return r3 ? e4.asymmetricMatch(t4) : o3 ? t4.asymmetricMatch(e4) : void 0;
    })(e3, t3);
    if (void 0 !== p) return p;
    for (var d = 0; d < u2.length; d++) {
      var h = u2[d](e3, t3);
      if (void 0 !== h) return h;
    }
    if (e3 instanceof Error && t3 instanceof Error) return e3.message == t3.message;
    if (Object.is(e3, t3)) return true;
    if (null === e3 || null === t3) return e3 === t3;
    var g = Object.prototype.toString.call(e3);
    if (g != Object.prototype.toString.call(t3)) return false;
    switch (g) {
      case "[object Boolean]":
      case "[object String]":
      case "[object Number]":
        return typeof e3 == typeof t3 && ("object" != typeof e3 && "object" != typeof t3 ? Object.is(e3, t3) : Object.is(e3.valueOf(), t3.valueOf()));
      case "[object Date]":
        return +e3 == +t3;
      case "[object RegExp]":
        return e3.source === t3.source && e3.flags === t3.flags;
    }
    if ("object" != typeof e3 || "object" != typeof t3) return false;
    if (a(e3) && a(t3)) return e3.isEqualNode(t3);
    for (var m2 = s22.length; m2--; ) {
      if (s22[m2] === e3) return l2[m2] === t3;
      if (l2[m2] === t3) return false;
    }
    if (s22.push(e3), l2.push(t3), c22 && "[object Array]" == g && e3.length !== t3.length) return false;
    var y, b = o2(e3, i2), v = o2(t3, i2);
    if (!c22) {
      for (var E = 0; E !== v.length; ++E) !n2(t3[y = v[E]]) && void 0 !== t3[y] || i2(e3, y) || b.push(y);
      for (E = 0; E !== b.length; ++E) !n2(e3[y = b[E]]) && void 0 !== e3[y] || i2(t3, y) || v.push(y);
    }
    var j = b.length;
    if (v.length !== j) return false;
    for (; j--; ) if (y = b[j], !(f2 = c22 ? i2(t3, y) && r2(e3[y], t3[y], s22, l2, u2, c22) : (i2(t3, y) || n2(e3[y]) || void 0 === e3[y]) && r2(e3[y], t3[y], s22, l2, u2, c22))) return false;
    return s22.pop(), l2.pop(), f2;
  }
  function o2(e3, t3) {
    var n3 = [];
    for (var r3 in e3) t3(e3, r3) && n3.push(r3);
    return n3.concat(Object.getOwnPropertySymbols(e3).filter(((t4) => Object.getOwnPropertyDescriptor(e3, t4).enumerable)));
  }
  function i2(e3, t3) {
    return Object.prototype.hasOwnProperty.call(e3, t3);
  }
  function s2(e3, t3) {
    return Object.prototype.toString.apply(t3) === "[object " + e3 + "]";
  }
  function a(e3) {
    return null !== e3 && "object" == typeof e3 && "number" == typeof e3.nodeType && "string" == typeof e3.nodeName && "function" == typeof e3.isEqualNode;
  }
  t2.equals = (e3, t3, n3, o3) => r2(e3, t3, [], [], n3 = n3 || [], o3);
  const l = "@@__IMMUTABLE_KEYED__@@", u = "@@__IMMUTABLE_SET__@@", c2 = "@@__IMMUTABLE_LIST__@@", f = "@@__IMMUTABLE_ORDERED__@@";
}, "./node_modules/@jest/expect-utils/build/utils.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.arrayBufferEquality = void 0, t2.emptyObject = function(e3) {
    return !(!e3 || "object" != typeof e3) && !Object.keys(e3).length;
  }, t2.typeEquality = t2.subsetEquality = t2.sparseArrayEquality = t2.pathAsArray = t2.partition = t2.iterableEquality = t2.isOneline = t2.isError = t2.getPath = t2.getObjectSubset = void 0;
  var r2 = n2("./node_modules/jest-get-type/build/index.js"), o2 = n2("./node_modules/@jest/expect-utils/build/jasmineUtils.js"), i2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const s2 = (e3, t3) => !(!e3 || "object" != typeof e3 || e3 === Object.prototype) && (Object.prototype.hasOwnProperty.call(e3, t3) || s2(Object.getPrototypeOf(e3), t3)), a = (e3, t3) => {
    if (Array.isArray(t3) || (t3 = m2(t3)), t3.length) {
      const n3 = 1 === t3.length, o3 = t3[0], i22 = e3[o3];
      if (!n3 && null == i22) return { hasEndProp: false, lastTraversedObject: e3, traversedPath: [] };
      const s22 = a(i22, t3.slice(1));
      return null === s22.lastTraversedObject && (s22.lastTraversedObject = e3), s22.traversedPath.unshift(o3), n3 && (s22.endPropIsDefined = !(0, r2.isPrimitive)(e3) && o3 in e3, s22.hasEndProp = void 0 !== i22 || s22.endPropIsDefined, s22.hasEndProp || s22.traversedPath.shift()), s22;
    }
    return { lastTraversedObject: null, traversedPath: [], value: e3 };
  };
  t2.getPath = a;
  const l = (e3, t3, n3 = /* @__PURE__ */ new WeakMap()) => {
    if (Array.isArray(e3)) {
      if (Array.isArray(t3) && t3.length === e3.length) return t3.map(((t4, n4) => l(e3[n4], t4)));
    } else {
      if (e3 instanceof Date) return e3;
      if (p(e3) && p(t3)) {
        if ((0, o2.equals)(e3, t3, [f, h])) return t3;
        const r3 = {};
        if (n3.set(e3, r3), Object.keys(e3).filter(((e4) => s2(t3, e4))).forEach(((o3) => {
          r3[o3] = n3.has(e3[o3]) ? n3.get(e3[o3]) : l(e3[o3], t3[o3], n3);
        })), Object.keys(r3).length > 0) return r3;
      }
    }
    return e3;
  };
  t2.getObjectSubset = l;
  const u = i2.iterator, c2 = (e3) => !(null == e3 || !e3[u]), f = (e3, t3, n3 = [], r3 = []) => {
    if ("object" != typeof e3 || "object" != typeof t3 || Array.isArray(e3) || Array.isArray(t3) || !c2(e3) || !c2(t3)) return;
    if (e3.constructor !== t3.constructor) return false;
    let i22 = n3.length;
    for (; i22--; ) if (n3[i22] === e3) return r3[i22] === t3;
    n3.push(e3), r3.push(t3);
    const s22 = (e4, t4) => f(e4, t4, [...n3], [...r3]);
    if (void 0 !== e3.size) {
      if (e3.size !== t3.size) return false;
      if ((0, o2.isA)("Set", e3) || (0, o2.isImmutableUnorderedSet)(e3)) {
        let i3 = true;
        for (const n4 of e3) if (!t3.has(n4)) {
          let e4 = false;
          for (const r4 of t3) {
            true === (0, o2.equals)(n4, r4, [s22]) && (e4 = true);
          }
          if (false === e4) {
            i3 = false;
            break;
          }
        }
        return n3.pop(), r3.pop(), i3;
      }
      if ((0, o2.isA)("Map", e3) || (0, o2.isImmutableUnorderedKeyed)(e3)) {
        let i3 = true;
        for (const n4 of e3) if (!t3.has(n4[0]) || !(0, o2.equals)(n4[1], t3.get(n4[0]), [s22])) {
          let e4 = false;
          for (const r4 of t3) {
            let t4 = false;
            true === (0, o2.equals)(n4[0], r4[0], [s22]) && (t4 = (0, o2.equals)(n4[1], r4[1], [s22])), true === t4 && (e4 = true);
          }
          if (false === e4) {
            i3 = false;
            break;
          }
        }
        return n3.pop(), r3.pop(), i3;
      }
    }
    const a2 = t3[u]();
    for (const t4 of e3) {
      const e4 = a2.next();
      if (e4.done || !(0, o2.equals)(t4, e4.value, [s22])) return false;
    }
    if (!a2.next().done) return false;
    if (!(0, o2.isImmutableList)(e3) && !(0, o2.isImmutableOrderedKeyed)(e3) && !(0, o2.isImmutableOrderedSet)(e3)) {
      const n4 = Object.entries(e3), r4 = Object.entries(t3);
      if (!(0, o2.equals)(n4, r4)) return false;
    }
    return n3.pop(), r3.pop(), true;
  };
  t2.iterableEquality = f;
  const p = (e3) => null !== e3 && "object" == typeof e3, d = (e3) => p(e3) && !(e3 instanceof Error) && !(e3 instanceof Array) && !(e3 instanceof Date), h = (e3, t3) => {
    const n3 = (e4 = /* @__PURE__ */ new WeakMap()) => (t4, r3) => {
      if (d(r3)) return Object.keys(r3).every(((i22) => {
        if (d(r3[i22])) {
          if (e4.has(r3[i22])) return (0, o2.equals)(t4[i22], r3[i22], [f]);
          e4.set(r3[i22], true);
        }
        const a2 = null != t4 && s2(t4, i22) && (0, o2.equals)(t4[i22], r3[i22], [f, n3(e4)]);
        return e4.delete(r3[i22]), a2;
      }));
    };
    return n3()(e3, t3);
  };
  t2.subsetEquality = h;
  const g = (e3, t3) => {
    if (null != e3 && null != t3 && e3.constructor !== t3.constructor) return false;
  };
  t2.typeEquality = g;
  t2.arrayBufferEquality = (e3, t3) => {
    if (!(e3 instanceof ArrayBuffer && t3 instanceof ArrayBuffer)) return;
    const n3 = new DataView(e3), r3 = new DataView(t3);
    if (n3.byteLength !== r3.byteLength) return false;
    for (let e4 = 0; e4 < n3.byteLength; e4++) if (n3.getUint8(e4) !== r3.getUint8(e4)) return false;
    return true;
  };
  t2.sparseArrayEquality = (e3, t3) => {
    if (!Array.isArray(e3) || !Array.isArray(t3)) return;
    const n3 = Object.keys(e3), r3 = Object.keys(t3);
    return (0, o2.equals)(e3, t3, [f, g], true) && (0, o2.equals)(n3, r3);
  };
  t2.partition = (e3, t3) => {
    const n3 = [[], []];
    return e3.forEach(((e4) => n3[t3(e4) ? 0 : 1].push(e4))), n3;
  };
  const m2 = (e3) => {
    const t3 = [];
    if ("" === e3) return t3.push(""), t3;
    const n3 = RegExp("[^.[\\]]+|(?=(?:\\.)(?:\\.|$))", "g");
    return "." === e3[0] && t3.push(""), e3.replace(n3, ((e4) => (t3.push(e4), e4))), t3;
  };
  t2.pathAsArray = m2;
  t2.isError = (e3) => {
    switch (Object.prototype.toString.call(e3)) {
      case "[object Error]":
      case "[object Exception]":
      case "[object DOMException]":
        return true;
      default:
        return e3 instanceof Error;
    }
  };
  const y = /[\r\n]/;
  t2.isOneline = (e3, t3) => !("string" != typeof e3 || "string" != typeof t3 || y.test(e3) && y.test(t3));
}, "./node_modules/ansi-regex/index.js": (e2) => {
  e2.exports = ({ onlyFirst: e3 = false } = {}) => {
    const t2 = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
    return new RegExp(t2, e3 ? void 0 : "g");
  };
}, "./node_modules/ansi-styles/index.js": (e2, t2, n2) => {
  e2 = n2.nmd(e2);
  const r2 = (e3, t3) => (...n3) => `\x1B[${e3(...n3) + t3}m`, o2 = (e3, t3) => (...n3) => {
    const r3 = e3(...n3);
    return `\x1B[${38 + t3};5;${r3}m`;
  }, i2 = (e3, t3) => (...n3) => {
    const r3 = e3(...n3);
    return `\x1B[${38 + t3};2;${r3[0]};${r3[1]};${r3[2]}m`;
  }, s2 = (e3) => e3, a = (e3, t3, n3) => [e3, t3, n3], l = (e3, t3, n3) => {
    Object.defineProperty(e3, t3, { get: () => {
      const r3 = n3();
      return Object.defineProperty(e3, t3, { value: r3, enumerable: true, configurable: true }), r3;
    }, enumerable: true, configurable: true });
  };
  let u;
  const c2 = (e3, t3, r3, o3) => {
    void 0 === u && (u = n2("./node_modules/color-convert/index.js"));
    const i22 = o3 ? 10 : 0, s22 = {};
    for (const [n3, o4] of Object.entries(u)) {
      const a2 = "ansi16" === n3 ? "ansi" : n3;
      n3 === t3 ? s22[a2] = e3(r3, i22) : "object" == typeof o4 && (s22[a2] = e3(o4[t3], i22));
    }
    return s22;
  };
  Object.defineProperty(e2, "exports", { enumerable: true, get: function() {
    const e3 = /* @__PURE__ */ new Map(), t3 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
    t3.color.gray = t3.color.blackBright, t3.bgColor.bgGray = t3.bgColor.bgBlackBright, t3.color.grey = t3.color.blackBright, t3.bgColor.bgGrey = t3.bgColor.bgBlackBright;
    for (const [n3, r3] of Object.entries(t3)) {
      for (const [n4, o3] of Object.entries(r3)) t3[n4] = { open: `\x1B[${o3[0]}m`, close: `\x1B[${o3[1]}m` }, r3[n4] = t3[n4], e3.set(o3[0], o3[1]);
      Object.defineProperty(t3, n3, { value: r3, enumerable: false });
    }
    return Object.defineProperty(t3, "codes", { value: e3, enumerable: false }), t3.color.close = "\x1B[39m", t3.bgColor.close = "\x1B[49m", l(t3.color, "ansi", (() => c2(r2, "ansi16", s2, false))), l(t3.color, "ansi256", (() => c2(o2, "ansi256", s2, false))), l(t3.color, "ansi16m", (() => c2(i2, "rgb", a, false))), l(t3.bgColor, "ansi", (() => c2(r2, "ansi16", s2, true))), l(t3.bgColor, "ansi256", (() => c2(o2, "ansi256", s2, true))), l(t3.bgColor, "ansi16m", (() => c2(i2, "rgb", a, true))), t3;
  } });
}, "./node_modules/assert/build/assert.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js"), o2 = n2("./node_modules/console-browserify/index.js");
  function i2(e3) {
    return i2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
      return typeof e4;
    } : function(e4) {
      return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
    }, i2(e3);
  }
  var s2, a, l = n2("./node_modules/assert/build/internal/errors.js").codes, u = l.ERR_AMBIGUOUS_ARGUMENT, c2 = l.ERR_INVALID_ARG_TYPE, f = l.ERR_INVALID_ARG_VALUE, p = l.ERR_INVALID_RETURN_VALUE, d = l.ERR_MISSING_ARGS, h = n2("./node_modules/assert/build/internal/assert/assertion_error.js"), g = n2("./node_modules/util/util.js").inspect, m2 = n2("./node_modules/util/util.js").types, y = m2.isPromise, b = m2.isRegExp, v = Object.assign ? Object.assign : n2("./node_modules/es6-object-assign/index.js").assign, E = Object.is ? Object.is : n2("./node_modules/object-is/index.js");
  function j() {
    var e3 = n2("./node_modules/assert/build/internal/util/comparisons.js");
    s2 = e3.isDeepEqual, a = e3.isDeepStrictEqual;
  }
  var _ = false, w = e2.exports = A, x = {};
  function O(e3) {
    if (e3.message instanceof Error) throw e3.message;
    throw new h(e3);
  }
  function R(e3, t3, n3, r3) {
    if (!n3) {
      var o3 = false;
      if (0 === t3) o3 = true, r3 = "No value argument passed to `assert.ok()`";
      else if (r3 instanceof Error) throw r3;
      var i22 = new h({ actual: n3, expected: true, message: r3, operator: "==", stackStartFn: e3 });
      throw i22.generatedMessage = o3, i22;
    }
  }
  function A() {
    for (var e3 = arguments.length, t3 = new Array(e3), n3 = 0; n3 < e3; n3++) t3[n3] = arguments[n3];
    R.apply(void 0, [A, t3.length].concat(t3));
  }
  w.fail = function e3(t3, n3, i22, s22, a2) {
    var l2, u2 = arguments.length;
    if (0 === u2) l2 = "Failed";
    else if (1 === u2) i22 = t3, t3 = void 0;
    else {
      if (false === _) _ = true, (r2.emitWarning ? r2.emitWarning : o2.warn.bind(o2))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
      2 === u2 && (s22 = "!=");
    }
    if (i22 instanceof Error) throw i22;
    var c22 = { actual: t3, expected: n3, operator: void 0 === s22 ? "fail" : s22, stackStartFn: a2 || e3 };
    void 0 !== i22 && (c22.message = i22);
    var f2 = new h(c22);
    throw l2 && (f2.message = l2, f2.generatedMessage = true), f2;
  }, w.AssertionError = h, w.ok = A, w.equal = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    t3 != n3 && O({ actual: t3, expected: n3, message: r3, operator: "==", stackStartFn: e3 });
  }, w.notEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    t3 == n3 && O({ actual: t3, expected: n3, message: r3, operator: "!=", stackStartFn: e3 });
  }, w.deepEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    void 0 === s2 && j(), s2(t3, n3) || O({ actual: t3, expected: n3, message: r3, operator: "deepEqual", stackStartFn: e3 });
  }, w.notDeepEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    void 0 === s2 && j(), s2(t3, n3) && O({ actual: t3, expected: n3, message: r3, operator: "notDeepEqual", stackStartFn: e3 });
  }, w.deepStrictEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    void 0 === s2 && j(), a(t3, n3) || O({ actual: t3, expected: n3, message: r3, operator: "deepStrictEqual", stackStartFn: e3 });
  }, w.notDeepStrictEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    void 0 === s2 && j();
    a(t3, n3) && O({ actual: t3, expected: n3, message: r3, operator: "notDeepStrictEqual", stackStartFn: e3 });
  }, w.strictEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    E(t3, n3) || O({ actual: t3, expected: n3, message: r3, operator: "strictEqual", stackStartFn: e3 });
  }, w.notStrictEqual = function e3(t3, n3, r3) {
    if (arguments.length < 2) throw new d("actual", "expected");
    E(t3, n3) && O({ actual: t3, expected: n3, message: r3, operator: "notStrictEqual", stackStartFn: e3 });
  };
  var S = function e3(t3, n3, r3) {
    var o3 = this;
    !(function(e4, t4) {
      if (!(e4 instanceof t4)) throw new TypeError("Cannot call a class as a function");
    })(this, e3), n3.forEach((function(e4) {
      e4 in t3 && (void 0 !== r3 && "string" == typeof r3[e4] && b(t3[e4]) && t3[e4].test(r3[e4]) ? o3[e4] = r3[e4] : o3[e4] = t3[e4]);
    }));
  };
  function C(e3, t3, n3, r3) {
    if ("function" != typeof t3) {
      if (b(t3)) return t3.test(e3);
      if (2 === arguments.length) throw new c2("expected", ["Function", "RegExp"], t3);
      if ("object" !== i2(e3) || null === e3) {
        var o3 = new h({ actual: e3, expected: t3, message: n3, operator: "deepStrictEqual", stackStartFn: r3 });
        throw o3.operator = r3.name, o3;
      }
      var l2 = Object.keys(t3);
      if (t3 instanceof Error) l2.push("name", "message");
      else if (0 === l2.length) throw new f("error", t3, "may not be an empty object");
      return void 0 === s2 && j(), l2.forEach((function(o4) {
        "string" == typeof e3[o4] && b(t3[o4]) && t3[o4].test(e3[o4]) || (function(e4, t4, n4, r4, o5, i22) {
          if (!(n4 in e4) || !a(e4[n4], t4[n4])) {
            if (!r4) {
              var s22 = new S(e4, o5), l3 = new S(t4, o5, e4), u2 = new h({ actual: s22, expected: l3, operator: "deepStrictEqual", stackStartFn: i22 });
              throw u2.actual = e4, u2.expected = t4, u2.operator = i22.name, u2;
            }
            O({ actual: e4, expected: t4, message: r4, operator: i22.name, stackStartFn: i22 });
          }
        })(e3, t3, o4, n3, l2, r3);
      })), true;
    }
    return void 0 !== t3.prototype && e3 instanceof t3 || !Error.isPrototypeOf(t3) && true === t3.call({}, e3);
  }
  function $(e3) {
    if ("function" != typeof e3) throw new c2("fn", "Function", e3);
    try {
      e3();
    } catch (e4) {
      return e4;
    }
    return x;
  }
  function T(e3) {
    return y(e3) || null !== e3 && "object" === i2(e3) && "function" == typeof e3.then && "function" == typeof e3.catch;
  }
  function M(e3) {
    return Promise.resolve().then((function() {
      var t3;
      if ("function" == typeof e3) {
        if (!T(t3 = e3())) throw new p("instance of Promise", "promiseFn", t3);
      } else {
        if (!T(e3)) throw new c2("promiseFn", ["Function", "Promise"], e3);
        t3 = e3;
      }
      return Promise.resolve().then((function() {
        return t3;
      })).then((function() {
        return x;
      })).catch((function(e4) {
        return e4;
      }));
    }));
  }
  function I(e3, t3, n3, r3) {
    if ("string" == typeof n3) {
      if (4 === arguments.length) throw new c2("error", ["Object", "Error", "Function", "RegExp"], n3);
      if ("object" === i2(t3) && null !== t3) {
        if (t3.message === n3) throw new u("error/message", 'The error message "'.concat(t3.message, '" is identical to the message.'));
      } else if (t3 === n3) throw new u("error/message", 'The error "'.concat(t3, '" is identical to the message.'));
      r3 = n3, n3 = void 0;
    } else if (null != n3 && "object" !== i2(n3) && "function" != typeof n3) throw new c2("error", ["Object", "Error", "Function", "RegExp"], n3);
    if (t3 === x) {
      var o3 = "";
      n3 && n3.name && (o3 += " (".concat(n3.name, ")")), o3 += r3 ? ": ".concat(r3) : ".";
      var s22 = "rejects" === e3.name ? "rejection" : "exception";
      O({ actual: void 0, expected: n3, operator: e3.name, message: "Missing expected ".concat(s22).concat(o3), stackStartFn: e3 });
    }
    if (n3 && !C(t3, n3, r3, e3)) throw t3;
  }
  function P(e3, t3, n3, r3) {
    if (t3 !== x) {
      if ("string" == typeof n3 && (r3 = n3, n3 = void 0), !n3 || C(t3, n3)) {
        var o3 = r3 ? ": ".concat(r3) : ".", i22 = "doesNotReject" === e3.name ? "rejection" : "exception";
        O({ actual: t3, expected: n3, operator: e3.name, message: "Got unwanted ".concat(i22).concat(o3, "\n") + 'Actual message: "'.concat(t3 && t3.message, '"'), stackStartFn: e3 });
      }
      throw t3;
    }
  }
  function k() {
    for (var e3 = arguments.length, t3 = new Array(e3), n3 = 0; n3 < e3; n3++) t3[n3] = arguments[n3];
    R.apply(void 0, [k, t3.length].concat(t3));
  }
  w.throws = function e3(t3) {
    for (var n3 = arguments.length, r3 = new Array(n3 > 1 ? n3 - 1 : 0), o3 = 1; o3 < n3; o3++) r3[o3 - 1] = arguments[o3];
    I.apply(void 0, [e3, $(t3)].concat(r3));
  }, w.rejects = function e3(t3) {
    for (var n3 = arguments.length, r3 = new Array(n3 > 1 ? n3 - 1 : 0), o3 = 1; o3 < n3; o3++) r3[o3 - 1] = arguments[o3];
    return M(t3).then((function(t4) {
      return I.apply(void 0, [e3, t4].concat(r3));
    }));
  }, w.doesNotThrow = function e3(t3) {
    for (var n3 = arguments.length, r3 = new Array(n3 > 1 ? n3 - 1 : 0), o3 = 1; o3 < n3; o3++) r3[o3 - 1] = arguments[o3];
    P.apply(void 0, [e3, $(t3)].concat(r3));
  }, w.doesNotReject = function e3(t3) {
    for (var n3 = arguments.length, r3 = new Array(n3 > 1 ? n3 - 1 : 0), o3 = 1; o3 < n3; o3++) r3[o3 - 1] = arguments[o3];
    return M(t3).then((function(t4) {
      return P.apply(void 0, [e3, t4].concat(r3));
    }));
  }, w.ifError = function e3(t3) {
    if (null != t3) {
      var n3 = "ifError got unwanted exception: ";
      "object" === i2(t3) && "string" == typeof t3.message ? 0 === t3.message.length && t3.constructor ? n3 += t3.constructor.name : n3 += t3.message : n3 += g(t3);
      var r3 = new h({ actual: t3, expected: null, operator: "ifError", message: n3, stackStartFn: e3 }), o3 = t3.stack;
      if ("string" == typeof o3) {
        var s22 = o3.split("\n");
        s22.shift();
        for (var a2 = r3.stack.split("\n"), l2 = 0; l2 < s22.length; l2++) {
          var u2 = a2.indexOf(s22[l2]);
          if (-1 !== u2) {
            a2 = a2.slice(0, u2);
            break;
          }
        }
        r3.stack = "".concat(a2.join("\n"), "\n").concat(s22.join("\n"));
      }
      throw r3;
    }
  }, w.strict = v(k, w, { equal: w.strictEqual, deepEqual: w.deepStrictEqual, notEqual: w.notStrictEqual, notDeepEqual: w.notDeepStrictEqual }), w.strict.strict = w.strict;
}, "./node_modules/assert/build/internal/assert/assertion_error.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  function o2(e3, t3, n3) {
    return t3 in e3 ? Object.defineProperty(e3, t3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t3] = n3, e3;
  }
  function i2(e3, t3) {
    for (var n3 = 0; n3 < t3.length; n3++) {
      var r3 = t3[n3];
      r3.enumerable = r3.enumerable || false, r3.configurable = true, "value" in r3 && (r3.writable = true), Object.defineProperty(e3, r3.key, r3);
    }
  }
  function s2(e3, t3) {
    return !t3 || "object" !== p(t3) && "function" != typeof t3 ? a(e3) : t3;
  }
  function a(e3) {
    if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e3;
  }
  function l(e3) {
    var t3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
    return l = function(e4) {
      if (null === e4 || (n3 = e4, -1 === Function.toString.call(n3).indexOf("[native code]"))) return e4;
      var n3;
      if ("function" != typeof e4) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== t3) {
        if (t3.has(e4)) return t3.get(e4);
        t3.set(e4, r3);
      }
      function r3() {
        return u(e4, arguments, f(this).constructor);
      }
      return r3.prototype = Object.create(e4.prototype, { constructor: { value: r3, enumerable: false, writable: true, configurable: true } }), c2(r3, e4);
    }, l(e3);
  }
  function u(e3, t3, n3) {
    return u = (function() {
      if ("undefined" == typeof Reflect || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if ("function" == typeof Proxy) return true;
      try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {
        }))), true;
      } catch (e4) {
        return false;
      }
    })() ? Reflect.construct : function(e4, t4, n4) {
      var r3 = [null];
      r3.push.apply(r3, t4);
      var o3 = new (Function.bind.apply(e4, r3))();
      return n4 && c2(o3, n4.prototype), o3;
    }, u.apply(null, arguments);
  }
  function c2(e3, t3) {
    return c2 = Object.setPrototypeOf || function(e4, t4) {
      return e4.__proto__ = t4, e4;
    }, c2(e3, t3);
  }
  function f(e3) {
    return f = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
      return e4.__proto__ || Object.getPrototypeOf(e4);
    }, f(e3);
  }
  function p(e3) {
    return p = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
      return typeof e4;
    } : function(e4) {
      return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
    }, p(e3);
  }
  var d = n2("./node_modules/util/util.js").inspect, h = n2("./node_modules/assert/build/internal/errors.js").codes.ERR_INVALID_ARG_TYPE;
  function g(e3, t3, n3) {
    return (void 0 === n3 || n3 > e3.length) && (n3 = e3.length), e3.substring(n3 - t3.length, n3) === t3;
  }
  var m2 = "", y = "", b = "", v = "", E = { deepStrictEqual: "Expected values to be strictly deep-equal:", strictEqual: "Expected values to be strictly equal:", strictEqualObject: 'Expected "actual" to be reference-equal to "expected":', deepEqual: "Expected values to be loosely deep-equal:", equal: "Expected values to be loosely equal:", notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:', notStrictEqual: 'Expected "actual" to be strictly unequal to:', notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":', notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:', notEqual: 'Expected "actual" to be loosely unequal to:', notIdentical: "Values identical but not reference-equal:" };
  function j(e3) {
    var t3 = Object.keys(e3), n3 = Object.create(Object.getPrototypeOf(e3));
    return t3.forEach((function(t4) {
      n3[t4] = e3[t4];
    })), Object.defineProperty(n3, "message", { value: e3.message }), n3;
  }
  function _(e3) {
    return d(e3, { compact: false, customInspect: false, depth: 1e3, maxArrayLength: 1 / 0, showHidden: false, breakLength: 1 / 0, showProxy: false, sorted: true, getters: true });
  }
  function w(e3, t3, n3) {
    var o3 = "", i22 = "", s22 = 0, a2 = "", l2 = false, u2 = _(e3), c22 = u2.split("\n"), f2 = _(t3).split("\n"), d2 = 0, h2 = "";
    if ("strictEqual" === n3 && "object" === p(e3) && "object" === p(t3) && null !== e3 && null !== t3 && (n3 = "strictEqualObject"), 1 === c22.length && 1 === f2.length && c22[0] !== f2[0]) {
      var j2 = c22[0].length + f2[0].length;
      if (j2 <= 10) {
        if (!("object" === p(e3) && null !== e3 || "object" === p(t3) && null !== t3 || 0 === e3 && 0 === t3)) return "".concat(E[n3], "\n\n") + "".concat(c22[0], " !== ").concat(f2[0], "\n");
      } else if ("strictEqualObject" !== n3) {
        if (j2 < (r2.stderr && r2.stderr.isTTY ? r2.stderr.columns : 80)) {
          for (; c22[0][d2] === f2[0][d2]; ) d2++;
          d2 > 2 && (h2 = "\n  ".concat((function(e4, t4) {
            if (t4 = Math.floor(t4), 0 == e4.length || 0 == t4) return "";
            var n4 = e4.length * t4;
            for (t4 = Math.floor(Math.log(t4) / Math.log(2)); t4; ) e4 += e4, t4--;
            return e4 + e4.substring(0, n4 - e4.length);
          })(" ", d2), "^"), d2 = 0);
        }
      }
    }
    for (var w2 = c22[c22.length - 1], x2 = f2[f2.length - 1]; w2 === x2 && (d2++ < 2 ? a2 = "\n  ".concat(w2).concat(a2) : o3 = w2, c22.pop(), f2.pop(), 0 !== c22.length && 0 !== f2.length); ) w2 = c22[c22.length - 1], x2 = f2[f2.length - 1];
    var O = Math.max(c22.length, f2.length);
    if (0 === O) {
      var R = u2.split("\n");
      if (R.length > 30) for (R[26] = "".concat(m2, "...").concat(v); R.length > 27; ) R.pop();
      return "".concat(E.notIdentical, "\n\n").concat(R.join("\n"), "\n");
    }
    d2 > 3 && (a2 = "\n".concat(m2, "...").concat(v).concat(a2), l2 = true), "" !== o3 && (a2 = "\n  ".concat(o3).concat(a2), o3 = "");
    var A = 0, S = E[n3] + "\n".concat(y, "+ actual").concat(v, " ").concat(b, "- expected").concat(v), C = " ".concat(m2, "...").concat(v, " Lines skipped");
    for (d2 = 0; d2 < O; d2++) {
      var $ = d2 - s22;
      if (c22.length < d2 + 1) $ > 1 && d2 > 2 && ($ > 4 ? (i22 += "\n".concat(m2, "...").concat(v), l2 = true) : $ > 3 && (i22 += "\n  ".concat(f2[d2 - 2]), A++), i22 += "\n  ".concat(f2[d2 - 1]), A++), s22 = d2, o3 += "\n".concat(b, "-").concat(v, " ").concat(f2[d2]), A++;
      else if (f2.length < d2 + 1) $ > 1 && d2 > 2 && ($ > 4 ? (i22 += "\n".concat(m2, "...").concat(v), l2 = true) : $ > 3 && (i22 += "\n  ".concat(c22[d2 - 2]), A++), i22 += "\n  ".concat(c22[d2 - 1]), A++), s22 = d2, i22 += "\n".concat(y, "+").concat(v, " ").concat(c22[d2]), A++;
      else {
        var T = f2[d2], M = c22[d2], I = M !== T && (!g(M, ",") || M.slice(0, -1) !== T);
        I && g(T, ",") && T.slice(0, -1) === M && (I = false, M += ","), I ? ($ > 1 && d2 > 2 && ($ > 4 ? (i22 += "\n".concat(m2, "...").concat(v), l2 = true) : $ > 3 && (i22 += "\n  ".concat(c22[d2 - 2]), A++), i22 += "\n  ".concat(c22[d2 - 1]), A++), s22 = d2, i22 += "\n".concat(y, "+").concat(v, " ").concat(M), o3 += "\n".concat(b, "-").concat(v, " ").concat(T), A += 2) : (i22 += o3, o3 = "", 1 !== $ && 0 !== d2 || (i22 += "\n  ".concat(M), A++));
      }
      if (A > 20 && d2 < O - 2) return "".concat(S).concat(C, "\n").concat(i22, "\n").concat(m2, "...").concat(v).concat(o3, "\n") + "".concat(m2, "...").concat(v);
    }
    return "".concat(S).concat(l2 ? C : "", "\n").concat(i22).concat(o3).concat(a2).concat(h2);
  }
  var x = (function(e3) {
    function t3(e4) {
      var n4;
      if ((function(e5, t4) {
        if (!(e5 instanceof t4)) throw new TypeError("Cannot call a class as a function");
      })(this, t3), "object" !== p(e4) || null === e4) throw new h("options", "Object", e4);
      var o3 = e4.message, i22 = e4.operator, l3 = e4.stackStartFn, u3 = e4.actual, c22 = e4.expected, d2 = Error.stackTraceLimit;
      if (Error.stackTraceLimit = 0, null != o3) n4 = s2(this, f(t3).call(this, String(o3)));
      else if (r2.stderr && r2.stderr.isTTY && (r2.stderr && r2.stderr.getColorDepth && 1 !== r2.stderr.getColorDepth() ? (m2 = "\x1B[34m", y = "\x1B[32m", v = "\x1B[39m", b = "\x1B[31m") : (m2 = "", y = "", v = "", b = "")), "object" === p(u3) && null !== u3 && "object" === p(c22) && null !== c22 && "stack" in u3 && u3 instanceof Error && "stack" in c22 && c22 instanceof Error && (u3 = j(u3), c22 = j(c22)), "deepStrictEqual" === i22 || "strictEqual" === i22) n4 = s2(this, f(t3).call(this, w(u3, c22, i22)));
      else if ("notDeepStrictEqual" === i22 || "notStrictEqual" === i22) {
        var g2 = E[i22], x2 = _(u3).split("\n");
        if ("notStrictEqual" === i22 && "object" === p(u3) && null !== u3 && (g2 = E.notStrictEqualObject), x2.length > 30) for (x2[26] = "".concat(m2, "...").concat(v); x2.length > 27; ) x2.pop();
        n4 = 1 === x2.length ? s2(this, f(t3).call(this, "".concat(g2, " ").concat(x2[0]))) : s2(this, f(t3).call(this, "".concat(g2, "\n\n").concat(x2.join("\n"), "\n")));
      } else {
        var O = _(u3), R = "", A = E[i22];
        "notDeepEqual" === i22 || "notEqual" === i22 ? (O = "".concat(E[i22], "\n\n").concat(O)).length > 1024 && (O = "".concat(O.slice(0, 1021), "...")) : (R = "".concat(_(c22)), O.length > 512 && (O = "".concat(O.slice(0, 509), "...")), R.length > 512 && (R = "".concat(R.slice(0, 509), "...")), "deepEqual" === i22 || "equal" === i22 ? O = "".concat(A, "\n\n").concat(O, "\n\nshould equal\n\n") : R = " ".concat(i22, " ").concat(R)), n4 = s2(this, f(t3).call(this, "".concat(O).concat(R)));
      }
      return Error.stackTraceLimit = d2, n4.generatedMessage = !o3, Object.defineProperty(a(n4), "name", { value: "AssertionError [ERR_ASSERTION]", enumerable: false, writable: true, configurable: true }), n4.code = "ERR_ASSERTION", n4.actual = u3, n4.expected = c22, n4.operator = i22, Error.captureStackTrace && Error.captureStackTrace(a(n4), l3), n4.stack, n4.name = "AssertionError", s2(n4);
    }
    var n3, l2;
    return (function(e4, t4) {
      if ("function" != typeof t4 && null !== t4) throw new TypeError("Super expression must either be null or a function");
      e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, writable: true, configurable: true } }), t4 && c2(e4, t4);
    })(t3, e3), n3 = t3, l2 = [{ key: "toString", value: function() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    } }, { key: d.custom, value: function(e4, t4) {
      return d(this, (function(e5) {
        for (var t5 = 1; t5 < arguments.length; t5++) {
          var n4 = null != arguments[t5] ? arguments[t5] : {}, r3 = Object.keys(n4);
          "function" == typeof Object.getOwnPropertySymbols && (r3 = r3.concat(Object.getOwnPropertySymbols(n4).filter((function(e6) {
            return Object.getOwnPropertyDescriptor(n4, e6).enumerable;
          })))), r3.forEach((function(t6) {
            o2(e5, t6, n4[t6]);
          }));
        }
        return e5;
      })({}, t4, { customInspect: false, depth: 0 }));
    } }], l2 && i2(n3.prototype, l2), t3;
  })(l(Error));
  e2.exports = x;
}, "./node_modules/assert/build/internal/errors.js": (e2, t2, n2) => {
  function r2(e3) {
    return r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
      return typeof e4;
    } : function(e4) {
      return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
    }, r2(e3);
  }
  function o2(e3, t3) {
    return !t3 || "object" !== r2(t3) && "function" != typeof t3 ? (function(e4) {
      if (void 0 === e4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e4;
    })(e3) : t3;
  }
  function i2(e3) {
    return i2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
      return e4.__proto__ || Object.getPrototypeOf(e4);
    }, i2(e3);
  }
  function s2(e3, t3) {
    return s2 = Object.setPrototypeOf || function(e4, t4) {
      return e4.__proto__ = t4, e4;
    }, s2(e3, t3);
  }
  var a, l, u = {};
  function c2(e3, t3, n3) {
    n3 || (n3 = Error);
    var r3 = (function(n4) {
      function r4(n5, s22, a2) {
        var l2;
        return (function(e4, t4) {
          if (!(e4 instanceof t4)) throw new TypeError("Cannot call a class as a function");
        })(this, r4), l2 = o2(this, i2(r4).call(this, (function(e4, n6, r5) {
          return "string" == typeof t3 ? t3 : t3(e4, n6, r5);
        })(n5, s22, a2))), l2.code = e3, l2;
      }
      return (function(e4, t4) {
        if ("function" != typeof t4 && null !== t4) throw new TypeError("Super expression must either be null or a function");
        e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, writable: true, configurable: true } }), t4 && s2(e4, t4);
      })(r4, n4), r4;
    })(n3);
    u[e3] = r3;
  }
  function f(e3, t3) {
    if (Array.isArray(e3)) {
      var n3 = e3.length;
      return e3 = e3.map((function(e4) {
        return String(e4);
      })), n3 > 2 ? "one of ".concat(t3, " ").concat(e3.slice(0, n3 - 1).join(", "), ", or ") + e3[n3 - 1] : 2 === n3 ? "one of ".concat(t3, " ").concat(e3[0], " or ").concat(e3[1]) : "of ".concat(t3, " ").concat(e3[0]);
    }
    return "of ".concat(t3, " ").concat(String(e3));
  }
  c2("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), c2("ERR_INVALID_ARG_TYPE", (function(e3, t3, o3) {
    var i22, s22, u2;
    if (void 0 === a && (a = n2("./node_modules/assert/build/assert.js")), a("string" == typeof e3, "'name' must be a string"), "string" == typeof t3 && (s22 = "not ", t3.substr(0, s22.length) === s22) ? (i22 = "must not be", t3 = t3.replace(/^not /, "")) : i22 = "must be", (function(e4, t4, n3) {
      return (void 0 === n3 || n3 > e4.length) && (n3 = e4.length), e4.substring(n3 - t4.length, n3) === t4;
    })(e3, " argument")) u2 = "The ".concat(e3, " ").concat(i22, " ").concat(f(t3, "type"));
    else {
      var c22 = (function(e4, t4, n3) {
        return "number" != typeof n3 && (n3 = 0), !(n3 + t4.length > e4.length) && -1 !== e4.indexOf(t4, n3);
      })(e3, ".") ? "property" : "argument";
      u2 = 'The "'.concat(e3, '" ').concat(c22, " ").concat(i22, " ").concat(f(t3, "type"));
    }
    return u2 += ". Received type ".concat(r2(o3));
  }), TypeError), c2("ERR_INVALID_ARG_VALUE", (function(e3, t3) {
    var r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
    void 0 === l && (l = n2("./node_modules/util/util.js"));
    var o3 = l.inspect(t3);
    return o3.length > 128 && (o3 = "".concat(o3.slice(0, 128), "...")), "The argument '".concat(e3, "' ").concat(r3, ". Received ").concat(o3);
  }), TypeError), c2("ERR_INVALID_RETURN_VALUE", (function(e3, t3, n3) {
    var o3;
    return o3 = n3 && n3.constructor && n3.constructor.name ? "instance of ".concat(n3.constructor.name) : "type ".concat(r2(n3)), "Expected ".concat(e3, ' to be returned from the "').concat(t3, '"') + " function but got ".concat(o3, ".");
  }), TypeError), c2("ERR_MISSING_ARGS", (function() {
    for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
    void 0 === a && (a = n2("./node_modules/assert/build/assert.js")), a(t3.length > 0, "At least one arg needs to be specified");
    var o3 = "The ", i22 = t3.length;
    switch (t3 = t3.map((function(e4) {
      return '"'.concat(e4, '"');
    })), i22) {
      case 1:
        o3 += "".concat(t3[0], " argument");
        break;
      case 2:
        o3 += "".concat(t3[0], " and ").concat(t3[1], " arguments");
        break;
      default:
        o3 += t3.slice(0, i22 - 1).join(", "), o3 += ", and ".concat(t3[i22 - 1], " arguments");
    }
    return "".concat(o3, " must be specified");
  }), TypeError), e2.exports.codes = u;
}, "./node_modules/assert/build/internal/util/comparisons.js": (e2, t2, n2) => {
  function r2(e3, t3) {
    return (function(e4) {
      if (Array.isArray(e4)) return e4;
    })(e3) || (function(e4, t4) {
      var n3 = [], r3 = true, o3 = false, i22 = void 0;
      try {
        for (var s22, a2 = e4[Symbol.iterator](); !(r3 = (s22 = a2.next()).done) && (n3.push(s22.value), !t4 || n3.length !== t4); r3 = true) ;
      } catch (e5) {
        o3 = true, i22 = e5;
      } finally {
        try {
          r3 || null == a2.return || a2.return();
        } finally {
          if (o3) throw i22;
        }
      }
      return n3;
    })(e3, t3) || (function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    })();
  }
  function o2(e3) {
    return o2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
      return typeof e4;
    } : function(e4) {
      return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
    }, o2(e3);
  }
  var i2 = void 0 !== /a/g.flags, s2 = function(e3) {
    var t3 = [];
    return e3.forEach((function(e4) {
      return t3.push(e4);
    })), t3;
  }, a = function(e3) {
    var t3 = [];
    return e3.forEach((function(e4, n3) {
      return t3.push([n3, e4]);
    })), t3;
  }, l = Object.is ? Object.is : n2("./node_modules/object-is/index.js"), u = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
  }, c2 = Number.isNaN ? Number.isNaN : n2("./node_modules/is-nan/index.js");
  function f(e3) {
    return e3.call.bind(e3);
  }
  var p = f(Object.prototype.hasOwnProperty), d = f(Object.prototype.propertyIsEnumerable), h = f(Object.prototype.toString), g = n2("./node_modules/util/util.js").types, m2 = g.isAnyArrayBuffer, y = g.isArrayBufferView, b = g.isDate, v = g.isMap, E = g.isRegExp, j = g.isSet, _ = g.isNativeError, w = g.isBoxedPrimitive, x = g.isNumberObject, O = g.isStringObject, R = g.isBooleanObject, A = g.isBigIntObject, S = g.isSymbolObject, C = g.isFloat32Array, $ = g.isFloat64Array;
  function T(e3) {
    if (0 === e3.length || e3.length > 10) return true;
    for (var t3 = 0; t3 < e3.length; t3++) {
      var n3 = e3.charCodeAt(t3);
      if (n3 < 48 || n3 > 57) return true;
    }
    return 10 === e3.length && e3 >= Math.pow(2, 32);
  }
  function M(e3) {
    return Object.keys(e3).filter(T).concat(u(e3).filter(Object.prototype.propertyIsEnumerable.bind(e3)));
  }
  function I(e3, t3) {
    if (e3 === t3) return 0;
    for (var n3 = e3.length, r3 = t3.length, o3 = 0, i22 = Math.min(n3, r3); o3 < i22; ++o3) if (e3[o3] !== t3[o3]) {
      n3 = e3[o3], r3 = t3[o3];
      break;
    }
    return n3 < r3 ? -1 : r3 < n3 ? 1 : 0;
  }
  var P = 0, k = 1, N = 2, L = 3;
  function D(e3, t3, n3, r3) {
    if (e3 === t3) return 0 !== e3 || (!n3 || l(e3, t3));
    if (n3) {
      if ("object" !== o2(e3)) return "number" == typeof e3 && c2(e3) && c2(t3);
      if ("object" !== o2(t3) || null === e3 || null === t3) return false;
      if (Object.getPrototypeOf(e3) !== Object.getPrototypeOf(t3)) return false;
    } else {
      if (null === e3 || "object" !== o2(e3)) return (null === t3 || "object" !== o2(t3)) && e3 == t3;
      if (null === t3 || "object" !== o2(t3)) return false;
    }
    var s22, a2, u2, f2, p2 = h(e3);
    if (p2 !== h(t3)) return false;
    if (Array.isArray(e3)) {
      if (e3.length !== t3.length) return false;
      var d2 = M(e3), g2 = M(t3);
      return d2.length === g2.length && U(e3, t3, n3, r3, k, d2);
    }
    if ("[object Object]" === p2 && (!v(e3) && v(t3) || !j(e3) && j(t3))) return false;
    if (b(e3)) {
      if (!b(t3) || Date.prototype.getTime.call(e3) !== Date.prototype.getTime.call(t3)) return false;
    } else if (E(e3)) {
      if (!E(t3) || (u2 = e3, f2 = t3, !(i2 ? u2.source === f2.source && u2.flags === f2.flags : RegExp.prototype.toString.call(u2) === RegExp.prototype.toString.call(f2)))) return false;
    } else if (_(e3) || e3 instanceof Error) {
      if (e3.message !== t3.message || e3.name !== t3.name) return false;
    } else {
      if (y(e3)) {
        if (n3 || !C(e3) && !$(e3)) {
          if (!(function(e4, t4) {
            return e4.byteLength === t4.byteLength && 0 === I(new Uint8Array(e4.buffer, e4.byteOffset, e4.byteLength), new Uint8Array(t4.buffer, t4.byteOffset, t4.byteLength));
          })(e3, t3)) return false;
        } else if (!(function(e4, t4) {
          if (e4.byteLength !== t4.byteLength) return false;
          for (var n4 = 0; n4 < e4.byteLength; n4++) if (e4[n4] !== t4[n4]) return false;
          return true;
        })(e3, t3)) return false;
        var T2 = M(e3), D2 = M(t3);
        return T2.length === D2.length && U(e3, t3, n3, r3, P, T2);
      }
      if (j(e3)) return !(!j(t3) || e3.size !== t3.size) && U(e3, t3, n3, r3, N);
      if (v(e3)) return !(!v(t3) || e3.size !== t3.size) && U(e3, t3, n3, r3, L);
      if (m2(e3)) {
        if (a2 = t3, (s22 = e3).byteLength !== a2.byteLength || 0 !== I(new Uint8Array(s22), new Uint8Array(a2))) return false;
      } else if (w(e3) && !(function(e4, t4) {
        return x(e4) ? x(t4) && l(Number.prototype.valueOf.call(e4), Number.prototype.valueOf.call(t4)) : O(e4) ? O(t4) && String.prototype.valueOf.call(e4) === String.prototype.valueOf.call(t4) : R(e4) ? R(t4) && Boolean.prototype.valueOf.call(e4) === Boolean.prototype.valueOf.call(t4) : A(e4) ? A(t4) && BigInt.prototype.valueOf.call(e4) === BigInt.prototype.valueOf.call(t4) : S(t4) && Symbol.prototype.valueOf.call(e4) === Symbol.prototype.valueOf.call(t4);
      })(e3, t3)) return false;
    }
    return U(e3, t3, n3, r3, P);
  }
  function B(e3, t3) {
    return t3.filter((function(t4) {
      return d(e3, t4);
    }));
  }
  function U(e3, t3, n3, i22, l2, c22) {
    if (5 === arguments.length) {
      c22 = Object.keys(e3);
      var f2 = Object.keys(t3);
      if (c22.length !== f2.length) return false;
    }
    for (var h2 = 0; h2 < c22.length; h2++) if (!p(t3, c22[h2])) return false;
    if (n3 && 5 === arguments.length) {
      var g2 = u(e3);
      if (0 !== g2.length) {
        var m22 = 0;
        for (h2 = 0; h2 < g2.length; h2++) {
          var y2 = g2[h2];
          if (d(e3, y2)) {
            if (!d(t3, y2)) return false;
            c22.push(y2), m22++;
          } else if (d(t3, y2)) return false;
        }
        var b2 = u(t3);
        if (g2.length !== b2.length && B(t3, b2).length !== m22) return false;
      } else {
        var v2 = u(t3);
        if (0 !== v2.length && 0 !== B(t3, v2).length) return false;
      }
    }
    if (0 === c22.length && (l2 === P || l2 === k && 0 === e3.length || 0 === e3.size)) return true;
    if (void 0 === i22) i22 = { val1: /* @__PURE__ */ new Map(), val2: /* @__PURE__ */ new Map(), position: 0 };
    else {
      var E2 = i22.val1.get(e3);
      if (void 0 !== E2) {
        var j2 = i22.val2.get(t3);
        if (void 0 !== j2) return E2 === j2;
      }
      i22.position++;
    }
    i22.val1.set(e3, i22.position), i22.val2.set(t3, i22.position);
    var _2 = (function(e4, t4, n4, i3, l3, u2) {
      var c3 = 0;
      if (u2 === N) {
        if (!(function(e5, t5, n5, r3) {
          for (var i4 = null, a2 = s2(e5), l4 = 0; l4 < a2.length; l4++) {
            var u3 = a2[l4];
            if ("object" === o2(u3) && null !== u3) null === i4 && (i4 = /* @__PURE__ */ new Set()), i4.add(u3);
            else if (!t5.has(u3)) {
              if (n5) return false;
              if (!q(e5, t5, u3)) return false;
              null === i4 && (i4 = /* @__PURE__ */ new Set()), i4.add(u3);
            }
          }
          if (null !== i4) {
            for (var c4 = s2(t5), f4 = 0; f4 < c4.length; f4++) {
              var p2 = c4[f4];
              if ("object" === o2(p2) && null !== p2) {
                if (!F(i4, p2, n5, r3)) return false;
              } else if (!n5 && !e5.has(p2) && !F(i4, p2, n5, r3)) return false;
            }
            return 0 === i4.size;
          }
          return true;
        })(e4, t4, n4, l3)) return false;
      } else if (u2 === L) {
        if (!(function(e5, t5, n5, i4) {
          for (var s22 = null, l4 = a(e5), u3 = 0; u3 < l4.length; u3++) {
            var c4 = r2(l4[u3], 2), f4 = c4[0], p2 = c4[1];
            if ("object" === o2(f4) && null !== f4) null === s22 && (s22 = /* @__PURE__ */ new Set()), s22.add(f4);
            else {
              var d3 = t5.get(f4);
              if (void 0 === d3 && !t5.has(f4) || !D(p2, d3, n5, i4)) {
                if (n5) return false;
                if (!W(e5, t5, f4, p2, i4)) return false;
                null === s22 && (s22 = /* @__PURE__ */ new Set()), s22.add(f4);
              }
            }
          }
          if (null !== s22) {
            for (var h4 = a(t5), g3 = 0; g3 < h4.length; g3++) {
              var m3 = r2(h4[g3], 2), y3 = (f4 = m3[0], m3[1]);
              if ("object" === o2(f4) && null !== f4) {
                if (!G(s22, e5, f4, y3, n5, i4)) return false;
              } else if (!(n5 || e5.has(f4) && D(e5.get(f4), y3, false, i4) || G(s22, e5, f4, y3, false, i4))) return false;
            }
            return 0 === s22.size;
          }
          return true;
        })(e4, t4, n4, l3)) return false;
      } else if (u2 === k) for (; c3 < e4.length; c3++) {
        if (!p(e4, c3)) {
          if (p(t4, c3)) return false;
          for (var f3 = Object.keys(e4); c3 < f3.length; c3++) {
            var d2 = f3[c3];
            if (!p(t4, d2) || !D(e4[d2], t4[d2], n4, l3)) return false;
          }
          return f3.length === Object.keys(t4).length;
        }
        if (!p(t4, c3) || !D(e4[c3], t4[c3], n4, l3)) return false;
      }
      for (c3 = 0; c3 < i3.length; c3++) {
        var h3 = i3[c3];
        if (!D(e4[h3], t4[h3], n4, l3)) return false;
      }
      return true;
    })(e3, t3, n3, c22, i22, l2);
    return i22.val1.delete(e3), i22.val2.delete(t3), _2;
  }
  function F(e3, t3, n3, r3) {
    for (var o3 = s2(e3), i22 = 0; i22 < o3.length; i22++) {
      var a2 = o3[i22];
      if (D(t3, a2, n3, r3)) return e3.delete(a2), true;
    }
    return false;
  }
  function H(e3) {
    switch (o2(e3)) {
      case "undefined":
        return null;
      case "object":
        return;
      case "symbol":
        return false;
      case "string":
        e3 = +e3;
      case "number":
        if (c2(e3)) return false;
    }
    return true;
  }
  function q(e3, t3, n3) {
    var r3 = H(n3);
    return null != r3 ? r3 : t3.has(r3) && !e3.has(r3);
  }
  function W(e3, t3, n3, r3, o3) {
    var i22 = H(n3);
    if (null != i22) return i22;
    var s22 = t3.get(i22);
    return !(void 0 === s22 && !t3.has(i22) || !D(r3, s22, false, o3)) && (!e3.has(i22) && D(r3, s22, false, o3));
  }
  function G(e3, t3, n3, r3, o3, i22) {
    for (var a2 = s2(e3), l2 = 0; l2 < a2.length; l2++) {
      var u2 = a2[l2];
      if (D(n3, u2, o3, i22) && D(r3, t3.get(u2), o3, i22)) return e3.delete(u2), true;
    }
    return false;
  }
  e2.exports = { isDeepEqual: function(e3, t3) {
    return D(e3, t3, false);
  }, isDeepStrictEqual: function(e3, t3) {
    return D(e3, t3, true);
  } };
}, "./node_modules/base64-js/index.js": (e2, t2) => {
  t2.byteLength = function(e3) {
    var t3 = l(e3), n3 = t3[0], r3 = t3[1];
    return 3 * (n3 + r3) / 4 - r3;
  }, t2.toByteArray = function(e3) {
    var t3, n3, i22 = l(e3), s22 = i22[0], a2 = i22[1], u2 = new o2((function(e4, t4, n4) {
      return 3 * (t4 + n4) / 4 - n4;
    })(0, s22, a2)), c2 = 0, f = a2 > 0 ? s22 - 4 : s22;
    for (n3 = 0; n3 < f; n3 += 4) t3 = r2[e3.charCodeAt(n3)] << 18 | r2[e3.charCodeAt(n3 + 1)] << 12 | r2[e3.charCodeAt(n3 + 2)] << 6 | r2[e3.charCodeAt(n3 + 3)], u2[c2++] = t3 >> 16 & 255, u2[c2++] = t3 >> 8 & 255, u2[c2++] = 255 & t3;
    2 === a2 && (t3 = r2[e3.charCodeAt(n3)] << 2 | r2[e3.charCodeAt(n3 + 1)] >> 4, u2[c2++] = 255 & t3);
    1 === a2 && (t3 = r2[e3.charCodeAt(n3)] << 10 | r2[e3.charCodeAt(n3 + 1)] << 4 | r2[e3.charCodeAt(n3 + 2)] >> 2, u2[c2++] = t3 >> 8 & 255, u2[c2++] = 255 & t3);
    return u2;
  }, t2.fromByteArray = function(e3) {
    for (var t3, r3 = e3.length, o3 = r3 % 3, i22 = [], s22 = 16383, a2 = 0, l2 = r3 - o3; a2 < l2; a2 += s22) i22.push(u(e3, a2, a2 + s22 > l2 ? l2 : a2 + s22));
    1 === o3 ? (t3 = e3[r3 - 1], i22.push(n2[t3 >> 2] + n2[t3 << 4 & 63] + "==")) : 2 === o3 && (t3 = (e3[r3 - 2] << 8) + e3[r3 - 1], i22.push(n2[t3 >> 10] + n2[t3 >> 4 & 63] + n2[t3 << 2 & 63] + "="));
    return i22.join("");
  };
  for (var n2 = [], r2 = [], o2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, i2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s2 = 0, a = i2.length; s2 < a; ++s2) n2[s2] = i2[s2], r2[i2.charCodeAt(s2)] = s2;
  function l(e3) {
    var t3 = e3.length;
    if (t3 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    var n3 = e3.indexOf("=");
    return -1 === n3 && (n3 = t3), [n3, n3 === t3 ? 0 : 4 - n3 % 4];
  }
  function u(e3, t3, r3) {
    for (var o3, i22, s22 = [], a2 = t3; a2 < r3; a2 += 3) o3 = (e3[a2] << 16 & 16711680) + (e3[a2 + 1] << 8 & 65280) + (255 & e3[a2 + 2]), s22.push(n2[(i22 = o3) >> 18 & 63] + n2[i22 >> 12 & 63] + n2[i22 >> 6 & 63] + n2[63 & i22]);
    return s22.join("");
  }
  r2["-".charCodeAt(0)] = 62, r2["_".charCodeAt(0)] = 63;
}, "./node_modules/braces/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/braces/lib/stringify.js"), o2 = n2("./node_modules/braces/lib/compile.js"), i2 = n2("./node_modules/braces/lib/expand.js"), s2 = n2("./node_modules/braces/lib/parse.js"), a = (e3, t3 = {}) => {
    let n3 = [];
    if (Array.isArray(e3)) for (let r3 of e3) {
      let e4 = a.create(r3, t3);
      Array.isArray(e4) ? n3.push(...e4) : n3.push(e4);
    }
    else n3 = [].concat(a.create(e3, t3));
    return t3 && true === t3.expand && true === t3.nodupes && (n3 = [...new Set(n3)]), n3;
  };
  a.parse = (e3, t3 = {}) => s2(e3, t3), a.stringify = (e3, t3 = {}) => r2("string" == typeof e3 ? a.parse(e3, t3) : e3, t3), a.compile = (e3, t3 = {}) => ("string" == typeof e3 && (e3 = a.parse(e3, t3)), o2(e3, t3)), a.expand = (e3, t3 = {}) => {
    "string" == typeof e3 && (e3 = a.parse(e3, t3));
    let n3 = i2(e3, t3);
    return true === t3.noempty && (n3 = n3.filter(Boolean)), true === t3.nodupes && (n3 = [...new Set(n3)]), n3;
  }, a.create = (e3, t3 = {}) => "" === e3 || e3.length < 3 ? [e3] : true !== t3.expand ? a.compile(e3, t3) : a.expand(e3, t3), e2.exports = a;
}, "./node_modules/braces/lib/compile.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/fill-range/index.js"), o2 = n2("./node_modules/braces/lib/utils.js");
  e2.exports = (e3, t3 = {}) => {
    let n3 = (e4, i2 = {}) => {
      let s2 = o2.isInvalidBrace(i2), a = true === e4.invalid && true === t3.escapeInvalid, l = true === s2 || true === a, u = true === t3.escapeInvalid ? "\\" : "", c2 = "";
      if (true === e4.isOpen) return u + e4.value;
      if (true === e4.isClose) return u + e4.value;
      if ("open" === e4.type) return l ? u + e4.value : "(";
      if ("close" === e4.type) return l ? u + e4.value : ")";
      if ("comma" === e4.type) return "comma" === e4.prev.type ? "" : l ? e4.value : "|";
      if (e4.value) return e4.value;
      if (e4.nodes && e4.ranges > 0) {
        let n4 = o2.reduce(e4.nodes), i22 = r2(...n4, { ...t3, wrap: false, toRegex: true });
        if (0 !== i22.length) return n4.length > 1 && i22.length > 1 ? `(${i22})` : i22;
      }
      if (e4.nodes) for (let t4 of e4.nodes) c2 += n3(t4, e4);
      return c2;
    };
    return n3(e3);
  };
}, "./node_modules/braces/lib/constants.js": (e2) => {
  e2.exports = { MAX_LENGTH: 65536, CHAR_0: "0", CHAR_9: "9", CHAR_UPPERCASE_A: "A", CHAR_LOWERCASE_A: "a", CHAR_UPPERCASE_Z: "Z", CHAR_LOWERCASE_Z: "z", CHAR_LEFT_PARENTHESES: "(", CHAR_RIGHT_PARENTHESES: ")", CHAR_ASTERISK: "*", CHAR_AMPERSAND: "&", CHAR_AT: "@", CHAR_BACKSLASH: "\\", CHAR_BACKTICK: "`", CHAR_CARRIAGE_RETURN: "\r", CHAR_CIRCUMFLEX_ACCENT: "^", CHAR_COLON: ":", CHAR_COMMA: ",", CHAR_DOLLAR: "$", CHAR_DOT: ".", CHAR_DOUBLE_QUOTE: '"', CHAR_EQUAL: "=", CHAR_EXCLAMATION_MARK: "!", CHAR_FORM_FEED: "\f", CHAR_FORWARD_SLASH: "/", CHAR_HASH: "#", CHAR_HYPHEN_MINUS: "-", CHAR_LEFT_ANGLE_BRACKET: "<", CHAR_LEFT_CURLY_BRACE: "{", CHAR_LEFT_SQUARE_BRACKET: "[", CHAR_LINE_FEED: "\n", CHAR_NO_BREAK_SPACE: " ", CHAR_PERCENT: "%", CHAR_PLUS: "+", CHAR_QUESTION_MARK: "?", CHAR_RIGHT_ANGLE_BRACKET: ">", CHAR_RIGHT_CURLY_BRACE: "}", CHAR_RIGHT_SQUARE_BRACKET: "]", CHAR_SEMICOLON: ";", CHAR_SINGLE_QUOTE: "'", CHAR_SPACE: " ", CHAR_TAB: "	", CHAR_UNDERSCORE: "_", CHAR_VERTICAL_LINE: "|", CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF" };
}, "./node_modules/braces/lib/expand.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/fill-range/index.js"), o2 = n2("./node_modules/braces/lib/stringify.js"), i2 = n2("./node_modules/braces/lib/utils.js"), s2 = (e3 = "", t3 = "", n3 = false) => {
    let r3 = [];
    if (e3 = [].concat(e3), !(t3 = [].concat(t3)).length) return e3;
    if (!e3.length) return n3 ? i2.flatten(t3).map(((e4) => `{${e4}}`)) : t3;
    for (let o3 of e3) if (Array.isArray(o3)) for (let e4 of o3) r3.push(s2(e4, t3, n3));
    else for (let e4 of t3) true === n3 && "string" == typeof e4 && (e4 = `{${e4}}`), r3.push(Array.isArray(e4) ? s2(o3, e4, n3) : o3 + e4);
    return i2.flatten(r3);
  };
  e2.exports = (e3, t3 = {}) => {
    let n3 = void 0 === t3.rangeLimit ? 1e3 : t3.rangeLimit, a = (e4, l = {}) => {
      e4.queue = [];
      let u = l, c2 = l.queue;
      for (; "brace" !== u.type && "root" !== u.type && u.parent; ) u = u.parent, c2 = u.queue;
      if (e4.invalid || e4.dollar) return void c2.push(s2(c2.pop(), o2(e4, t3)));
      if ("brace" === e4.type && true !== e4.invalid && 2 === e4.nodes.length) return void c2.push(s2(c2.pop(), ["{}"]));
      if (e4.nodes && e4.ranges > 0) {
        let a2 = i2.reduce(e4.nodes);
        if (i2.exceedsLimit(...a2, t3.step, n3)) throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
        let l2 = r2(...a2, t3);
        return 0 === l2.length && (l2 = o2(e4, t3)), c2.push(s2(c2.pop(), l2)), void (e4.nodes = []);
      }
      let f = i2.encloseBrace(e4), p = e4.queue, d = e4;
      for (; "brace" !== d.type && "root" !== d.type && d.parent; ) d = d.parent, p = d.queue;
      for (let t4 = 0; t4 < e4.nodes.length; t4++) {
        let n4 = e4.nodes[t4];
        "comma" !== n4.type || "brace" !== e4.type ? "close" !== n4.type ? n4.value && "open" !== n4.type ? p.push(s2(p.pop(), n4.value)) : n4.nodes && a(n4, e4) : c2.push(s2(c2.pop(), p, f)) : (1 === t4 && p.push(""), p.push(""));
      }
      return p;
    };
    return i2.flatten(a(e3));
  };
}, "./node_modules/braces/lib/parse.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/braces/lib/stringify.js"), { MAX_LENGTH: o2, CHAR_BACKSLASH: i2, CHAR_BACKTICK: s2, CHAR_COMMA: a, CHAR_DOT: l, CHAR_LEFT_PARENTHESES: u, CHAR_RIGHT_PARENTHESES: c2, CHAR_LEFT_CURLY_BRACE: f, CHAR_RIGHT_CURLY_BRACE: p, CHAR_LEFT_SQUARE_BRACKET: d, CHAR_RIGHT_SQUARE_BRACKET: h, CHAR_DOUBLE_QUOTE: g, CHAR_SINGLE_QUOTE: m2, CHAR_NO_BREAK_SPACE: y, CHAR_ZERO_WIDTH_NOBREAK_SPACE: b } = n2("./node_modules/braces/lib/constants.js");
  e2.exports = (e3, t3 = {}) => {
    if ("string" != typeof e3) throw new TypeError("Expected a string");
    let n3 = t3 || {}, v = "number" == typeof n3.maxLength ? Math.min(o2, n3.maxLength) : o2;
    if (e3.length > v) throw new SyntaxError(`Input length (${e3.length}), exceeds max characters (${v})`);
    let E, j = { type: "root", input: e3, nodes: [] }, _ = [j], w = j, x = j, O = 0, R = e3.length, A = 0, S = 0;
    const C = () => e3[A++], $ = (e4) => {
      if ("text" === e4.type && "dot" === x.type && (x.type = "text"), !x || "text" !== x.type || "text" !== e4.type) return w.nodes.push(e4), e4.parent = w, e4.prev = x, x = e4, e4;
      x.value += e4.value;
    };
    for ($({ type: "bos" }); A < R; ) if (w = _[_.length - 1], E = C(), E !== b && E !== y) if (E !== i2) if (E !== h) if (E !== d) if (E !== u) if (E !== c2) if (E !== g && E !== m2 && E !== s2) if (E !== f) if (E !== p) if (E === a && S > 0) {
      if (w.ranges > 0) {
        w.ranges = 0;
        let e4 = w.nodes.shift();
        w.nodes = [e4, { type: "text", value: r2(w) }];
      }
      $({ type: "comma", value: E }), w.commas++;
    } else if (E === l && S > 0 && 0 === w.commas) {
      let e4 = w.nodes;
      if (0 === S || 0 === e4.length) {
        $({ type: "text", value: E });
        continue;
      }
      if ("dot" === x.type) {
        if (w.range = [], x.value += E, x.type = "range", 3 !== w.nodes.length && 5 !== w.nodes.length) {
          w.invalid = true, w.ranges = 0, x.type = "text";
          continue;
        }
        w.ranges++, w.args = [];
        continue;
      }
      if ("range" === x.type) {
        e4.pop();
        let t4 = e4[e4.length - 1];
        t4.value += x.value + E, x = t4, w.ranges--;
        continue;
      }
      $({ type: "dot", value: E });
    } else $({ type: "text", value: E });
    else {
      if ("brace" !== w.type) {
        $({ type: "text", value: E });
        continue;
      }
      let e4 = "close";
      w = _.pop(), w.close = true, $({ type: e4, value: E }), S--, w = _[_.length - 1];
    }
    else {
      S++;
      let e4 = x.value && "$" === x.value.slice(-1) || true === w.dollar;
      w = $({ type: "brace", open: true, close: false, dollar: e4, depth: S, commas: 0, ranges: 0, nodes: [] }), _.push(w), $({ type: "open", value: E });
    }
    else {
      let e4, n4 = E;
      for (true !== t3.keepQuotes && (E = ""); A < R && (e4 = C()); ) if (e4 !== i2) {
        if (e4 === n4) {
          true === t3.keepQuotes && (E += e4);
          break;
        }
        E += e4;
      } else E += e4 + C();
      $({ type: "text", value: E });
    }
    else {
      if ("paren" !== w.type) {
        $({ type: "text", value: E });
        continue;
      }
      w = _.pop(), $({ type: "text", value: E }), w = _[_.length - 1];
    }
    else w = $({ type: "paren", nodes: [] }), _.push(w), $({ type: "text", value: E });
    else {
      O++;
      let e4;
      for (; A < R && (e4 = C()); ) if (E += e4, e4 !== d) if (e4 !== i2) {
        if (e4 === h && (O--, 0 === O)) break;
      } else E += C();
      else O++;
      $({ type: "text", value: E });
    }
    else $({ type: "text", value: "\\" + E });
    else $({ type: "text", value: (t3.keepEscaping ? E : "") + C() });
    do {
      if (w = _.pop(), "root" !== w.type) {
        w.nodes.forEach(((e5) => {
          e5.nodes || ("open" === e5.type && (e5.isOpen = true), "close" === e5.type && (e5.isClose = true), e5.nodes || (e5.type = "text"), e5.invalid = true);
        }));
        let e4 = _[_.length - 1], t4 = e4.nodes.indexOf(w);
        e4.nodes.splice(t4, 1, ...w.nodes);
      }
    } while (_.length > 0);
    return $({ type: "eos" }), j;
  };
}, "./node_modules/braces/lib/stringify.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/braces/lib/utils.js");
  e2.exports = (e3, t3 = {}) => {
    let n3 = (e4, o2 = {}) => {
      let i2 = t3.escapeInvalid && r2.isInvalidBrace(o2), s2 = true === e4.invalid && true === t3.escapeInvalid, a = "";
      if (e4.value) return (i2 || s2) && r2.isOpenOrClose(e4) ? "\\" + e4.value : e4.value;
      if (e4.value) return e4.value;
      if (e4.nodes) for (let t4 of e4.nodes) a += n3(t4);
      return a;
    };
    return n3(e3);
  };
}, "./node_modules/braces/lib/utils.js": (e2, t2) => {
  t2.isInteger = (e3) => "number" == typeof e3 ? Number.isInteger(e3) : "string" == typeof e3 && "" !== e3.trim() && Number.isInteger(Number(e3)), t2.find = (e3, t3) => e3.nodes.find(((e4) => e4.type === t3)), t2.exceedsLimit = (e3, n2, r2 = 1, o2) => false !== o2 && (!(!t2.isInteger(e3) || !t2.isInteger(n2)) && (Number(n2) - Number(e3)) / Number(r2) >= o2), t2.escapeNode = (e3, t3 = 0, n2) => {
    let r2 = e3.nodes[t3];
    r2 && (n2 && r2.type === n2 || "open" === r2.type || "close" === r2.type) && true !== r2.escaped && (r2.value = "\\" + r2.value, r2.escaped = true);
  }, t2.encloseBrace = (e3) => "brace" === e3.type && (e3.commas >> 0 + e3.ranges >> 0 == 0 && (e3.invalid = true, true)), t2.isInvalidBrace = (e3) => "brace" === e3.type && (!(true !== e3.invalid && !e3.dollar) || (e3.commas >> 0 + e3.ranges >> 0 == 0 || true !== e3.open || true !== e3.close) && (e3.invalid = true, true)), t2.isOpenOrClose = (e3) => "open" === e3.type || "close" === e3.type || (true === e3.open || true === e3.close), t2.reduce = (e3) => e3.reduce(((e4, t3) => ("text" === t3.type && e4.push(t3.value), "range" === t3.type && (t3.type = "text"), e4)), []), t2.flatten = (...e3) => {
    const t3 = [], n2 = (e4) => {
      for (let r2 = 0; r2 < e4.length; r2++) {
        let o2 = e4[r2];
        Array.isArray(o2) ? n2(o2) : void 0 !== o2 && t3.push(o2);
      }
      return t3;
    };
    return n2(e3), t3;
  };
}, "./node_modules/buffer/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/console-browserify/index.js");
  const o2 = n2("./node_modules/base64-js/index.js"), i2 = n2("./node_modules/ieee754/index.js"), s2 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
  t2.lW = u, t2.h2 = 50;
  const a = 2147483647;
  function l(e3) {
    if (e3 > a) throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
    const t3 = new Uint8Array(e3);
    return Object.setPrototypeOf(t3, u.prototype), t3;
  }
  function u(e3, t3, n3) {
    if ("number" == typeof e3) {
      if ("string" == typeof t3) throw new TypeError('The "string" argument must be of type string. Received type number');
      return p(e3);
    }
    return c2(e3, t3, n3);
  }
  function c2(e3, t3, n3) {
    if ("string" == typeof e3) return (function(e4, t4) {
      "string" == typeof t4 && "" !== t4 || (t4 = "utf8");
      if (!u.isEncoding(t4)) throw new TypeError("Unknown encoding: " + t4);
      const n4 = 0 | m2(e4, t4);
      let r4 = l(n4);
      const o4 = r4.write(e4, t4);
      o4 !== n4 && (r4 = r4.slice(0, o4));
      return r4;
    })(e3, t3);
    if (ArrayBuffer.isView(e3)) return (function(e4) {
      if (Y(e4, Uint8Array)) {
        const t4 = new Uint8Array(e4);
        return h(t4.buffer, t4.byteOffset, t4.byteLength);
      }
      return d(e4);
    })(e3);
    if (null == e3) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e3);
    if (Y(e3, ArrayBuffer) || e3 && Y(e3.buffer, ArrayBuffer)) return h(e3, t3, n3);
    if ("undefined" != typeof SharedArrayBuffer && (Y(e3, SharedArrayBuffer) || e3 && Y(e3.buffer, SharedArrayBuffer))) return h(e3, t3, n3);
    if ("number" == typeof e3) throw new TypeError('The "value" argument must not be of type number. Received type number');
    const r3 = e3.valueOf && e3.valueOf();
    if (null != r3 && r3 !== e3) return u.from(r3, t3, n3);
    const o3 = (function(e4) {
      if (u.isBuffer(e4)) {
        const t4 = 0 | g(e4.length), n4 = l(t4);
        return 0 === n4.length || e4.copy(n4, 0, 0, t4), n4;
      }
      if (void 0 !== e4.length) return "number" != typeof e4.length || X(e4.length) ? l(0) : d(e4);
      if ("Buffer" === e4.type && Array.isArray(e4.data)) return d(e4.data);
    })(e3);
    if (o3) return o3;
    if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e3[Symbol.toPrimitive]) return u.from(e3[Symbol.toPrimitive]("string"), t3, n3);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e3);
  }
  function f(e3) {
    if ("number" != typeof e3) throw new TypeError('"size" argument must be of type number');
    if (e3 < 0) throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
  }
  function p(e3) {
    return f(e3), l(e3 < 0 ? 0 : 0 | g(e3));
  }
  function d(e3) {
    const t3 = e3.length < 0 ? 0 : 0 | g(e3.length), n3 = l(t3);
    for (let r3 = 0; r3 < t3; r3 += 1) n3[r3] = 255 & e3[r3];
    return n3;
  }
  function h(e3, t3, n3) {
    if (t3 < 0 || e3.byteLength < t3) throw new RangeError('"offset" is outside of buffer bounds');
    if (e3.byteLength < t3 + (n3 || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let r3;
    return r3 = void 0 === t3 && void 0 === n3 ? new Uint8Array(e3) : void 0 === n3 ? new Uint8Array(e3, t3) : new Uint8Array(e3, t3, n3), Object.setPrototypeOf(r3, u.prototype), r3;
  }
  function g(e3) {
    if (e3 >= a) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a.toString(16) + " bytes");
    return 0 | e3;
  }
  function m2(e3, t3) {
    if (u.isBuffer(e3)) return e3.length;
    if (ArrayBuffer.isView(e3) || Y(e3, ArrayBuffer)) return e3.byteLength;
    if ("string" != typeof e3) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e3);
    const n3 = e3.length, r3 = arguments.length > 2 && true === arguments[2];
    if (!r3 && 0 === n3) return 0;
    let o3 = false;
    for (; ; ) switch (t3) {
      case "ascii":
      case "latin1":
      case "binary":
        return n3;
      case "utf8":
      case "utf-8":
        return V(e3).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return 2 * n3;
      case "hex":
        return n3 >>> 1;
      case "base64":
        return K(e3).length;
      default:
        if (o3) return r3 ? -1 : V(e3).length;
        t3 = ("" + t3).toLowerCase(), o3 = true;
    }
  }
  function y(e3, t3, n3) {
    let r3 = false;
    if ((void 0 === t3 || t3 < 0) && (t3 = 0), t3 > this.length) return "";
    if ((void 0 === n3 || n3 > this.length) && (n3 = this.length), n3 <= 0) return "";
    if ((n3 >>>= 0) <= (t3 >>>= 0)) return "";
    for (e3 || (e3 = "utf8"); ; ) switch (e3) {
      case "hex":
        return T(this, t3, n3);
      case "utf8":
      case "utf-8":
        return A(this, t3, n3);
      case "ascii":
        return C(this, t3, n3);
      case "latin1":
      case "binary":
        return $(this, t3, n3);
      case "base64":
        return R(this, t3, n3);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return M(this, t3, n3);
      default:
        if (r3) throw new TypeError("Unknown encoding: " + e3);
        e3 = (e3 + "").toLowerCase(), r3 = true;
    }
  }
  function b(e3, t3, n3) {
    const r3 = e3[t3];
    e3[t3] = e3[n3], e3[n3] = r3;
  }
  function v(e3, t3, n3, r3, o3) {
    if (0 === e3.length) return -1;
    if ("string" == typeof n3 ? (r3 = n3, n3 = 0) : n3 > 2147483647 ? n3 = 2147483647 : n3 < -2147483648 && (n3 = -2147483648), X(n3 = +n3) && (n3 = o3 ? 0 : e3.length - 1), n3 < 0 && (n3 = e3.length + n3), n3 >= e3.length) {
      if (o3) return -1;
      n3 = e3.length - 1;
    } else if (n3 < 0) {
      if (!o3) return -1;
      n3 = 0;
    }
    if ("string" == typeof t3 && (t3 = u.from(t3, r3)), u.isBuffer(t3)) return 0 === t3.length ? -1 : E(e3, t3, n3, r3, o3);
    if ("number" == typeof t3) return t3 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? o3 ? Uint8Array.prototype.indexOf.call(e3, t3, n3) : Uint8Array.prototype.lastIndexOf.call(e3, t3, n3) : E(e3, [t3], n3, r3, o3);
    throw new TypeError("val must be string, number or Buffer");
  }
  function E(e3, t3, n3, r3, o3) {
    let i22, s22 = 1, a2 = e3.length, l2 = t3.length;
    if (void 0 !== r3 && ("ucs2" === (r3 = String(r3).toLowerCase()) || "ucs-2" === r3 || "utf16le" === r3 || "utf-16le" === r3)) {
      if (e3.length < 2 || t3.length < 2) return -1;
      s22 = 2, a2 /= 2, l2 /= 2, n3 /= 2;
    }
    function u2(e4, t4) {
      return 1 === s22 ? e4[t4] : e4.readUInt16BE(t4 * s22);
    }
    if (o3) {
      let r4 = -1;
      for (i22 = n3; i22 < a2; i22++) if (u2(e3, i22) === u2(t3, -1 === r4 ? 0 : i22 - r4)) {
        if (-1 === r4 && (r4 = i22), i22 - r4 + 1 === l2) return r4 * s22;
      } else -1 !== r4 && (i22 -= i22 - r4), r4 = -1;
    } else for (n3 + l2 > a2 && (n3 = a2 - l2), i22 = n3; i22 >= 0; i22--) {
      let n4 = true;
      for (let r4 = 0; r4 < l2; r4++) if (u2(e3, i22 + r4) !== u2(t3, r4)) {
        n4 = false;
        break;
      }
      if (n4) return i22;
    }
    return -1;
  }
  function j(e3, t3, n3, r3) {
    n3 = Number(n3) || 0;
    const o3 = e3.length - n3;
    r3 ? (r3 = Number(r3)) > o3 && (r3 = o3) : r3 = o3;
    const i22 = t3.length;
    let s22;
    for (r3 > i22 / 2 && (r3 = i22 / 2), s22 = 0; s22 < r3; ++s22) {
      const r4 = parseInt(t3.substr(2 * s22, 2), 16);
      if (X(r4)) return s22;
      e3[n3 + s22] = r4;
    }
    return s22;
  }
  function _(e3, t3, n3, r3) {
    return Q(V(t3, e3.length - n3), e3, n3, r3);
  }
  function w(e3, t3, n3, r3) {
    return Q((function(e4) {
      const t4 = [];
      for (let n4 = 0; n4 < e4.length; ++n4) t4.push(255 & e4.charCodeAt(n4));
      return t4;
    })(t3), e3, n3, r3);
  }
  function x(e3, t3, n3, r3) {
    return Q(K(t3), e3, n3, r3);
  }
  function O(e3, t3, n3, r3) {
    return Q((function(e4, t4) {
      let n4, r4, o3;
      const i22 = [];
      for (let s22 = 0; s22 < e4.length && !((t4 -= 2) < 0); ++s22) n4 = e4.charCodeAt(s22), r4 = n4 >> 8, o3 = n4 % 256, i22.push(o3), i22.push(r4);
      return i22;
    })(t3, e3.length - n3), e3, n3, r3);
  }
  function R(e3, t3, n3) {
    return 0 === t3 && n3 === e3.length ? o2.fromByteArray(e3) : o2.fromByteArray(e3.slice(t3, n3));
  }
  function A(e3, t3, n3) {
    n3 = Math.min(e3.length, n3);
    const r3 = [];
    let o3 = t3;
    for (; o3 < n3; ) {
      const t4 = e3[o3];
      let i22 = null, s22 = t4 > 239 ? 4 : t4 > 223 ? 3 : t4 > 191 ? 2 : 1;
      if (o3 + s22 <= n3) {
        let n4, r4, a2, l2;
        switch (s22) {
          case 1:
            t4 < 128 && (i22 = t4);
            break;
          case 2:
            n4 = e3[o3 + 1], 128 == (192 & n4) && (l2 = (31 & t4) << 6 | 63 & n4, l2 > 127 && (i22 = l2));
            break;
          case 3:
            n4 = e3[o3 + 1], r4 = e3[o3 + 2], 128 == (192 & n4) && 128 == (192 & r4) && (l2 = (15 & t4) << 12 | (63 & n4) << 6 | 63 & r4, l2 > 2047 && (l2 < 55296 || l2 > 57343) && (i22 = l2));
            break;
          case 4:
            n4 = e3[o3 + 1], r4 = e3[o3 + 2], a2 = e3[o3 + 3], 128 == (192 & n4) && 128 == (192 & r4) && 128 == (192 & a2) && (l2 = (15 & t4) << 18 | (63 & n4) << 12 | (63 & r4) << 6 | 63 & a2, l2 > 65535 && l2 < 1114112 && (i22 = l2));
        }
      }
      null === i22 ? (i22 = 65533, s22 = 1) : i22 > 65535 && (i22 -= 65536, r3.push(i22 >>> 10 & 1023 | 55296), i22 = 56320 | 1023 & i22), r3.push(i22), o3 += s22;
    }
    return (function(e4) {
      const t4 = e4.length;
      if (t4 <= S) return String.fromCharCode.apply(String, e4);
      let n4 = "", r4 = 0;
      for (; r4 < t4; ) n4 += String.fromCharCode.apply(String, e4.slice(r4, r4 += S));
      return n4;
    })(r3);
  }
  u.TYPED_ARRAY_SUPPORT = (function() {
    try {
      const e3 = new Uint8Array(1), t3 = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(t3, Uint8Array.prototype), Object.setPrototypeOf(e3, t3), 42 === e3.foo();
    } catch (e3) {
      return false;
    }
  })(), u.TYPED_ARRAY_SUPPORT || void 0 === r2 || "function" != typeof r2.error || r2.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(u.prototype, "parent", { enumerable: true, get: function() {
    if (u.isBuffer(this)) return this.buffer;
  } }), Object.defineProperty(u.prototype, "offset", { enumerable: true, get: function() {
    if (u.isBuffer(this)) return this.byteOffset;
  } }), u.poolSize = 8192, u.from = function(e3, t3, n3) {
    return c2(e3, t3, n3);
  }, Object.setPrototypeOf(u.prototype, Uint8Array.prototype), Object.setPrototypeOf(u, Uint8Array), u.alloc = function(e3, t3, n3) {
    return (function(e4, t4, n4) {
      return f(e4), e4 <= 0 ? l(e4) : void 0 !== t4 ? "string" == typeof n4 ? l(e4).fill(t4, n4) : l(e4).fill(t4) : l(e4);
    })(e3, t3, n3);
  }, u.allocUnsafe = function(e3) {
    return p(e3);
  }, u.allocUnsafeSlow = function(e3) {
    return p(e3);
  }, u.isBuffer = function(e3) {
    return null != e3 && true === e3._isBuffer && e3 !== u.prototype;
  }, u.compare = function(e3, t3) {
    if (Y(e3, Uint8Array) && (e3 = u.from(e3, e3.offset, e3.byteLength)), Y(t3, Uint8Array) && (t3 = u.from(t3, t3.offset, t3.byteLength)), !u.isBuffer(e3) || !u.isBuffer(t3)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (e3 === t3) return 0;
    let n3 = e3.length, r3 = t3.length;
    for (let o3 = 0, i22 = Math.min(n3, r3); o3 < i22; ++o3) if (e3[o3] !== t3[o3]) {
      n3 = e3[o3], r3 = t3[o3];
      break;
    }
    return n3 < r3 ? -1 : r3 < n3 ? 1 : 0;
  }, u.isEncoding = function(e3) {
    switch (String(e3).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  }, u.concat = function(e3, t3) {
    if (!Array.isArray(e3)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (0 === e3.length) return u.alloc(0);
    let n3;
    if (void 0 === t3) for (t3 = 0, n3 = 0; n3 < e3.length; ++n3) t3 += e3[n3].length;
    const r3 = u.allocUnsafe(t3);
    let o3 = 0;
    for (n3 = 0; n3 < e3.length; ++n3) {
      let t4 = e3[n3];
      if (Y(t4, Uint8Array)) o3 + t4.length > r3.length ? (u.isBuffer(t4) || (t4 = u.from(t4)), t4.copy(r3, o3)) : Uint8Array.prototype.set.call(r3, t4, o3);
      else {
        if (!u.isBuffer(t4)) throw new TypeError('"list" argument must be an Array of Buffers');
        t4.copy(r3, o3);
      }
      o3 += t4.length;
    }
    return r3;
  }, u.byteLength = m2, u.prototype._isBuffer = true, u.prototype.swap16 = function() {
    const e3 = this.length;
    if (e3 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let t3 = 0; t3 < e3; t3 += 2) b(this, t3, t3 + 1);
    return this;
  }, u.prototype.swap32 = function() {
    const e3 = this.length;
    if (e3 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let t3 = 0; t3 < e3; t3 += 4) b(this, t3, t3 + 3), b(this, t3 + 1, t3 + 2);
    return this;
  }, u.prototype.swap64 = function() {
    const e3 = this.length;
    if (e3 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let t3 = 0; t3 < e3; t3 += 8) b(this, t3, t3 + 7), b(this, t3 + 1, t3 + 6), b(this, t3 + 2, t3 + 5), b(this, t3 + 3, t3 + 4);
    return this;
  }, u.prototype.toString = function() {
    const e3 = this.length;
    return 0 === e3 ? "" : 0 === arguments.length ? A(this, 0, e3) : y.apply(this, arguments);
  }, u.prototype.toLocaleString = u.prototype.toString, u.prototype.equals = function(e3) {
    if (!u.isBuffer(e3)) throw new TypeError("Argument must be a Buffer");
    return this === e3 || 0 === u.compare(this, e3);
  }, u.prototype.inspect = function() {
    let e3 = "";
    const n3 = t2.h2;
    return e3 = this.toString("hex", 0, n3).replace(/(.{2})/g, "$1 ").trim(), this.length > n3 && (e3 += " ... "), "<Buffer " + e3 + ">";
  }, s2 && (u.prototype[s2] = u.prototype.inspect), u.prototype.compare = function(e3, t3, n3, r3, o3) {
    if (Y(e3, Uint8Array) && (e3 = u.from(e3, e3.offset, e3.byteLength)), !u.isBuffer(e3)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e3);
    if (void 0 === t3 && (t3 = 0), void 0 === n3 && (n3 = e3 ? e3.length : 0), void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = this.length), t3 < 0 || n3 > e3.length || r3 < 0 || o3 > this.length) throw new RangeError("out of range index");
    if (r3 >= o3 && t3 >= n3) return 0;
    if (r3 >= o3) return -1;
    if (t3 >= n3) return 1;
    if (this === e3) return 0;
    let i22 = (o3 >>>= 0) - (r3 >>>= 0), s22 = (n3 >>>= 0) - (t3 >>>= 0);
    const a2 = Math.min(i22, s22), l2 = this.slice(r3, o3), c22 = e3.slice(t3, n3);
    for (let e4 = 0; e4 < a2; ++e4) if (l2[e4] !== c22[e4]) {
      i22 = l2[e4], s22 = c22[e4];
      break;
    }
    return i22 < s22 ? -1 : s22 < i22 ? 1 : 0;
  }, u.prototype.includes = function(e3, t3, n3) {
    return -1 !== this.indexOf(e3, t3, n3);
  }, u.prototype.indexOf = function(e3, t3, n3) {
    return v(this, e3, t3, n3, true);
  }, u.prototype.lastIndexOf = function(e3, t3, n3) {
    return v(this, e3, t3, n3, false);
  }, u.prototype.write = function(e3, t3, n3, r3) {
    if (void 0 === t3) r3 = "utf8", n3 = this.length, t3 = 0;
    else if (void 0 === n3 && "string" == typeof t3) r3 = t3, n3 = this.length, t3 = 0;
    else {
      if (!isFinite(t3)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      t3 >>>= 0, isFinite(n3) ? (n3 >>>= 0, void 0 === r3 && (r3 = "utf8")) : (r3 = n3, n3 = void 0);
    }
    const o3 = this.length - t3;
    if ((void 0 === n3 || n3 > o3) && (n3 = o3), e3.length > 0 && (n3 < 0 || t3 < 0) || t3 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    r3 || (r3 = "utf8");
    let i22 = false;
    for (; ; ) switch (r3) {
      case "hex":
        return j(this, e3, t3, n3);
      case "utf8":
      case "utf-8":
        return _(this, e3, t3, n3);
      case "ascii":
      case "latin1":
      case "binary":
        return w(this, e3, t3, n3);
      case "base64":
        return x(this, e3, t3, n3);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return O(this, e3, t3, n3);
      default:
        if (i22) throw new TypeError("Unknown encoding: " + r3);
        r3 = ("" + r3).toLowerCase(), i22 = true;
    }
  }, u.prototype.toJSON = function() {
    return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
  };
  const S = 4096;
  function C(e3, t3, n3) {
    let r3 = "";
    n3 = Math.min(e3.length, n3);
    for (let o3 = t3; o3 < n3; ++o3) r3 += String.fromCharCode(127 & e3[o3]);
    return r3;
  }
  function $(e3, t3, n3) {
    let r3 = "";
    n3 = Math.min(e3.length, n3);
    for (let o3 = t3; o3 < n3; ++o3) r3 += String.fromCharCode(e3[o3]);
    return r3;
  }
  function T(e3, t3, n3) {
    const r3 = e3.length;
    (!t3 || t3 < 0) && (t3 = 0), (!n3 || n3 < 0 || n3 > r3) && (n3 = r3);
    let o3 = "";
    for (let r4 = t3; r4 < n3; ++r4) o3 += J[e3[r4]];
    return o3;
  }
  function M(e3, t3, n3) {
    const r3 = e3.slice(t3, n3);
    let o3 = "";
    for (let e4 = 0; e4 < r3.length - 1; e4 += 2) o3 += String.fromCharCode(r3[e4] + 256 * r3[e4 + 1]);
    return o3;
  }
  function I(e3, t3, n3) {
    if (e3 % 1 != 0 || e3 < 0) throw new RangeError("offset is not uint");
    if (e3 + t3 > n3) throw new RangeError("Trying to access beyond buffer length");
  }
  function P(e3, t3, n3, r3, o3, i22) {
    if (!u.isBuffer(e3)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (t3 > o3 || t3 < i22) throw new RangeError('"value" argument is out of bounds');
    if (n3 + r3 > e3.length) throw new RangeError("Index out of range");
  }
  function k(e3, t3, n3, r3, o3) {
    q(t3, r3, o3, e3, n3, 7);
    let i22 = Number(t3 & BigInt(4294967295));
    e3[n3++] = i22, i22 >>= 8, e3[n3++] = i22, i22 >>= 8, e3[n3++] = i22, i22 >>= 8, e3[n3++] = i22;
    let s22 = Number(t3 >> BigInt(32) & BigInt(4294967295));
    return e3[n3++] = s22, s22 >>= 8, e3[n3++] = s22, s22 >>= 8, e3[n3++] = s22, s22 >>= 8, e3[n3++] = s22, n3;
  }
  function N(e3, t3, n3, r3, o3) {
    q(t3, r3, o3, e3, n3, 7);
    let i22 = Number(t3 & BigInt(4294967295));
    e3[n3 + 7] = i22, i22 >>= 8, e3[n3 + 6] = i22, i22 >>= 8, e3[n3 + 5] = i22, i22 >>= 8, e3[n3 + 4] = i22;
    let s22 = Number(t3 >> BigInt(32) & BigInt(4294967295));
    return e3[n3 + 3] = s22, s22 >>= 8, e3[n3 + 2] = s22, s22 >>= 8, e3[n3 + 1] = s22, s22 >>= 8, e3[n3] = s22, n3 + 8;
  }
  function L(e3, t3, n3, r3, o3, i22) {
    if (n3 + r3 > e3.length) throw new RangeError("Index out of range");
    if (n3 < 0) throw new RangeError("Index out of range");
  }
  function D(e3, t3, n3, r3, o3) {
    return t3 = +t3, n3 >>>= 0, o3 || L(e3, 0, n3, 4), i2.write(e3, t3, n3, r3, 23, 4), n3 + 4;
  }
  function B(e3, t3, n3, r3, o3) {
    return t3 = +t3, n3 >>>= 0, o3 || L(e3, 0, n3, 8), i2.write(e3, t3, n3, r3, 52, 8), n3 + 8;
  }
  u.prototype.slice = function(e3, t3) {
    const n3 = this.length;
    (e3 = ~~e3) < 0 ? (e3 += n3) < 0 && (e3 = 0) : e3 > n3 && (e3 = n3), (t3 = void 0 === t3 ? n3 : ~~t3) < 0 ? (t3 += n3) < 0 && (t3 = 0) : t3 > n3 && (t3 = n3), t3 < e3 && (t3 = e3);
    const r3 = this.subarray(e3, t3);
    return Object.setPrototypeOf(r3, u.prototype), r3;
  }, u.prototype.readUintLE = u.prototype.readUIntLE = function(e3, t3, n3) {
    e3 >>>= 0, t3 >>>= 0, n3 || I(e3, t3, this.length);
    let r3 = this[e3], o3 = 1, i22 = 0;
    for (; ++i22 < t3 && (o3 *= 256); ) r3 += this[e3 + i22] * o3;
    return r3;
  }, u.prototype.readUintBE = u.prototype.readUIntBE = function(e3, t3, n3) {
    e3 >>>= 0, t3 >>>= 0, n3 || I(e3, t3, this.length);
    let r3 = this[e3 + --t3], o3 = 1;
    for (; t3 > 0 && (o3 *= 256); ) r3 += this[e3 + --t3] * o3;
    return r3;
  }, u.prototype.readUint8 = u.prototype.readUInt8 = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 1, this.length), this[e3];
  }, u.prototype.readUint16LE = u.prototype.readUInt16LE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
  }, u.prototype.readUint16BE = u.prototype.readUInt16BE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
  }, u.prototype.readUint32LE = u.prototype.readUInt32LE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
  }, u.prototype.readUint32BE = u.prototype.readUInt32BE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
  }, u.prototype.readBigUInt64LE = Z((function(e3) {
    W(e3 >>>= 0, "offset");
    const t3 = this[e3], n3 = this[e3 + 7];
    void 0 !== t3 && void 0 !== n3 || G(e3, this.length - 8);
    const r3 = t3 + 256 * this[++e3] + 65536 * this[++e3] + this[++e3] * 2 ** 24, o3 = this[++e3] + 256 * this[++e3] + 65536 * this[++e3] + n3 * 2 ** 24;
    return BigInt(r3) + (BigInt(o3) << BigInt(32));
  })), u.prototype.readBigUInt64BE = Z((function(e3) {
    W(e3 >>>= 0, "offset");
    const t3 = this[e3], n3 = this[e3 + 7];
    void 0 !== t3 && void 0 !== n3 || G(e3, this.length - 8);
    const r3 = t3 * 2 ** 24 + 65536 * this[++e3] + 256 * this[++e3] + this[++e3], o3 = this[++e3] * 2 ** 24 + 65536 * this[++e3] + 256 * this[++e3] + n3;
    return (BigInt(r3) << BigInt(32)) + BigInt(o3);
  })), u.prototype.readIntLE = function(e3, t3, n3) {
    e3 >>>= 0, t3 >>>= 0, n3 || I(e3, t3, this.length);
    let r3 = this[e3], o3 = 1, i22 = 0;
    for (; ++i22 < t3 && (o3 *= 256); ) r3 += this[e3 + i22] * o3;
    return o3 *= 128, r3 >= o3 && (r3 -= Math.pow(2, 8 * t3)), r3;
  }, u.prototype.readIntBE = function(e3, t3, n3) {
    e3 >>>= 0, t3 >>>= 0, n3 || I(e3, t3, this.length);
    let r3 = t3, o3 = 1, i22 = this[e3 + --r3];
    for (; r3 > 0 && (o3 *= 256); ) i22 += this[e3 + --r3] * o3;
    return o3 *= 128, i22 >= o3 && (i22 -= Math.pow(2, 8 * t3)), i22;
  }, u.prototype.readInt8 = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
  }, u.prototype.readInt16LE = function(e3, t3) {
    e3 >>>= 0, t3 || I(e3, 2, this.length);
    const n3 = this[e3] | this[e3 + 1] << 8;
    return 32768 & n3 ? 4294901760 | n3 : n3;
  }, u.prototype.readInt16BE = function(e3, t3) {
    e3 >>>= 0, t3 || I(e3, 2, this.length);
    const n3 = this[e3 + 1] | this[e3] << 8;
    return 32768 & n3 ? 4294901760 | n3 : n3;
  }, u.prototype.readInt32LE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
  }, u.prototype.readInt32BE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
  }, u.prototype.readBigInt64LE = Z((function(e3) {
    W(e3 >>>= 0, "offset");
    const t3 = this[e3], n3 = this[e3 + 7];
    void 0 !== t3 && void 0 !== n3 || G(e3, this.length - 8);
    const r3 = this[e3 + 4] + 256 * this[e3 + 5] + 65536 * this[e3 + 6] + (n3 << 24);
    return (BigInt(r3) << BigInt(32)) + BigInt(t3 + 256 * this[++e3] + 65536 * this[++e3] + this[++e3] * 2 ** 24);
  })), u.prototype.readBigInt64BE = Z((function(e3) {
    W(e3 >>>= 0, "offset");
    const t3 = this[e3], n3 = this[e3 + 7];
    void 0 !== t3 && void 0 !== n3 || G(e3, this.length - 8);
    const r3 = (t3 << 24) + 65536 * this[++e3] + 256 * this[++e3] + this[++e3];
    return (BigInt(r3) << BigInt(32)) + BigInt(this[++e3] * 2 ** 24 + 65536 * this[++e3] + 256 * this[++e3] + n3);
  })), u.prototype.readFloatLE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 4, this.length), i2.read(this, e3, true, 23, 4);
  }, u.prototype.readFloatBE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 4, this.length), i2.read(this, e3, false, 23, 4);
  }, u.prototype.readDoubleLE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 8, this.length), i2.read(this, e3, true, 52, 8);
  }, u.prototype.readDoubleBE = function(e3, t3) {
    return e3 >>>= 0, t3 || I(e3, 8, this.length), i2.read(this, e3, false, 52, 8);
  }, u.prototype.writeUintLE = u.prototype.writeUIntLE = function(e3, t3, n3, r3) {
    if (e3 = +e3, t3 >>>= 0, n3 >>>= 0, !r3) {
      P(this, e3, t3, n3, Math.pow(2, 8 * n3) - 1, 0);
    }
    let o3 = 1, i22 = 0;
    for (this[t3] = 255 & e3; ++i22 < n3 && (o3 *= 256); ) this[t3 + i22] = e3 / o3 & 255;
    return t3 + n3;
  }, u.prototype.writeUintBE = u.prototype.writeUIntBE = function(e3, t3, n3, r3) {
    if (e3 = +e3, t3 >>>= 0, n3 >>>= 0, !r3) {
      P(this, e3, t3, n3, Math.pow(2, 8 * n3) - 1, 0);
    }
    let o3 = n3 - 1, i22 = 1;
    for (this[t3 + o3] = 255 & e3; --o3 >= 0 && (i22 *= 256); ) this[t3 + o3] = e3 / i22 & 255;
    return t3 + n3;
  }, u.prototype.writeUint8 = u.prototype.writeUInt8 = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 1, 255, 0), this[t3] = 255 & e3, t3 + 1;
  }, u.prototype.writeUint16LE = u.prototype.writeUInt16LE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 2, 65535, 0), this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, t3 + 2;
  }, u.prototype.writeUint16BE = u.prototype.writeUInt16BE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 2, 65535, 0), this[t3] = e3 >>> 8, this[t3 + 1] = 255 & e3, t3 + 2;
  }, u.prototype.writeUint32LE = u.prototype.writeUInt32LE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 4, 4294967295, 0), this[t3 + 3] = e3 >>> 24, this[t3 + 2] = e3 >>> 16, this[t3 + 1] = e3 >>> 8, this[t3] = 255 & e3, t3 + 4;
  }, u.prototype.writeUint32BE = u.prototype.writeUInt32BE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 4, 4294967295, 0), this[t3] = e3 >>> 24, this[t3 + 1] = e3 >>> 16, this[t3 + 2] = e3 >>> 8, this[t3 + 3] = 255 & e3, t3 + 4;
  }, u.prototype.writeBigUInt64LE = Z((function(e3, t3 = 0) {
    return k(this, e3, t3, BigInt(0), BigInt("0xffffffffffffffff"));
  })), u.prototype.writeBigUInt64BE = Z((function(e3, t3 = 0) {
    return N(this, e3, t3, BigInt(0), BigInt("0xffffffffffffffff"));
  })), u.prototype.writeIntLE = function(e3, t3, n3, r3) {
    if (e3 = +e3, t3 >>>= 0, !r3) {
      const r4 = Math.pow(2, 8 * n3 - 1);
      P(this, e3, t3, n3, r4 - 1, -r4);
    }
    let o3 = 0, i22 = 1, s22 = 0;
    for (this[t3] = 255 & e3; ++o3 < n3 && (i22 *= 256); ) e3 < 0 && 0 === s22 && 0 !== this[t3 + o3 - 1] && (s22 = 1), this[t3 + o3] = (e3 / i22 >> 0) - s22 & 255;
    return t3 + n3;
  }, u.prototype.writeIntBE = function(e3, t3, n3, r3) {
    if (e3 = +e3, t3 >>>= 0, !r3) {
      const r4 = Math.pow(2, 8 * n3 - 1);
      P(this, e3, t3, n3, r4 - 1, -r4);
    }
    let o3 = n3 - 1, i22 = 1, s22 = 0;
    for (this[t3 + o3] = 255 & e3; --o3 >= 0 && (i22 *= 256); ) e3 < 0 && 0 === s22 && 0 !== this[t3 + o3 + 1] && (s22 = 1), this[t3 + o3] = (e3 / i22 >> 0) - s22 & 255;
    return t3 + n3;
  }, u.prototype.writeInt8 = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 1, 127, -128), e3 < 0 && (e3 = 255 + e3 + 1), this[t3] = 255 & e3, t3 + 1;
  }, u.prototype.writeInt16LE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 2, 32767, -32768), this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, t3 + 2;
  }, u.prototype.writeInt16BE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 2, 32767, -32768), this[t3] = e3 >>> 8, this[t3 + 1] = 255 & e3, t3 + 2;
  }, u.prototype.writeInt32LE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 4, 2147483647, -2147483648), this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, this[t3 + 2] = e3 >>> 16, this[t3 + 3] = e3 >>> 24, t3 + 4;
  }, u.prototype.writeInt32BE = function(e3, t3, n3) {
    return e3 = +e3, t3 >>>= 0, n3 || P(this, e3, t3, 4, 2147483647, -2147483648), e3 < 0 && (e3 = 4294967295 + e3 + 1), this[t3] = e3 >>> 24, this[t3 + 1] = e3 >>> 16, this[t3 + 2] = e3 >>> 8, this[t3 + 3] = 255 & e3, t3 + 4;
  }, u.prototype.writeBigInt64LE = Z((function(e3, t3 = 0) {
    return k(this, e3, t3, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  })), u.prototype.writeBigInt64BE = Z((function(e3, t3 = 0) {
    return N(this, e3, t3, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  })), u.prototype.writeFloatLE = function(e3, t3, n3) {
    return D(this, e3, t3, true, n3);
  }, u.prototype.writeFloatBE = function(e3, t3, n3) {
    return D(this, e3, t3, false, n3);
  }, u.prototype.writeDoubleLE = function(e3, t3, n3) {
    return B(this, e3, t3, true, n3);
  }, u.prototype.writeDoubleBE = function(e3, t3, n3) {
    return B(this, e3, t3, false, n3);
  }, u.prototype.copy = function(e3, t3, n3, r3) {
    if (!u.isBuffer(e3)) throw new TypeError("argument should be a Buffer");
    if (n3 || (n3 = 0), r3 || 0 === r3 || (r3 = this.length), t3 >= e3.length && (t3 = e3.length), t3 || (t3 = 0), r3 > 0 && r3 < n3 && (r3 = n3), r3 === n3) return 0;
    if (0 === e3.length || 0 === this.length) return 0;
    if (t3 < 0) throw new RangeError("targetStart out of bounds");
    if (n3 < 0 || n3 >= this.length) throw new RangeError("Index out of range");
    if (r3 < 0) throw new RangeError("sourceEnd out of bounds");
    r3 > this.length && (r3 = this.length), e3.length - t3 < r3 - n3 && (r3 = e3.length - t3 + n3);
    const o3 = r3 - n3;
    return this === e3 && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t3, n3, r3) : Uint8Array.prototype.set.call(e3, this.subarray(n3, r3), t3), o3;
  }, u.prototype.fill = function(e3, t3, n3, r3) {
    if ("string" == typeof e3) {
      if ("string" == typeof t3 ? (r3 = t3, t3 = 0, n3 = this.length) : "string" == typeof n3 && (r3 = n3, n3 = this.length), void 0 !== r3 && "string" != typeof r3) throw new TypeError("encoding must be a string");
      if ("string" == typeof r3 && !u.isEncoding(r3)) throw new TypeError("Unknown encoding: " + r3);
      if (1 === e3.length) {
        const t4 = e3.charCodeAt(0);
        ("utf8" === r3 && t4 < 128 || "latin1" === r3) && (e3 = t4);
      }
    } else "number" == typeof e3 ? e3 &= 255 : "boolean" == typeof e3 && (e3 = Number(e3));
    if (t3 < 0 || this.length < t3 || this.length < n3) throw new RangeError("Out of range index");
    if (n3 <= t3) return this;
    let o3;
    if (t3 >>>= 0, n3 = void 0 === n3 ? this.length : n3 >>> 0, e3 || (e3 = 0), "number" == typeof e3) for (o3 = t3; o3 < n3; ++o3) this[o3] = e3;
    else {
      const i22 = u.isBuffer(e3) ? e3 : u.from(e3, r3), s22 = i22.length;
      if (0 === s22) throw new TypeError('The value "' + e3 + '" is invalid for argument "value"');
      for (o3 = 0; o3 < n3 - t3; ++o3) this[o3 + t3] = i22[o3 % s22];
    }
    return this;
  };
  const U = {};
  function F(e3, t3, n3) {
    U[e3] = class extends n3 {
      constructor() {
        super(), Object.defineProperty(this, "message", { value: t3.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e3}]`, this.stack, delete this.name;
      }
      get code() {
        return e3;
      }
      set code(e4) {
        Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: e4, writable: true });
      }
      toString() {
        return `${this.name} [${e3}]: ${this.message}`;
      }
    };
  }
  function H(e3) {
    let t3 = "", n3 = e3.length;
    const r3 = "-" === e3[0] ? 1 : 0;
    for (; n3 >= r3 + 4; n3 -= 3) t3 = `_${e3.slice(n3 - 3, n3)}${t3}`;
    return `${e3.slice(0, n3)}${t3}`;
  }
  function q(e3, t3, n3, r3, o3, i22) {
    if (e3 > n3 || e3 < t3) {
      const r4 = "bigint" == typeof t3 ? "n" : "";
      let o4;
      throw o4 = 0 === t3 || t3 === BigInt(0) ? `>= 0${r4} and < 2${r4} ** ${8 * (i22 + 1)}${r4}` : `>= -(2${r4} ** ${8 * (i22 + 1) - 1}${r4}) and < 2 ** ${8 * (i22 + 1) - 1}${r4}`, new U.ERR_OUT_OF_RANGE("value", o4, e3);
    }
    !(function(e4, t4, n4) {
      W(t4, "offset"), void 0 !== e4[t4] && void 0 !== e4[t4 + n4] || G(t4, e4.length - (n4 + 1));
    })(r3, o3, i22);
  }
  function W(e3, t3) {
    if ("number" != typeof e3) throw new U.ERR_INVALID_ARG_TYPE(t3, "number", e3);
  }
  function G(e3, t3, n3) {
    if (Math.floor(e3) !== e3) throw W(e3, n3), new U.ERR_OUT_OF_RANGE("offset", "an integer", e3);
    if (t3 < 0) throw new U.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new U.ERR_OUT_OF_RANGE("offset", `>= ${0} and <= ${t3}`, e3);
  }
  F("ERR_BUFFER_OUT_OF_BOUNDS", (function(e3) {
    return e3 ? `${e3} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
  }), RangeError), F("ERR_INVALID_ARG_TYPE", (function(e3, t3) {
    return `The "${e3}" argument must be of type number. Received type ${typeof t3}`;
  }), TypeError), F("ERR_OUT_OF_RANGE", (function(e3, t3, n3) {
    let r3 = `The value of "${e3}" is out of range.`, o3 = n3;
    return Number.isInteger(n3) && Math.abs(n3) > 2 ** 32 ? o3 = H(String(n3)) : "bigint" == typeof n3 && (o3 = String(n3), (n3 > BigInt(2) ** BigInt(32) || n3 < -(BigInt(2) ** BigInt(32))) && (o3 = H(o3)), o3 += "n"), r3 += ` It must be ${t3}. Received ${o3}`, r3;
  }), RangeError);
  const z = /[^+/0-9A-Za-z-_]/g;
  function V(e3, t3) {
    let n3;
    t3 = t3 || 1 / 0;
    const r3 = e3.length;
    let o3 = null;
    const i22 = [];
    for (let s22 = 0; s22 < r3; ++s22) {
      if (n3 = e3.charCodeAt(s22), n3 > 55295 && n3 < 57344) {
        if (!o3) {
          if (n3 > 56319) {
            (t3 -= 3) > -1 && i22.push(239, 191, 189);
            continue;
          }
          if (s22 + 1 === r3) {
            (t3 -= 3) > -1 && i22.push(239, 191, 189);
            continue;
          }
          o3 = n3;
          continue;
        }
        if (n3 < 56320) {
          (t3 -= 3) > -1 && i22.push(239, 191, 189), o3 = n3;
          continue;
        }
        n3 = 65536 + (o3 - 55296 << 10 | n3 - 56320);
      } else o3 && (t3 -= 3) > -1 && i22.push(239, 191, 189);
      if (o3 = null, n3 < 128) {
        if ((t3 -= 1) < 0) break;
        i22.push(n3);
      } else if (n3 < 2048) {
        if ((t3 -= 2) < 0) break;
        i22.push(n3 >> 6 | 192, 63 & n3 | 128);
      } else if (n3 < 65536) {
        if ((t3 -= 3) < 0) break;
        i22.push(n3 >> 12 | 224, n3 >> 6 & 63 | 128, 63 & n3 | 128);
      } else {
        if (!(n3 < 1114112)) throw new Error("Invalid code point");
        if ((t3 -= 4) < 0) break;
        i22.push(n3 >> 18 | 240, n3 >> 12 & 63 | 128, n3 >> 6 & 63 | 128, 63 & n3 | 128);
      }
    }
    return i22;
  }
  function K(e3) {
    return o2.toByteArray((function(e4) {
      if ((e4 = (e4 = e4.split("=")[0]).trim().replace(z, "")).length < 2) return "";
      for (; e4.length % 4 != 0; ) e4 += "=";
      return e4;
    })(e3));
  }
  function Q(e3, t3, n3, r3) {
    let o3;
    for (o3 = 0; o3 < r3 && !(o3 + n3 >= t3.length || o3 >= e3.length); ++o3) t3[o3 + n3] = e3[o3];
    return o3;
  }
  function Y(e3, t3) {
    return e3 instanceof t3 || null != e3 && null != e3.constructor && null != e3.constructor.name && e3.constructor.name === t3.name;
  }
  function X(e3) {
    return e3 != e3;
  }
  const J = (function() {
    const e3 = "0123456789abcdef", t3 = new Array(256);
    for (let n3 = 0; n3 < 16; ++n3) {
      const r3 = 16 * n3;
      for (let o3 = 0; o3 < 16; ++o3) t3[r3 + o3] = e3[n3] + e3[o3];
    }
    return t3;
  })();
  function Z(e3) {
    return "undefined" == typeof BigInt ? ee : e3;
  }
  function ee() {
    throw new Error("BigInt not supported");
  }
}, "./node_modules/call-bind/callBound.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/get-intrinsic/index.js"), o2 = n2("./node_modules/call-bind/index.js"), i2 = o2(r2("String.prototype.indexOf"));
  e2.exports = function(e3, t3) {
    var n3 = r2(e3, !!t3);
    return "function" == typeof n3 && i2(e3, ".prototype.") > -1 ? o2(n3) : n3;
  };
}, "./node_modules/call-bind/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/function-bind/index.js"), o2 = n2("./node_modules/get-intrinsic/index.js"), i2 = o2("%Function.prototype.apply%"), s2 = o2("%Function.prototype.call%"), a = o2("%Reflect.apply%", true) || r2.call(s2, i2), l = o2("%Object.getOwnPropertyDescriptor%", true), u = o2("%Object.defineProperty%", true), c2 = o2("%Math.max%");
  if (u) try {
    u({}, "a", { value: 1 });
  } catch (e3) {
    u = null;
  }
  e2.exports = function(e3) {
    var t3 = a(r2, s2, arguments);
    l && u && (l(t3, "length").configurable && u(t3, "length", { value: 1 + c2(0, e3.length - (arguments.length - 1)) }));
    return t3;
  };
  var f = function() {
    return a(r2, i2, arguments);
  };
  u ? u(e2.exports, "apply", { value: f }) : e2.exports.apply = f;
}, "./node_modules/chalk/source/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/ansi-styles/index.js"), { stdout: o2, stderr: i2 } = n2("./node_modules/supports-color/browser.js"), { stringReplaceAll: s2, stringEncaseCRLFWithFirstIndex: a } = n2("./node_modules/chalk/source/util.js"), { isArray: l } = Array, u = ["ansi", "ansi", "ansi256", "ansi16m"], c2 = /* @__PURE__ */ Object.create(null);
  class f {
    constructor(e3) {
      return p(e3);
    }
  }
  const p = (e3) => {
    const t3 = {};
    return ((e4, t4 = {}) => {
      if (t4.level && !(Number.isInteger(t4.level) && t4.level >= 0 && t4.level <= 3)) throw new Error("The `level` option should be an integer from 0 to 3");
      const n3 = o2 ? o2.level : 0;
      e4.level = void 0 === t4.level ? n3 : t4.level;
    })(t3, e3), t3.template = (...e4) => E(t3.template, ...e4), Object.setPrototypeOf(t3, d.prototype), Object.setPrototypeOf(t3.template, t3), t3.template.constructor = () => {
      throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
    }, t3.template.Instance = f, t3.template;
  };
  function d(e3) {
    return p(e3);
  }
  for (const [e3, t3] of Object.entries(r2)) c2[e3] = { get() {
    const n3 = y(this, m2(t3.open, t3.close, this._styler), this._isEmpty);
    return Object.defineProperty(this, e3, { value: n3 }), n3;
  } };
  c2.visible = { get() {
    const e3 = y(this, this._styler, true);
    return Object.defineProperty(this, "visible", { value: e3 }), e3;
  } };
  const h = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
  for (const e3 of h) c2[e3] = { get() {
    const { level: t3 } = this;
    return function(...n3) {
      const o3 = m2(r2.color[u[t3]][e3](...n3), r2.color.close, this._styler);
      return y(this, o3, this._isEmpty);
    };
  } };
  for (const e3 of h) {
    c2["bg" + e3[0].toUpperCase() + e3.slice(1)] = { get() {
      const { level: t3 } = this;
      return function(...n3) {
        const o3 = m2(r2.bgColor[u[t3]][e3](...n3), r2.bgColor.close, this._styler);
        return y(this, o3, this._isEmpty);
      };
    } };
  }
  const g = Object.defineProperties((() => {
  }), { ...c2, level: { enumerable: true, get() {
    return this._generator.level;
  }, set(e3) {
    this._generator.level = e3;
  } } }), m2 = (e3, t3, n3) => {
    let r3, o3;
    return void 0 === n3 ? (r3 = e3, o3 = t3) : (r3 = n3.openAll + e3, o3 = t3 + n3.closeAll), { open: e3, close: t3, openAll: r3, closeAll: o3, parent: n3 };
  }, y = (e3, t3, n3) => {
    const r3 = (...e4) => l(e4[0]) && l(e4[0].raw) ? b(r3, E(r3, ...e4)) : b(r3, 1 === e4.length ? "" + e4[0] : e4.join(" "));
    return Object.setPrototypeOf(r3, g), r3._generator = e3, r3._styler = t3, r3._isEmpty = n3, r3;
  }, b = (e3, t3) => {
    if (e3.level <= 0 || !t3) return e3._isEmpty ? "" : t3;
    let n3 = e3._styler;
    if (void 0 === n3) return t3;
    const { openAll: r3, closeAll: o3 } = n3;
    if (-1 !== t3.indexOf("\x1B")) for (; void 0 !== n3; ) t3 = s2(t3, n3.close, n3.open), n3 = n3.parent;
    const i22 = t3.indexOf("\n");
    return -1 !== i22 && (t3 = a(t3, o3, r3, i22)), r3 + t3 + o3;
  };
  let v;
  const E = (e3, ...t3) => {
    const [r3] = t3;
    if (!l(r3) || !l(r3.raw)) return t3.join(" ");
    const o3 = t3.slice(1), i22 = [r3.raw[0]];
    for (let e4 = 1; e4 < r3.length; e4++) i22.push(String(o3[e4 - 1]).replace(/[{}\\]/g, "\\$&"), String(r3.raw[e4]));
    return void 0 === v && (v = n2("./node_modules/chalk/source/templates.js")), v(e3, i22.join(""));
  };
  Object.defineProperties(d.prototype, c2);
  const j = d();
  j.supportsColor = o2, j.stderr = d({ level: i2 ? i2.level : 0 }), j.stderr.supportsColor = i2, e2.exports = j;
}, "./node_modules/chalk/source/templates.js": (e2) => {
  const t2 = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi, n2 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g, r2 = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/, o2 = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi, i2 = /* @__PURE__ */ new Map([["n", "\n"], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
  function s2(e3) {
    const t3 = "u" === e3[0], n3 = "{" === e3[1];
    return t3 && !n3 && 5 === e3.length || "x" === e3[0] && 3 === e3.length ? String.fromCharCode(parseInt(e3.slice(1), 16)) : t3 && n3 ? String.fromCodePoint(parseInt(e3.slice(2, -1), 16)) : i2.get(e3) || e3;
  }
  function a(e3, t3) {
    const n3 = [], i22 = t3.trim().split(/\s*,\s*/g);
    let a2;
    for (const t4 of i22) {
      const i3 = Number(t4);
      if (Number.isNaN(i3)) {
        if (!(a2 = t4.match(r2))) throw new Error(`Invalid Chalk template style argument: ${t4} (in style '${e3}')`);
        n3.push(a2[2].replace(o2, ((e4, t5, n4) => t5 ? s2(t5) : n4)));
      } else n3.push(i3);
    }
    return n3;
  }
  function l(e3) {
    n2.lastIndex = 0;
    const t3 = [];
    let r3;
    for (; null !== (r3 = n2.exec(e3)); ) {
      const e4 = r3[1];
      if (r3[2]) {
        const n3 = a(e4, r3[2]);
        t3.push([e4].concat(n3));
      } else t3.push([e4]);
    }
    return t3;
  }
  function u(e3, t3) {
    const n3 = {};
    for (const e4 of t3) for (const t4 of e4.styles) n3[t4[0]] = e4.inverse ? null : t4.slice(1);
    let r3 = e3;
    for (const [e4, t4] of Object.entries(n3)) if (Array.isArray(t4)) {
      if (!(e4 in r3)) throw new Error(`Unknown Chalk style: ${e4}`);
      r3 = t4.length > 0 ? r3[e4](...t4) : r3[e4];
    }
    return r3;
  }
  e2.exports = (e3, n3) => {
    const r3 = [], o3 = [];
    let i22 = [];
    if (n3.replace(t2, ((t3, n4, a2, c2, f, p) => {
      if (n4) i22.push(s2(n4));
      else if (c2) {
        const t4 = i22.join("");
        i22 = [], o3.push(0 === r3.length ? t4 : u(e3, r3)(t4)), r3.push({ inverse: a2, styles: l(c2) });
      } else if (f) {
        if (0 === r3.length) throw new Error("Found extraneous } in Chalk template literal");
        o3.push(u(e3, r3)(i22.join(""))), i22 = [], r3.pop();
      } else i22.push(p);
    })), o3.push(i22.join("")), r3.length > 0) {
      const e4 = `Chalk template literal is missing ${r3.length} closing bracket${1 === r3.length ? "" : "s"} (\`}\`)`;
      throw new Error(e4);
    }
    return o3.join("");
  };
}, "./node_modules/chalk/source/util.js": (e2) => {
  e2.exports = { stringReplaceAll: (e3, t2, n2) => {
    let r2 = e3.indexOf(t2);
    if (-1 === r2) return e3;
    const o2 = t2.length;
    let i2 = 0, s2 = "";
    do {
      s2 += e3.substr(i2, r2 - i2) + t2 + n2, i2 = r2 + o2, r2 = e3.indexOf(t2, i2);
    } while (-1 !== r2);
    return s2 += e3.substr(i2), s2;
  }, stringEncaseCRLFWithFirstIndex: (e3, t2, n2, r2) => {
    let o2 = 0, i2 = "";
    do {
      const s2 = "\r" === e3[r2 - 1];
      i2 += e3.substr(o2, (s2 ? r2 - 1 : r2) - o2) + t2 + (s2 ? "\r\n" : "\n") + n2, o2 = r2 + 1, r2 = e3.indexOf("\n", o2);
    } while (-1 !== r2);
    return i2 += e3.substr(o2), i2;
  } };
}, "./node_modules/ci-info/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/ci-info/vendors.json"), o2 = define_process_env_default;
  function i2(e3) {
    return "string" == typeof e3 ? !!o2[e3] : "env" in e3 ? o2[e3.env] && o2[e3.env].includes(e3.includes) : "any" in e3 ? e3.any.some((function(e4) {
      return !!o2[e4];
    })) : Object.keys(e3).every((function(t3) {
      return o2[t3] === e3[t3];
    }));
  }
  Object.defineProperty(t2, "_vendors", { value: r2.map((function(e3) {
    return e3.constant;
  })) }), t2.name = null, t2.isPR = null, r2.forEach((function(e3) {
    const n3 = (Array.isArray(e3.env) ? e3.env : [e3.env]).every((function(e4) {
      return i2(e4);
    }));
    if (t2[e3.constant] = n3, n3) switch (t2.name = e3.name, typeof e3.pr) {
      case "string":
        t2.isPR = !!o2[e3.pr];
        break;
      case "object":
        "env" in e3.pr ? t2.isPR = e3.pr.env in o2 && o2[e3.pr.env] !== e3.pr.ne : "any" in e3.pr ? t2.isPR = e3.pr.any.some((function(e4) {
          return !!o2[e4];
        })) : t2.isPR = i2(e3.pr);
        break;
      default:
        t2.isPR = null;
    }
  })), t2.isCI = !("false" === o2.CI || !(o2.BUILD_ID || o2.BUILD_NUMBER || o2.CI || o2.CI_APP_ID || o2.CI_BUILD_ID || o2.CI_BUILD_NUMBER || o2.CI_NAME || o2.CONTINUOUS_INTEGRATION || o2.RUN_ID || t2.name));
}, "./node_modules/color-convert/conversions.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/color-name/index.js"), o2 = {};
  for (const e3 of Object.keys(r2)) o2[r2[e3]] = e3;
  const i2 = { rgb: { channels: 3, labels: "rgb" }, hsl: { channels: 3, labels: "hsl" }, hsv: { channels: 3, labels: "hsv" }, hwb: { channels: 3, labels: "hwb" }, cmyk: { channels: 4, labels: "cmyk" }, xyz: { channels: 3, labels: "xyz" }, lab: { channels: 3, labels: "lab" }, lch: { channels: 3, labels: "lch" }, hex: { channels: 1, labels: ["hex"] }, keyword: { channels: 1, labels: ["keyword"] }, ansi16: { channels: 1, labels: ["ansi16"] }, ansi256: { channels: 1, labels: ["ansi256"] }, hcg: { channels: 3, labels: ["h", "c", "g"] }, apple: { channels: 3, labels: ["r16", "g16", "b16"] }, gray: { channels: 1, labels: ["gray"] } };
  e2.exports = i2;
  for (const e3 of Object.keys(i2)) {
    if (!("channels" in i2[e3])) throw new Error("missing channels property: " + e3);
    if (!("labels" in i2[e3])) throw new Error("missing channel labels property: " + e3);
    if (i2[e3].labels.length !== i2[e3].channels) throw new Error("channel and label counts mismatch: " + e3);
    const { channels: t3, labels: n3 } = i2[e3];
    delete i2[e3].channels, delete i2[e3].labels, Object.defineProperty(i2[e3], "channels", { value: t3 }), Object.defineProperty(i2[e3], "labels", { value: n3 });
  }
  i2.rgb.hsl = function(e3) {
    const t3 = e3[0] / 255, n3 = e3[1] / 255, r3 = e3[2] / 255, o3 = Math.min(t3, n3, r3), i22 = Math.max(t3, n3, r3), s2 = i22 - o3;
    let a, l;
    i22 === o3 ? a = 0 : t3 === i22 ? a = (n3 - r3) / s2 : n3 === i22 ? a = 2 + (r3 - t3) / s2 : r3 === i22 && (a = 4 + (t3 - n3) / s2), a = Math.min(60 * a, 360), a < 0 && (a += 360);
    const u = (o3 + i22) / 2;
    return l = i22 === o3 ? 0 : u <= 0.5 ? s2 / (i22 + o3) : s2 / (2 - i22 - o3), [a, 100 * l, 100 * u];
  }, i2.rgb.hsv = function(e3) {
    let t3, n3, r3, o3, i22;
    const s2 = e3[0] / 255, a = e3[1] / 255, l = e3[2] / 255, u = Math.max(s2, a, l), c2 = u - Math.min(s2, a, l), f = function(e4) {
      return (u - e4) / 6 / c2 + 0.5;
    };
    return 0 === c2 ? (o3 = 0, i22 = 0) : (i22 = c2 / u, t3 = f(s2), n3 = f(a), r3 = f(l), s2 === u ? o3 = r3 - n3 : a === u ? o3 = 1 / 3 + t3 - r3 : l === u && (o3 = 2 / 3 + n3 - t3), o3 < 0 ? o3 += 1 : o3 > 1 && (o3 -= 1)), [360 * o3, 100 * i22, 100 * u];
  }, i2.rgb.hwb = function(e3) {
    const t3 = e3[0], n3 = e3[1];
    let r3 = e3[2];
    const o3 = i2.rgb.hsl(e3)[0], s2 = 1 / 255 * Math.min(t3, Math.min(n3, r3));
    return r3 = 1 - 1 / 255 * Math.max(t3, Math.max(n3, r3)), [o3, 100 * s2, 100 * r3];
  }, i2.rgb.cmyk = function(e3) {
    const t3 = e3[0] / 255, n3 = e3[1] / 255, r3 = e3[2] / 255, o3 = Math.min(1 - t3, 1 - n3, 1 - r3);
    return [100 * ((1 - t3 - o3) / (1 - o3) || 0), 100 * ((1 - n3 - o3) / (1 - o3) || 0), 100 * ((1 - r3 - o3) / (1 - o3) || 0), 100 * o3];
  }, i2.rgb.keyword = function(e3) {
    const t3 = o2[e3];
    if (t3) return t3;
    let n3, i22 = 1 / 0;
    for (const t4 of Object.keys(r2)) {
      const o3 = r2[t4], l = (a = o3, ((s2 = e3)[0] - a[0]) ** 2 + (s2[1] - a[1]) ** 2 + (s2[2] - a[2]) ** 2);
      l < i22 && (i22 = l, n3 = t4);
    }
    var s2, a;
    return n3;
  }, i2.keyword.rgb = function(e3) {
    return r2[e3];
  }, i2.rgb.xyz = function(e3) {
    let t3 = e3[0] / 255, n3 = e3[1] / 255, r3 = e3[2] / 255;
    t3 = t3 > 0.04045 ? ((t3 + 0.055) / 1.055) ** 2.4 : t3 / 12.92, n3 = n3 > 0.04045 ? ((n3 + 0.055) / 1.055) ** 2.4 : n3 / 12.92, r3 = r3 > 0.04045 ? ((r3 + 0.055) / 1.055) ** 2.4 : r3 / 12.92;
    return [100 * (0.4124 * t3 + 0.3576 * n3 + 0.1805 * r3), 100 * (0.2126 * t3 + 0.7152 * n3 + 0.0722 * r3), 100 * (0.0193 * t3 + 0.1192 * n3 + 0.9505 * r3)];
  }, i2.rgb.lab = function(e3) {
    const t3 = i2.rgb.xyz(e3);
    let n3 = t3[0], r3 = t3[1], o3 = t3[2];
    n3 /= 95.047, r3 /= 100, o3 /= 108.883, n3 = n3 > 8856e-6 ? n3 ** (1 / 3) : 7.787 * n3 + 16 / 116, r3 = r3 > 8856e-6 ? r3 ** (1 / 3) : 7.787 * r3 + 16 / 116, o3 = o3 > 8856e-6 ? o3 ** (1 / 3) : 7.787 * o3 + 16 / 116;
    return [116 * r3 - 16, 500 * (n3 - r3), 200 * (r3 - o3)];
  }, i2.hsl.rgb = function(e3) {
    const t3 = e3[0] / 360, n3 = e3[1] / 100, r3 = e3[2] / 100;
    let o3, i22, s2;
    if (0 === n3) return s2 = 255 * r3, [s2, s2, s2];
    o3 = r3 < 0.5 ? r3 * (1 + n3) : r3 + n3 - r3 * n3;
    const a = 2 * r3 - o3, l = [0, 0, 0];
    for (let e4 = 0; e4 < 3; e4++) i22 = t3 + 1 / 3 * -(e4 - 1), i22 < 0 && i22++, i22 > 1 && i22--, s2 = 6 * i22 < 1 ? a + 6 * (o3 - a) * i22 : 2 * i22 < 1 ? o3 : 3 * i22 < 2 ? a + (o3 - a) * (2 / 3 - i22) * 6 : a, l[e4] = 255 * s2;
    return l;
  }, i2.hsl.hsv = function(e3) {
    const t3 = e3[0];
    let n3 = e3[1] / 100, r3 = e3[2] / 100, o3 = n3;
    const i22 = Math.max(r3, 0.01);
    r3 *= 2, n3 *= r3 <= 1 ? r3 : 2 - r3, o3 *= i22 <= 1 ? i22 : 2 - i22;
    return [t3, 100 * (0 === r3 ? 2 * o3 / (i22 + o3) : 2 * n3 / (r3 + n3)), 100 * ((r3 + n3) / 2)];
  }, i2.hsv.rgb = function(e3) {
    const t3 = e3[0] / 60, n3 = e3[1] / 100;
    let r3 = e3[2] / 100;
    const o3 = Math.floor(t3) % 6, i22 = t3 - Math.floor(t3), s2 = 255 * r3 * (1 - n3), a = 255 * r3 * (1 - n3 * i22), l = 255 * r3 * (1 - n3 * (1 - i22));
    switch (r3 *= 255, o3) {
      case 0:
        return [r3, l, s2];
      case 1:
        return [a, r3, s2];
      case 2:
        return [s2, r3, l];
      case 3:
        return [s2, a, r3];
      case 4:
        return [l, s2, r3];
      case 5:
        return [r3, s2, a];
    }
  }, i2.hsv.hsl = function(e3) {
    const t3 = e3[0], n3 = e3[1] / 100, r3 = e3[2] / 100, o3 = Math.max(r3, 0.01);
    let i22, s2;
    s2 = (2 - n3) * r3;
    const a = (2 - n3) * o3;
    return i22 = n3 * o3, i22 /= a <= 1 ? a : 2 - a, i22 = i22 || 0, s2 /= 2, [t3, 100 * i22, 100 * s2];
  }, i2.hwb.rgb = function(e3) {
    const t3 = e3[0] / 360;
    let n3 = e3[1] / 100, r3 = e3[2] / 100;
    const o3 = n3 + r3;
    let i22;
    o3 > 1 && (n3 /= o3, r3 /= o3);
    const s2 = Math.floor(6 * t3), a = 1 - r3;
    i22 = 6 * t3 - s2, 0 != (1 & s2) && (i22 = 1 - i22);
    const l = n3 + i22 * (a - n3);
    let u, c2, f;
    switch (s2) {
      default:
      case 6:
      case 0:
        u = a, c2 = l, f = n3;
        break;
      case 1:
        u = l, c2 = a, f = n3;
        break;
      case 2:
        u = n3, c2 = a, f = l;
        break;
      case 3:
        u = n3, c2 = l, f = a;
        break;
      case 4:
        u = l, c2 = n3, f = a;
        break;
      case 5:
        u = a, c2 = n3, f = l;
    }
    return [255 * u, 255 * c2, 255 * f];
  }, i2.cmyk.rgb = function(e3) {
    const t3 = e3[0] / 100, n3 = e3[1] / 100, r3 = e3[2] / 100, o3 = e3[3] / 100;
    return [255 * (1 - Math.min(1, t3 * (1 - o3) + o3)), 255 * (1 - Math.min(1, n3 * (1 - o3) + o3)), 255 * (1 - Math.min(1, r3 * (1 - o3) + o3))];
  }, i2.xyz.rgb = function(e3) {
    const t3 = e3[0] / 100, n3 = e3[1] / 100, r3 = e3[2] / 100;
    let o3, i22, s2;
    return o3 = 3.2406 * t3 + -1.5372 * n3 + -0.4986 * r3, i22 = -0.9689 * t3 + 1.8758 * n3 + 0.0415 * r3, s2 = 0.0557 * t3 + -0.204 * n3 + 1.057 * r3, o3 = o3 > 31308e-7 ? 1.055 * o3 ** (1 / 2.4) - 0.055 : 12.92 * o3, i22 = i22 > 31308e-7 ? 1.055 * i22 ** (1 / 2.4) - 0.055 : 12.92 * i22, s2 = s2 > 31308e-7 ? 1.055 * s2 ** (1 / 2.4) - 0.055 : 12.92 * s2, o3 = Math.min(Math.max(0, o3), 1), i22 = Math.min(Math.max(0, i22), 1), s2 = Math.min(Math.max(0, s2), 1), [255 * o3, 255 * i22, 255 * s2];
  }, i2.xyz.lab = function(e3) {
    let t3 = e3[0], n3 = e3[1], r3 = e3[2];
    t3 /= 95.047, n3 /= 100, r3 /= 108.883, t3 = t3 > 8856e-6 ? t3 ** (1 / 3) : 7.787 * t3 + 16 / 116, n3 = n3 > 8856e-6 ? n3 ** (1 / 3) : 7.787 * n3 + 16 / 116, r3 = r3 > 8856e-6 ? r3 ** (1 / 3) : 7.787 * r3 + 16 / 116;
    return [116 * n3 - 16, 500 * (t3 - n3), 200 * (n3 - r3)];
  }, i2.lab.xyz = function(e3) {
    let t3, n3, r3;
    n3 = (e3[0] + 16) / 116, t3 = e3[1] / 500 + n3, r3 = n3 - e3[2] / 200;
    const o3 = n3 ** 3, i22 = t3 ** 3, s2 = r3 ** 3;
    return n3 = o3 > 8856e-6 ? o3 : (n3 - 16 / 116) / 7.787, t3 = i22 > 8856e-6 ? i22 : (t3 - 16 / 116) / 7.787, r3 = s2 > 8856e-6 ? s2 : (r3 - 16 / 116) / 7.787, t3 *= 95.047, n3 *= 100, r3 *= 108.883, [t3, n3, r3];
  }, i2.lab.lch = function(e3) {
    const t3 = e3[0], n3 = e3[1], r3 = e3[2];
    let o3;
    o3 = 360 * Math.atan2(r3, n3) / 2 / Math.PI, o3 < 0 && (o3 += 360);
    return [t3, Math.sqrt(n3 * n3 + r3 * r3), o3];
  }, i2.lch.lab = function(e3) {
    const t3 = e3[0], n3 = e3[1], r3 = e3[2] / 360 * 2 * Math.PI;
    return [t3, n3 * Math.cos(r3), n3 * Math.sin(r3)];
  }, i2.rgb.ansi16 = function(e3, t3 = null) {
    const [n3, r3, o3] = e3;
    let s2 = null === t3 ? i2.rgb.hsv(e3)[2] : t3;
    if (s2 = Math.round(s2 / 50), 0 === s2) return 30;
    let a = 30 + (Math.round(o3 / 255) << 2 | Math.round(r3 / 255) << 1 | Math.round(n3 / 255));
    return 2 === s2 && (a += 60), a;
  }, i2.hsv.ansi16 = function(e3) {
    return i2.rgb.ansi16(i2.hsv.rgb(e3), e3[2]);
  }, i2.rgb.ansi256 = function(e3) {
    const t3 = e3[0], n3 = e3[1], r3 = e3[2];
    if (t3 === n3 && n3 === r3) return t3 < 8 ? 16 : t3 > 248 ? 231 : Math.round((t3 - 8) / 247 * 24) + 232;
    return 16 + 36 * Math.round(t3 / 255 * 5) + 6 * Math.round(n3 / 255 * 5) + Math.round(r3 / 255 * 5);
  }, i2.ansi16.rgb = function(e3) {
    let t3 = e3 % 10;
    if (0 === t3 || 7 === t3) return e3 > 50 && (t3 += 3.5), t3 = t3 / 10.5 * 255, [t3, t3, t3];
    const n3 = 0.5 * (1 + ~~(e3 > 50));
    return [(1 & t3) * n3 * 255, (t3 >> 1 & 1) * n3 * 255, (t3 >> 2 & 1) * n3 * 255];
  }, i2.ansi256.rgb = function(e3) {
    if (e3 >= 232) {
      const t4 = 10 * (e3 - 232) + 8;
      return [t4, t4, t4];
    }
    let t3;
    e3 -= 16;
    return [Math.floor(e3 / 36) / 5 * 255, Math.floor((t3 = e3 % 36) / 6) / 5 * 255, t3 % 6 / 5 * 255];
  }, i2.rgb.hex = function(e3) {
    const t3 = (((255 & Math.round(e3[0])) << 16) + ((255 & Math.round(e3[1])) << 8) + (255 & Math.round(e3[2]))).toString(16).toUpperCase();
    return "000000".substring(t3.length) + t3;
  }, i2.hex.rgb = function(e3) {
    const t3 = e3.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!t3) return [0, 0, 0];
    let n3 = t3[0];
    3 === t3[0].length && (n3 = n3.split("").map(((e4) => e4 + e4)).join(""));
    const r3 = parseInt(n3, 16);
    return [r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3];
  }, i2.rgb.hcg = function(e3) {
    const t3 = e3[0] / 255, n3 = e3[1] / 255, r3 = e3[2] / 255, o3 = Math.max(Math.max(t3, n3), r3), i22 = Math.min(Math.min(t3, n3), r3), s2 = o3 - i22;
    let a, l;
    return a = s2 < 1 ? i22 / (1 - s2) : 0, l = s2 <= 0 ? 0 : o3 === t3 ? (n3 - r3) / s2 % 6 : o3 === n3 ? 2 + (r3 - t3) / s2 : 4 + (t3 - n3) / s2, l /= 6, l %= 1, [360 * l, 100 * s2, 100 * a];
  }, i2.hsl.hcg = function(e3) {
    const t3 = e3[1] / 100, n3 = e3[2] / 100, r3 = n3 < 0.5 ? 2 * t3 * n3 : 2 * t3 * (1 - n3);
    let o3 = 0;
    return r3 < 1 && (o3 = (n3 - 0.5 * r3) / (1 - r3)), [e3[0], 100 * r3, 100 * o3];
  }, i2.hsv.hcg = function(e3) {
    const t3 = e3[1] / 100, n3 = e3[2] / 100, r3 = t3 * n3;
    let o3 = 0;
    return r3 < 1 && (o3 = (n3 - r3) / (1 - r3)), [e3[0], 100 * r3, 100 * o3];
  }, i2.hcg.rgb = function(e3) {
    const t3 = e3[0] / 360, n3 = e3[1] / 100, r3 = e3[2] / 100;
    if (0 === n3) return [255 * r3, 255 * r3, 255 * r3];
    const o3 = [0, 0, 0], i22 = t3 % 1 * 6, s2 = i22 % 1, a = 1 - s2;
    let l = 0;
    switch (Math.floor(i22)) {
      case 0:
        o3[0] = 1, o3[1] = s2, o3[2] = 0;
        break;
      case 1:
        o3[0] = a, o3[1] = 1, o3[2] = 0;
        break;
      case 2:
        o3[0] = 0, o3[1] = 1, o3[2] = s2;
        break;
      case 3:
        o3[0] = 0, o3[1] = a, o3[2] = 1;
        break;
      case 4:
        o3[0] = s2, o3[1] = 0, o3[2] = 1;
        break;
      default:
        o3[0] = 1, o3[1] = 0, o3[2] = a;
    }
    return l = (1 - n3) * r3, [255 * (n3 * o3[0] + l), 255 * (n3 * o3[1] + l), 255 * (n3 * o3[2] + l)];
  }, i2.hcg.hsv = function(e3) {
    const t3 = e3[1] / 100, n3 = t3 + e3[2] / 100 * (1 - t3);
    let r3 = 0;
    return n3 > 0 && (r3 = t3 / n3), [e3[0], 100 * r3, 100 * n3];
  }, i2.hcg.hsl = function(e3) {
    const t3 = e3[1] / 100, n3 = e3[2] / 100 * (1 - t3) + 0.5 * t3;
    let r3 = 0;
    return n3 > 0 && n3 < 0.5 ? r3 = t3 / (2 * n3) : n3 >= 0.5 && n3 < 1 && (r3 = t3 / (2 * (1 - n3))), [e3[0], 100 * r3, 100 * n3];
  }, i2.hcg.hwb = function(e3) {
    const t3 = e3[1] / 100, n3 = t3 + e3[2] / 100 * (1 - t3);
    return [e3[0], 100 * (n3 - t3), 100 * (1 - n3)];
  }, i2.hwb.hcg = function(e3) {
    const t3 = e3[1] / 100, n3 = 1 - e3[2] / 100, r3 = n3 - t3;
    let o3 = 0;
    return r3 < 1 && (o3 = (n3 - r3) / (1 - r3)), [e3[0], 100 * r3, 100 * o3];
  }, i2.apple.rgb = function(e3) {
    return [e3[0] / 65535 * 255, e3[1] / 65535 * 255, e3[2] / 65535 * 255];
  }, i2.rgb.apple = function(e3) {
    return [e3[0] / 255 * 65535, e3[1] / 255 * 65535, e3[2] / 255 * 65535];
  }, i2.gray.rgb = function(e3) {
    return [e3[0] / 100 * 255, e3[0] / 100 * 255, e3[0] / 100 * 255];
  }, i2.gray.hsl = function(e3) {
    return [0, 0, e3[0]];
  }, i2.gray.hsv = i2.gray.hsl, i2.gray.hwb = function(e3) {
    return [0, 100, e3[0]];
  }, i2.gray.cmyk = function(e3) {
    return [0, 0, 0, e3[0]];
  }, i2.gray.lab = function(e3) {
    return [e3[0], 0, 0];
  }, i2.gray.hex = function(e3) {
    const t3 = 255 & Math.round(e3[0] / 100 * 255), n3 = ((t3 << 16) + (t3 << 8) + t3).toString(16).toUpperCase();
    return "000000".substring(n3.length) + n3;
  }, i2.rgb.gray = function(e3) {
    return [(e3[0] + e3[1] + e3[2]) / 3 / 255 * 100];
  };
}, "./node_modules/color-convert/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/color-convert/conversions.js"), o2 = n2("./node_modules/color-convert/route.js"), i2 = {};
  Object.keys(r2).forEach(((e3) => {
    i2[e3] = {}, Object.defineProperty(i2[e3], "channels", { value: r2[e3].channels }), Object.defineProperty(i2[e3], "labels", { value: r2[e3].labels });
    const t3 = o2(e3);
    Object.keys(t3).forEach(((n3) => {
      const r3 = t3[n3];
      i2[e3][n3] = (function(e4) {
        const t4 = function(...t5) {
          const n4 = t5[0];
          if (null == n4) return n4;
          n4.length > 1 && (t5 = n4);
          const r4 = e4(t5);
          if ("object" == typeof r4) for (let e5 = r4.length, t6 = 0; t6 < e5; t6++) r4[t6] = Math.round(r4[t6]);
          return r4;
        };
        return "conversion" in e4 && (t4.conversion = e4.conversion), t4;
      })(r3), i2[e3][n3].raw = (function(e4) {
        const t4 = function(...t5) {
          const n4 = t5[0];
          return null == n4 ? n4 : (n4.length > 1 && (t5 = n4), e4(t5));
        };
        return "conversion" in e4 && (t4.conversion = e4.conversion), t4;
      })(r3);
    }));
  })), e2.exports = i2;
}, "./node_modules/color-convert/route.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/color-convert/conversions.js");
  function o2(e3) {
    const t3 = (function() {
      const e4 = {}, t4 = Object.keys(r2);
      for (let n4 = t4.length, r3 = 0; r3 < n4; r3++) e4[t4[r3]] = { distance: -1, parent: null };
      return e4;
    })(), n3 = [e3];
    for (t3[e3].distance = 0; n3.length; ) {
      const e4 = n3.pop(), o3 = Object.keys(r2[e4]);
      for (let r3 = o3.length, i22 = 0; i22 < r3; i22++) {
        const r4 = o3[i22], s22 = t3[r4];
        -1 === s22.distance && (s22.distance = t3[e4].distance + 1, s22.parent = e4, n3.unshift(r4));
      }
    }
    return t3;
  }
  function i2(e3, t3) {
    return function(n3) {
      return t3(e3(n3));
    };
  }
  function s2(e3, t3) {
    const n3 = [t3[e3].parent, e3];
    let o3 = r2[t3[e3].parent][e3], s22 = t3[e3].parent;
    for (; t3[s22].parent; ) n3.unshift(t3[s22].parent), o3 = i2(r2[t3[s22].parent][s22], o3), s22 = t3[s22].parent;
    return o3.conversion = n3, o3;
  }
  e2.exports = function(e3) {
    const t3 = o2(e3), n3 = {}, r3 = Object.keys(t3);
    for (let e4 = r3.length, o3 = 0; o3 < e4; o3++) {
      const e5 = r3[o3];
      null !== t3[e5].parent && (n3[e5] = s2(e5, t3));
    }
    return n3;
  };
}, "./node_modules/color-name/index.js": (e2) => {
  e2.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
}, "./node_modules/console-browserify/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/util/util.js"), o2 = n2("./node_modules/assert/build/assert.js");
  function i2() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  var s2, a = Array.prototype.slice, l = {};
  s2 = void 0 !== n2.g && n2.g.console ? n2.g.console : "undefined" != typeof window && window.console ? window.console : {};
  for (var u = [[function() {
  }, "log"], [function() {
    s2.log.apply(s2, arguments);
  }, "info"], [function() {
    s2.log.apply(s2, arguments);
  }, "warn"], [function() {
    s2.warn.apply(s2, arguments);
  }, "error"], [function(e3) {
    l[e3] = i2();
  }, "time"], [function(e3) {
    var t3 = l[e3];
    if (!t3) throw new Error("No such label: " + e3);
    delete l[e3];
    var n3 = i2() - t3;
    s2.log(e3 + ": " + n3 + "ms");
  }, "timeEnd"], [function() {
    var e3 = new Error();
    e3.name = "Trace", e3.message = r2.format.apply(null, arguments), s2.error(e3.stack);
  }, "trace"], [function(e3) {
    s2.log(r2.inspect(e3) + "\n");
  }, "dir"], [function(e3) {
    if (!e3) {
      var t3 = a.call(arguments, 1);
      o2.ok(false, r2.format.apply(null, t3));
    }
  }, "assert"]], c2 = 0; c2 < u.length; c2++) {
    var f = u[c2], p = f[0], d = f[1];
    s2[d] || (s2[d] = p);
  }
  e2.exports = s2;
}, "./node_modules/define-properties/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/object-keys/index.js"), o2 = "function" == typeof Symbol && "symbol" == typeof Symbol("foo"), i2 = Object.prototype.toString, s2 = Array.prototype.concat, a = Object.defineProperty, l = n2("./node_modules/has-property-descriptors/index.js")(), u = a && l, c2 = function(e3, t3, n3, r3) {
    if (t3 in e3) {
      if (true === r3) {
        if (e3[t3] === n3) return;
      } else if ("function" != typeof (o3 = r3) || "[object Function]" !== i2.call(o3) || !r3()) return;
    }
    var o3;
    u ? a(e3, t3, { configurable: true, enumerable: false, value: n3, writable: true }) : e3[t3] = n3;
  }, f = function(e3, t3) {
    var n3 = arguments.length > 2 ? arguments[2] : {}, i22 = r2(t3);
    o2 && (i22 = s2.call(i22, Object.getOwnPropertySymbols(t3)));
    for (var a2 = 0; a2 < i22.length; a2 += 1) c2(e3, i22[a2], t3[i22[a2]], n3[i22[a2]]);
  };
  f.supportsDescriptors = !!u, e2.exports = f;
}, "./node_modules/diff-sequences/build/index.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3, t3, n3, s22) {
    f("aLength", e3), f("bLength", t3), p("isCommon", n3), p("foundSubsequence", s22);
    const a2 = o2(0, e3, 0, t3, n3);
    0 !== a2 && s22(a2, 0, 0);
    if (e3 !== a2 || t3 !== a2) {
      const o3 = a2, l2 = a2, u2 = i2(o3, e3 - 1, l2, t3 - 1, n3), f2 = e3 - u2, p2 = t3 - u2, d = a2 + u2;
      if (e3 !== d && t3 !== d) {
        c2(0, o3, f2, l2, p2, false, [{ foundSubsequence: s22, isCommon: n3 }], [r2], [r2], { aCommonFollowing: r2, aCommonPreceding: r2, aEndPreceding: r2, aStartFollowing: r2, bCommonFollowing: r2, bCommonPreceding: r2, bEndPreceding: r2, bStartFollowing: r2, nChangeFollowing: r2, nChangePreceding: r2, nCommonFollowing: r2, nCommonPreceding: r2 });
      }
      0 !== u2 && s22(u2, f2, p2);
    }
  };
  const n2 = "diff-sequences", r2 = 0, o2 = (e3, t3, n3, r3, o3) => {
    let i22 = 0;
    for (; e3 < t3 && n3 < r3 && o3(e3, n3); ) e3 += 1, n3 += 1, i22 += 1;
    return i22;
  }, i2 = (e3, t3, n3, r3, o3) => {
    let i22 = 0;
    for (; e3 <= t3 && n3 <= r3 && o3(t3, r3); ) t3 -= 1, r3 -= 1, i22 += 1;
    return i22;
  }, s2 = (e3, t3, n3, r3, i22, s22, a2) => {
    let l2 = 0, u2 = -e3, c22 = s22[l2], f2 = c22;
    s22[l2] += o2(c22 + 1, t3, r3 + c22 - u2 + 1, n3, i22);
    const p2 = e3 < a2 ? e3 : a2;
    for (l2 += 1, u2 += 2; l2 <= p2; l2 += 1, u2 += 2) {
      if (l2 !== e3 && f2 < s22[l2]) c22 = s22[l2];
      else if (c22 = f2 + 1, t3 <= c22) return l2 - 1;
      f2 = s22[l2], s22[l2] = c22 + o2(c22 + 1, t3, r3 + c22 - u2 + 1, n3, i22);
    }
    return a2;
  }, a = (e3, t3, n3, r3, o3, s22, a2) => {
    let l2 = 0, u2 = e3, c22 = s22[l2], f2 = c22;
    s22[l2] -= i2(t3, c22 - 1, n3, r3 + c22 - u2 - 1, o3);
    const p2 = e3 < a2 ? e3 : a2;
    for (l2 += 1, u2 -= 2; l2 <= p2; l2 += 1, u2 -= 2) {
      if (l2 !== e3 && s22[l2] < f2) c22 = s22[l2];
      else if (c22 = f2 - 1, c22 < t3) return l2 - 1;
      f2 = s22[l2], s22[l2] = c22 - i2(t3, c22 - 1, n3, r3 + c22 - u2 - 1, o3);
    }
    return a2;
  }, l = (e3, t3, n3, s22, a2, l2, u2, c22, f2, p2, d) => {
    const h = s22 - t3, g = a2 - s22 - (n3 - t3), m2 = -g - (e3 - 1), y = e3 - 1 - g;
    let b = r2;
    const v = e3 < c22 ? e3 : c22;
    for (let r3 = 0, c3 = -e3; r3 <= v; r3 += 1, c3 += 2) {
      const v2 = 0 === r3 || r3 !== e3 && b < u2[r3], E = v2 ? u2[r3] : b, j = v2 ? E : E + 1, _ = h + j - c3, w = o2(j + 1, n3, _ + 1, a2, l2), x = j + w;
      if (b = u2[r3], u2[r3] = x, m2 <= c3 && c3 <= y) {
        const r4 = (e3 - 1 - (c3 + g)) / 2;
        if (r4 <= p2 && f2[r4] - 1 <= x) {
          const r5 = h + E - (v2 ? c3 + 1 : c3 - 1), o3 = i2(t3, E, s22, r5, l2), u3 = E - o3 + 1, f3 = r5 - o3 + 1;
          d.nChangePreceding = e3 - 1, e3 - 1 == u3 + f3 - t3 - s22 ? (d.aEndPreceding = t3, d.bEndPreceding = s22) : (d.aEndPreceding = u3, d.bEndPreceding = f3), d.nCommonPreceding = o3, 0 !== o3 && (d.aCommonPreceding = u3, d.bCommonPreceding = f3), d.nCommonFollowing = w, 0 !== w && (d.aCommonFollowing = j + 1, d.bCommonFollowing = _ + 1);
          const p3 = x + 1, g2 = _ + w + 1;
          return d.nChangeFollowing = e3 - 1, e3 - 1 == n3 + a2 - p3 - g2 ? (d.aStartFollowing = n3, d.bStartFollowing = a2) : (d.aStartFollowing = p3, d.bStartFollowing = g2), true;
        }
      }
    }
    return false;
  }, u = (e3, t3, n3, s22, a2, l2, u2, c22, f2, p2, d) => {
    const h = a2 - n3, g = a2 - s22 - (n3 - t3), m2 = g - e3, y = g + e3;
    let b = r2;
    const v = e3 < p2 ? e3 : p2;
    for (let r3 = 0, p3 = e3; r3 <= v; r3 += 1, p3 -= 2) {
      const v2 = 0 === r3 || r3 !== e3 && f2[r3] < b, E = v2 ? f2[r3] : b, j = v2 ? E : E - 1, _ = h + j - p3, w = i2(t3, j - 1, s22, _ - 1, l2), x = j - w;
      if (b = f2[r3], f2[r3] = x, m2 <= p3 && p3 <= y) {
        const r4 = (e3 + (p3 - g)) / 2;
        if (r4 <= c22 && x - 1 <= u2[r4]) {
          const r5 = _ - w;
          if (d.nChangePreceding = e3, e3 === x + r5 - t3 - s22 ? (d.aEndPreceding = t3, d.bEndPreceding = s22) : (d.aEndPreceding = x, d.bEndPreceding = r5), d.nCommonPreceding = w, 0 !== w && (d.aCommonPreceding = x, d.bCommonPreceding = r5), d.nChangeFollowing = e3 - 1, 1 === e3) d.nCommonFollowing = 0, d.aStartFollowing = n3, d.bStartFollowing = a2;
          else {
            const t4 = h + E - (v2 ? p3 - 1 : p3 + 1), r6 = o2(E, n3, t4, a2, l2);
            d.nCommonFollowing = r6, 0 !== r6 && (d.aCommonFollowing = E, d.bCommonFollowing = t4);
            const i22 = E + r6, s3 = t4 + r6;
            e3 - 1 == n3 + a2 - i22 - s3 ? (d.aStartFollowing = n3, d.bStartFollowing = a2) : (d.aStartFollowing = i22, d.bStartFollowing = s3);
          }
          return true;
        }
      }
    }
    return false;
  }, c2 = (e3, t3, r3, o3, i22, f2, p2, d, h, g) => {
    if (i22 - o3 < r3 - t3) {
      if ((f2 = !f2) && 1 === p2.length) {
        const { foundSubsequence: e5, isCommon: t4 } = p2[0];
        p2[1] = { foundSubsequence: (t5, n4, r4) => {
          e5(t5, r4, n4);
        }, isCommon: (e6, n4) => t4(n4, e6) };
      }
      const e4 = t3, n3 = r3;
      t3 = o3, r3 = i22, o3 = e4, i22 = n3;
    }
    const { foundSubsequence: m2, isCommon: y } = p2[f2 ? 1 : 0];
    ((e4, t4, r4, o4, i3, c22, f3, p3, d2) => {
      const h2 = o4 - t4, g2 = i3 - r4, m22 = r4 - t4, y2 = i3 - o4, b2 = y2 - m22;
      let v2 = m22, E2 = m22;
      if (f3[0] = t4 - 1, p3[0] = r4, b2 % 2 == 0) {
        const n3 = (e4 || b2) / 2, l2 = (m22 + y2) / 2;
        for (let e5 = 1; e5 <= l2; e5 += 1) if (v2 = s2(e5, r4, i3, h2, c22, f3, v2), e5 < n3) E2 = a(e5, t4, o4, g2, c22, p3, E2);
        else if (u(e5, t4, r4, o4, i3, c22, f3, v2, p3, E2, d2)) return;
      } else {
        const n3 = ((e4 || b2) + 1) / 2, u2 = (m22 + y2 + 1) / 2;
        let j2 = 1;
        for (v2 = s2(j2, r4, i3, h2, c22, f3, v2), j2 += 1; j2 <= u2; j2 += 1) if (E2 = a(j2 - 1, t4, o4, g2, c22, p3, E2), j2 < n3) v2 = s2(j2, r4, i3, h2, c22, f3, v2);
        else if (l(j2, t4, r4, o4, i3, c22, f3, v2, p3, E2, d2)) return;
      }
      throw new Error(`${n2}: no overlap aStart=${t4} aEnd=${r4} bStart=${o4} bEnd=${i3}`);
    })(e3, t3, r3, o3, i22, y, d, h, g);
    const { nChangePreceding: b, aEndPreceding: v, bEndPreceding: E, nCommonPreceding: j, aCommonPreceding: _, bCommonPreceding: w, nCommonFollowing: x, aCommonFollowing: O, bCommonFollowing: R, nChangeFollowing: A, aStartFollowing: S, bStartFollowing: C } = g;
    t3 < v && o3 < E && c2(b, t3, v, o3, E, f2, p2, d, h, g), 0 !== j && m2(j, _, w), 0 !== x && m2(x, O, R), S < r3 && C < i22 && c2(A, S, r3, C, i22, f2, p2, d, h, g);
  }, f = (e3, t3) => {
    if ("number" != typeof t3) throw new TypeError(`${n2}: ${e3} typeof ${typeof t3} is not a number`);
    if (!Number.isSafeInteger(t3)) throw new RangeError(`${n2}: ${e3} value ${t3} is not a safe integer`);
    if (t3 < 0) throw new RangeError(`${n2}: ${e3} value ${t3} is a negative integer`);
  }, p = (e3, t3) => {
    const r3 = typeof t3;
    if ("function" !== r3) throw new TypeError(`${n2}: ${e3} typeof ${r3} is not a function`);
  };
}, "./node_modules/es6-object-assign/index.js": (e2) => {
  function t2(e3, t3) {
    if (null == e3) throw new TypeError("Cannot convert first argument to object");
    for (var n2 = Object(e3), r2 = 1; r2 < arguments.length; r2++) {
      var o2 = arguments[r2];
      if (null != o2) for (var i2 = Object.keys(Object(o2)), s2 = 0, a = i2.length; s2 < a; s2++) {
        var l = i2[s2], u = Object.getOwnPropertyDescriptor(o2, l);
        void 0 !== u && u.enumerable && (n2[l] = o2[l]);
      }
    }
    return n2;
  }
  e2.exports = { assign: t2, polyfill: function() {
    Object.assign || Object.defineProperty(Object, "assign", { enumerable: false, configurable: true, writable: true, value: t2 });
  } };
}, "./node_modules/escape-string-regexp/index.js": (e2) => {
  var t2 = /[|\\{}()[\]^$+*?.]/g;
  e2.exports = function(e3) {
    if ("string" != typeof e3) throw new TypeError("Expected a string");
    return e3.replace(t2, "\\$&");
  };
}, "./node_modules/expect/build/asymmetricMatchers.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.closeTo = t2.arrayNotContaining = t2.arrayContaining = t2.anything = t2.any = t2.AsymmetricMatcher = void 0, t2.hasProperty = p, t2.stringNotMatching = t2.stringNotContaining = t2.stringMatching = t2.stringContaining = t2.objectNotContaining = t2.objectContaining = t2.notCloseTo = void 0;
  var r2 = n2("./node_modules/@jest/expect-utils/build/index.js"), o2 = (function(e3, t3) {
    if (e3 && e3.__esModule) return e3;
    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return { default: e3 };
    var n3 = a(t3);
    if (n3 && n3.has(e3)) return n3.get(e3);
    var r3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var i22 in e3) if ("default" !== i22 && Object.prototype.hasOwnProperty.call(e3, i22)) {
      var s22 = o3 ? Object.getOwnPropertyDescriptor(e3, i22) : null;
      s22 && (s22.get || s22.set) ? Object.defineProperty(r3, i22, s22) : r3[i22] = e3[i22];
    }
    r3.default = e3, n3 && n3.set(e3, r3);
    return r3;
  })(n2("./node_modules/jest-matcher-utils/build/index.js")), i2 = n2("./node_modules/jest-util/build/index.js"), s2 = n2("./node_modules/expect/build/jestMatchersObject.js");
  function a(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (a = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  var l = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const u = Function.prototype.toString;
  function c2(e3) {
    if (e3.name) return e3.name;
    const t3 = u.call(e3).match(/^(?:async)?\s*function\s*\*?\s*([\w$]+)\s*\(/);
    return t3 ? t3[1] : "<anonymous>";
  }
  const f = Object.freeze({ ...o2, iterableEquality: r2.iterableEquality, subsetEquality: r2.subsetEquality });
  function p(e3, t3) {
    return !!e3 && (!!Object.prototype.hasOwnProperty.call(e3, t3) || p((function(e4) {
      return Object.getPrototypeOf ? Object.getPrototypeOf(e4) : e4.constructor.prototype == e4 ? null : e4.constructor.prototype;
    })(e3), t3));
  }
  class d {
    constructor(e3, t3 = false) {
      __publicField(this, "$$typeof", l.for("jest.asymmetricMatcher"));
      this.sample = e3, this.inverse = t3;
    }
    getMatcherContext() {
      return { ...(0, s2.getState)(), equals: r2.equals, isNot: this.inverse, utils: f };
    }
  }
  t2.AsymmetricMatcher = d;
  class h extends d {
    constructor(e3) {
      if (void 0 === e3) throw new TypeError("any() expects to be passed a constructor function. Please pass one or use anything() to match any object.");
      super(e3);
    }
    asymmetricMatch(e3) {
      return this.sample == String ? "string" == typeof e3 || e3 instanceof String : this.sample == Number ? "number" == typeof e3 || e3 instanceof Number : this.sample == Function ? "function" == typeof e3 || e3 instanceof Function : this.sample == Boolean ? "boolean" == typeof e3 || e3 instanceof Boolean : this.sample == BigInt ? "bigint" == typeof e3 || e3 instanceof BigInt : this.sample == l ? "symbol" == typeof e3 || e3 instanceof l : this.sample == Object ? "object" == typeof e3 : e3 instanceof this.sample;
    }
    toString() {
      return "Any";
    }
    getExpectedType() {
      return this.sample == String ? "string" : this.sample == Number ? "number" : this.sample == Function ? "function" : this.sample == Object ? "object" : this.sample == Boolean ? "boolean" : c2(this.sample);
    }
    toAsymmetricMatcher() {
      return `Any<${c2(this.sample)}>`;
    }
  }
  class g extends d {
    asymmetricMatch(e3) {
      return null != e3;
    }
    toString() {
      return "Anything";
    }
    toAsymmetricMatcher() {
      return "Anything";
    }
  }
  class m2 extends d {
    constructor(e3, t3 = false) {
      super(e3, t3);
    }
    asymmetricMatch(e3) {
      if (!Array.isArray(this.sample)) throw new Error(`You must provide an array to ${this.toString()}, not '${typeof this.sample}'.`);
      const t3 = 0 === this.sample.length || Array.isArray(e3) && this.sample.every(((t4) => e3.some(((e4) => (0, r2.equals)(t4, e4)))));
      return this.inverse ? !t3 : t3;
    }
    toString() {
      return `Array${this.inverse ? "Not" : ""}Containing`;
    }
    getExpectedType() {
      return "array";
    }
  }
  class y extends d {
    constructor(e3, t3 = false) {
      super(e3, t3);
    }
    asymmetricMatch(e3) {
      if ("object" != typeof this.sample) throw new Error(`You must provide an object to ${this.toString()}, not '${typeof this.sample}'.`);
      let t3 = true;
      for (const n3 in this.sample) if (!p(e3, n3) || !(0, r2.equals)(this.sample[n3], e3[n3])) {
        t3 = false;
        break;
      }
      return this.inverse ? !t3 : t3;
    }
    toString() {
      return `Object${this.inverse ? "Not" : ""}Containing`;
    }
    getExpectedType() {
      return "object";
    }
  }
  class b extends d {
    constructor(e3, t3 = false) {
      if (!(0, r2.isA)("String", e3)) throw new Error("Expected is not a string");
      super(e3, t3);
    }
    asymmetricMatch(e3) {
      const t3 = (0, r2.isA)("String", e3) && e3.includes(this.sample);
      return this.inverse ? !t3 : t3;
    }
    toString() {
      return `String${this.inverse ? "Not" : ""}Containing`;
    }
    getExpectedType() {
      return "string";
    }
  }
  class v extends d {
    constructor(e3, t3 = false) {
      if (!(0, r2.isA)("String", e3) && !(0, r2.isA)("RegExp", e3)) throw new Error("Expected is not a String or a RegExp");
      super(new RegExp(e3), t3);
    }
    asymmetricMatch(e3) {
      const t3 = (0, r2.isA)("String", e3) && this.sample.test(e3);
      return this.inverse ? !t3 : t3;
    }
    toString() {
      return `String${this.inverse ? "Not" : ""}Matching`;
    }
    getExpectedType() {
      return "string";
    }
  }
  class E extends d {
    constructor(e3, t3 = 2, n3 = false) {
      if (!(0, r2.isA)("Number", e3)) throw new Error("Expected is not a Number");
      if (!(0, r2.isA)("Number", t3)) throw new Error("Precision is not a Number");
      super(e3);
      __publicField(this, "precision");
      this.inverse = n3, this.precision = t3;
    }
    asymmetricMatch(e3) {
      if (!(0, r2.isA)("Number", e3)) return false;
      let t3 = false;
      return t3 = e3 === 1 / 0 && this.sample === 1 / 0 || (e3 === -1 / 0 && this.sample === -1 / 0 || Math.abs(this.sample - e3) < Math.pow(10, -this.precision) / 2), this.inverse ? !t3 : t3;
    }
    toString() {
      return `Number${this.inverse ? "Not" : ""}CloseTo`;
    }
    getExpectedType() {
      return "number";
    }
    toAsymmetricMatcher() {
      return [this.toString(), this.sample, `(${(0, i2.pluralize)("digit", this.precision)})`].join(" ");
    }
  }
  t2.any = (e3) => new h(e3);
  t2.anything = () => new g();
  t2.arrayContaining = (e3) => new m2(e3);
  t2.arrayNotContaining = (e3) => new m2(e3, true);
  t2.objectContaining = (e3) => new y(e3);
  t2.objectNotContaining = (e3) => new y(e3, true);
  t2.stringContaining = (e3) => new b(e3);
  t2.stringNotContaining = (e3) => new b(e3, true);
  t2.stringMatching = (e3) => new v(e3);
  t2.stringNotMatching = (e3) => new v(e3, true);
  t2.closeTo = (e3, t3) => new E(e3, t3);
  t2.notCloseTo = (e3, t3) => new E(e3, t3, true);
}, "./node_modules/expect/build/extractExpectedAssertionsErrors.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var r2 = n2("./node_modules/jest-matcher-utils/build/index.js"), o2 = n2("./node_modules/expect/build/jestMatchersObject.js");
  var i2 = () => {
    const e3 = [], { assertionCalls: t3, expectedAssertionsNumber: n3, expectedAssertionsNumberError: i22, isExpectingAssertions: s2, isExpectingAssertionsError: a } = (0, o2.getState)();
    if ((0, o2.setState)({ assertionCalls: 0, expectedAssertionsNumber: null, isExpectingAssertions: false }), "number" == typeof n3 && t3 !== n3) {
      const o3 = (0, r2.EXPECTED_COLOR)((0, r2.pluralize)("assertion", n3));
      i22.message = `${(0, r2.matcherHint)(".assertions", "", n3.toString(), { isDirectExpectCall: true })}

Expected ${o3} to be called but received ${(0, r2.RECEIVED_COLOR)((0, r2.pluralize)("assertion call", t3 || 0))}.`, e3.push({ actual: t3.toString(), error: i22, expected: n3.toString() });
    }
    if (s2 && 0 === t3) {
      const t4 = (0, r2.EXPECTED_COLOR)("at least one assertion"), n4 = (0, r2.RECEIVED_COLOR)("received none");
      a.message = `${(0, r2.matcherHint)(".hasAssertions", "", "", { isDirectExpectCall: true })}

Expected ${t4} to be called but ${n4}.`, e3.push({ actual: "none", error: a, expected: "at least one" });
    }
    return e3;
  };
  t2.default = i2;
}, "./node_modules/expect/build/index.js": (e2, t2, n2) => {
  t2.ZP = void 0;
  var r2 = n2("./node_modules/@jest/expect-utils/build/index.js"), o2 = d(n2("./node_modules/jest-matcher-utils/build/index.js")), i2 = n2("./node_modules/expect/build/asymmetricMatchers.js"), s2 = f(n2("./node_modules/expect/build/extractExpectedAssertionsErrors.js")), a = n2("./node_modules/expect/build/jestMatchersObject.js"), l = f(n2("./node_modules/expect/build/matchers.js")), u = f(n2("./node_modules/expect/build/spyMatchers.js")), c2 = d(n2("./node_modules/expect/build/toThrowMatchers.js"));
  function f(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  function p(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (p = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  function d(e3, t3) {
    if (e3 && e3.__esModule) return e3;
    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return { default: e3 };
    var n3 = p(t3);
    if (n3 && n3.has(e3)) return n3.get(e3);
    var r3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var i22 in e3) if ("default" !== i22 && Object.prototype.hasOwnProperty.call(e3, i22)) {
      var s22 = o3 ? Object.getOwnPropertyDescriptor(e3, i22) : null;
      s22 && (s22.get || s22.set) ? Object.defineProperty(r3, i22, s22) : r3[i22] = e3[i22];
    }
    return r3.default = e3, n3 && n3.set(e3, r3), r3;
  }
  var h = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, g = (h = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, globalThis[h.for("jest-native-promise")] || globalThis.Promise);
  class m2 extends Error {
    constructor() {
      super(...arguments);
      __publicField(this, "matcherResult");
    }
  }
  const y = (e3) => !!e3 && ("object" == typeof e3 || "function" == typeof e3) && "function" == typeof e3.then, b = (e3, t3) => "toThrow" === e3 || "toThrowError" === e3 ? (0, c2.createMatcher)(e3, true) : "toThrowErrorMatchingSnapshot" === e3 || "toThrowErrorMatchingInlineSnapshot" === e3 ? /* @__PURE__ */ (function(e4) {
    return function(t4, n3) {
      return e4.apply(this, [t4, n3, true]);
    };
  })(t3) : null, v = (e3, ...t3) => {
    if (0 !== t3.length) throw new Error("Expect takes at most one argument.");
    const n3 = (0, a.getMatchers)(), r3 = { not: {}, rejects: { not: {} }, resolves: { not: {} } }, o3 = new m2();
    return Object.keys(n3).forEach(((t4) => {
      const i22 = n3[t4], s22 = b(t4, i22) || i22;
      r3[t4] = _(i22, false, "", e3), r3.not[t4] = _(i22, true, "", e3), r3.resolves[t4] = E(t4, s22, false, e3, o3), r3.resolves.not[t4] = E(t4, s22, true, e3, o3), r3.rejects[t4] = j(t4, s22, false, e3, o3), r3.rejects.not[t4] = j(t4, s22, true, e3, o3);
    })), r3;
  };
  const E = (e3, t3, n3, r3, i22) => (...s22) => {
    const a2 = { isNot: n3, promise: "resolves" };
    if (!y(r3)) throw new m2(o2.matcherErrorMessage(o2.matcherHint(e3, void 0, "", a2), `${o2.RECEIVED_COLOR("received")} value must be a promise`, o2.printWithType("Received", r3, o2.printReceived)));
    const l2 = new m2();
    return r3.then(((e4) => _(t3, n3, "resolves", e4, l2).apply(null, s22)), ((t4) => (i22.message = `${o2.matcherHint(e3, void 0, "", a2)}

Received promise rejected instead of resolved
Rejected to value: ${o2.printReceived(t4)}`, g.reject(i22))));
  }, j = (e3, t3, n3, r3, i22) => (...s22) => {
    const a2 = { isNot: n3, promise: "rejects" }, l2 = "function" == typeof r3 ? r3() : r3;
    if (!y(l2)) throw new m2(o2.matcherErrorMessage(o2.matcherHint(e3, void 0, "", a2), `${o2.RECEIVED_COLOR("received")} value must be a promise or a function returning a promise`, o2.printWithType("Received", r3, o2.printReceived)));
    const u2 = new m2();
    return l2.then(((t4) => (i22.message = `${o2.matcherHint(e3, void 0, "", a2)}

Received promise resolved instead of rejected
Resolved to value: ${o2.printReceived(t4)}`, g.reject(i22))), ((e4) => _(t3, n3, "rejects", e4, u2).apply(null, s22)));
  }, _ = (e3, t3, n3, i22, s22) => function l2(...u2) {
    let c22 = true;
    const f2 = { ...o2, iterableEquality: r2.iterableEquality, subsetEquality: r2.subsetEquality }, p2 = { dontThrow: () => c22 = false, ...(0, a.getState)(), equals: r2.equals, error: s22, isNot: t3, promise: n3, utils: f2 }, d2 = (e4, n4) => {
      if (w(e4), (0, a.getState)().assertionCalls++, e4.pass && t3 || !e4.pass && !t3) {
        const t4 = ((e5) => e5 && e5() || o2.RECEIVED_COLOR("No message was specified for this matcher."))(e4.message);
        let r3;
        if (s22 ? (r3 = s22, r3.message = t4) : n4 ? (r3 = n4, r3.message = t4) : (r3 = new m2(t4), Error.captureStackTrace && Error.captureStackTrace(r3, l2)), r3.matcherResult = { ...e4, message: t4 }, c22) throw r3;
        (0, a.getState)().suppressedErrors.push(r3);
      }
    }, h2 = (t4) => {
      throw true !== e3[a.INTERNAL_MATCHER_FLAG] || t4 instanceof m2 || "PrettyFormatPluginError" === t4.name || !Error.captureStackTrace || Error.captureStackTrace(t4, l2), t4;
    };
    let g2;
    try {
      if (e3[a.INTERNAL_MATCHER_FLAG], g2 = e3.call(p2, i22, ...u2), y(g2)) {
        const e4 = g2, t4 = new m2();
        return Error.captureStackTrace && Error.captureStackTrace(t4, l2), e4.then(((e5) => d2(e5, t4))).catch(h2);
      }
      return d2(g2);
    } catch (e4) {
      return h2(e4);
    }
  };
  v.extend = (e3) => (0, a.setMatchers)(e3, false, v), v.anything = i2.anything, v.any = i2.any, v.not = { arrayContaining: i2.arrayNotContaining, closeTo: i2.notCloseTo, objectContaining: i2.objectNotContaining, stringContaining: i2.stringNotContaining, stringMatching: i2.stringNotMatching }, v.arrayContaining = i2.arrayContaining, v.closeTo = i2.closeTo, v.objectContaining = i2.objectContaining, v.stringContaining = i2.stringContaining, v.stringMatching = i2.stringMatching;
  const w = (e3) => {
    if ("object" != typeof e3 || "boolean" != typeof e3.pass || e3.message && "string" != typeof e3.message && "function" != typeof e3.message) throw new Error(`Unexpected return from a matcher function.
Matcher functions should return an object in the following format:
  {message?: string | function, pass: boolean}
'${o2.stringify(e3)}' was returned`);
  };
  (0, a.setMatchers)(l.default, true, v), (0, a.setMatchers)(u.default, true, v), (0, a.setMatchers)(c2.default, true, v), v.assertions = function e3(t3) {
    const n3 = new Error();
    Error.captureStackTrace && Error.captureStackTrace(n3, e3), (0, a.setState)({ expectedAssertionsNumber: t3, expectedAssertionsNumberError: n3 });
  }, v.hasAssertions = function e3(...t3) {
    const n3 = new Error();
    Error.captureStackTrace && Error.captureStackTrace(n3, e3), o2.ensureNoExpected(t3[0], ".hasAssertions"), (0, a.setState)({ isExpectingAssertions: true, isExpectingAssertionsError: n3 });
  }, v.getState = a.getState, v.setState = a.setState, v.extractExpectedAssertionsErrors = s2.default;
  var x = v;
  t2.ZP = x;
}, "./node_modules/expect/build/jestMatchersObject.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.setState = t2.setMatchers = t2.getState = t2.getMatchers = t2.INTERNAL_MATCHER_FLAG = void 0;
  var r2 = n2("./node_modules/jest-get-type/build/index.js"), o2 = n2("./node_modules/expect/build/asymmetricMatchers.js"), i2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const s2 = i2.for("$$jest-matchers-object"), a = i2.for("$$jest-internal-matcher");
  if (t2.INTERNAL_MATCHER_FLAG = a, !Object.prototype.hasOwnProperty.call(globalThis, s2)) {
    const e3 = { assertionCalls: 0, expectedAssertionsNumber: null, isExpectingAssertions: false, suppressedErrors: [] };
    Object.defineProperty(globalThis, s2, { value: { matchers: /* @__PURE__ */ Object.create(null), state: e3 } });
  }
  t2.getState = () => globalThis[s2].state;
  t2.setState = (e3) => {
    Object.assign(globalThis[s2].state, e3);
  };
  t2.getMatchers = () => globalThis[s2].matchers;
  t2.setMatchers = (e3, t3, n3) => {
    Object.keys(e3).forEach(((i22) => {
      const s22 = e3[i22];
      if ("function" != typeof s22) throw new TypeError(`expect.extend: \`${i22}\` is not a valid matcher. Must be a function, is "${(0, r2.getType)(s22)}"`);
      if (Object.defineProperty(s22, a, { value: t3 }), !t3) {
        class e4 extends o2.AsymmetricMatcher {
          constructor(e5 = false, ...t4) {
            super(t4, e5);
          }
          asymmetricMatch(e5) {
            const { pass: t4 } = s22.call(this.getMatcherContext(), e5, ...this.sample);
            return this.inverse ? !t4 : t4;
          }
          toString() {
            return `${this.inverse ? "not." : ""}${i22}`;
          }
          getExpectedType() {
            return "any";
          }
          toAsymmetricMatcher() {
            return `${this.toString()}<${this.sample.map(String).join(", ")}>`;
          }
        }
        Object.defineProperty(n3, i22, { configurable: true, enumerable: true, value: (...t4) => new e4(false, ...t4), writable: true }), Object.defineProperty(n3.not, i22, { configurable: true, enumerable: true, value: (...t4) => new e4(true, ...t4), writable: true });
      }
    })), Object.assign(globalThis[s2].matchers, e3);
  };
}, "./node_modules/expect/build/matchers.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var r2 = n2("./node_modules/@jest/expect-utils/build/index.js"), o2 = n2("./node_modules/jest-get-type/build/index.js"), i2 = n2("./node_modules/jest-matcher-utils/build/index.js"), s2 = n2("./node_modules/expect/build/print.js");
  const a = "Expected", l = "Received", u = (e3) => false !== e3, c2 = [r2.iterableEquality, r2.typeEquality, r2.sparseArrayEquality, r2.arrayBufferEquality];
  var f = { toBe(e3, t3) {
    const n3 = "toBe", s22 = { comment: "Object.is equality", isNot: this.isNot, promise: this.promise }, f2 = Object.is(e3, t3);
    return { actual: e3, expected: t3, message: f2 ? () => (0, i2.matcherHint)(n3, void 0, void 0, s22) + `

Expected: not ${(0, i2.printExpected)(t3)}` : () => {
      const f3 = (0, o2.getType)(t3);
      let p = null;
      return "map" !== f3 && "set" !== f3 && ((0, r2.equals)(e3, t3, c2, true) ? p = "toStrictEqual" : (0, r2.equals)(e3, t3, [r2.iterableEquality]) && (p = "toEqual")), (0, i2.matcherHint)(n3, void 0, void 0, s22) + "\n\n" + (null !== p ? `${(0, i2.DIM_COLOR)(`If it should pass with deep equality, replace "${n3}" with "${p}"`)}

` : "") + (0, i2.printDiffOrStringify)(t3, e3, a, l, u(this.expand));
    }, name: n3, pass: f2 };
  }, toBeCloseTo(e3, t3, n3 = 2) {
    const r3 = "toBeCloseTo", o3 = 3 === arguments.length ? "precision" : void 0, a2 = this.isNot, l2 = { isNot: a2, promise: this.promise, secondArgument: o3, secondArgumentColor: (e4) => e4 };
    if ("number" != typeof t3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(r3, void 0, void 0, l2), `${(0, i2.EXPECTED_COLOR)("expected")} value must be a number`, (0, i2.printWithType)("Expected", t3, i2.printExpected)));
    if ("number" != typeof e3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(r3, void 0, void 0, l2), `${(0, i2.RECEIVED_COLOR)("received")} value must be a number`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    let u2 = false, c22 = 0, f2 = 0;
    e3 === 1 / 0 && t3 === 1 / 0 || e3 === -1 / 0 && t3 === -1 / 0 ? u2 = true : (c22 = Math.pow(10, -n3) / 2, f2 = Math.abs(t3 - e3), u2 = f2 < c22);
    return { message: u2 ? () => (0, i2.matcherHint)(r3, void 0, void 0, l2) + `

Expected: not ${(0, i2.printExpected)(t3)}
` + (0 === f2 ? "" : `Received:     ${(0, i2.printReceived)(e3)}

${(0, s2.printCloseTo)(f2, c22, n3, a2)}`) : () => (0, i2.matcherHint)(r3, void 0, void 0, l2) + `

Expected: ${(0, i2.printExpected)(t3)}
Received: ${(0, i2.printReceived)(e3)}

` + (0, s2.printCloseTo)(f2, c22, n3, a2), pass: u2 };
  }, toBeDefined(e3, t3) {
    const n3 = "toBeDefined", r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(t3, n3, r3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, "", r3) + `

Received: ${(0, i2.printReceived)(e3)}`, pass: void 0 !== e3 };
  }, toBeFalsy(e3, t3) {
    const n3 = "toBeFalsy", r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(t3, n3, r3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, "", r3) + `

Received: ${(0, i2.printReceived)(e3)}`, pass: !e3 };
  }, toBeGreaterThan(e3, t3) {
    const n3 = "toBeGreaterThan", r3 = this.isNot, o3 = { isNot: r3, promise: this.promise };
    (0, i2.ensureNumbers)(e3, t3, n3, o3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected:${r3 ? " not" : ""} > ${(0, i2.printExpected)(t3)}
Received:${r3 ? "    " : ""}   ${(0, i2.printReceived)(e3)}`, pass: e3 > t3 };
  }, toBeGreaterThanOrEqual(e3, t3) {
    const n3 = "toBeGreaterThanOrEqual", r3 = this.isNot, o3 = { isNot: r3, promise: this.promise };
    (0, i2.ensureNumbers)(e3, t3, n3, o3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected:${r3 ? " not" : ""} >= ${(0, i2.printExpected)(t3)}
Received:${r3 ? "    " : ""}    ${(0, i2.printReceived)(e3)}`, pass: e3 >= t3 };
  }, toBeInstanceOf(e3, t3) {
    const n3 = "toBeInstanceOf", r3 = { isNot: this.isNot, promise: this.promise };
    if ("function" != typeof t3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, r3), `${(0, i2.EXPECTED_COLOR)("expected")} value must be a function`, (0, i2.printWithType)("Expected", t3, i2.printExpected)));
    const a2 = e3 instanceof t3;
    return { message: a2 ? () => (0, i2.matcherHint)(n3, void 0, void 0, r3) + "\n\n" + (0, s2.printExpectedConstructorNameNot)("Expected constructor", t3) + ("function" == typeof e3.constructor && e3.constructor !== t3 ? (0, s2.printReceivedConstructorNameNot)("Received constructor", e3.constructor, t3) : "") : () => (0, i2.matcherHint)(n3, void 0, void 0, r3) + "\n\n" + (0, s2.printExpectedConstructorName)("Expected constructor", t3) + ((0, o2.isPrimitive)(e3) || null === Object.getPrototypeOf(e3) ? `
Received value has no prototype
Received value: ${(0, i2.printReceived)(e3)}` : "function" != typeof e3.constructor ? `
Received value: ${(0, i2.printReceived)(e3)}` : (0, s2.printReceivedConstructorName)("Received constructor", e3.constructor)), pass: a2 };
  }, toBeLessThan(e3, t3) {
    const n3 = "toBeLessThan", r3 = this.isNot, o3 = { isNot: r3, promise: this.promise };
    (0, i2.ensureNumbers)(e3, t3, n3, o3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected:${r3 ? " not" : ""} < ${(0, i2.printExpected)(t3)}
Received:${r3 ? "    " : ""}   ${(0, i2.printReceived)(e3)}`, pass: e3 < t3 };
  }, toBeLessThanOrEqual(e3, t3) {
    const n3 = "toBeLessThanOrEqual", r3 = this.isNot, o3 = { isNot: r3, promise: this.promise };
    (0, i2.ensureNumbers)(e3, t3, n3, o3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected:${r3 ? " not" : ""} <= ${(0, i2.printExpected)(t3)}
Received:${r3 ? "    " : ""}    ${(0, i2.printReceived)(e3)}`, pass: e3 <= t3 };
  }, toBeNaN(e3, t3) {
    const n3 = "toBeNaN", r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(t3, n3, r3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, "", r3) + `

Received: ${(0, i2.printReceived)(e3)}`, pass: Number.isNaN(e3) };
  }, toBeNull(e3, t3) {
    const n3 = "toBeNull", r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(t3, n3, r3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, "", r3) + `

Received: ${(0, i2.printReceived)(e3)}`, pass: null === e3 };
  }, toBeTruthy(e3, t3) {
    const n3 = "toBeTruthy", r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(t3, n3, r3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, "", r3) + `

Received: ${(0, i2.printReceived)(e3)}`, pass: !!e3 };
  }, toBeUndefined(e3, t3) {
    const n3 = "toBeUndefined", r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(t3, n3, r3);
    return { message: () => (0, i2.matcherHint)(n3, void 0, "", r3) + `

Received: ${(0, i2.printReceived)(e3)}`, pass: void 0 === e3 };
  }, toContain(e3, t3) {
    const n3 = "toContain", a2 = this.isNot, l2 = { comment: "indexOf", isNot: a2, promise: this.promise };
    if (null == e3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, l2), `${(0, i2.RECEIVED_COLOR)("received")} value must not be null nor undefined`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    if ("string" == typeof e3) {
      const r3 = `${(0, i2.EXPECTED_COLOR)("expected")} value must be a string if ${(0, i2.RECEIVED_COLOR)("received")} value is a string`;
      if ("string" != typeof t3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, e3, String(t3), l2), r3, (0, i2.printWithType)("Expected", t3, i2.printExpected) + "\n" + (0, i2.printWithType)("Received", e3, i2.printReceived)));
      const o3 = e3.indexOf(String(t3));
      return { message: () => {
        const r4 = "Expected " + ("string" == typeof t3 ? "substring" : "value"), u3 = "Received string", c3 = (0, i2.getLabelPrinter)(r4, u3);
        return (0, i2.matcherHint)(n3, void 0, void 0, l2) + `

${c3(r4)}${a2 ? "not " : ""}${(0, i2.printExpected)(t3)}
${c3(u3)}${a2 ? "    " : ""}${a2 ? (0, s2.printReceivedStringContainExpectedSubstring)(e3, o3, String(t3).length) : (0, i2.printReceived)(e3)}`;
      }, pass: -1 !== o3 };
    }
    const u2 = Array.from(e3), c22 = u2.indexOf(t3);
    return { message: () => {
      const f2 = "Expected value", p = `Received ${(0, o2.getType)(e3)}`, d = (0, i2.getLabelPrinter)(f2, p);
      return (0, i2.matcherHint)(n3, void 0, void 0, l2) + `

${d(f2)}${a2 ? "not " : ""}${(0, i2.printExpected)(t3)}
${d(p)}${a2 ? "    " : ""}${a2 && Array.isArray(e3) ? (0, s2.printReceivedArrayContainExpectedItem)(e3, c22) : (0, i2.printReceived)(e3)}` + (a2 || -1 === u2.findIndex(((e4) => (0, r2.equals)(e4, t3, [r2.iterableEquality]))) ? "" : `

${i2.SUGGEST_TO_CONTAIN_EQUAL}`);
    }, pass: -1 !== c22 };
  }, toContainEqual(e3, t3) {
    const n3 = "toContainEqual", a2 = this.isNot, l2 = { comment: "deep equality", isNot: a2, promise: this.promise };
    if (null == e3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, l2), `${(0, i2.RECEIVED_COLOR)("received")} value must not be null nor undefined`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    const u2 = Array.from(e3).findIndex(((e4) => (0, r2.equals)(e4, t3, [r2.iterableEquality])));
    return { message: () => {
      const r3 = "Expected value", c22 = `Received ${(0, o2.getType)(e3)}`, f2 = (0, i2.getLabelPrinter)(r3, c22);
      return (0, i2.matcherHint)(n3, void 0, void 0, l2) + `

${f2(r3)}${a2 ? "not " : ""}${(0, i2.printExpected)(t3)}
${f2(c22)}${a2 ? "    " : ""}${a2 && Array.isArray(e3) ? (0, s2.printReceivedArrayContainExpectedItem)(e3, u2) : (0, i2.printReceived)(e3)}`;
    }, pass: -1 !== u2 };
  }, toEqual(e3, t3) {
    const n3 = "toEqual", o3 = { comment: "deep equality", isNot: this.isNot, promise: this.promise }, s22 = (0, r2.equals)(e3, t3, [r2.iterableEquality]);
    return { actual: e3, expected: t3, message: s22 ? () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected: not ${(0, i2.printExpected)(t3)}
` + ((0, i2.stringify)(t3) !== (0, i2.stringify)(e3) ? `Received:     ${(0, i2.printReceived)(e3)}` : "") : () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + "\n\n" + (0, i2.printDiffOrStringify)(t3, e3, a, l, u(this.expand)), name: n3, pass: s22 };
  }, toHaveLength(e3, t3) {
    const n3 = "toHaveLength", r3 = this.isNot, s22 = { isNot: r3, promise: this.promise };
    if ("number" != typeof (null == e3 ? void 0 : e3.length)) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, s22), `${(0, i2.RECEIVED_COLOR)("received")} value must have a length property whose value must be a number`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    (0, i2.ensureExpectedIsNonNegativeInteger)(t3, n3, s22);
    return { message: () => {
      const a2 = "Expected length", l2 = "Received length", u2 = `Received ${(0, o2.getType)(e3)}`, c22 = (0, i2.getLabelPrinter)(a2, l2, u2);
      return (0, i2.matcherHint)(n3, void 0, void 0, s22) + `

${c22(a2)}${r3 ? "not " : ""}${(0, i2.printExpected)(t3)}
` + (r3 ? "" : `${c22(l2)}${(0, i2.printReceived)(e3.length)}
`) + `${c22(u2)}${r3 ? "    " : ""}${(0, i2.printReceived)(e3)}`;
    }, pass: e3.length === t3 };
  }, toHaveProperty(e3, t3, n3) {
    const s22 = "toHaveProperty", a2 = "path", l2 = 3 === arguments.length, c22 = { isNot: this.isNot, promise: this.promise, secondArgument: l2 ? "value" : "" };
    if (null == e3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(s22, void 0, a2, c22), `${(0, i2.RECEIVED_COLOR)("received")} value must not be null nor undefined`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    const f2 = (0, o2.getType)(t3);
    if ("string" !== f2 && "array" !== f2) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(s22, void 0, a2, c22), `${(0, i2.EXPECTED_COLOR)("expected")} path must be a string or array`, (0, i2.printWithType)("Expected", t3, i2.printExpected)));
    const p = "string" == typeof t3 ? (0, r2.pathAsArray)(t3).length : t3.length;
    if ("array" === f2 && 0 === p) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(s22, void 0, a2, c22), `${(0, i2.EXPECTED_COLOR)("expected")} path must not be an empty array`, (0, i2.printWithType)("Expected", t3, i2.printExpected)));
    const d = (0, r2.getPath)(e3, t3), { lastTraversedObject: h, endPropIsDefined: g, hasEndProp: m2, value: y } = d, b = d.traversedPath, v = b.length === p, E = v ? d.value : h, j = l2 && g ? (0, r2.equals)(y, n3, [r2.iterableEquality]) : Boolean(m2);
    return { message: j ? () => (0, i2.matcherHint)(s22, void 0, a2, c22) + "\n\n" + (l2 ? `Expected path: ${(0, i2.printExpected)(t3)}

Expected value: not ${(0, i2.printExpected)(n3)}${(0, i2.stringify)(n3) !== (0, i2.stringify)(E) ? `
Received value:     ${(0, i2.printReceived)(E)}` : ""}` : `Expected path: not ${(0, i2.printExpected)(t3)}

Received value: ${(0, i2.printReceived)(E)}`) : () => (0, i2.matcherHint)(s22, void 0, a2, c22) + `

Expected path: ${(0, i2.printExpected)(t3)}
` + (v ? `
${(0, i2.printDiffOrStringify)(n3, E, "Expected value", "Received value", u(this.expand))}` : `Received path: ${(0, i2.printReceived)("array" === f2 || 0 === b.length ? b : b.join("."))}

${l2 ? `Expected value: ${(0, i2.printExpected)(n3)}
` : ""}Received value: ${(0, i2.printReceived)(E)}`), pass: j };
  }, toMatch(e3, t3) {
    const n3 = "toMatch", r3 = { isNot: this.isNot, promise: this.promise };
    if ("string" != typeof e3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, r3), `${(0, i2.RECEIVED_COLOR)("received")} value must be a string`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    if ("string" != typeof t3 && (!t3 || "function" != typeof t3.test)) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, r3), `${(0, i2.EXPECTED_COLOR)("expected")} value must be a string or regular expression`, (0, i2.printWithType)("Expected", t3, i2.printExpected)));
    const o3 = "string" == typeof t3 ? e3.includes(t3) : new RegExp(t3).test(e3);
    return { message: o3 ? () => "string" == typeof t3 ? (0, i2.matcherHint)(n3, void 0, void 0, r3) + `

Expected substring: not ${(0, i2.printExpected)(t3)}
Received string:        ${(0, s2.printReceivedStringContainExpectedSubstring)(e3, e3.indexOf(t3), t3.length)}` : (0, i2.matcherHint)(n3, void 0, void 0, r3) + `

Expected pattern: not ${(0, i2.printExpected)(t3)}
Received string:      ${(0, s2.printReceivedStringContainExpectedResult)(e3, "function" == typeof t3.exec ? t3.exec(e3) : null)}` : () => {
      const o4 = "Expected " + ("string" == typeof t3 ? "substring" : "pattern"), s22 = "Received string", a2 = (0, i2.getLabelPrinter)(o4, s22);
      return (0, i2.matcherHint)(n3, void 0, void 0, r3) + `

${a2(o4)}${(0, i2.printExpected)(t3)}
${a2(s22)}${(0, i2.printReceived)(e3)}`;
    }, pass: o3 };
  }, toMatchObject(e3, t3) {
    const n3 = "toMatchObject", o3 = { isNot: this.isNot, promise: this.promise };
    if ("object" != typeof e3 || null === e3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, o3), `${(0, i2.RECEIVED_COLOR)("received")} value must be a non-null object`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
    if ("object" != typeof t3 || null === t3) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(n3, void 0, void 0, o3), `${(0, i2.EXPECTED_COLOR)("expected")} value must be a non-null object`, (0, i2.printWithType)("Expected", t3, i2.printExpected)));
    const s22 = (0, r2.equals)(e3, t3, [r2.iterableEquality, r2.subsetEquality]);
    return { message: s22 ? () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected: not ${(0, i2.printExpected)(t3)}` + ((0, i2.stringify)(t3) !== (0, i2.stringify)(e3) ? `
Received:     ${(0, i2.printReceived)(e3)}` : "") : () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + "\n\n" + (0, i2.printDiffOrStringify)(t3, (0, r2.getObjectSubset)(e3, t3), a, l, u(this.expand)), pass: s22 };
  }, toStrictEqual(e3, t3) {
    const n3 = "toStrictEqual", o3 = { comment: "deep equality", isNot: this.isNot, promise: this.promise }, s22 = (0, r2.equals)(e3, t3, c2, true);
    return { actual: e3, expected: t3, message: s22 ? () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + `

Expected: not ${(0, i2.printExpected)(t3)}
` + ((0, i2.stringify)(t3) !== (0, i2.stringify)(e3) ? `Received:     ${(0, i2.printReceived)(e3)}` : "") : () => (0, i2.matcherHint)(n3, void 0, void 0, o3) + "\n\n" + (0, i2.printDiffOrStringify)(t3, e3, a, l, u(this.expand)), name: n3, pass: s22 };
  } };
  t2.default = f;
}, "./node_modules/expect/build/print.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.printReceivedStringContainExpectedSubstring = t2.printReceivedStringContainExpectedResult = t2.printReceivedConstructorNameNot = t2.printReceivedConstructorName = t2.printReceivedArrayContainExpectedItem = t2.printExpectedConstructorNameNot = t2.printExpectedConstructorName = t2.printCloseTo = void 0;
  var r2 = n2("./node_modules/jest-matcher-utils/build/index.js");
  const o2 = (e3) => e3.replace(/"|\\/g, "\\$&"), i2 = (e3, t3, n3) => (0, r2.RECEIVED_COLOR)(`"${o2(e3.slice(0, t3))}${(0, r2.INVERTED_COLOR)(o2(e3.slice(t3, t3 + n3)))}${o2(e3.slice(t3 + n3))}"`);
  t2.printReceivedStringContainExpectedSubstring = i2;
  t2.printReceivedStringContainExpectedResult = (e3, t3) => null === t3 ? (0, r2.printReceived)(e3) : i2(e3, t3.index, t3[0].length);
  t2.printReceivedArrayContainExpectedItem = (e3, t3) => (0, r2.RECEIVED_COLOR)(`[${e3.map(((e4, n3) => {
    const o3 = (0, r2.stringify)(e4);
    return n3 === t3 ? (0, r2.INVERTED_COLOR)(o3) : o3;
  })).join(", ")}]`);
  t2.printCloseTo = (e3, t3, n3, o3) => {
    const i22 = (0, r2.stringify)(e3), s22 = i22.includes("e") ? t3.toExponential(0) : 0 <= n3 && n3 < 20 ? t3.toFixed(n3 + 1) : (0, r2.stringify)(t3);
    return `Expected precision:  ${o3 ? "    " : ""}  ${(0, r2.stringify)(n3)}
Expected difference: ${o3 ? "not " : ""}< ${(0, r2.EXPECTED_COLOR)(s22)}
Received difference: ${o3 ? "    " : ""}  ${(0, r2.RECEIVED_COLOR)(i22)}`;
  };
  t2.printExpectedConstructorName = (e3, t3) => `${s2(e3, t3, false, true)}
`;
  t2.printExpectedConstructorNameNot = (e3, t3) => `${s2(e3, t3, true, true)}
`;
  t2.printReceivedConstructorName = (e3, t3) => `${s2(e3, t3, false, false)}
`;
  t2.printReceivedConstructorNameNot = (e3, t3, n3) => "string" == typeof n3.name && 0 !== n3.name.length && "string" == typeof t3.name && 0 !== t3.name.length ? `${s2(e3, t3, true, false)} ${Object.getPrototypeOf(t3) === n3 ? "extends" : "extends … extends"} ${(0, r2.EXPECTED_COLOR)(n3.name)}
` : `${s2(e3, t3, false, false)}
`;
  const s2 = (e3, t3, n3, o3) => "string" != typeof t3.name ? `${e3} name is not a string` : 0 === t3.name.length ? `${e3} name is an empty string` : `${e3}: ${n3 ? o3 ? "not " : "    " : ""}${o3 ? (0, r2.EXPECTED_COLOR)(t3.name) : (0, r2.RECEIVED_COLOR)(t3.name)}`;
}, "./node_modules/expect/build/spyMatchers.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var r2 = n2("./node_modules/@jest/expect-utils/build/index.js"), o2 = n2("./node_modules/jest-get-type/build/index.js"), i2 = n2("./node_modules/jest-matcher-utils/build/index.js");
  const s2 = (e3) => false !== e3, a = "called with 0 arguments", l = (e3) => 0 === e3.length ? a : e3.map(((e4) => (0, i2.printExpected)(e4))).join(", "), u = (e3, t3) => 0 === e3.length ? a : e3.map(((e4, n3) => Array.isArray(t3) && n3 < t3.length && f(t3[n3], e4) ? c2(e4) : (0, i2.printReceived)(e4))).join(", "), c2 = (e3) => (0, i2.DIM_COLOR)((0, i2.stringify)(e3)), f = (e3, t3) => (0, r2.equals)(e3, t3, [r2.iterableEquality]), p = (e3, t3) => t3.length === e3.length && f(e3, t3), d = (e3, t3) => "return" === t3.type && f(e3, t3.value), h = (e3) => e3.reduce(((e4, t3) => "return" === t3.type ? e4 + 1 : e4), 0), g = (e3, t3) => `
Number of returns: ${(0, i2.printReceived)(e3)}${t3 !== e3 ? `
Number of calls:   ${(0, i2.printReceived)(t3)}` : ""}`, m2 = (e3) => {
    const t3 = e3.indexOf(":"), n3 = e3.slice(t3);
    return (e4, r3) => (r3 ? `->${" ".repeat(Math.max(0, t3 - 2 - e4.length))}` : " ".repeat(Math.max(t3 - e4.length))) + e4 + n3;
  }, y = (e3, t3, n3, r3) => {
    if (0 === t3.length) return "";
    const o3 = "Received:     ";
    if (n3) return `${o3 + u(t3[0], e3)}
`;
    const i22 = m2(o3);
    return `Received
${t3.reduce(((t4, [n4, o4]) => `${t4 + i22(String(n4 + 1), n4 === r3) + u(o4, e3)}
`), "")}`;
  }, b = (e3, t3, n3, r3, o3) => {
    const s22 = `Expected: ${l(e3)}
`;
    if (0 === t3.length) return s22;
    const a2 = "Received: ";
    if (r3 && (0 === o3 || void 0 === o3)) {
      const r4 = t3[0][1];
      if (j(e3, r4)) {
        const t4 = [(0, i2.EXPECTED_COLOR)("- Expected"), (0, i2.RECEIVED_COLOR)("+ Received"), ""], o4 = Math.max(e3.length, r4.length);
        for (let s3 = 0; s3 < o4; s3 += 1) {
          if (s3 < e3.length && s3 < r4.length) {
            if (f(e3[s3], r4[s3])) {
              t4.push(`  ${c2(r4[s3])},`);
              continue;
            }
            if (_(e3[s3], r4[s3])) {
              const o5 = (0, i2.diff)(e3[s3], r4[s3], { expand: n3 });
              if ("string" == typeof o5 && o5.includes("- Expected") && o5.includes("+ Received")) {
                t4.push(`${o5.split("\n").slice(3).join("\n")},`);
                continue;
              }
            }
          }
          s3 < e3.length && t4.push(`${(0, i2.EXPECTED_COLOR)(`- ${(0, i2.stringify)(e3[s3])}`)},`), s3 < r4.length && t4.push(`${(0, i2.RECEIVED_COLOR)(`+ ${(0, i2.stringify)(r4[s3])}`)},`);
        }
        return `${t4.join("\n")}
`;
      }
      return `${s22 + a2 + u(r4, e3)}
`;
    }
    const p2 = m2(a2);
    return s22 + "Received\n" + t3.reduce(((t4, [r4, i22]) => {
      const s3 = p2(String(r4 + 1), r4 === o3);
      return `${t4 + (r4 !== o3 && void 0 !== o3 || !j(e3, i22) ? s3 + u(i22, e3) : s3.replace(": ", "\n") + E(e3, i22, n3))}
`;
    }), "");
  }, v = "Received".replace(/\w/g, " "), E = (e3, t3, n3) => t3.map(((t4, r3) => {
    if (r3 < e3.length) {
      if (f(e3[r3], t4)) return `${v}  ${c2(t4)},`;
      if (_(e3[r3], t4)) {
        const o3 = (0, i2.diff)(e3[r3], t4, { expand: n3 });
        if ("string" == typeof o3 && o3.includes("- Expected") && o3.includes("+ Received")) return `${o3.split("\n").slice(3).map(((e4) => v + e4)).join("\n")},`;
      }
    }
    return `${v + (r3 < e3.length ? `  ${(0, i2.printReceived)(t4)}` : (0, i2.RECEIVED_COLOR)(`+ ${(0, i2.stringify)(t4)}`))},`;
  })).join("\n"), j = (e3, t3) => e3.some(((e4, n3) => n3 < t3.length && _(e4, t3[n3]))), _ = (e3, t3) => {
    const n3 = (0, o2.getType)(e3), r3 = (0, o2.getType)(t3);
    return n3 === r3 && (!(0, o2.isPrimitive)(e3) && ("date" !== n3 && "function" !== n3 && "regexp" !== n3 && (!(e3 instanceof Error && t3 instanceof Error) && (("object" !== n3 || "function" != typeof e3.asymmetricMatch) && ("object" !== r3 || "function" != typeof t3.asymmetricMatch)))));
  }, w = (e3, t3) => "throw" === e3.type ? "function call threw an error" : "incomplete" === e3.type ? "function call has not returned yet" : f(t3, e3.value) ? c2(e3.value) : (0, i2.printReceived)(e3.value), x = (e3, t3, n3, r3, o3) => {
    if (0 === n3.length) return "";
    if (r3 && (0 === o3 || void 0 === o3)) return `${e3 + w(n3[0][1], t3)}
`;
    const i22 = m2(e3);
    return e3.replace(":", "").trim() + "\n" + n3.reduce(((e4, [n4, r4]) => `${e4 + i22(String(n4 + 1), n4 === o3) + w(r4, t3)}
`), "");
  }, O = (e3) => function(t3, n3) {
    const r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(n3, e3, r3), D(t3, e3, "", r3);
    const o3 = L(t3), s22 = o3 ? "spy" : t3.getMockName(), a2 = o3 ? t3.calls.count() : t3.mock.calls.length, l2 = o3 ? t3.calls.all().map(((e4) => e4.args)) : t3.mock.calls, c22 = a2 > 0;
    return { message: c22 ? () => (0, i2.matcherHint)(e3, s22, "", r3) + `

Expected number of calls: ${(0, i2.printExpected)(0)}
Received number of calls: ${(0, i2.printReceived)(a2)}

` + l2.reduce(((e4, t4, n4) => (e4.length < 3 && e4.push(`${n4 + 1}: ${u(t4)}`), e4)), []).join("\n") : () => (0, i2.matcherHint)(e3, s22, "", r3) + `

Expected number of calls: >= ${(0, i2.printExpected)(1)}
Received number of calls:    ${(0, i2.printReceived)(a2)}`, pass: c22 };
  }, R = (e3) => function(t3, n3) {
    const r3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureNoExpected)(n3, e3, r3), B(t3, e3, "", r3);
    const o3 = t3.getMockName(), s22 = t3.mock.results.reduce(((e4, t4) => "return" === t4.type ? e4 + 1 : e4), 0), a2 = s22 > 0;
    return { message: a2 ? () => (0, i2.matcherHint)(e3, o3, "", r3) + `

Expected number of returns: ${(0, i2.printExpected)(0)}
Received number of returns: ${(0, i2.printReceived)(s22)}

` + t3.mock.results.reduce(((e4, t4, n4) => ("return" === t4.type && e4.length < 3 && e4.push(`${n4 + 1}: ${(0, i2.printReceived)(t4.value)}`), e4)), []).join("\n") + (t3.mock.calls.length !== s22 ? `

Received number of calls:   ${(0, i2.printReceived)(t3.mock.calls.length)}` : "") : () => (0, i2.matcherHint)(e3, o3, "", r3) + `

Expected number of returns: >= ${(0, i2.printExpected)(1)}
Received number of returns:    ${(0, i2.printReceived)(s22)}` + (t3.mock.calls.length !== s22 ? `
Received number of calls:      ${(0, i2.printReceived)(t3.mock.calls.length)}` : ""), pass: a2 };
  }, A = (e3) => function(t3, n3) {
    const r3 = "expected", o3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureExpectedIsNonNegativeInteger)(n3, e3, o3), D(t3, e3, r3, o3);
    const s22 = L(t3), a2 = s22 ? "spy" : t3.getMockName(), l2 = s22 ? t3.calls.count() : t3.mock.calls.length, u2 = l2 === n3;
    return { message: u2 ? () => (0, i2.matcherHint)(e3, a2, r3, o3) + `

Expected number of calls: not ${(0, i2.printExpected)(n3)}` : () => (0, i2.matcherHint)(e3, a2, r3, o3) + `

Expected number of calls: ${(0, i2.printExpected)(n3)}
Received number of calls: ${(0, i2.printReceived)(l2)}`, pass: u2 };
  }, S = (e3) => function(t3, n3) {
    const r3 = "expected", o3 = { isNot: this.isNot, promise: this.promise };
    (0, i2.ensureExpectedIsNonNegativeInteger)(n3, e3, o3), B(t3, e3, r3, o3);
    const s22 = t3.getMockName(), a2 = t3.mock.results.reduce(((e4, t4) => "return" === t4.type ? e4 + 1 : e4), 0), l2 = a2 === n3;
    return { message: l2 ? () => (0, i2.matcherHint)(e3, s22, r3, o3) + `

Expected number of returns: not ${(0, i2.printExpected)(n3)}` + (t3.mock.calls.length !== a2 ? `

Received number of calls:       ${(0, i2.printReceived)(t3.mock.calls.length)}` : "") : () => (0, i2.matcherHint)(e3, s22, r3, o3) + `

Expected number of returns: ${(0, i2.printExpected)(n3)}
Received number of returns: ${(0, i2.printReceived)(a2)}` + (t3.mock.calls.length !== a2 ? `
Received number of calls:   ${(0, i2.printReceived)(t3.mock.calls.length)}` : ""), pass: l2 };
  }, C = (e3) => function(t3, ...n3) {
    const r3 = "...expected", o3 = { isNot: this.isNot, promise: this.promise };
    D(t3, e3, r3, o3);
    const a2 = L(t3), u2 = a2 ? "spy" : t3.getMockName(), c22 = a2 ? t3.calls.all().map(((e4) => e4.args)) : t3.mock.calls, f2 = c22.some(((e4) => p(n3, e4)));
    return { message: f2 ? () => {
      const t4 = [];
      let s22 = 0;
      for (; s22 < c22.length && t4.length < 3; ) p(n3, c22[s22]) && t4.push([s22, c22[s22]]), s22 += 1;
      return (0, i2.matcherHint)(e3, u2, r3, o3) + `

Expected: not ${l(n3)}
` + (1 === c22.length && (0, i2.stringify)(c22[0]) === (0, i2.stringify)(n3) ? "" : y(n3, t4, 1 === c22.length)) + `
Number of calls: ${(0, i2.printReceived)(c22.length)}`;
    } : () => {
      const t4 = [];
      let a3 = 0;
      for (; a3 < c22.length && t4.length < 3; ) t4.push([a3, c22[a3]]), a3 += 1;
      return (0, i2.matcherHint)(e3, u2, r3, o3) + "\n\n" + b(n3, t4, s2(this.expand), 1 === c22.length) + `
Number of calls: ${(0, i2.printReceived)(c22.length)}`;
    }, pass: f2 };
  }, $ = (e3) => function(t3, n3) {
    const r3 = "expected", o3 = { isNot: this.isNot, promise: this.promise };
    B(t3, e3, r3, o3);
    const s22 = t3.getMockName(), { calls: a2, results: l2 } = t3.mock, u2 = l2.some(((e4) => d(n3, e4)));
    return { message: u2 ? () => {
      const t4 = [];
      let u3 = 0;
      for (; u3 < l2.length && t4.length < 3; ) d(n3, l2[u3]) && t4.push([u3, l2[u3]]), u3 += 1;
      return (0, i2.matcherHint)(e3, s22, r3, o3) + `

Expected: not ${(0, i2.printExpected)(n3)}
` + (1 === l2.length && "return" === l2[0].type && (0, i2.stringify)(l2[0].value) === (0, i2.stringify)(n3) ? "" : x("Received:     ", n3, t4, 1 === l2.length)) + g(h(l2), a2.length);
    } : () => {
      const t4 = [];
      let u3 = 0;
      for (; u3 < l2.length && t4.length < 3; ) t4.push([u3, l2[u3]]), u3 += 1;
      return (0, i2.matcherHint)(e3, s22, r3, o3) + `

Expected: ${(0, i2.printExpected)(n3)}
` + x("Received: ", n3, t4, 1 === l2.length) + g(h(l2), a2.length);
    }, pass: u2 };
  }, T = (e3) => function(t3, ...n3) {
    const r3 = "...expected", o3 = { isNot: this.isNot, promise: this.promise };
    D(t3, e3, r3, o3);
    const a2 = L(t3), u2 = a2 ? "spy" : t3.getMockName(), c22 = a2 ? t3.calls.all().map(((e4) => e4.args)) : t3.mock.calls, f2 = c22.length - 1, d2 = f2 >= 0 && p(n3, c22[f2]);
    return { message: d2 ? () => {
      const t4 = [];
      return f2 > 0 && t4.push([f2 - 1, c22[f2 - 1]]), t4.push([f2, c22[f2]]), (0, i2.matcherHint)(e3, u2, r3, o3) + `

Expected: not ${l(n3)}
` + (1 === c22.length && (0, i2.stringify)(c22[0]) === (0, i2.stringify)(n3) ? "" : y(n3, t4, 1 === c22.length, f2)) + `
Number of calls: ${(0, i2.printReceived)(c22.length)}`;
    } : () => {
      const t4 = [];
      if (f2 >= 0) {
        if (f2 > 0) {
          let e4 = f2 - 1;
          for (; e4 >= 0 && !p(n3, c22[e4]); ) e4 -= 1;
          e4 < 0 && (e4 = f2 - 1), t4.push([e4, c22[e4]]);
        }
        t4.push([f2, c22[f2]]);
      }
      return (0, i2.matcherHint)(e3, u2, r3, o3) + "\n\n" + b(n3, t4, s2(this.expand), 1 === c22.length, f2) + `
Number of calls: ${(0, i2.printReceived)(c22.length)}`;
    }, pass: d2 };
  }, M = (e3) => function(t3, n3) {
    const r3 = "expected", o3 = { isNot: this.isNot, promise: this.promise };
    B(t3, e3, r3, o3);
    const s22 = t3.getMockName(), { calls: a2, results: l2 } = t3.mock, u2 = l2.length - 1, c22 = u2 >= 0 && d(n3, l2[u2]);
    return { message: c22 ? () => {
      const t4 = [];
      return u2 > 0 && t4.push([u2 - 1, l2[u2 - 1]]), t4.push([u2, l2[u2]]), (0, i2.matcherHint)(e3, s22, r3, o3) + `

Expected: not ${(0, i2.printExpected)(n3)}
` + (1 === l2.length && "return" === l2[0].type && (0, i2.stringify)(l2[0].value) === (0, i2.stringify)(n3) ? "" : x("Received:     ", n3, t4, 1 === l2.length, u2)) + g(h(l2), a2.length);
    } : () => {
      const t4 = [];
      if (u2 >= 0) {
        if (u2 > 0) {
          let e4 = u2 - 1;
          for (; e4 >= 0 && !d(n3, l2[e4]); ) e4 -= 1;
          e4 < 0 && (e4 = u2 - 1), t4.push([e4, l2[e4]]);
        }
        t4.push([u2, l2[u2]]);
      }
      return (0, i2.matcherHint)(e3, s22, r3, o3) + `

Expected: ${(0, i2.printExpected)(n3)}
` + x("Received: ", n3, t4, 1 === l2.length, u2) + g(h(l2), a2.length);
    }, pass: c22 };
  }, I = (e3) => function(t3, n3, ...r3) {
    const o3 = "n", a2 = { expectedColor: (e4) => e4, isNot: this.isNot, promise: this.promise, secondArgument: "...expected" };
    if (D(t3, e3, o3, a2), !Number.isSafeInteger(n3) || n3 < 1) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(e3, void 0, o3, a2), `${o3} must be a positive integer`, (0, i2.printWithType)(o3, n3, i2.stringify)));
    const u2 = L(t3), c22 = u2 ? "spy" : t3.getMockName(), f2 = u2 ? t3.calls.all().map(((e4) => e4.args)) : t3.mock.calls, d2 = f2.length, h2 = n3 - 1, g2 = h2 < d2 && p(r3, f2[h2]);
    return { message: g2 ? () => {
      const t4 = [];
      return h2 - 1 >= 0 && t4.push([h2 - 1, f2[h2 - 1]]), t4.push([h2, f2[h2]]), h2 + 1 < d2 && t4.push([h2 + 1, f2[h2 + 1]]), (0, i2.matcherHint)(e3, c22, o3, a2) + `

n: ${n3}
Expected: not ${l(r3)}
` + (1 === f2.length && (0, i2.stringify)(f2[0]) === (0, i2.stringify)(r3) ? "" : y(r3, t4, 1 === f2.length, h2)) + `
Number of calls: ${(0, i2.printReceived)(f2.length)}`;
    } : () => {
      const t4 = [];
      if (h2 < d2) {
        if (h2 - 1 >= 0) {
          let e4 = h2 - 1;
          for (; e4 >= 0 && !p(r3, f2[e4]); ) e4 -= 1;
          e4 < 0 && (e4 = h2 - 1), t4.push([e4, f2[e4]]);
        }
        if (t4.push([h2, f2[h2]]), h2 + 1 < d2) {
          let e4 = h2 + 1;
          for (; e4 < d2 && !p(r3, f2[e4]); ) e4 += 1;
          e4 >= d2 && (e4 = h2 + 1), t4.push([e4, f2[e4]]);
        }
      } else if (d2 > 0) {
        let e4 = d2 - 1;
        for (; e4 >= 0 && !p(r3, f2[e4]); ) e4 -= 1;
        e4 < 0 && (e4 = d2 - 1), t4.push([e4, f2[e4]]);
      }
      return (0, i2.matcherHint)(e3, c22, o3, a2) + `

n: ${n3}
` + b(r3, t4, s2(this.expand), 1 === f2.length, h2) + `
Number of calls: ${(0, i2.printReceived)(f2.length)}`;
    }, pass: g2 };
  }, P = (e3) => function(t3, n3, r3) {
    const o3 = "n", s22 = { expectedColor: (e4) => e4, isNot: this.isNot, promise: this.promise, secondArgument: "expected" };
    if (B(t3, e3, o3, s22), !Number.isSafeInteger(n3) || n3 < 1) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(e3, void 0, o3, s22), `${o3} must be a positive integer`, (0, i2.printWithType)(o3, n3, i2.stringify)));
    const a2 = t3.getMockName(), { calls: l2, results: u2 } = t3.mock, c22 = u2.length, f2 = n3 - 1, p2 = f2 < c22 && d(r3, u2[f2]);
    return { message: p2 ? () => {
      const t4 = [];
      return f2 - 1 >= 0 && t4.push([f2 - 1, u2[f2 - 1]]), t4.push([f2, u2[f2]]), f2 + 1 < c22 && t4.push([f2 + 1, u2[f2 + 1]]), (0, i2.matcherHint)(e3, a2, o3, s22) + `

n: ${n3}
Expected: not ${(0, i2.printExpected)(r3)}
` + (1 === u2.length && "return" === u2[0].type && (0, i2.stringify)(u2[0].value) === (0, i2.stringify)(r3) ? "" : x("Received:     ", r3, t4, 1 === u2.length, f2)) + g(h(u2), l2.length);
    } : () => {
      const t4 = [];
      if (f2 < c22) {
        if (f2 - 1 >= 0) {
          let e4 = f2 - 1;
          for (; e4 >= 0 && !d(r3, u2[e4]); ) e4 -= 1;
          e4 < 0 && (e4 = f2 - 1), t4.push([e4, u2[e4]]);
        }
        if (t4.push([f2, u2[f2]]), f2 + 1 < c22) {
          let e4 = f2 + 1;
          for (; e4 < c22 && !d(r3, u2[e4]); ) e4 += 1;
          e4 >= c22 && (e4 = f2 + 1), t4.push([e4, u2[e4]]);
        }
      } else if (c22 > 0) {
        let e4 = c22 - 1;
        for (; e4 >= 0 && !d(r3, u2[e4]); ) e4 -= 1;
        e4 < 0 && (e4 = c22 - 1), t4.push([e4, u2[e4]]);
      }
      return (0, i2.matcherHint)(e3, a2, o3, s22) + `

n: ${n3}
Expected: ${(0, i2.printExpected)(r3)}
` + x("Received: ", r3, t4, 1 === u2.length, f2) + g(h(u2), l2.length);
    }, pass: p2 };
  }, k = { lastCalledWith: T("lastCalledWith"), lastReturnedWith: M("lastReturnedWith"), nthCalledWith: I("nthCalledWith"), nthReturnedWith: P("nthReturnedWith"), toBeCalled: O("toBeCalled"), toBeCalledTimes: A("toBeCalledTimes"), toBeCalledWith: C("toBeCalledWith"), toHaveBeenCalled: O("toHaveBeenCalled"), toHaveBeenCalledTimes: A("toHaveBeenCalledTimes"), toHaveBeenCalledWith: C("toHaveBeenCalledWith"), toHaveBeenLastCalledWith: T("toHaveBeenLastCalledWith"), toHaveBeenNthCalledWith: I("toHaveBeenNthCalledWith"), toHaveLastReturnedWith: M("toHaveLastReturnedWith"), toHaveNthReturnedWith: P("toHaveNthReturnedWith"), toHaveReturned: R("toHaveReturned"), toHaveReturnedTimes: S("toHaveReturnedTimes"), toHaveReturnedWith: $("toHaveReturnedWith"), toReturn: R("toReturn"), toReturnTimes: S("toReturnTimes"), toReturnWith: $("toReturnWith") }, N = (e3) => null != e3 && true === e3._isMockFunction, L = (e3) => null != e3 && null != e3.calls && "function" == typeof e3.calls.all && "function" == typeof e3.calls.count, D = (e3, t3, n3, r3) => {
    if (!N(e3) && !L(e3)) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(t3, void 0, n3, r3), `${(0, i2.RECEIVED_COLOR)("received")} value must be a mock or spy function`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
  }, B = (e3, t3, n3, r3) => {
    if (!N(e3)) throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(t3, void 0, n3, r3), `${(0, i2.RECEIVED_COLOR)("received")} value must be a mock function`, (0, i2.printWithType)("Received", e3, i2.printReceived)));
  };
  var U = k;
  t2.default = U;
}, "./node_modules/expect/build/toThrowMatchers.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = t2.createMatcher = void 0;
  var o2 = n2("./node_modules/@jest/expect-utils/build/index.js"), i2 = n2("./node_modules/jest-matcher-utils/build/index.js"), s2 = n2("./node_modules/jest-message-util/build/index.js"), a = n2("./node_modules/expect/build/print.js");
  const l = "Received function did not throw", u = (e3) => {
    const t3 = null != e3 && "string" == typeof e3.message;
    return t3 && "string" == typeof e3.name && "string" == typeof e3.stack ? { hasMessage: t3, isError: true, message: e3.message, value: e3 } : { hasMessage: t3, isError: false, message: t3 ? e3.message : String(e3), value: e3 };
  }, c2 = (e3, t3) => function(n3, r3) {
    const s22 = { isNot: this.isNot, promise: this.promise };
    let a2 = null;
    if (t3 && (0, o2.isError)(n3)) a2 = u(n3);
    else if ("function" != typeof n3) {
      if (!t3) {
        const t4 = void 0 === r3 ? "" : "expected";
        throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(e3, void 0, t4, s22), `${(0, i2.RECEIVED_COLOR)("received")} value must be a function`, (0, i2.printWithType)("Received", n3, i2.printReceived)));
      }
    } else try {
      n3();
    } catch (e4) {
      a2 = u(e4);
    }
    if (void 0 === r3) return y(e3, s22, a2);
    if ("function" == typeof r3) return g(e3, s22, a2, r3);
    if ("string" == typeof r3) return m2(e3, s22, a2, r3);
    if (null !== r3 && "function" == typeof r3.test) return p(e3, s22, a2, r3);
    if (null !== r3 && "function" == typeof r3.asymmetricMatch) return d(e3, s22, a2, r3);
    if (null !== r3 && "object" == typeof r3) return h(e3, s22, a2, r3);
    throw new Error((0, i2.matcherErrorMessage)((0, i2.matcherHint)(e3, void 0, void 0, s22), `${(0, i2.EXPECTED_COLOR)("expected")} value must be a string or regular expression or class or error`, (0, i2.printWithType)("Expected", r3, i2.printExpected)));
  };
  t2.createMatcher = c2;
  const f = { toThrow: c2("toThrow"), toThrowError: c2("toThrowError") }, p = (e3, t3, n3, r3) => {
    const o3 = null !== n3 && r3.test(n3.message);
    return { message: o3 ? () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected pattern: not ", r3) + (null !== n3 && n3.hasMessage ? v("Received message:     ", n3, "message", r3) + E(n3) : v("Received value:       ", n3, "value")) : () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected pattern: ", r3) + (null === n3 ? `
${l}` : n3.hasMessage ? v("Received message: ", n3, "message") + E(n3) : v("Received value:   ", n3, "value")), pass: o3 };
  }, d = (e3, t3, n3, r3) => {
    const o3 = null !== n3 && r3.asymmetricMatch(n3.value);
    return { message: o3 ? () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected asymmetric matcher: not ", r3) + "\n" + (null !== n3 && n3.hasMessage ? v("Received name:    ", n3, "name") + v("Received message: ", n3, "message") + E(n3) : v("Thrown value: ", n3, "value")) : () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected asymmetric matcher: ", r3) + "\n" + (null === n3 ? l : n3.hasMessage ? v("Received name:    ", n3, "name") + v("Received message: ", n3, "message") + E(n3) : v("Thrown value: ", n3, "value")), pass: o3 };
  }, h = (e3, t3, n3, r3) => {
    const o3 = null !== n3 && n3.message === r3.message;
    return { message: o3 ? () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected message: not ", r3.message) + (null !== n3 && n3.hasMessage ? E(n3) : v("Received value:       ", n3, "value")) : () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + (null === n3 ? b("Expected message: ", r3.message) + "\n" + l : n3.hasMessage ? (0, i2.printDiffOrStringify)(r3.message, n3.message, "Expected message", "Received message", true) + "\n" + E(n3) : b("Expected message: ", r3.message) + v("Received value:   ", n3, "value")), pass: o3 };
  }, g = (e3, t3, n3, r3) => {
    const o3 = null !== n3 && n3.value instanceof r3;
    return { message: o3 ? () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + (0, a.printExpectedConstructorNameNot)("Expected constructor", r3) + (null !== n3 && null != n3.value && "function" == typeof n3.value.constructor && n3.value.constructor !== r3 ? (0, a.printReceivedConstructorNameNot)("Received constructor", n3.value.constructor, r3) : "") + "\n" + (null !== n3 && n3.hasMessage ? v("Received message: ", n3, "message") + E(n3) : v("Received value: ", n3, "value")) : () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + (0, a.printExpectedConstructorName)("Expected constructor", r3) + (null === n3 ? `
${l}` : `${null != n3.value && "function" == typeof n3.value.constructor ? (0, a.printReceivedConstructorName)("Received constructor", n3.value.constructor) : ""}
${n3.hasMessage ? v("Received message: ", n3, "message") + E(n3) : v("Received value: ", n3, "value")}`), pass: o3 };
  }, m2 = (e3, t3, n3, r3) => {
    const o3 = null !== n3 && n3.message.includes(r3);
    return { message: o3 ? () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected substring: not ", r3) + (null !== n3 && n3.hasMessage ? v("Received message:       ", n3, "message", r3) + E(n3) : v("Received value:         ", n3, "value")) : () => (0, i2.matcherHint)(e3, void 0, void 0, t3) + "\n\n" + b("Expected substring: ", r3) + (null === n3 ? `
${l}` : n3.hasMessage ? v("Received message:   ", n3, "message") + E(n3) : v("Received value:     ", n3, "value")), pass: o3 };
  }, y = (e3, t3, n3) => {
    const r3 = null !== n3;
    return { message: r3 ? () => (0, i2.matcherHint)(e3, void 0, "", t3) + "\n\n" + (null !== n3 && n3.hasMessage ? v("Error name:    ", n3, "name") + v("Error message: ", n3, "message") + E(n3) : v("Thrown value: ", n3, "value")) : () => (0, i2.matcherHint)(e3, void 0, "", t3) + "\n\n" + l, pass: r3 };
  }, b = (e3, t3) => `${e3 + (0, i2.printExpected)(t3)}
`, v = (e3, t3, n3, r3) => {
    if (null === t3) return "";
    if ("message" === n3) {
      const n4 = t3.message;
      if ("string" == typeof r3) {
        const t4 = n4.indexOf(r3);
        if (-1 !== t4) return `${e3 + (0, a.printReceivedStringContainExpectedSubstring)(n4, t4, r3.length)}
`;
      } else if (r3 instanceof RegExp) return `${e3 + (0, a.printReceivedStringContainExpectedResult)(n4, "function" == typeof r3.exec ? r3.exec(n4) : null)}
`;
      return `${e3 + (0, i2.printReceived)(n4)}
`;
    }
    return "name" === n3 ? t3.isError ? `${e3 + (0, i2.printReceived)(t3.value.name)}
` : "" : "value" === n3 ? t3.isError ? "" : `${e3 + (0, i2.printReceived)(t3.value)}
` : "";
  }, E = (e3) => null !== e3 && e3.isError ? (0, s2.formatStackTrace)((0, s2.separateMessageFromStack)(e3.value.stack).stack, { rootDir: r2.cwd(), testMatch: [] }, { noStackTrace: false }) : "";
  var j = f;
  t2.default = j;
}, "./node_modules/fill-range/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/util/util.js"), o2 = n2("./node_modules/to-regex-range/index.js"), i2 = (e3) => null !== e3 && "object" == typeof e3 && !Array.isArray(e3), s2 = (e3) => "number" == typeof e3 || "string" == typeof e3 && "" !== e3, a = (e3) => Number.isInteger(+e3), l = (e3) => {
    let t3 = `${e3}`, n3 = -1;
    if ("-" === t3[0] && (t3 = t3.slice(1)), "0" === t3) return false;
    for (; "0" === t3[++n3]; ) ;
    return n3 > 0;
  }, u = (e3, t3, n3) => {
    if (t3 > 0) {
      let n4 = "-" === e3[0] ? "-" : "";
      n4 && (e3 = e3.slice(1)), e3 = n4 + e3.padStart(n4 ? t3 - 1 : t3, "0");
    }
    return false === n3 ? String(e3) : e3;
  }, c2 = (e3, t3) => {
    let n3 = "-" === e3[0] ? "-" : "";
    for (n3 && (e3 = e3.slice(1), t3--); e3.length < t3; ) e3 = "0" + e3;
    return n3 ? "-" + e3 : e3;
  }, f = (e3, t3, n3, r3) => {
    if (n3) return o2(e3, t3, { wrap: false, ...r3 });
    let i22 = String.fromCharCode(e3);
    return e3 === t3 ? i22 : `[${i22}-${String.fromCharCode(t3)}]`;
  }, p = (e3, t3, n3) => {
    if (Array.isArray(e3)) {
      let t4 = true === n3.wrap, r3 = n3.capture ? "" : "?:";
      return t4 ? `(${r3}${e3.join("|")})` : e3.join("|");
    }
    return o2(e3, t3, n3);
  }, d = (...e3) => new RangeError("Invalid range arguments: " + r2.inspect(...e3)), h = (e3, t3, n3) => {
    if (true === n3.strictRanges) throw d([e3, t3]);
    return [];
  }, g = (e3, t3, n3 = 1, r3 = {}) => {
    let o3 = Number(e3), i22 = Number(t3);
    if (!Number.isInteger(o3) || !Number.isInteger(i22)) {
      if (true === r3.strictRanges) throw d([e3, t3]);
      return [];
    }
    0 === o3 && (o3 = 0), 0 === i22 && (i22 = 0);
    let s22 = o3 > i22, a2 = String(e3), h2 = String(t3), g2 = String(n3);
    n3 = Math.max(Math.abs(n3), 1);
    let m22 = l(a2) || l(h2) || l(g2), y = m22 ? Math.max(a2.length, h2.length, g2.length) : 0, b = false === m22 && false === ((e4, t4, n4) => "string" == typeof e4 || "string" == typeof t4 || true === n4.stringify)(e3, t3, r3), v = r3.transform || /* @__PURE__ */ ((e4) => (t4) => true === e4 ? Number(t4) : String(t4))(b);
    if (r3.toRegex && 1 === n3) return f(c2(e3, y), c2(t3, y), true, r3);
    let E = { negatives: [], positives: [] }, j = [], _ = 0;
    for (; s22 ? o3 >= i22 : o3 <= i22; ) true === r3.toRegex && n3 > 1 ? E[(w = o3) < 0 ? "negatives" : "positives"].push(Math.abs(w)) : j.push(u(v(o3, _), y, b)), o3 = s22 ? o3 - n3 : o3 + n3, _++;
    var w;
    return true === r3.toRegex ? n3 > 1 ? ((e4, t4) => {
      e4.negatives.sort(((e5, t5) => e5 < t5 ? -1 : e5 > t5 ? 1 : 0)), e4.positives.sort(((e5, t5) => e5 < t5 ? -1 : e5 > t5 ? 1 : 0));
      let n4, r4 = t4.capture ? "" : "?:", o4 = "", i3 = "";
      return e4.positives.length && (o4 = e4.positives.join("|")), e4.negatives.length && (i3 = `-(${r4}${e4.negatives.join("|")})`), n4 = o4 && i3 ? `${o4}|${i3}` : o4 || i3, t4.wrap ? `(${r4}${n4})` : n4;
    })(E, r3) : p(j, null, { wrap: false, ...r3 }) : j;
  }, m2 = (e3, t3, n3, r3 = {}) => {
    if (null == t3 && s2(e3)) return [e3];
    if (!s2(e3) || !s2(t3)) return h(e3, t3, r3);
    if ("function" == typeof n3) return m2(e3, t3, 1, { transform: n3 });
    if (i2(n3)) return m2(e3, t3, 0, n3);
    let o3 = { ...r3 };
    return true === o3.capture && (o3.wrap = true), n3 = n3 || o3.step || 1, a(n3) ? a(e3) && a(t3) ? g(e3, t3, n3, o3) : ((e4, t4, n4 = 1, r4 = {}) => {
      if (!a(e4) && e4.length > 1 || !a(t4) && t4.length > 1) return h(e4, t4, r4);
      let o4 = r4.transform || ((e5) => String.fromCharCode(e5)), i22 = `${e4}`.charCodeAt(0), s22 = `${t4}`.charCodeAt(0), l2 = i22 > s22, u2 = Math.min(i22, s22), c22 = Math.max(i22, s22);
      if (r4.toRegex && 1 === n4) return f(u2, c22, false, r4);
      let d2 = [], g2 = 0;
      for (; l2 ? i22 >= s22 : i22 <= s22; ) d2.push(o4(i22, g2)), i22 = l2 ? i22 - n4 : i22 + n4, g2++;
      return true === r4.toRegex ? p(d2, null, { wrap: false, options: r4 }) : d2;
    })(e3, t3, Math.max(Math.abs(n3), 1), o3) : null == n3 || i2(n3) ? m2(e3, t3, 1, n3) : ((e4, t4) => {
      if (true === t4.strictRanges) throw new TypeError(`Expected step "${e4}" to be a number`);
      return [];
    })(n3, o3);
  };
  e2.exports = m2;
}, "./node_modules/for-each/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/is-callable/index.js"), o2 = Object.prototype.toString, i2 = Object.prototype.hasOwnProperty;
  e2.exports = function(e3, t3, n3) {
    if (!r2(t3)) throw new TypeError("iterator must be a function");
    var s2;
    arguments.length >= 3 && (s2 = n3), "[object Array]" === o2.call(e3) ? (function(e4, t4, n4) {
      for (var r3 = 0, o3 = e4.length; r3 < o3; r3++) i2.call(e4, r3) && (null == n4 ? t4(e4[r3], r3, e4) : t4.call(n4, e4[r3], r3, e4));
    })(e3, t3, s2) : "string" == typeof e3 ? (function(e4, t4, n4) {
      for (var r3 = 0, o3 = e4.length; r3 < o3; r3++) null == n4 ? t4(e4.charAt(r3), r3, e4) : t4.call(n4, e4.charAt(r3), r3, e4);
    })(e3, t3, s2) : (function(e4, t4, n4) {
      for (var r3 in e4) i2.call(e4, r3) && (null == n4 ? t4(e4[r3], r3, e4) : t4.call(n4, e4[r3], r3, e4));
    })(e3, t3, s2);
  };
}, "./node_modules/function-bind/implementation.js": (e2) => {
  var t2 = Array.prototype.slice, n2 = Object.prototype.toString;
  e2.exports = function(e3) {
    var r2 = this;
    if ("function" != typeof r2 || "[object Function]" !== n2.call(r2)) throw new TypeError("Function.prototype.bind called on incompatible " + r2);
    for (var o2, i2 = t2.call(arguments, 1), s2 = Math.max(0, r2.length - i2.length), a = [], l = 0; l < s2; l++) a.push("$" + l);
    if (o2 = Function("binder", "return function (" + a.join(",") + "){ return binder.apply(this,arguments); }")((function() {
      if (this instanceof o2) {
        var n3 = r2.apply(this, i2.concat(t2.call(arguments)));
        return Object(n3) === n3 ? n3 : this;
      }
      return r2.apply(e3, i2.concat(t2.call(arguments)));
    })), r2.prototype) {
      var u = function() {
      };
      u.prototype = r2.prototype, o2.prototype = new u(), u.prototype = null;
    }
    return o2;
  };
}, "./node_modules/function-bind/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/function-bind/implementation.js");
  e2.exports = Function.prototype.bind || r2;
}, "./node_modules/get-intrinsic/index.js": (e2, t2, n2) => {
  var r2, o2 = SyntaxError, i2 = Function, s2 = TypeError, a = function(e3) {
    try {
      return i2('"use strict"; return (' + e3 + ").constructor;")();
    } catch (e4) {
    }
  }, l = Object.getOwnPropertyDescriptor;
  if (l) try {
    l({}, "");
  } catch (e3) {
    l = null;
  }
  var u = function() {
    throw new s2();
  }, c2 = l ? (function() {
    try {
      return u;
    } catch (e3) {
      try {
        return l(arguments, "callee").get;
      } catch (e4) {
        return u;
      }
    }
  })() : u, f = n2("./node_modules/has-symbols/index.js")(), p = Object.getPrototypeOf || function(e3) {
    return e3.__proto__;
  }, d = {}, h = "undefined" == typeof Uint8Array ? r2 : p(Uint8Array), g = { "%AggregateError%": "undefined" == typeof AggregateError ? r2 : AggregateError, "%Array%": Array, "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? r2 : ArrayBuffer, "%ArrayIteratorPrototype%": f ? p([][Symbol.iterator]()) : r2, "%AsyncFromSyncIteratorPrototype%": r2, "%AsyncFunction%": d, "%AsyncGenerator%": d, "%AsyncGeneratorFunction%": d, "%AsyncIteratorPrototype%": d, "%Atomics%": "undefined" == typeof Atomics ? r2 : Atomics, "%BigInt%": "undefined" == typeof BigInt ? r2 : BigInt, "%BigInt64Array%": "undefined" == typeof BigInt64Array ? r2 : BigInt64Array, "%BigUint64Array%": "undefined" == typeof BigUint64Array ? r2 : BigUint64Array, "%Boolean%": Boolean, "%DataView%": "undefined" == typeof DataView ? r2 : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": Error, "%eval%": eval, "%EvalError%": EvalError, "%Float32Array%": "undefined" == typeof Float32Array ? r2 : Float32Array, "%Float64Array%": "undefined" == typeof Float64Array ? r2 : Float64Array, "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? r2 : FinalizationRegistry, "%Function%": i2, "%GeneratorFunction%": d, "%Int8Array%": "undefined" == typeof Int8Array ? r2 : Int8Array, "%Int16Array%": "undefined" == typeof Int16Array ? r2 : Int16Array, "%Int32Array%": "undefined" == typeof Int32Array ? r2 : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": f ? p(p([][Symbol.iterator]())) : r2, "%JSON%": "object" == typeof JSON ? JSON : r2, "%Map%": "undefined" == typeof Map ? r2 : Map, "%MapIteratorPrototype%": "undefined" != typeof Map && f ? p((/* @__PURE__ */ new Map())[Symbol.iterator]()) : r2, "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": "undefined" == typeof Promise ? r2 : Promise, "%Proxy%": "undefined" == typeof Proxy ? r2 : Proxy, "%RangeError%": RangeError, "%ReferenceError%": ReferenceError, "%Reflect%": "undefined" == typeof Reflect ? r2 : Reflect, "%RegExp%": RegExp, "%Set%": "undefined" == typeof Set ? r2 : Set, "%SetIteratorPrototype%": "undefined" != typeof Set && f ? p((/* @__PURE__ */ new Set())[Symbol.iterator]()) : r2, "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? r2 : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": f ? p(""[Symbol.iterator]()) : r2, "%Symbol%": f ? Symbol : r2, "%SyntaxError%": o2, "%ThrowTypeError%": c2, "%TypedArray%": h, "%TypeError%": s2, "%Uint8Array%": "undefined" == typeof Uint8Array ? r2 : Uint8Array, "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? r2 : Uint8ClampedArray, "%Uint16Array%": "undefined" == typeof Uint16Array ? r2 : Uint16Array, "%Uint32Array%": "undefined" == typeof Uint32Array ? r2 : Uint32Array, "%URIError%": URIError, "%WeakMap%": "undefined" == typeof WeakMap ? r2 : WeakMap, "%WeakRef%": "undefined" == typeof WeakRef ? r2 : WeakRef, "%WeakSet%": "undefined" == typeof WeakSet ? r2 : WeakSet };
  try {
    null.error;
  } catch (e3) {
    var m2 = p(p(e3));
    g["%Error.prototype%"] = m2;
  }
  var y = function e3(t3) {
    var n3;
    if ("%AsyncFunction%" === t3) n3 = a("async function () {}");
    else if ("%GeneratorFunction%" === t3) n3 = a("function* () {}");
    else if ("%AsyncGeneratorFunction%" === t3) n3 = a("async function* () {}");
    else if ("%AsyncGenerator%" === t3) {
      var r3 = e3("%AsyncGeneratorFunction%");
      r3 && (n3 = r3.prototype);
    } else if ("%AsyncIteratorPrototype%" === t3) {
      var o3 = e3("%AsyncGenerator%");
      o3 && (n3 = p(o3.prototype));
    }
    return g[t3] = n3, n3;
  }, b = { "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, v = n2("./node_modules/function-bind/index.js"), E = n2("./node_modules/has/src/index.js"), j = v.call(Function.call, Array.prototype.concat), _ = v.call(Function.apply, Array.prototype.splice), w = v.call(Function.call, String.prototype.replace), x = v.call(Function.call, String.prototype.slice), O = v.call(Function.call, RegExp.prototype.exec), R = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, A = /\\(\\)?/g, S = function(e3, t3) {
    var n3, r3 = e3;
    if (E(b, r3) && (r3 = "%" + (n3 = b[r3])[0] + "%"), E(g, r3)) {
      var i22 = g[r3];
      if (i22 === d && (i22 = y(r3)), void 0 === i22 && !t3) throw new s2("intrinsic " + e3 + " exists, but is not available. Please file an issue!");
      return { alias: n3, name: r3, value: i22 };
    }
    throw new o2("intrinsic " + e3 + " does not exist!");
  };
  e2.exports = function(e3, t3) {
    if ("string" != typeof e3 || 0 === e3.length) throw new s2("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && "boolean" != typeof t3) throw new s2('"allowMissing" argument must be a boolean');
    if (null === O(/^%?[^%]*%?$/, e3)) throw new o2("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var n3 = (function(e4) {
      var t4 = x(e4, 0, 1), n4 = x(e4, -1);
      if ("%" === t4 && "%" !== n4) throw new o2("invalid intrinsic syntax, expected closing `%`");
      if ("%" === n4 && "%" !== t4) throw new o2("invalid intrinsic syntax, expected opening `%`");
      var r4 = [];
      return w(e4, R, (function(e5, t5, n5, o3) {
        r4[r4.length] = n5 ? w(o3, A, "$1") : t5 || e5;
      })), r4;
    })(e3), r3 = n3.length > 0 ? n3[0] : "", i22 = S("%" + r3 + "%", t3), a2 = i22.name, u2 = i22.value, c22 = false, f2 = i22.alias;
    f2 && (r3 = f2[0], _(n3, j([0, 1], f2)));
    for (var p2 = 1, d2 = true; p2 < n3.length; p2 += 1) {
      var h2 = n3[p2], m22 = x(h2, 0, 1), y2 = x(h2, -1);
      if (('"' === m22 || "'" === m22 || "`" === m22 || '"' === y2 || "'" === y2 || "`" === y2) && m22 !== y2) throw new o2("property names with quotes must have matching quotes");
      if ("constructor" !== h2 && d2 || (c22 = true), E(g, a2 = "%" + (r3 += "." + h2) + "%")) u2 = g[a2];
      else if (null != u2) {
        if (!(h2 in u2)) {
          if (!t3) throw new s2("base intrinsic for " + e3 + " exists, but the property is not available.");
          return;
        }
        if (l && p2 + 1 >= n3.length) {
          var b2 = l(u2, h2);
          u2 = (d2 = !!b2) && "get" in b2 && !("originalValue" in b2.get) ? b2.get : u2[h2];
        } else d2 = E(u2, h2), u2 = u2[h2];
        d2 && !c22 && (g[a2] = u2);
      }
    }
    return u2;
  };
}, "./node_modules/gopd/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/get-intrinsic/index.js")("%Object.getOwnPropertyDescriptor%", true);
  if (r2) try {
    r2([], "length");
  } catch (e3) {
    r2 = null;
  }
  e2.exports = r2;
}, "./node_modules/has-property-descriptors/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/get-intrinsic/index.js")("%Object.defineProperty%", true), o2 = function() {
    if (r2) try {
      return r2({}, "a", { value: 1 }), true;
    } catch (e3) {
      return false;
    }
    return false;
  };
  o2.hasArrayLengthDefineBug = function() {
    if (!o2()) return null;
    try {
      return 1 !== r2([], "length", { value: 1 }).length;
    } catch (e3) {
      return true;
    }
  }, e2.exports = o2;
}, "./node_modules/has-symbols/index.js": (e2, t2, n2) => {
  var r2 = "undefined" != typeof Symbol && Symbol, o2 = n2("./node_modules/has-symbols/shams.js");
  e2.exports = function() {
    return "function" == typeof r2 && ("function" == typeof Symbol && ("symbol" == typeof r2("foo") && ("symbol" == typeof Symbol("bar") && o2())));
  };
}, "./node_modules/has-symbols/shams.js": (e2) => {
  e2.exports = function() {
    if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return false;
    if ("symbol" == typeof Symbol.iterator) return true;
    var e3 = {}, t2 = Symbol("test"), n2 = Object(t2);
    if ("string" == typeof t2) return false;
    if ("[object Symbol]" !== Object.prototype.toString.call(t2)) return false;
    if ("[object Symbol]" !== Object.prototype.toString.call(n2)) return false;
    for (t2 in e3[t2] = 42, e3) return false;
    if ("function" == typeof Object.keys && 0 !== Object.keys(e3).length) return false;
    if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(e3).length) return false;
    var r2 = Object.getOwnPropertySymbols(e3);
    if (1 !== r2.length || r2[0] !== t2) return false;
    if (!Object.prototype.propertyIsEnumerable.call(e3, t2)) return false;
    if ("function" == typeof Object.getOwnPropertyDescriptor) {
      var o2 = Object.getOwnPropertyDescriptor(e3, t2);
      if (42 !== o2.value || true !== o2.enumerable) return false;
    }
    return true;
  };
}, "./node_modules/has-tostringtag/shams.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/has-symbols/shams.js");
  e2.exports = function() {
    return r2() && !!Symbol.toStringTag;
  };
}, "./node_modules/has/src/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/function-bind/index.js");
  e2.exports = r2.call(Function.call, Object.prototype.hasOwnProperty);
}, "./node_modules/ieee754/index.js": (e2, t2) => {
  t2.read = function(e3, t3, n2, r2, o2) {
    var i2, s2, a = 8 * o2 - r2 - 1, l = (1 << a) - 1, u = l >> 1, c2 = -7, f = n2 ? o2 - 1 : 0, p = n2 ? -1 : 1, d = e3[t3 + f];
    for (f += p, i2 = d & (1 << -c2) - 1, d >>= -c2, c2 += a; c2 > 0; i2 = 256 * i2 + e3[t3 + f], f += p, c2 -= 8) ;
    for (s2 = i2 & (1 << -c2) - 1, i2 >>= -c2, c2 += r2; c2 > 0; s2 = 256 * s2 + e3[t3 + f], f += p, c2 -= 8) ;
    if (0 === i2) i2 = 1 - u;
    else {
      if (i2 === l) return s2 ? NaN : 1 / 0 * (d ? -1 : 1);
      s2 += Math.pow(2, r2), i2 -= u;
    }
    return (d ? -1 : 1) * s2 * Math.pow(2, i2 - r2);
  }, t2.write = function(e3, t3, n2, r2, o2, i2) {
    var s2, a, l, u = 8 * i2 - o2 - 1, c2 = (1 << u) - 1, f = c2 >> 1, p = 23 === o2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = r2 ? 0 : i2 - 1, h = r2 ? 1 : -1, g = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
    for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (a = isNaN(t3) ? 1 : 0, s2 = c2) : (s2 = Math.floor(Math.log(t3) / Math.LN2), t3 * (l = Math.pow(2, -s2)) < 1 && (s2--, l *= 2), (t3 += s2 + f >= 1 ? p / l : p * Math.pow(2, 1 - f)) * l >= 2 && (s2++, l /= 2), s2 + f >= c2 ? (a = 0, s2 = c2) : s2 + f >= 1 ? (a = (t3 * l - 1) * Math.pow(2, o2), s2 += f) : (a = t3 * Math.pow(2, f - 1) * Math.pow(2, o2), s2 = 0)); o2 >= 8; e3[n2 + d] = 255 & a, d += h, a /= 256, o2 -= 8) ;
    for (s2 = s2 << o2 | a, u += o2; u > 0; e3[n2 + d] = 255 & s2, d += h, s2 /= 256, u -= 8) ;
    e3[n2 + d - h] |= 128 * g;
  };
}, "./node_modules/inherits/inherits_browser.js": (e2) => {
  "function" == typeof Object.create ? e2.exports = function(e3, t2) {
    t2 && (e3.super_ = t2, e3.prototype = Object.create(t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }));
  } : e2.exports = function(e3, t2) {
    if (t2) {
      e3.super_ = t2;
      var n2 = function() {
      };
      n2.prototype = t2.prototype, e3.prototype = new n2(), e3.prototype.constructor = e3;
    }
  };
}, "./node_modules/is-arguments/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/has-tostringtag/shams.js")(), o2 = n2("./node_modules/call-bind/callBound.js")("Object.prototype.toString"), i2 = function(e3) {
    return !(r2 && e3 && "object" == typeof e3 && Symbol.toStringTag in e3) && "[object Arguments]" === o2(e3);
  }, s2 = function(e3) {
    return !!i2(e3) || null !== e3 && "object" == typeof e3 && "number" == typeof e3.length && e3.length >= 0 && "[object Array]" !== o2(e3) && "[object Function]" === o2(e3.callee);
  }, a = (function() {
    return i2(arguments);
  })();
  i2.isLegacyArguments = s2, e2.exports = a ? i2 : s2;
}, "./node_modules/is-callable/index.js": (e2) => {
  var t2, n2, r2 = Function.prototype.toString, o2 = "object" == typeof Reflect && null !== Reflect && Reflect.apply;
  if ("function" == typeof o2 && "function" == typeof Object.defineProperty) try {
    t2 = Object.defineProperty({}, "length", { get: function() {
      throw n2;
    } }), n2 = {}, o2((function() {
      throw 42;
    }), null, t2);
  } catch (e3) {
    e3 !== n2 && (o2 = null);
  }
  else o2 = null;
  var i2 = /^\s*class\b/, s2 = function(e3) {
    try {
      var t3 = r2.call(e3);
      return i2.test(t3);
    } catch (e4) {
      return false;
    }
  }, a = function(e3) {
    try {
      return !s2(e3) && (r2.call(e3), true);
    } catch (e4) {
      return false;
    }
  }, l = Object.prototype.toString, u = "function" == typeof Symbol && !!Symbol.toStringTag, c2 = !(0 in [,]), f = function() {
    return false;
  };
  if ("object" == typeof document) {
    var p = document.all;
    l.call(p) === l.call(document.all) && (f = function(e3) {
      if ((c2 || !e3) && (void 0 === e3 || "object" == typeof e3)) try {
        var t3 = l.call(e3);
        return ("[object HTMLAllCollection]" === t3 || "[object HTML document.all class]" === t3 || "[object HTMLCollection]" === t3 || "[object Object]" === t3) && null == e3("");
      } catch (e4) {
      }
      return false;
    });
  }
  e2.exports = o2 ? function(e3) {
    if (f(e3)) return true;
    if (!e3) return false;
    if ("function" != typeof e3 && "object" != typeof e3) return false;
    try {
      o2(e3, null, t2);
    } catch (e4) {
      if (e4 !== n2) return false;
    }
    return !s2(e3) && a(e3);
  } : function(e3) {
    if (f(e3)) return true;
    if (!e3) return false;
    if ("function" != typeof e3 && "object" != typeof e3) return false;
    if (u) return a(e3);
    if (s2(e3)) return false;
    var t3 = l.call(e3);
    return !("[object Function]" !== t3 && "[object GeneratorFunction]" !== t3 && !/^\[object HTML/.test(t3)) && a(e3);
  };
}, "./node_modules/is-generator-function/index.js": (e2, t2, n2) => {
  var r2, o2 = Object.prototype.toString, i2 = Function.prototype.toString, s2 = /^\s*(?:function)?\*/, a = n2("./node_modules/has-tostringtag/shams.js")(), l = Object.getPrototypeOf;
  e2.exports = function(e3) {
    if ("function" != typeof e3) return false;
    if (s2.test(i2.call(e3))) return true;
    if (!a) return "[object GeneratorFunction]" === o2.call(e3);
    if (!l) return false;
    if (void 0 === r2) {
      var t3 = (function() {
        if (!a) return false;
        try {
          return Function("return function*() {}")();
        } catch (e4) {
        }
      })();
      r2 = !!t3 && l(t3);
    }
    return l(e3) === r2;
  };
}, "./node_modules/is-nan/implementation.js": (e2) => {
  e2.exports = function(e3) {
    return e3 != e3;
  };
}, "./node_modules/is-nan/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/call-bind/index.js"), o2 = n2("./node_modules/define-properties/index.js"), i2 = n2("./node_modules/is-nan/implementation.js"), s2 = n2("./node_modules/is-nan/polyfill.js"), a = n2("./node_modules/is-nan/shim.js"), l = r2(s2(), Number);
  o2(l, { getPolyfill: s2, implementation: i2, shim: a }), e2.exports = l;
}, "./node_modules/is-nan/polyfill.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/is-nan/implementation.js");
  e2.exports = function() {
    return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : r2;
  };
}, "./node_modules/is-nan/shim.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/define-properties/index.js"), o2 = n2("./node_modules/is-nan/polyfill.js");
  e2.exports = function() {
    var e3 = o2();
    return r2(Number, { isNaN: e3 }, { isNaN: function() {
      return Number.isNaN !== e3;
    } }), e3;
  };
}, "./node_modules/is-number/index.js": (e2) => {
  e2.exports = function(e3) {
    return "number" == typeof e3 ? e3 - e3 == 0 : "string" == typeof e3 && "" !== e3.trim() && (Number.isFinite ? Number.isFinite(+e3) : isFinite(+e3));
  };
}, "./node_modules/is-typed-array/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/for-each/index.js"), o2 = n2("./node_modules/available-typed-arrays/index.js"), i2 = n2("./node_modules/call-bind/callBound.js"), s2 = i2("Object.prototype.toString"), a = n2("./node_modules/has-tostringtag/shams.js")(), l = n2("./node_modules/gopd/index.js"), u = "undefined" == typeof globalThis ? n2.g : globalThis, c2 = o2(), f = i2("Array.prototype.indexOf", true) || function(e3, t3) {
    for (var n3 = 0; n3 < e3.length; n3 += 1) if (e3[n3] === t3) return n3;
    return -1;
  }, p = i2("String.prototype.slice"), d = {}, h = Object.getPrototypeOf;
  a && l && h && r2(c2, (function(e3) {
    var t3 = new u[e3]();
    if (Symbol.toStringTag in t3) {
      var n3 = h(t3), r3 = l(n3, Symbol.toStringTag);
      if (!r3) {
        var o3 = h(n3);
        r3 = l(o3, Symbol.toStringTag);
      }
      d[e3] = r3.get;
    }
  }));
  e2.exports = function(e3) {
    if (!e3 || "object" != typeof e3) return false;
    if (!a || !(Symbol.toStringTag in e3)) {
      var t3 = p(s2(e3), 8, -1);
      return f(c2, t3) > -1;
    }
    return !!l && (function(e4) {
      var t4 = false;
      return r2(d, (function(n3, r3) {
        if (!t4) try {
          t4 = n3.call(e4) === r3;
        } catch (e5) {
        }
      })), t4;
    })(e3);
  };
}, "./node_modules/jest-diff/build/cleanupSemantic.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.cleanupSemantic = t2.Diff = t2.DIFF_INSERT = t2.DIFF_EQUAL = t2.DIFF_DELETE = void 0;
  var n2 = -1;
  t2.DIFF_DELETE = n2;
  t2.DIFF_INSERT = 1;
  t2.DIFF_EQUAL = 0;
  class r2 {
    constructor(e3, t3) {
      __publicField(this, 0);
      __publicField(this, 1);
      this[0] = e3, this[1] = t3;
    }
  }
  t2.Diff = r2;
  var o2 = function(e3, t3) {
    if (!e3 || !t3 || e3.charAt(0) != t3.charAt(0)) return 0;
    for (var n3 = 0, r3 = Math.min(e3.length, t3.length), o3 = r3, i22 = 0; n3 < o3; ) e3.substring(i22, o3) == t3.substring(i22, o3) ? i22 = n3 = o3 : r3 = o3, o3 = Math.floor((r3 - n3) / 2 + n3);
    return o3;
  }, i2 = function(e3, t3) {
    if (!e3 || !t3 || e3.charAt(e3.length - 1) != t3.charAt(t3.length - 1)) return 0;
    for (var n3 = 0, r3 = Math.min(e3.length, t3.length), o3 = r3, i22 = 0; n3 < o3; ) e3.substring(e3.length - o3, e3.length - i22) == t3.substring(t3.length - o3, t3.length - i22) ? i22 = n3 = o3 : r3 = o3, o3 = Math.floor((r3 - n3) / 2 + n3);
    return o3;
  }, s2 = function(e3, t3) {
    var n3 = e3.length, r3 = t3.length;
    if (0 == n3 || 0 == r3) return 0;
    n3 > r3 ? e3 = e3.substring(n3 - r3) : n3 < r3 && (t3 = t3.substring(0, n3));
    var o3 = Math.min(n3, r3);
    if (e3 == t3) return o3;
    for (var i22 = 0, s22 = 1; ; ) {
      var a2 = e3.substring(o3 - s22), l2 = t3.indexOf(a2);
      if (-1 == l2) return i22;
      s22 += l2, 0 != l2 && e3.substring(o3 - s22) != t3.substring(0, s22) || (i22 = s22, s22++);
    }
  };
  t2.cleanupSemantic = function(e3) {
    for (var t3 = false, o3 = [], i22 = 0, l2 = null, u2 = 0, c22 = 0, f2 = 0, p2 = 0, h = 0; u2 < e3.length; ) 0 == e3[u2][0] ? (o3[i22++] = u2, c22 = p2, f2 = h, p2 = 0, h = 0, l2 = e3[u2][1]) : (1 == e3[u2][0] ? p2 += e3[u2][1].length : h += e3[u2][1].length, l2 && l2.length <= Math.max(c22, f2) && l2.length <= Math.max(p2, h) && (e3.splice(o3[i22 - 1], 0, new r2(n2, l2)), e3[o3[i22 - 1] + 1][0] = 1, i22--, u2 = --i22 > 0 ? o3[i22 - 1] : -1, c22 = 0, f2 = 0, p2 = 0, h = 0, l2 = null, t3 = true)), u2++;
    for (t3 && d(e3), a(e3), u2 = 1; u2 < e3.length; ) {
      if (e3[u2 - 1][0] == n2 && 1 == e3[u2][0]) {
        var g = e3[u2 - 1][1], m2 = e3[u2][1], y = s2(g, m2), b = s2(m2, g);
        y >= b ? (y >= g.length / 2 || y >= m2.length / 2) && (e3.splice(u2, 0, new r2(0, m2.substring(0, y))), e3[u2 - 1][1] = g.substring(0, g.length - y), e3[u2 + 1][1] = m2.substring(y), u2++) : (b >= g.length / 2 || b >= m2.length / 2) && (e3.splice(u2, 0, new r2(0, g.substring(0, b))), e3[u2 - 1][0] = 1, e3[u2 - 1][1] = m2.substring(0, m2.length - b), e3[u2 + 1][0] = n2, e3[u2 + 1][1] = g.substring(b), u2++), u2++;
      }
      u2++;
    }
  };
  var a = function(e3) {
    function t3(e4, t4) {
      if (!e4 || !t4) return 6;
      var n4 = e4.charAt(e4.length - 1), r4 = t4.charAt(0), o4 = n4.match(l), i22 = r4.match(l), s3 = o4 && n4.match(u), a3 = i22 && r4.match(u), d3 = s3 && n4.match(c2), h2 = a3 && r4.match(c2), g2 = d3 && e4.match(f), m22 = h2 && t4.match(p);
      return g2 || m22 ? 5 : d3 || h2 ? 4 : o4 && !s3 && a3 ? 3 : s3 || a3 ? 2 : o4 || i22 ? 1 : 0;
    }
    for (var n3 = 1; n3 < e3.length - 1; ) {
      if (0 == e3[n3 - 1][0] && 0 == e3[n3 + 1][0]) {
        var r3 = e3[n3 - 1][1], o3 = e3[n3][1], s22 = e3[n3 + 1][1], a2 = i2(r3, o3);
        if (a2) {
          var d2 = o3.substring(o3.length - a2);
          r3 = r3.substring(0, r3.length - a2), o3 = d2 + o3.substring(0, o3.length - a2), s22 = d2 + s22;
        }
        for (var h = r3, g = o3, m2 = s22, y = t3(r3, o3) + t3(o3, s22); o3.charAt(0) === s22.charAt(0); ) {
          r3 += o3.charAt(0), o3 = o3.substring(1) + s22.charAt(0), s22 = s22.substring(1);
          var b = t3(r3, o3) + t3(o3, s22);
          b >= y && (y = b, h = r3, g = o3, m2 = s22);
        }
        e3[n3 - 1][1] != h && (h ? e3[n3 - 1][1] = h : (e3.splice(n3 - 1, 1), n3--), e3[n3][1] = g, m2 ? e3[n3 + 1][1] = m2 : (e3.splice(n3 + 1, 1), n3--));
      }
      n3++;
    }
  }, l = /[^a-zA-Z0-9]/, u = /\s/, c2 = /[\r\n]/, f = /\n\r?\n$/, p = /^\r?\n\r?\n/, d = function(e3) {
    e3.push(new r2(0, ""));
    for (var t3, s22 = 0, a2 = 0, l2 = 0, u2 = "", c22 = ""; s22 < e3.length; ) switch (e3[s22][0]) {
      case 1:
        l2++, c22 += e3[s22][1], s22++;
        break;
      case n2:
        a2++, u2 += e3[s22][1], s22++;
        break;
      case 0:
        a2 + l2 > 1 ? (0 !== a2 && 0 !== l2 && (0 !== (t3 = o2(c22, u2)) && (s22 - a2 - l2 > 0 && 0 == e3[s22 - a2 - l2 - 1][0] ? e3[s22 - a2 - l2 - 1][1] += c22.substring(0, t3) : (e3.splice(0, 0, new r2(0, c22.substring(0, t3))), s22++), c22 = c22.substring(t3), u2 = u2.substring(t3)), 0 !== (t3 = i2(c22, u2)) && (e3[s22][1] = c22.substring(c22.length - t3) + e3[s22][1], c22 = c22.substring(0, c22.length - t3), u2 = u2.substring(0, u2.length - t3))), s22 -= a2 + l2, e3.splice(s22, a2 + l2), u2.length && (e3.splice(s22, 0, new r2(n2, u2)), s22++), c22.length && (e3.splice(s22, 0, new r2(1, c22)), s22++), s22++) : 0 !== s22 && 0 == e3[s22 - 1][0] ? (e3[s22 - 1][1] += e3[s22][1], e3.splice(s22, 1)) : s22++, l2 = 0, a2 = 0, u2 = "", c22 = "";
    }
    "" === e3[e3.length - 1][1] && e3.pop();
    var f2 = false;
    for (s22 = 1; s22 < e3.length - 1; ) 0 == e3[s22 - 1][0] && 0 == e3[s22 + 1][0] && (e3[s22][1].substring(e3[s22][1].length - e3[s22 - 1][1].length) == e3[s22 - 1][1] ? (e3[s22][1] = e3[s22 - 1][1] + e3[s22][1].substring(0, e3[s22][1].length - e3[s22 - 1][1].length), e3[s22 + 1][1] = e3[s22 - 1][1] + e3[s22 + 1][1], e3.splice(s22 - 1, 1), f2 = true) : e3[s22][1].substring(0, e3[s22 + 1][1].length) == e3[s22 + 1][1] && (e3[s22 - 1][1] += e3[s22 + 1][1], e3[s22][1] = e3[s22][1].substring(e3[s22 + 1][1].length) + e3[s22 + 1][1], e3.splice(s22 + 1, 1), f2 = true)), s22++;
    f2 && d(e3);
  };
}, "./node_modules/jest-diff/build/constants.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.SIMILAR_MESSAGE = t2.NO_DIFF_MESSAGE = void 0;
  t2.NO_DIFF_MESSAGE = "Compared values have no visual difference.";
  t2.SIMILAR_MESSAGE = "Compared values serialize to the same structure.\nPrinting internal object structure without calling `toJSON` instead.";
}, "./node_modules/jest-diff/build/diffLines.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.printDiffLines = t2.diffLinesUnified2 = t2.diffLinesUnified = t2.diffLinesRaw = void 0;
  var r2, o2 = (r2 = n2("./node_modules/diff-sequences/build/index.js")) && r2.__esModule ? r2 : { default: r2 }, i2 = n2("./node_modules/jest-diff/build/cleanupSemantic.js"), s2 = n2("./node_modules/jest-diff/build/joinAlignedDiffs.js"), a = n2("./node_modules/jest-diff/build/normalizeDiffOptions.js");
  const l = (e3) => 1 === e3.length && 0 === e3[0].length, u = (e3, t3) => (({ aAnnotation: e4, aColor: t4, aIndicator: n3, bAnnotation: r3, bColor: o3, bIndicator: i22, includeChangeCounts: s22, omitAnnotationLines: a2 }, l2) => {
    if (a2) return "";
    let u2 = "", c22 = "";
    if (s22) {
      const t5 = String(l2.a), o4 = String(l2.b), s3 = r3.length - e4.length, a3 = " ".repeat(Math.max(0, s3)), f3 = " ".repeat(Math.max(0, -s3)), p = o4.length - t5.length;
      u2 = `${a3}  ${n3} ${" ".repeat(Math.max(0, p))}${t5}`, c22 = `${f3}  ${i22} ${" ".repeat(Math.max(0, -p))}${o4}`;
    }
    const f2 = `${i22} ${r3}${c22}`;
    return `${t4(`${n3} ${e4}${u2}`)}
${o3(f2)}

`;
  })(t3, ((e4) => {
    let t4 = 0, n3 = 0;
    return e4.forEach(((e5) => {
      switch (e5[0]) {
        case i2.DIFF_DELETE:
          t4 += 1;
          break;
        case i2.DIFF_INSERT:
          n3 += 1;
      }
    })), { a: t4, b: n3 };
  })(e3)) + (t3.expand ? (0, s2.joinAlignedDiffsExpand)(e3, t3) : (0, s2.joinAlignedDiffsNoExpand)(e3, t3));
  t2.printDiffLines = u;
  const c2 = (e3, t3, n3) => u(f(l(e3) ? [] : e3, l(t3) ? [] : t3), (0, a.normalizeDiffOptions)(n3));
  t2.diffLinesUnified = c2;
  t2.diffLinesUnified2 = (e3, t3, n3, r3, o3) => {
    if (l(e3) && l(n3) && (e3 = [], n3 = []), l(t3) && l(r3) && (t3 = [], r3 = []), e3.length !== n3.length || t3.length !== r3.length) return c2(e3, t3, o3);
    const s22 = f(n3, r3);
    let p = 0, d = 0;
    return s22.forEach(((n4) => {
      switch (n4[0]) {
        case i2.DIFF_DELETE:
          n4[1] = e3[p], p += 1;
          break;
        case i2.DIFF_INSERT:
          n4[1] = t3[d], d += 1;
          break;
        default:
          n4[1] = t3[d], p += 1, d += 1;
      }
    })), u(s22, (0, a.normalizeDiffOptions)(o3));
  };
  const f = (e3, t3) => {
    const n3 = e3.length, r3 = t3.length, s22 = [];
    let a2 = 0, l2 = 0;
    for ((0, o2.default)(n3, r3, ((n4, r4) => e3[n4] === t3[r4]), ((n4, r4, o3) => {
      for (; a2 !== r4; a2 += 1) s22.push(new i2.Diff(i2.DIFF_DELETE, e3[a2]));
      for (; l2 !== o3; l2 += 1) s22.push(new i2.Diff(i2.DIFF_INSERT, t3[l2]));
      for (; 0 !== n4; n4 -= 1, a2 += 1, l2 += 1) s22.push(new i2.Diff(i2.DIFF_EQUAL, t3[l2]));
    })); a2 !== n3; a2 += 1) s22.push(new i2.Diff(i2.DIFF_DELETE, e3[a2]));
    for (; l2 !== r3; l2 += 1) s22.push(new i2.Diff(i2.DIFF_INSERT, t3[l2]));
    return s22;
  };
  t2.diffLinesRaw = f;
}, "./node_modules/jest-diff/build/diffStrings.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var r2, o2 = (r2 = n2("./node_modules/diff-sequences/build/index.js")) && r2.__esModule ? r2 : { default: r2 }, i2 = n2("./node_modules/jest-diff/build/cleanupSemantic.js");
  var s2 = (e3, t3) => {
    let n3 = 0, r3 = 0;
    const s22 = [];
    return (0, o2.default)(e3.length, t3.length, ((n4, r4) => e3[n4] === t3[r4]), ((o3, a, l) => {
      n3 !== a && s22.push(new i2.Diff(i2.DIFF_DELETE, e3.slice(n3, a))), r3 !== l && s22.push(new i2.Diff(i2.DIFF_INSERT, t3.slice(r3, l))), n3 = a + o3, r3 = l + o3, s22.push(new i2.Diff(i2.DIFF_EQUAL, t3.slice(l, r3)));
    })), n3 !== e3.length && s22.push(new i2.Diff(i2.DIFF_DELETE, e3.slice(n3))), r3 !== t3.length && s22.push(new i2.Diff(i2.DIFF_INSERT, t3.slice(r3))), s22;
  };
  t2.default = s2;
}, "./node_modules/jest-diff/build/getAlignedDiffs.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var r2 = n2("./node_modules/jest-diff/build/cleanupSemantic.js");
  class o2 {
    constructor(e3, t3) {
      __publicField(this, "op");
      __publicField(this, "line");
      __publicField(this, "lines");
      __publicField(this, "changeColor");
      this.op = e3, this.line = [], this.lines = [], this.changeColor = t3;
    }
    pushSubstring(e3) {
      this.pushDiff(new r2.Diff(this.op, e3));
    }
    pushLine() {
      var e3, t3, n3;
      this.lines.push(1 !== this.line.length ? new r2.Diff(this.op, (e3 = this.op, t3 = this.line, n3 = this.changeColor, t3.reduce(((t4, o3) => t4 + (o3[0] === r2.DIFF_EQUAL ? o3[1] : o3[0] === e3 && 0 !== o3[1].length ? n3(o3[1]) : "")), ""))) : this.line[0][0] === this.op ? this.line[0] : new r2.Diff(this.op, this.line[0][1])), this.line.length = 0;
    }
    isLineEmpty() {
      return 0 === this.line.length;
    }
    pushDiff(e3) {
      this.line.push(e3);
    }
    align(e3) {
      const t3 = e3[1];
      if (t3.includes("\n")) {
        const e4 = t3.split("\n"), n3 = e4.length - 1;
        e4.forEach(((e5, t4) => {
          t4 < n3 ? (this.pushSubstring(e5), this.pushLine()) : 0 !== e5.length && this.pushSubstring(e5);
        }));
      } else this.pushDiff(e3);
    }
    moveLinesTo(e3) {
      this.isLineEmpty() || this.pushLine(), e3.push(...this.lines), this.lines.length = 0;
    }
  }
  class i2 {
    constructor(e3, t3) {
      __publicField(this, "deleteBuffer");
      __publicField(this, "insertBuffer");
      __publicField(this, "lines");
      this.deleteBuffer = e3, this.insertBuffer = t3, this.lines = [];
    }
    pushDiffCommonLine(e3) {
      this.lines.push(e3);
    }
    pushDiffChangeLines(e3) {
      const t3 = 0 === e3[1].length;
      t3 && !this.deleteBuffer.isLineEmpty() || this.deleteBuffer.pushDiff(e3), t3 && !this.insertBuffer.isLineEmpty() || this.insertBuffer.pushDiff(e3);
    }
    flushChangeLines() {
      this.deleteBuffer.moveLinesTo(this.lines), this.insertBuffer.moveLinesTo(this.lines);
    }
    align(e3) {
      const t3 = e3[0], n3 = e3[1];
      if (n3.includes("\n")) {
        const e4 = n3.split("\n"), o3 = e4.length - 1;
        e4.forEach(((e5, n4) => {
          if (0 === n4) {
            const n5 = new r2.Diff(t3, e5);
            this.deleteBuffer.isLineEmpty() && this.insertBuffer.isLineEmpty() ? (this.flushChangeLines(), this.pushDiffCommonLine(n5)) : (this.pushDiffChangeLines(n5), this.flushChangeLines());
          } else n4 < o3 ? this.pushDiffCommonLine(new r2.Diff(t3, e5)) : 0 !== e5.length && this.pushDiffChangeLines(new r2.Diff(t3, e5));
        }));
      } else this.pushDiffChangeLines(e3);
    }
    getLines() {
      return this.flushChangeLines(), this.lines;
    }
  }
  var s2 = (e3, t3) => {
    const n3 = new o2(r2.DIFF_DELETE, t3), s22 = new o2(r2.DIFF_INSERT, t3), a = new i2(n3, s22);
    return e3.forEach(((e4) => {
      switch (e4[0]) {
        case r2.DIFF_DELETE:
          n3.align(e4);
          break;
        case r2.DIFF_INSERT:
          s22.align(e4);
          break;
        default:
          a.align(e4);
      }
    })), a.getLines();
  };
  t2.default = s2;
}, "./node_modules/jest-diff/build/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "DIFF_DELETE", { enumerable: true, get: function() {
    return a.DIFF_DELETE;
  } }), Object.defineProperty(t2, "DIFF_EQUAL", { enumerable: true, get: function() {
    return a.DIFF_EQUAL;
  } }), Object.defineProperty(t2, "DIFF_INSERT", { enumerable: true, get: function() {
    return a.DIFF_INSERT;
  } }), Object.defineProperty(t2, "Diff", { enumerable: true, get: function() {
    return a.Diff;
  } }), t2.diff = function(e3, t3, n3) {
    if (Object.is(e3, t3)) return d(l.NO_DIFF_MESSAGE, n3);
    const r3 = (0, i2.getType)(e3);
    let a2 = r3, c22 = false;
    if ("object" === r3 && "function" == typeof e3.asymmetricMatch) {
      if (e3.$$typeof !== p.for("jest.asymmetricMatcher")) return null;
      if ("function" != typeof e3.getExpectedType) return null;
      a2 = e3.getExpectedType(), c22 = "string" === a2;
    }
    if (a2 !== (0, i2.getType)(t3)) return `  Comparing two different types of values. Expected ${o2.default.green(a2)} but received ${o2.default.red((0, i2.getType)(t3))}.`;
    if (c22) return null;
    switch (r3) {
      case "string":
        return (0, u.diffLinesUnified)(e3.split("\n"), t3.split("\n"), n3);
      case "boolean":
      case "number":
        return (function(e4, t4, n4) {
          const r4 = (0, s2.format)(e4, j), o3 = (0, s2.format)(t4, j);
          return r4 === o3 ? d(l.NO_DIFF_MESSAGE, n4) : (0, u.diffLinesUnified)(r4.split("\n"), o3.split("\n"), n4);
        })(e3, t3, n3);
      case "map":
        return O(w(e3), w(t3), n3);
      case "set":
        return O(x(e3), x(t3), n3);
      default:
        return O(e3, t3, n3);
    }
  }, Object.defineProperty(t2, "diffLinesRaw", { enumerable: true, get: function() {
    return u.diffLinesRaw;
  } }), Object.defineProperty(t2, "diffLinesUnified", { enumerable: true, get: function() {
    return u.diffLinesUnified;
  } }), Object.defineProperty(t2, "diffLinesUnified2", { enumerable: true, get: function() {
    return u.diffLinesUnified2;
  } }), Object.defineProperty(t2, "diffStringsRaw", { enumerable: true, get: function() {
    return f.diffStringsRaw;
  } }), Object.defineProperty(t2, "diffStringsUnified", { enumerable: true, get: function() {
    return f.diffStringsUnified;
  } });
  var r2, o2 = (r2 = n2("./node_modules/chalk/source/index.js")) && r2.__esModule ? r2 : { default: r2 }, i2 = n2("./node_modules/jest-get-type/build/index.js"), s2 = n2("./node_modules/pretty-format/build/index.js"), a = n2("./node_modules/jest-diff/build/cleanupSemantic.js"), l = n2("./node_modules/jest-diff/build/constants.js"), u = n2("./node_modules/jest-diff/build/diffLines.js"), c2 = n2("./node_modules/jest-diff/build/normalizeDiffOptions.js"), f = n2("./node_modules/jest-diff/build/printDiffs.js");
  var p = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const d = (e3, t3) => {
    const { commonColor: n3 } = (0, c2.normalizeDiffOptions)(t3);
    return n3(e3);
  }, { AsymmetricMatcher: h, DOMCollection: g, DOMElement: m2, Immutable: y, ReactElement: b, ReactTestComponent: v } = s2.plugins, E = [v, b, m2, g, y, h], j = { plugins: E }, _ = { callToJSON: false, maxDepth: 10, plugins: E };
  function w(e3) {
    return new Map(Array.from(e3.entries()).sort());
  }
  function x(e3) {
    return new Set(Array.from(e3.values()).sort());
  }
  function O(e3, t3, n3) {
    let r3, o3 = false;
    try {
      r3 = A(e3, t3, R(j, n3), n3);
    } catch {
      o3 = true;
    }
    const i22 = d(l.NO_DIFF_MESSAGE, n3);
    if (void 0 === r3 || r3 === i22) {
      r3 = A(e3, t3, R(_, n3), n3), r3 === i22 || o3 || (r3 = `${d(l.SIMILAR_MESSAGE, n3)}

${r3}`);
    }
    return r3;
  }
  function R(e3, t3) {
    const { compareKeys: n3 } = (0, c2.normalizeDiffOptions)(t3);
    return { ...e3, compareKeys: n3 };
  }
  function A(e3, t3, n3, r3) {
    const o3 = { ...n3, indent: 0 }, i22 = (0, s2.format)(e3, o3), a2 = (0, s2.format)(t3, o3);
    if (i22 === a2) return d(l.NO_DIFF_MESSAGE, r3);
    {
      const o4 = (0, s2.format)(e3, n3), l2 = (0, s2.format)(t3, n3);
      return (0, u.diffLinesUnified2)(o4.split("\n"), l2.split("\n"), i22.split("\n"), a2.split("\n"), r3);
    }
  }
}, "./node_modules/jest-diff/build/joinAlignedDiffs.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.joinAlignedDiffsNoExpand = t2.joinAlignedDiffsExpand = void 0;
  var r2 = n2("./node_modules/jest-diff/build/cleanupSemantic.js");
  const o2 = (e3, t3, n3, r3, o3, i22) => 0 !== e3.length ? n3(`${r3} ${((e4, t4) => e4.replace(/\s+$/, ((e5) => t4(e5))))(e3, o3)}`) : " " !== r3 ? n3(r3) : t3 && 0 !== i22.length ? n3(`${r3} ${i22}`) : "", i2 = (e3, t3, { aColor: n3, aIndicator: r3, changeLineTrailingSpaceColor: i22, emptyFirstOrLastLinePlaceholder: s22 }) => o2(e3, t3, n3, r3, i22, s22), s2 = (e3, t3, { bColor: n3, bIndicator: r3, changeLineTrailingSpaceColor: i22, emptyFirstOrLastLinePlaceholder: s22 }) => o2(e3, t3, n3, r3, i22, s22), a = (e3, t3, { commonColor: n3, commonIndicator: r3, commonLineTrailingSpaceColor: i22, emptyFirstOrLastLinePlaceholder: s22 }) => o2(e3, t3, n3, r3, i22, s22), l = (e3, t3, n3, r3, { patchColor: o3 }) => o3(`@@ -${e3 + 1},${t3 - e3} +${n3 + 1},${r3 - n3} @@`);
  t2.joinAlignedDiffsNoExpand = (e3, t3) => {
    const n3 = e3.length, o3 = t3.contextLines, u = o3 + o3;
    let c2 = n3, f = false, p = 0, d = 0;
    for (; d !== n3; ) {
      const t4 = d;
      for (; d !== n3 && e3[d][0] === r2.DIFF_EQUAL; ) d += 1;
      if (t4 !== d) if (0 === t4) d > o3 && (c2 -= d - o3, f = true);
      else if (d === n3) {
        const e4 = d - t4;
        e4 > o3 && (c2 -= e4 - o3, f = true);
      } else {
        const e4 = d - t4;
        e4 > u && (c2 -= e4 - u, p += 1);
      }
      for (; d !== n3 && e3[d][0] !== r2.DIFF_EQUAL; ) d += 1;
    }
    const h = 0 !== p || f;
    0 !== p ? c2 += p + 1 : f && (c2 += 1);
    const g = c2 - 1, m2 = [];
    let y = 0;
    h && m2.push("");
    let b = 0, v = 0, E = 0, j = 0;
    const _ = (e4) => {
      const n4 = m2.length;
      m2.push(a(e4, 0 === n4 || n4 === g, t3)), E += 1, j += 1;
    }, w = (e4) => {
      const n4 = m2.length;
      m2.push(i2(e4, 0 === n4 || n4 === g, t3)), E += 1;
    }, x = (e4) => {
      const n4 = m2.length;
      m2.push(s2(e4, 0 === n4 || n4 === g, t3)), j += 1;
    };
    for (d = 0; d !== n3; ) {
      let i22 = d;
      for (; d !== n3 && e3[d][0] === r2.DIFF_EQUAL; ) d += 1;
      if (i22 !== d) if (0 === i22) {
        d > o3 && (i22 = d - o3, b = i22, v = i22, E = b, j = v);
        for (let t4 = i22; t4 !== d; t4 += 1) _(e3[t4][1]);
      } else if (d === n3) {
        const t4 = d - i22 > o3 ? i22 + o3 : d;
        for (let n4 = i22; n4 !== t4; n4 += 1) _(e3[n4][1]);
      } else {
        const n4 = d - i22;
        if (n4 > u) {
          const r3 = i22 + o3;
          for (let t4 = i22; t4 !== r3; t4 += 1) _(e3[t4][1]);
          m2[y] = l(b, E, v, j, t3), y = m2.length, m2.push("");
          const s22 = n4 - u;
          b = E + s22, v = j + s22, E = b, j = v;
          for (let t4 = d - o3; t4 !== d; t4 += 1) _(e3[t4][1]);
        } else for (let t4 = i22; t4 !== d; t4 += 1) _(e3[t4][1]);
      }
      for (; d !== n3 && e3[d][0] === r2.DIFF_DELETE; ) w(e3[d][1]), d += 1;
      for (; d !== n3 && e3[d][0] === r2.DIFF_INSERT; ) x(e3[d][1]), d += 1;
    }
    return h && (m2[y] = l(b, E, v, j, t3)), m2.join("\n");
  };
  t2.joinAlignedDiffsExpand = (e3, t3) => e3.map(((e4, n3, o3) => {
    const l2 = e4[1], u = 0 === n3 || n3 === o3.length - 1;
    switch (e4[0]) {
      case r2.DIFF_DELETE:
        return i2(l2, u, t3);
      case r2.DIFF_INSERT:
        return s2(l2, u, t3);
      default:
        return a(l2, u, t3);
    }
  })).join("\n");
}, "./node_modules/jest-diff/build/normalizeDiffOptions.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.normalizeDiffOptions = t2.noColor = void 0;
  var r2, o2 = (r2 = n2("./node_modules/chalk/source/index.js")) && r2.__esModule ? r2 : { default: r2 };
  const i2 = (e3) => e3;
  t2.noColor = i2;
  const s2 = { aAnnotation: "Expected", aColor: o2.default.green, aIndicator: "-", bAnnotation: "Received", bColor: o2.default.red, bIndicator: "+", changeColor: o2.default.inverse, changeLineTrailingSpaceColor: i2, commonColor: o2.default.dim, commonIndicator: " ", commonLineTrailingSpaceColor: i2, compareKeys: void 0, contextLines: 5, emptyFirstOrLastLinePlaceholder: "", expand: true, includeChangeCounts: false, omitAnnotationLines: false, patchColor: o2.default.yellow };
  t2.normalizeDiffOptions = (e3 = {}) => {
    return { ...s2, ...e3, compareKeys: (n3 = e3.compareKeys, n3 && "function" == typeof n3 ? n3 : s2.compareKeys), contextLines: (t3 = e3.contextLines, "number" == typeof t3 && Number.isSafeInteger(t3) && t3 >= 0 ? t3 : 5) };
    var t3, n3;
  };
}, "./node_modules/jest-diff/build/printDiffs.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.diffStringsUnified = t2.diffStringsRaw = void 0;
  var r2 = n2("./node_modules/jest-diff/build/cleanupSemantic.js"), o2 = n2("./node_modules/jest-diff/build/diffLines.js"), i2 = l(n2("./node_modules/jest-diff/build/diffStrings.js")), s2 = l(n2("./node_modules/jest-diff/build/getAlignedDiffs.js")), a = n2("./node_modules/jest-diff/build/normalizeDiffOptions.js");
  function l(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  t2.diffStringsUnified = (e3, t3, n3) => {
    if (e3 !== t3 && 0 !== e3.length && 0 !== t3.length) {
      const i22 = e3.includes("\n") || t3.includes("\n"), l2 = u(i22 ? `${e3}
` : e3, i22 ? `${t3}
` : t3, true);
      if (((e4, t4) => {
        if (t4) {
          const t5 = e4.length - 1;
          return e4.some(((e5, n4) => e5[0] === r2.DIFF_EQUAL && (n4 !== t5 || "\n" !== e5[1])));
        }
        return e4.some(((e5) => e5[0] === r2.DIFF_EQUAL));
      })(l2, i22)) {
        const e4 = (0, a.normalizeDiffOptions)(n3), t4 = (0, s2.default)(l2, e4.changeColor);
        return (0, o2.printDiffLines)(t4, e4);
      }
    }
    return (0, o2.diffLinesUnified)(e3.split("\n"), t3.split("\n"), n3);
  };
  const u = (e3, t3, n3) => {
    const o3 = (0, i2.default)(e3, t3);
    return n3 && (0, r2.cleanupSemantic)(o3), o3;
  };
  t2.diffStringsRaw = u;
}, "./node_modules/jest-get-type/build/index.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.getType = function(e3) {
    if (void 0 === e3) return "undefined";
    if (null === e3) return "null";
    if (Array.isArray(e3)) return "array";
    if ("boolean" == typeof e3) return "boolean";
    if ("function" == typeof e3) return "function";
    if ("number" == typeof e3) return "number";
    if ("string" == typeof e3) return "string";
    if ("bigint" == typeof e3) return "bigint";
    if ("object" == typeof e3) {
      if (null != e3) {
        if (e3.constructor === RegExp) return "regexp";
        if (e3.constructor === Map) return "map";
        if (e3.constructor === Set) return "set";
        if (e3.constructor === Date) return "date";
      }
      return "object";
    }
    if ("symbol" == typeof e3) return "symbol";
    throw new Error(`value of unknown type: ${e3}`);
  }, t2.isPrimitive = void 0;
  t2.isPrimitive = (e3) => Object(e3) !== e3;
}, "./node_modules/jest-matcher-utils/build/Replaceable.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var r2 = n2("./node_modules/jest-get-type/build/index.js");
  const o2 = ["map", "array", "object"];
  t2.default = class {
    constructor(e3) {
      __publicField(this, "object");
      __publicField(this, "type");
      if (this.object = e3, this.type = (0, r2.getType)(e3), !o2.includes(this.type)) throw new Error(`Type ${this.type} is not support in Replaceable!`);
    }
    static isReplaceable(e3, t3) {
      const n3 = (0, r2.getType)(e3);
      return n3 === (0, r2.getType)(t3) && o2.includes(n3);
    }
    forEach(e3) {
      if ("object" === this.type) {
        const t3 = Object.getOwnPropertyDescriptors(this.object);
        [...Object.keys(t3), ...Object.getOwnPropertySymbols(t3)].filter(((e4) => t3[e4].enumerable)).forEach(((t4) => {
          e3(this.object[t4], t4, this.object);
        }));
      } else this.object.forEach(e3);
    }
    get(e3) {
      return "map" === this.type ? this.object.get(e3) : this.object[e3];
    }
    set(e3, t3) {
      "map" === this.type ? this.object.set(e3, t3) : this.object[e3] = t3;
    }
  };
}, "./node_modules/jest-matcher-utils/build/deepCyclicCopyReplaceable.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/buffer/index.js").lW;
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = l;
  var o2 = n2("./node_modules/pretty-format/build/index.js");
  const i2 = [Array, Date, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Map, Set, RegExp, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray];
  void 0 !== r2 && i2.push(r2);
  const s2 = (e3) => i2.includes(e3.constructor), a = (e3) => e3.constructor === Map;
  function l(e3, t3 = /* @__PURE__ */ new WeakMap()) {
    return "object" != typeof e3 || null === e3 ? e3 : t3.has(e3) ? t3.get(e3) : Array.isArray(e3) ? (function(e4, t4) {
      const n3 = new (Object.getPrototypeOf(e4)).constructor(e4.length), r3 = e4.length;
      t4.set(e4, n3);
      for (let o3 = 0; o3 < r3; o3++) n3[o3] = l(e4[o3], t4);
      return n3;
    })(e3, t3) : a(e3) ? (function(e4, t4) {
      const n3 = /* @__PURE__ */ new Map();
      return t4.set(e4, n3), e4.forEach(((e5, r3) => {
        n3.set(r3, l(e5, t4));
      })), n3;
    })(e3, t3) : s2(e3) ? e3 : o2.plugins.DOMElement.test(e3) ? e3.cloneNode(true) : (function(e4, t4) {
      const n3 = Object.create(Object.getPrototypeOf(e4)), r3 = Object.getOwnPropertyDescriptors(e4);
      t4.set(e4, n3);
      const o3 = [...Object.keys(r3), ...Object.getOwnPropertySymbols(r3)].reduce(((n4, o4) => {
        const i22 = r3[o4].enumerable;
        return n4[o4] = { configurable: true, enumerable: i22, value: l(e4[o4], t4), writable: true }, n4;
      }), {});
      return Object.defineProperties(n3, o3);
    })(e3, t3);
  }
}, "./node_modules/jest-matcher-utils/build/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.printReceived = t2.printExpected = t2.printDiffOrStringify = t2.pluralize = t2.matcherHint = t2.matcherErrorMessage = t2.highlightTrailingWhitespace = t2.getLabelPrinter = t2.ensureNumbers = t2.ensureNoExpected = t2.ensureExpectedIsNumber = t2.ensureExpectedIsNonNegativeInteger = t2.ensureActualIsNumber = t2.diff = t2.SUGGEST_TO_CONTAIN_EQUAL = t2.RECEIVED_COLOR = t2.INVERTED_COLOR = t2.EXPECTED_COLOR = t2.DIM_COLOR = t2.BOLD_WEIGHT = void 0, t2.printWithType = C, t2.stringify = void 0;
  var r2 = u(n2("./node_modules/chalk/source/index.js")), o2 = n2("./node_modules/jest-diff/build/index.js"), i2 = n2("./node_modules/jest-get-type/build/index.js"), s2 = n2("./node_modules/pretty-format/build/index.js"), a = u(n2("./node_modules/jest-matcher-utils/build/Replaceable.js")), l = u(n2("./node_modules/jest-matcher-utils/build/deepCyclicCopyReplaceable.js"));
  function u(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  const { AsymmetricMatcher: c2, DOMCollection: f, DOMElement: p, Immutable: d, ReactElement: h, ReactTestComponent: g } = s2.plugins, m2 = [g, h, p, f, d, c2], y = r2.default.green;
  t2.EXPECTED_COLOR = y;
  const b = r2.default.red;
  t2.RECEIVED_COLOR = b;
  const v = r2.default.inverse;
  t2.INVERTED_COLOR = v;
  const E = r2.default.bold;
  t2.BOLD_WEIGHT = E;
  const j = r2.default.dim;
  t2.DIM_COLOR = j;
  const _ = /\n/, w = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen"], x = r2.default.dim("Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.");
  t2.SUGGEST_TO_CONTAIN_EQUAL = x;
  const O = (e3, t3 = 10, n3 = 10) => {
    let r3;
    try {
      r3 = (0, s2.format)(e3, { maxDepth: t3, maxWidth: n3, min: true, plugins: m2 });
    } catch {
      r3 = (0, s2.format)(e3, { callToJSON: false, maxDepth: t3, maxWidth: n3, min: true, plugins: m2 });
    }
    return r3.length >= 1e4 && t3 > 1 ? O(e3, Math.floor(t3 / 2), n3) : r3.length >= 1e4 && n3 > 1 ? O(e3, t3, Math.floor(n3 / 2)) : r3;
  };
  t2.stringify = O;
  t2.highlightTrailingWhitespace = (e3) => e3.replace(/\s+$/gm, r2.default.inverse("$&"));
  const R = (e3) => e3.replace(/\s+$/gm, ((e4) => "·".repeat(e4.length))), A = (e3) => b(R(O(e3)));
  t2.printReceived = A;
  const S = (e3) => y(R(O(e3)));
  function C(e3, t3, n3) {
    const r3 = (0, i2.getType)(t3);
    return ("null" !== r3 && "undefined" !== r3 ? `${e3} has type:  ${r3}
` : "") + `${e3} has value: ${n3(t3)}`;
  }
  t2.printExpected = S;
  t2.ensureNoExpected = (e3, t3, n3) => {
    if (void 0 !== e3) {
      throw new Error(N(L((n3 ? "" : "[.not]") + t3, void 0, "", n3), "this matcher must not have an expected argument", C("Expected", e3, S)));
    }
  };
  const $ = (e3, t3, n3) => {
    if ("number" != typeof e3 && "bigint" != typeof e3) {
      throw new Error(N(L((n3 ? "" : "[.not]") + t3, void 0, void 0, n3), `${b("received")} value must be a number or bigint`, C("Received", e3, A)));
    }
  };
  t2.ensureActualIsNumber = $;
  const T = (e3, t3, n3) => {
    if ("number" != typeof e3 && "bigint" != typeof e3) {
      throw new Error(N(L((n3 ? "" : "[.not]") + t3, void 0, void 0, n3), `${y("expected")} value must be a number or bigint`, C("Expected", e3, S)));
    }
  };
  t2.ensureExpectedIsNumber = T;
  t2.ensureNumbers = (e3, t3, n3, r3) => {
    $(e3, n3, r3), T(t3, n3, r3);
  };
  t2.ensureExpectedIsNonNegativeInteger = (e3, t3, n3) => {
    if ("number" != typeof e3 || !Number.isSafeInteger(e3) || e3 < 0) {
      throw new Error(N(L((n3 ? "" : "[.not]") + t3, void 0, void 0, n3), `${y("expected")} value must be a non-negative integer`, C("Expected", e3, S)));
    }
  };
  const M = (e3, t3, n3) => e3.reduce(((e4, r3) => e4 + (r3[0] === o2.DIFF_EQUAL ? r3[1] : r3[0] !== t3 ? "" : n3 ? v(r3[1]) : r3[1])), "");
  t2.printDiffOrStringify = (e3, t3, n3, s22, a2) => {
    if ("string" == typeof e3 && "string" == typeof t3 && 0 !== e3.length && 0 !== t3.length && e3.length <= 2e4 && t3.length <= 2e4 && e3 !== t3) {
      if (e3.includes("\n") || t3.includes("\n")) return (0, o2.diffStringsUnified)(e3, t3, { aAnnotation: n3, bAnnotation: s22, changeLineTrailingSpaceColor: r2.default.bgYellow, commonLineTrailingSpaceColor: r2.default.bgYellow, emptyFirstOrLastLinePlaceholder: "↵", expand: a2, includeChangeCounts: true });
      const i22 = (0, o2.diffStringsRaw)(e3, t3, true), l2 = i22.some(((e4) => e4[0] === o2.DIFF_EQUAL)), u3 = k(n3, s22);
      return `${u3(n3) + S(M(i22, o2.DIFF_DELETE, l2))}
${u3(s22) + A(M(i22, o2.DIFF_INSERT, l2))}`;
    }
    if (((e4, t4) => {
      const n4 = (0, i2.getType)(e4), r3 = (0, i2.getType)(t4);
      return n4 === r3 && ((0, i2.isPrimitive)(e4) ? "string" == typeof e4 && "string" == typeof t4 && 0 !== e4.length && 0 !== t4.length && (_.test(e4) || _.test(t4)) : !("date" === n4 || "function" === n4 || "regexp" === n4 || e4 instanceof Error && t4 instanceof Error || "object" === r3 && "function" == typeof t4.asymmetricMatch));
    })(e3, t3)) {
      const { replacedExpected: r3, replacedReceived: i22 } = I((0, l.default)(e3), (0, l.default)(t3), [], []), u3 = (0, o2.diff)(r3, i22, { aAnnotation: n3, bAnnotation: s22, expand: a2, includeChangeCounts: true });
      if ("string" == typeof u3 && u3.includes(`- ${n3}`) && u3.includes(`+ ${s22}`)) return u3;
    }
    const u2 = k(n3, s22);
    return `${u2(n3) + S(e3)}
${u2(s22) + (O(e3) === O(t3) ? "serializes to the same string" : A(t3))}`;
  };
  function I(e3, t3, n3, r3) {
    if (!a.default.isReplaceable(e3, t3)) return { replacedExpected: e3, replacedReceived: t3 };
    if (n3.includes(e3) || r3.includes(t3)) return { replacedExpected: e3, replacedReceived: t3 };
    n3.push(e3), r3.push(t3);
    const o3 = new a.default(e3), i22 = new a.default(t3);
    return o3.forEach(((e4, t4) => {
      const s22 = i22.get(t4);
      if (P(e4)) e4.asymmetricMatch(s22) && i22.set(t4, e4);
      else if (P(s22)) s22.asymmetricMatch(e4) && o3.set(t4, s22);
      else if (a.default.isReplaceable(e4, s22)) {
        const a2 = I(e4, s22, n3, r3);
        o3.set(t4, a2.replacedExpected), i22.set(t4, a2.replacedReceived);
      }
    })), { replacedExpected: o3.object, replacedReceived: i22.object };
  }
  function P(e3) {
    return "object" === (0, i2.getType)(e3) && "function" == typeof e3.asymmetricMatch;
  }
  t2.diff = (e3, t3, n3) => {
    return i22 = t3, "number" == typeof (r3 = e3) && "number" == typeof i22 || "bigint" == typeof r3 && "bigint" == typeof i22 || "boolean" == typeof r3 && "boolean" == typeof i22 ? null : (0, o2.diff)(e3, t3, n3);
    var r3, i22;
  };
  t2.pluralize = (e3, t3) => `${w[t3] || t3} ${e3}${1 === t3 ? "" : "s"}`;
  const k = (...e3) => {
    const t3 = e3.reduce(((e4, t4) => t4.length > e4 ? t4.length : e4), 0);
    return (e4) => `${e4}: ${" ".repeat(t3 - e4.length)}`;
  };
  t2.getLabelPrinter = k;
  const N = (e3, t3, n3) => `${e3}

${r2.default.bold("Matcher error")}: ${t3}${"string" == typeof n3 ? `

${n3}` : ""}`;
  t2.matcherErrorMessage = N;
  const L = (e3, t3 = "received", n3 = "expected", r3 = {}) => {
    const { comment: o3 = "", expectedColor: i22 = y, isDirectExpectCall: s22 = false, isNot: a2 = false, promise: l2 = "", receivedColor: u2 = b, secondArgument: c22 = "", secondArgumentColor: f2 = y } = r3;
    let p2 = "", d2 = "expect";
    return s22 || "" === t3 || (p2 += j(`${d2}(`) + u2(t3), d2 = ")"), "" !== l2 && (p2 += j(`${d2}.`) + l2, d2 = ""), a2 && (p2 += `${j(`${d2}.`)}not`, d2 = ""), e3.includes(".") ? d2 += e3 : (p2 += j(`${d2}.`) + e3, d2 = ""), "" === n3 ? d2 += "()" : (p2 += j(`${d2}(`) + i22(n3), c22 && (p2 += j(", ") + f2(c22)), d2 = ")"), "" !== o3 && (d2 += ` // ${o3}`), "" !== d2 && (p2 += j(d2)), p2;
  };
  t2.matcherHint = L;
}, "./node_modules/jest-message-util/build/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.separateMessageFromStack = t2.indentAllLines = t2.getTopFrame = t2.getStackTraceLines = t2.formatStackTrace = t2.formatResultsErrors = t2.formatPath = t2.formatExecError = void 0;
  var r2 = h(n2("./node_modules/path-browserify/index.js")), o2 = n2("./node_modules/url/url.js"), i2 = n2("./node_modules/@babel/code-frame/lib/index.js"), s2 = p(n2("./node_modules/chalk/source/index.js")), a = h(n2("?4d29")), l = p(n2("./node_modules/micromatch/index.js")), u = p(n2("./node_modules/slash/index.js")), c2 = p(n2("./node_modules/stack-utils/index.js")), f = n2("./node_modules/pretty-format/build/index.js");
  function p(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  function d(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (d = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  function h(e3, t3) {
    if (e3 && e3.__esModule) return e3;
    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return { default: e3 };
    var n3 = d(t3);
    if (n3 && n3.has(e3)) return n3.get(e3);
    var r3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var i22 in e3) if ("default" !== i22 && Object.prototype.hasOwnProperty.call(e3, i22)) {
      var s22 = o3 ? Object.getOwnPropertyDescriptor(e3, i22) : null;
      s22 && (s22.get || s22.set) ? Object.defineProperty(r3, i22, s22) : r3[i22] = e3[i22];
    }
    return r3.default = e3, n3 && n3.set(e3, r3), r3;
  }
  var g = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, m2 = (g = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, globalThis[g.for("jest-native-read-file")] || a.readFileSync);
  const y = new c2.default({ cwd: "something which does not exist" });
  let b = [];
  try {
    b = c2.default.nodeInternals();
  } catch {
  }
  const v = `${r2.sep}node_modules${r2.sep}`, E = `${r2.sep}jest${r2.sep}packages${r2.sep}`, j = /^\s+at(?:(?:.jasmine-)|\s+jasmine\.buildExpectationResult)/, _ = /^\s+at.*?jest(-.*?)?(\/|\\)(build|node_modules|packages)(\/|\\)/, w = /^\s+at <anonymous>.*$/, x = /^\s+at (new )?Promise \(<anonymous>\).*$/, O = /^\s+at Generator.next \(<anonymous>\).*$/, R = /^\s+at next \(native\).*$/, A = s2.default.bold("● "), S = s2.default.dim, C = /\s*at.*\(?(:\d*:\d*|native)\)?/, $ = /^(?!$)/gm, T = (e3) => e3.replace($, "    ");
  t2.indentAllLines = T;
  const M = (e3) => (e3 || "").trim(), I = /^\s*$/;
  function P(e3) {
    return e3.includes("ReferenceError: document is not defined") || e3.includes("ReferenceError: window is not defined") || e3.includes("ReferenceError: navigator is not defined") ? k(e3, "jsdom") : e3.includes(".unref is not a function") ? k(e3, "node") : e3;
  }
  function k(e3, t3) {
    return s2.default.bold.red(`The error below may be caused by using the wrong test environment, see ${s2.default.dim.underline("https://jestjs.io/docs/configuration#testenvironment-string")}.
Consider using the "${t3}" test environment.

`) + e3;
  }
  t2.formatExecError = (e3, t3, n3, r3, o3) => {
    let i22, s22;
    e3 && "number" != typeof e3 || ((e3 = new Error(`Expected an Error, but "${String(e3)}" was thrown`)).stack = ""), "string" != typeof e3 && e3 ? (i22 = e3.message, s22 = "string" == typeof e3.stack ? e3.stack : `thrown: ${(0, f.format)(e3, { maxDepth: 3 })}`) : (e3 || (e3 = "EMPTY ERROR"), i22 = "", s22 = e3);
    const a2 = H(s22 || "");
    let l2;
    return s22 = a2.stack, a2.message.includes(M(i22)) && (i22 = a2.message), i22 = P(i22), i22 = T(i22), s22 = s22 && !n3.noStackTrace ? `
${B(s22, t3, n3, r3)}` : "", ("string" != typeof s22 || I.test(i22) && I.test(s22)) && (i22 = `thrown: ${(0, f.format)(e3, { maxDepth: 3 })}`), l2 = o3 ? ` ${i22.trim()}` : `Test suite failed to run

${i22}`, "  " + A + l2 + s22 + "\n";
  };
  const N = (e3, t3, n3 = null) => {
    const o3 = e3.match(/(^\s*at .*?\(?)([^()]+)(:[0-9]+:[0-9]+\)?.*$)/);
    if (!o3) return e3;
    let i22 = (0, u.default)(r2.relative(t3.rootDir, o3[2]));
    return (t3.testMatch && t3.testMatch.length && (0, l.default)([i22], t3.testMatch).length > 0 || i22 === n3) && (i22 = s2.default.reset.cyan(i22)), S(o3[1]) + i22 + S(o3[3]);
  };
  t2.formatPath = N;
  const L = (e3, t3 = { noCodeFrame: false, noStackTrace: false }) => ((e4, t4) => {
    let n3 = 0;
    return e4.filter(((e5) => !(w.test(e5) || x.test(e5) || O.test(e5) || R.test(e5) || b.some(((t5) => t5.test(e5))) || C.test(e5) && (j.test(e5) || 1 != ++n3 && (t4.noStackTrace || _.test(e5))))));
  })(e3.split(/\n/), t3);
  t2.getStackTraceLines = L;
  const D = (e3) => {
    for (const t3 of e3) {
      if (t3.includes(v) || t3.includes(E)) continue;
      const e4 = y.parseLine(t3.trim());
      if (e4 && e4.file) return e4.file.startsWith("file://") && (e4.file = (0, u.default)((0, o2.fileURLToPath)(e4.file))), e4;
    }
    return null;
  };
  t2.getTopFrame = D;
  const B = (e3, t3, n3, o3) => {
    const s22 = L(e3, n3);
    let a2 = "";
    const l2 = o3 ? (0, u.default)(r2.relative(t3.rootDir, o3)) : null;
    if (!n3.noStackTrace && !n3.noCodeFrame) {
      const e4 = D(s22);
      if (e4) {
        const { column: t4, file: n4, line: o4 } = e4;
        if (o4 && n4 && r2.isAbsolute(n4)) {
          let e5;
          try {
            e5 = m2(n4, "utf8"), a2 = ((e6, t5, n5) => {
              let r3 = (0, i2.codeFrameColumns)(e6, { start: { column: n5, line: t5 } }, { highlightCode: true });
              return r3 = T(r3), r3 = `
${r3}
`, r3;
            })(e5, o4, t4);
          } catch {
          }
        }
      }
    }
    const c22 = s22.filter(Boolean).map(((e4) => {
      return "      " + N((n4 = e4).match(C) ? M(n4) : n4, t3, l2);
      var n4;
    })).join("\n");
    return a2 ? `${a2}
${c22}` : `
${c22}`;
  };
  t2.formatStackTrace = B;
  t2.formatResultsErrors = (e3, t3, n3, r3) => {
    const o3 = e3.reduce(((e4, t4) => (t4.failureMessages.forEach(((n4) => {
      e4.push({ content: P(n4), result: t4 });
    })), e4)), []);
    return o3.length ? o3.map((({ result: e4, content: o4 }) => {
      let { message: i22, stack: a2 } = H(o4);
      a2 = n3.noStackTrace ? "" : `${S(B(a2, t3, n3, r3))}
`, i22 = T(i22);
      return `${`${s2.default.bold.red("  " + A + e4.ancestorTitles.join(" › ") + (e4.ancestorTitles.length ? " › " : "") + e4.title)}
`}
${i22}
${a2}`;
    })).join("\n") : null;
  };
  const U = /^Error:?\s*$/, F = (e3) => e3.split("\n").filter(((e4) => !U.test(e4))).join("\n").trimRight(), H = (e3) => {
    if (!e3) return { message: "", stack: "" };
    const t3 = e3.match(/^(?:Error: )?([\s\S]*?(?=\n\s*at\s.*:\d*:\d*)|\s*.*)([\s\S]*)$/);
    if (!t3) throw new Error("If you hit this error, the regex above is buggy.");
    return { message: F(t3[1]), stack: F(t3[2]) };
  };
  t2.separateMessageFromStack = H;
}, "./node_modules/jest-util/build/ErrorWithStack.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  class n2 extends Error {
    constructor(e3, t3, n3) {
      const r2 = Error.stackTraceLimit;
      n3 && (Error.stackTraceLimit = Math.max(n3, r2 || 10)), super(e3), Error.captureStackTrace && Error.captureStackTrace(this, t3), Error.stackTraceLimit = r2;
    }
  }
  t2.default = n2;
}, "./node_modules/jest-util/build/clearLine.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    e3.isTTY && e3.write("\x1B[999D\x1B[K");
  };
}, "./node_modules/jest-util/build/convertDescriptorToString.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    switch (typeof e3) {
      case "function":
        if (e3.name) return e3.name;
        break;
      case "number":
      case "undefined":
        return `${e3}`;
      case "string":
        return e3;
    }
    throw new Error(`Invalid first argument, ${e3}. It must be a named class, named function, number, or string.`);
  };
}, "./node_modules/jest-util/build/createDirectory.js": (e2, t2, n2) => {
  function r2() {
    const e3 = (function(e4, t3) {
      if (e4 && e4.__esModule) return e4;
      if (null === e4 || "object" != typeof e4 && "function" != typeof e4) return { default: e4 };
      var n3 = o2(t3);
      if (n3 && n3.has(e4)) return n3.get(e4);
      var r3 = {}, i2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var s2 in e4) if ("default" !== s2 && Object.prototype.hasOwnProperty.call(e4, s2)) {
        var a = i2 ? Object.getOwnPropertyDescriptor(e4, s2) : null;
        a && (a.get || a.set) ? Object.defineProperty(r3, s2, a) : r3[s2] = e4[s2];
      }
      r3.default = e4, n3 && n3.set(e4, r3);
      return r3;
    })(n2("?023e"));
    return r2 = function() {
      return e3;
    }, e3;
  }
  function o2(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (o2 = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    try {
      r2().mkdirSync(e3, { recursive: true });
    } catch (e4) {
      if ("EEXIST" !== e4.code) throw e4;
    }
  };
}, "./node_modules/jest-util/build/createProcessObject.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function() {
    const e3 = n2("./node_modules/process/browser.js"), t3 = (0, i2.default)(e3, { blacklist: s2, keepPrototype: true });
    try {
      t3[Symbol.toStringTag] = "process";
    } catch (e4) {
      if ("process" !== t3[Symbol.toStringTag]) throw e4.message = `Unable to set toStringTag on process. Please open up an issue at https://github.com/facebook/jest

${e4.message}`, e4;
    }
    let r3 = e3;
    for (; r3 = Object.getPrototypeOf(r3); ) "function" == typeof r3.constructor && r3.constructor.call(t3);
    return t3.env = u(), t3.send = () => true, Object.defineProperty(t3, "domain", { get: () => e3.domain }), t3;
  };
  var o2, i2 = (o2 = n2("./node_modules/jest-util/build/deepCyclicCopy.js")) && o2.__esModule ? o2 : { default: o2 };
  const s2 = /* @__PURE__ */ new Set(["env", "mainModule", "_events"]), a = "win32" === r2.platform, l = Object.getPrototypeOf(r2.env);
  function u() {
    const e3 = Object.create(l), t3 = {};
    const n3 = new Proxy(e3, { deleteProperty: a ? function(n4, r3) {
      for (const n5 in e3) Object.prototype.hasOwnProperty.call(e3, n5) && ("string" == typeof r3 ? n5.toLowerCase() === r3.toLowerCase() && (delete e3[n5], delete t3[n5.toLowerCase()]) : r3 === n5 && (delete e3[n5], delete t3[n5]));
      return true;
    } : function(n4, r3) {
      return delete e3[r3], delete t3[r3], true;
    }, get: a ? function(n4, r3) {
      return "string" == typeof r3 ? t3[r3 in l ? r3 : r3.toLowerCase()] : e3[r3];
    } : function(t4, n4) {
      return e3[n4];
    }, set(n4, r3, o3) {
      const i22 = `${o3}`;
      return "string" == typeof r3 && (t3[r3.toLowerCase()] = i22), e3[r3] = i22, true;
    } });
    return Object.assign(n3, r2.env);
  }
}, "./node_modules/jest-util/build/deepCyclicCopy.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/buffer/index.js").lW;
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = i2;
  const o2 = /* @__PURE__ */ new Set();
  function i2(e3, t3 = { blacklist: o2, keepPrototype: false }, n3 = /* @__PURE__ */ new WeakMap()) {
    return "object" != typeof e3 || null === e3 || r2.isBuffer(e3) ? e3 : n3.has(e3) ? n3.get(e3) : Array.isArray(e3) ? (function(e4, t4, n4) {
      const r3 = t4.keepPrototype ? new (Object.getPrototypeOf(e4)).constructor(e4.length) : [], s2 = e4.length;
      n4.set(e4, r3);
      for (let a = 0; a < s2; a++) r3[a] = i2(e4[a], { blacklist: o2, keepPrototype: t4.keepPrototype }, n4);
      return r3;
    })(e3, t3, n3) : (function(e4, t4, n4) {
      const r3 = t4.keepPrototype ? Object.create(Object.getPrototypeOf(e4)) : {}, s2 = Object.getOwnPropertyDescriptors(e4);
      return n4.set(e4, r3), Object.keys(s2).forEach(((e5) => {
        if (t4.blacklist && t4.blacklist.has(e5)) return void delete s2[e5];
        const r4 = s2[e5];
        void 0 !== r4.value && (r4.value = i2(r4.value, { blacklist: o2, keepPrototype: t4.keepPrototype }, n4)), r4.configurable = true;
      })), Object.defineProperties(r3, s2);
    })(e3, t3, n3);
  }
}, "./node_modules/jest-util/build/formatTime.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3, t3 = -3, n2 = 0) {
    const r2 = ["n", "μ", "m", ""], o2 = Math.max(0, Math.min(Math.trunc(t3 / 3) + r2.length - 1, r2.length - 1));
    return `${String(e3).padStart(n2)} ${r2[o2]}s`;
  };
}, "./node_modules/jest-util/build/globsToMatcher.js": (e2, t2, n2) => {
  function r2() {
    const e3 = i2(n2("./node_modules/picomatch/index.js"));
    return r2 = function() {
      return e3;
    }, e3;
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    if (0 === e3.length) return () => false;
    const t3 = e3.map(((e4) => {
      if (!s2.has(e4)) {
        const t4 = (0, r2().default)(e4, a, true), n3 = { isMatch: t4, negated: t4.state.negated || !!t4.state.negatedExtglob };
        s2.set(e4, n3);
      }
      return s2.get(e4);
    }));
    return (e4) => {
      const n3 = (0, o2.default)(e4);
      let r3, i22 = 0;
      for (let e5 = 0; e5 < t3.length; e5++) {
        const { isMatch: o3, negated: s22 } = t3[e5];
        s22 && i22++;
        const a2 = o3(n3);
        !a2 && s22 ? r3 = false : a2 && !s22 && (r3 = true);
      }
      return i22 === t3.length ? false !== r3 : !!r3;
    };
  };
  var o2 = i2(n2("./node_modules/jest-util/build/replacePathSepForGlob.js"));
  function i2(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  const s2 = /* @__PURE__ */ new Map(), a = { dot: true };
}, "./node_modules/jest-util/build/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "ErrorWithStack", { enumerable: true, get: function() {
    return a.default;
  } }), Object.defineProperty(t2, "clearLine", { enumerable: true, get: function() {
    return i2.default;
  } }), Object.defineProperty(t2, "convertDescriptorToString", { enumerable: true, get: function() {
    return h.default;
  } }), Object.defineProperty(t2, "createDirectory", { enumerable: true, get: function() {
    return s2.default;
  } }), Object.defineProperty(t2, "deepCyclicCopy", { enumerable: true, get: function() {
    return d.default;
  } }), Object.defineProperty(t2, "formatTime", { enumerable: true, get: function() {
    return v.default;
  } }), Object.defineProperty(t2, "globsToMatcher", { enumerable: true, get: function() {
    return y.default;
  } }), Object.defineProperty(t2, "installCommonGlobals", { enumerable: true, get: function() {
    return l.default;
  } }), Object.defineProperty(t2, "interopRequireDefault", { enumerable: true, get: function() {
    return u.default;
  } }), Object.defineProperty(t2, "isInteractive", { enumerable: true, get: function() {
    return c2.default;
  } }), Object.defineProperty(t2, "isPromise", { enumerable: true, get: function() {
    return f.default;
  } }), Object.defineProperty(t2, "pluralize", { enumerable: true, get: function() {
    return b.default;
  } }), t2.preRunMessage = void 0, Object.defineProperty(t2, "replacePathSepForGlob", { enumerable: true, get: function() {
    return g.default;
  } }), Object.defineProperty(t2, "requireOrImportModule", { enumerable: true, get: function() {
    return j.default;
  } }), Object.defineProperty(t2, "setGlobal", { enumerable: true, get: function() {
    return p.default;
  } }), t2.specialChars = void 0, Object.defineProperty(t2, "testPathPatternToRegExp", { enumerable: true, get: function() {
    return m2.default;
  } }), Object.defineProperty(t2, "tryRealpath", { enumerable: true, get: function() {
    return E.default;
  } });
  var r2 = x(n2("./node_modules/jest-util/build/preRunMessage.js"));
  t2.preRunMessage = r2;
  var o2 = x(n2("./node_modules/jest-util/build/specialChars.js"));
  t2.specialChars = o2;
  var i2 = _(n2("./node_modules/jest-util/build/clearLine.js")), s2 = _(n2("./node_modules/jest-util/build/createDirectory.js")), a = _(n2("./node_modules/jest-util/build/ErrorWithStack.js")), l = _(n2("./node_modules/jest-util/build/installCommonGlobals.js")), u = _(n2("./node_modules/jest-util/build/interopRequireDefault.js")), c2 = _(n2("./node_modules/jest-util/build/isInteractive.js")), f = _(n2("./node_modules/jest-util/build/isPromise.js")), p = _(n2("./node_modules/jest-util/build/setGlobal.js")), d = _(n2("./node_modules/jest-util/build/deepCyclicCopy.js")), h = _(n2("./node_modules/jest-util/build/convertDescriptorToString.js")), g = _(n2("./node_modules/jest-util/build/replacePathSepForGlob.js")), m2 = _(n2("./node_modules/jest-util/build/testPathPatternToRegExp.js")), y = _(n2("./node_modules/jest-util/build/globsToMatcher.js")), b = _(n2("./node_modules/jest-util/build/pluralize.js")), v = _(n2("./node_modules/jest-util/build/formatTime.js")), E = _(n2("./node_modules/jest-util/build/tryRealpath.js")), j = _(n2("./node_modules/jest-util/build/requireOrImportModule.js"));
  function _(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  function w(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (w = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  function x(e3, t3) {
    if (e3 && e3.__esModule) return e3;
    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return { default: e3 };
    var n3 = w(t3);
    if (n3 && n3.has(e3)) return n3.get(e3);
    var r3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var i22 in e3) if ("default" !== i22 && Object.prototype.hasOwnProperty.call(e3, i22)) {
      var s22 = o3 ? Object.getOwnPropertyDescriptor(e3, i22) : null;
      s22 && (s22.get || s22.set) ? Object.defineProperty(r3, i22, s22) : r3[i22] = e3[i22];
    }
    return r3.default = e3, n3 && n3.set(e3, r3), r3;
  }
}, "./node_modules/jest-util/build/installCommonGlobals.js": (e2, t2, n2) => {
  function r2() {
    const e3 = (function(e4, t3) {
      if (e4 && e4.__esModule) return e4;
      if (null === e4 || "object" != typeof e4 && "function" != typeof e4) return { default: e4 };
      var n3 = a(t3);
      if (n3 && n3.has(e4)) return n3.get(e4);
      var r3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var i22 in e4) if ("default" !== i22 && Object.prototype.hasOwnProperty.call(e4, i22)) {
        var s22 = o3 ? Object.getOwnPropertyDescriptor(e4, i22) : null;
        s22 && (s22.get || s22.set) ? Object.defineProperty(r3, i22, s22) : r3[i22] = e4[i22];
      }
      r3.default = e4, n3 && n3.set(e4, r3);
      return r3;
    })(n2("?023e"));
    return r2 = function() {
      return e3;
    }, e3;
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3, t3) {
    e3.process = (0, o2.default)();
    const n3 = e3.Symbol;
    return Object.defineProperties(e3, { [n3.for("jest-native-promise")]: { enumerable: false, value: Promise, writable: false }, [n3.for("jest-native-now")]: { enumerable: false, value: e3.Date.now.bind(e3.Date), writable: false }, [n3.for("jest-native-read-file")]: { enumerable: false, value: r2().readFileSync.bind(r2()), writable: false }, [n3.for("jest-native-write-file")]: { enumerable: false, value: r2().writeFileSync.bind(r2()), writable: false }, [n3.for("jest-native-exists-file")]: { enumerable: false, value: r2().existsSync.bind(r2()), writable: false }, "jest-symbol-do-not-touch": { enumerable: false, value: n3, writable: false } }), l.forEach(((t4) => {
      e3[t4] = function(...e4) {
        return globalThis[t4].apply(this, e4);
      };
    })), Object.assign(e3, (0, i2.default)(t3));
  };
  var o2 = s2(n2("./node_modules/jest-util/build/createProcessObject.js")), i2 = s2(n2("./node_modules/jest-util/build/deepCyclicCopy.js"));
  function s2(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  function a(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (a = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  const l = Object.keys(globalThis).filter(((e3) => e3.startsWith("DTRACE")));
}, "./node_modules/jest-util/build/interopRequireDefault.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  };
}, "./node_modules/jest-util/build/isInteractive.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  function o2() {
    const e3 = n2("./node_modules/ci-info/index.js");
    return o2 = function() {
      return e3;
    }, e3;
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  var i2 = !!r2.stdout && !!r2.stdout.isTTY && "dumb" !== r2.env.TERM && !o2().isCI;
  t2.default = i2;
}, "./node_modules/jest-util/build/isPromise.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
  const n2 = globalThis.Promise;
  var r2 = (e3) => n2.resolve(e3) === e3;
  t2.default = r2;
}, "./node_modules/jest-util/build/pluralize.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3, t3) {
    return `${t3} ${e3}${1 === t3 ? "" : "s"}`;
  };
}, "./node_modules/jest-util/build/preRunMessage.js": (e2, t2, n2) => {
  function r2() {
    const e3 = s2(n2("./node_modules/chalk/source/index.js"));
    return r2 = function() {
      return e3;
    }, e3;
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.print = function(e3) {
    i2.default && e3.write(r2().default.bold.dim("Determining test suites to run..."));
  }, t2.remove = function(e3) {
    i2.default && (0, o2.default)(e3);
  };
  var o2 = s2(n2("./node_modules/jest-util/build/clearLine.js")), i2 = s2(n2("./node_modules/jest-util/build/isInteractive.js"));
  function s2(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
}, "./node_modules/jest-util/build/replacePathSepForGlob.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    return e3.replace(/\\(?![{}()+?.^$])/g, "/");
  };
}, "./node_modules/jest-util/build/requireOrImportModule.js": (e2, t2, n2) => {
  function r2() {
    const e3 = n2("./node_modules/path-browserify/index.js");
    return r2 = function() {
      return e3;
    }, e3;
  }
  function o2() {
    const e3 = n2("./node_modules/url/url.js");
    return o2 = function() {
      return e3;
    }, e3;
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = async function(e3, t3 = true) {
    if (!(0, r2().isAbsolute)(e3) && "." === e3[0]) throw new Error(`Jest: requireOrImportModule path must be absolute, was "${e3}"`);
    try {
      const r3 = n2("./node_modules/jest-util/build sync recursive")(e3);
      return t3 ? (0, s2.default)(r3).default : r3;
    } catch (r3) {
      if ("ERR_REQUIRE_ESM" !== r3.code) throw r3;
      try {
        const r4 = (0, o2().pathToFileURL)(e3), i22 = await n2("./node_modules/jest-util/build lazy recursive")(r4.href);
        if (!t3) return i22;
        if (!i22.default) throw new Error(`Jest: Failed to load ESM at ${e3} - did you use a default export?`);
        return i22.default;
      } catch (t4) {
        if ("Not supported" === t4.message) throw new Error(`Jest: Your version of Node does not support dynamic import - please enable it or use a .cjs file extension for file ${e3}`);
        throw t4;
      }
    }
  };
  var i2, s2 = (i2 = n2("./node_modules/jest-util/build/interopRequireDefault.js")) && i2.__esModule ? i2 : { default: i2 };
}, "./node_modules/jest-util/build/setGlobal.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3, t3, n2) {
    e3[t3] = n2;
  };
}, "./node_modules/jest-util/build/specialChars.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  Object.defineProperty(t2, "__esModule", { value: true }), t2.ICONS = t2.CLEAR = t2.ARROW = void 0;
  const o2 = "win32" === r2.platform;
  t2.ARROW = " › ";
  const i2 = { failed: o2 ? "×" : "✕", pending: "○", success: o2 ? "√" : "✓", todo: "✎" };
  t2.ICONS = i2;
  const s2 = o2 ? "\x1B[2J\x1B[0f" : "\x1B[2J\x1B[3J\x1B[H";
  t2.CLEAR = s2;
}, "./node_modules/jest-util/build/testPathPatternToRegExp.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    return new RegExp(e3, "i");
  };
}, "./node_modules/jest-util/build/tryRealpath.js": (e2, t2, n2) => {
  function r2() {
    const e3 = n2("?023e");
    return r2 = function() {
      return e3;
    }, e3;
  }
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    try {
      e3 = r2().realpathSync.native(e3);
    } catch (e4) {
      if ("ENOENT" !== e4.code) throw e4;
    }
    return e3;
  };
}, "./node_modules/jest-util/build lazy recursive": (e2) => {
  function t2(e3) {
    return Promise.resolve().then((() => {
      var t3 = new Error("Cannot find module '" + e3 + "'");
      throw t3.code = "MODULE_NOT_FOUND", t3;
    }));
  }
  t2.keys = () => [], t2.resolve = t2, t2.id = "./node_modules/jest-util/build lazy recursive", e2.exports = t2;
}, "./node_modules/jest-util/build sync recursive": (e2) => {
  function t2(e3) {
    var t3 = new Error("Cannot find module '" + e3 + "'");
    throw t3.code = "MODULE_NOT_FOUND", t3;
  }
  t2.keys = () => [], t2.resolve = t2, t2.id = "./node_modules/jest-util/build sync recursive", e2.exports = t2;
}, "./node_modules/js-tokens/index.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g, t2.matchToToken = function(e3) {
    var t3 = { type: "invalid", value: e3[0], closed: void 0 };
    return e3[1] ? (t3.type = "string", t3.closed = !(!e3[3] && !e3[4])) : e3[5] ? t3.type = "comment" : e3[6] ? (t3.type = "comment", t3.closed = !!e3[7]) : e3[8] ? t3.type = "regex" : e3[9] ? t3.type = "number" : e3[10] ? t3.type = "name" : e3[11] ? t3.type = "punctuator" : e3[12] && (t3.type = "whitespace"), t3;
  };
}, "./node_modules/micromatch/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/util/util.js"), o2 = n2("./node_modules/braces/index.js"), i2 = n2("./node_modules/picomatch/index.js"), s2 = n2("./node_modules/picomatch/lib/utils.js"), a = (e3) => "" === e3 || "./" === e3, l = (e3, t3, n3) => {
    t3 = [].concat(t3), e3 = [].concat(e3);
    let r3 = /* @__PURE__ */ new Set(), o3 = /* @__PURE__ */ new Set(), s22 = /* @__PURE__ */ new Set(), a2 = 0, l2 = (e4) => {
      s22.add(e4.output), n3 && n3.onResult && n3.onResult(e4);
    };
    for (let s3 = 0; s3 < t3.length; s3++) {
      let u2 = i2(String(t3[s3]), { ...n3, onResult: l2 }, true), c2 = u2.state.negated || u2.state.negatedExtglob;
      c2 && a2++;
      for (let t4 of e3) {
        let e4 = u2(t4, true);
        (c2 ? !e4.isMatch : e4.isMatch) && (c2 ? r3.add(e4.output) : (r3.delete(e4.output), o3.add(e4.output)));
      }
    }
    let u = (a2 === t3.length ? [...s22] : [...o3]).filter(((e4) => !r3.has(e4)));
    if (n3 && 0 === u.length) {
      if (true === n3.failglob) throw new Error(`No matches found for "${t3.join(", ")}"`);
      if (true === n3.nonull || true === n3.nullglob) return n3.unescape ? t3.map(((e4) => e4.replace(/\\/g, ""))) : t3;
    }
    return u;
  };
  l.match = l, l.matcher = (e3, t3) => i2(e3, t3), l.any = l.isMatch = (e3, t3, n3) => i2(t3, n3)(e3), l.not = (e3, t3, n3 = {}) => {
    t3 = [].concat(t3).map(String);
    let r3 = /* @__PURE__ */ new Set(), o3 = [], i22 = new Set(l(e3, t3, { ...n3, onResult: (e4) => {
      n3.onResult && n3.onResult(e4), o3.push(e4.output);
    } }));
    for (let e4 of o3) i22.has(e4) || r3.add(e4);
    return [...r3];
  }, l.contains = (e3, t3, n3) => {
    if ("string" != typeof e3) throw new TypeError(`Expected a string: "${r2.inspect(e3)}"`);
    if (Array.isArray(t3)) return t3.some(((t4) => l.contains(e3, t4, n3)));
    if ("string" == typeof t3) {
      if (a(e3) || a(t3)) return false;
      if (e3.includes(t3) || e3.startsWith("./") && e3.slice(2).includes(t3)) return true;
    }
    return l.isMatch(e3, t3, { ...n3, contains: true });
  }, l.matchKeys = (e3, t3, n3) => {
    if (!s2.isObject(e3)) throw new TypeError("Expected the first argument to be an object");
    let r3 = l(Object.keys(e3), t3, n3), o3 = {};
    for (let t4 of r3) o3[t4] = e3[t4];
    return o3;
  }, l.some = (e3, t3, n3) => {
    let r3 = [].concat(e3);
    for (let e4 of [].concat(t3)) {
      let t4 = i2(String(e4), n3);
      if (r3.some(((e5) => t4(e5)))) return true;
    }
    return false;
  }, l.every = (e3, t3, n3) => {
    let r3 = [].concat(e3);
    for (let e4 of [].concat(t3)) {
      let t4 = i2(String(e4), n3);
      if (!r3.every(((e5) => t4(e5)))) return false;
    }
    return true;
  }, l.all = (e3, t3, n3) => {
    if ("string" != typeof e3) throw new TypeError(`Expected a string: "${r2.inspect(e3)}"`);
    return [].concat(t3).every(((t4) => i2(t4, n3)(e3)));
  }, l.capture = (e3, t3, n3) => {
    let r3 = s2.isWindows(n3), o3 = i2.makeRe(String(e3), { ...n3, capture: true }).exec(r3 ? s2.toPosixSlashes(t3) : t3);
    if (o3) return o3.slice(1).map(((e4) => void 0 === e4 ? "" : e4));
  }, l.makeRe = (...e3) => i2.makeRe(...e3), l.scan = (...e3) => i2.scan(...e3), l.parse = (e3, t3) => {
    let n3 = [];
    for (let r3 of [].concat(e3 || [])) for (let e4 of o2(String(r3), t3)) n3.push(i2.parse(e4, t3));
    return n3;
  }, l.braces = (e3, t3) => {
    if ("string" != typeof e3) throw new TypeError("Expected a string");
    return t3 && true === t3.nobrace || !/\{.*\}/.test(e3) ? [e3] : o2(e3, t3);
  }, l.braceExpand = (e3, t3) => {
    if ("string" != typeof e3) throw new TypeError("Expected a string");
    return l.braces(e3, { ...t3, expand: true });
  }, e2.exports = l;
}, "./node_modules/object-is/implementation.js": (e2) => {
  var t2 = function(e3) {
    return e3 != e3;
  };
  e2.exports = function(e3, n2) {
    return 0 === e3 && 0 === n2 ? 1 / e3 == 1 / n2 : e3 === n2 || !(!t2(e3) || !t2(n2));
  };
}, "./node_modules/object-is/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/define-properties/index.js"), o2 = n2("./node_modules/call-bind/index.js"), i2 = n2("./node_modules/object-is/implementation.js"), s2 = n2("./node_modules/object-is/polyfill.js"), a = n2("./node_modules/object-is/shim.js"), l = o2(s2(), Object);
  r2(l, { getPolyfill: s2, implementation: i2, shim: a }), e2.exports = l;
}, "./node_modules/object-is/polyfill.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/object-is/implementation.js");
  e2.exports = function() {
    return "function" == typeof Object.is ? Object.is : r2;
  };
}, "./node_modules/object-is/shim.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/object-is/polyfill.js"), o2 = n2("./node_modules/define-properties/index.js");
  e2.exports = function() {
    var e3 = r2();
    return o2(Object, { is: e3 }, { is: function() {
      return Object.is !== e3;
    } }), e3;
  };
}, "./node_modules/object-keys/implementation.js": (e2, t2, n2) => {
  var r2;
  if (!Object.keys) {
    var o2 = Object.prototype.hasOwnProperty, i2 = Object.prototype.toString, s2 = n2("./node_modules/object-keys/isArguments.js"), a = Object.prototype.propertyIsEnumerable, l = !a.call({ toString: null }, "toString"), u = a.call((function() {
    }), "prototype"), c2 = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], f = function(e3) {
      var t3 = e3.constructor;
      return t3 && t3.prototype === e3;
    }, p = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, d = (function() {
      if ("undefined" == typeof window) return false;
      for (var e3 in window) try {
        if (!p["$" + e3] && o2.call(window, e3) && null !== window[e3] && "object" == typeof window[e3]) try {
          f(window[e3]);
        } catch (e4) {
          return true;
        }
      } catch (e4) {
        return true;
      }
      return false;
    })();
    r2 = function(e3) {
      var t3 = null !== e3 && "object" == typeof e3, n3 = "[object Function]" === i2.call(e3), r3 = s2(e3), a2 = t3 && "[object String]" === i2.call(e3), p2 = [];
      if (!t3 && !n3 && !r3) throw new TypeError("Object.keys called on a non-object");
      var h = u && n3;
      if (a2 && e3.length > 0 && !o2.call(e3, 0)) for (var g = 0; g < e3.length; ++g) p2.push(String(g));
      if (r3 && e3.length > 0) for (var m2 = 0; m2 < e3.length; ++m2) p2.push(String(m2));
      else for (var y in e3) h && "prototype" === y || !o2.call(e3, y) || p2.push(String(y));
      if (l) for (var b = (function(e4) {
        if ("undefined" == typeof window || !d) return f(e4);
        try {
          return f(e4);
        } catch (e5) {
          return false;
        }
      })(e3), v = 0; v < c2.length; ++v) b && "constructor" === c2[v] || !o2.call(e3, c2[v]) || p2.push(c2[v]);
      return p2;
    };
  }
  e2.exports = r2;
}, "./node_modules/object-keys/index.js": (e2, t2, n2) => {
  var r2 = Array.prototype.slice, o2 = n2("./node_modules/object-keys/isArguments.js"), i2 = Object.keys, s2 = i2 ? function(e3) {
    return i2(e3);
  } : n2("./node_modules/object-keys/implementation.js"), a = Object.keys;
  s2.shim = function() {
    if (Object.keys) {
      var e3 = (function() {
        var e4 = Object.keys(arguments);
        return e4 && e4.length === arguments.length;
      })(1, 2);
      e3 || (Object.keys = function(e4) {
        return o2(e4) ? a(r2.call(e4)) : a(e4);
      });
    } else Object.keys = s2;
    return Object.keys || s2;
  }, e2.exports = s2;
}, "./node_modules/object-keys/isArguments.js": (e2) => {
  var t2 = Object.prototype.toString;
  e2.exports = function(e3) {
    var n2 = t2.call(e3), r2 = "[object Arguments]" === n2;
    return r2 || (r2 = "[object Array]" !== n2 && null !== e3 && "object" == typeof e3 && "number" == typeof e3.length && e3.length >= 0 && "[object Function]" === t2.call(e3.callee)), r2;
  };
}, "./node_modules/path-browserify/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  function o2(e3) {
    if ("string" != typeof e3) throw new TypeError("Path must be a string. Received " + JSON.stringify(e3));
  }
  function i2(e3, t3) {
    for (var n3, r3 = "", o3 = 0, i22 = -1, s22 = 0, a = 0; a <= e3.length; ++a) {
      if (a < e3.length) n3 = e3.charCodeAt(a);
      else {
        if (47 === n3) break;
        n3 = 47;
      }
      if (47 === n3) {
        if (i22 === a - 1 || 1 === s22) ;
        else if (i22 !== a - 1 && 2 === s22) {
          if (r3.length < 2 || 2 !== o3 || 46 !== r3.charCodeAt(r3.length - 1) || 46 !== r3.charCodeAt(r3.length - 2)) {
            if (r3.length > 2) {
              var l = r3.lastIndexOf("/");
              if (l !== r3.length - 1) {
                -1 === l ? (r3 = "", o3 = 0) : o3 = (r3 = r3.slice(0, l)).length - 1 - r3.lastIndexOf("/"), i22 = a, s22 = 0;
                continue;
              }
            } else if (2 === r3.length || 1 === r3.length) {
              r3 = "", o3 = 0, i22 = a, s22 = 0;
              continue;
            }
          }
          t3 && (r3.length > 0 ? r3 += "/.." : r3 = "..", o3 = 2);
        } else r3.length > 0 ? r3 += "/" + e3.slice(i22 + 1, a) : r3 = e3.slice(i22 + 1, a), o3 = a - i22 - 1;
        i22 = a, s22 = 0;
      } else 46 === n3 && -1 !== s22 ? ++s22 : s22 = -1;
    }
    return r3;
  }
  var s2 = { resolve: function() {
    for (var e3, t3 = "", n3 = false, s22 = arguments.length - 1; s22 >= -1 && !n3; s22--) {
      var a;
      s22 >= 0 ? a = arguments[s22] : (void 0 === e3 && (e3 = r2.cwd()), a = e3), o2(a), 0 !== a.length && (t3 = a + "/" + t3, n3 = 47 === a.charCodeAt(0));
    }
    return t3 = i2(t3, !n3), n3 ? t3.length > 0 ? "/" + t3 : "/" : t3.length > 0 ? t3 : ".";
  }, normalize: function(e3) {
    if (o2(e3), 0 === e3.length) return ".";
    var t3 = 47 === e3.charCodeAt(0), n3 = 47 === e3.charCodeAt(e3.length - 1);
    return 0 !== (e3 = i2(e3, !t3)).length || t3 || (e3 = "."), e3.length > 0 && n3 && (e3 += "/"), t3 ? "/" + e3 : e3;
  }, isAbsolute: function(e3) {
    return o2(e3), e3.length > 0 && 47 === e3.charCodeAt(0);
  }, join: function() {
    if (0 === arguments.length) return ".";
    for (var e3, t3 = 0; t3 < arguments.length; ++t3) {
      var n3 = arguments[t3];
      o2(n3), n3.length > 0 && (void 0 === e3 ? e3 = n3 : e3 += "/" + n3);
    }
    return void 0 === e3 ? "." : s2.normalize(e3);
  }, relative: function(e3, t3) {
    if (o2(e3), o2(t3), e3 === t3) return "";
    if ((e3 = s2.resolve(e3)) === (t3 = s2.resolve(t3))) return "";
    for (var n3 = 1; n3 < e3.length && 47 === e3.charCodeAt(n3); ++n3) ;
    for (var r3 = e3.length, i22 = r3 - n3, a = 1; a < t3.length && 47 === t3.charCodeAt(a); ++a) ;
    for (var l = t3.length - a, u = i22 < l ? i22 : l, c2 = -1, f = 0; f <= u; ++f) {
      if (f === u) {
        if (l > u) {
          if (47 === t3.charCodeAt(a + f)) return t3.slice(a + f + 1);
          if (0 === f) return t3.slice(a + f);
        } else i22 > u && (47 === e3.charCodeAt(n3 + f) ? c2 = f : 0 === f && (c2 = 0));
        break;
      }
      var p = e3.charCodeAt(n3 + f);
      if (p !== t3.charCodeAt(a + f)) break;
      47 === p && (c2 = f);
    }
    var d = "";
    for (f = n3 + c2 + 1; f <= r3; ++f) f !== r3 && 47 !== e3.charCodeAt(f) || (0 === d.length ? d += ".." : d += "/..");
    return d.length > 0 ? d + t3.slice(a + c2) : (a += c2, 47 === t3.charCodeAt(a) && ++a, t3.slice(a));
  }, _makeLong: function(e3) {
    return e3;
  }, dirname: function(e3) {
    if (o2(e3), 0 === e3.length) return ".";
    for (var t3 = e3.charCodeAt(0), n3 = 47 === t3, r3 = -1, i22 = true, s22 = e3.length - 1; s22 >= 1; --s22) if (47 === (t3 = e3.charCodeAt(s22))) {
      if (!i22) {
        r3 = s22;
        break;
      }
    } else i22 = false;
    return -1 === r3 ? n3 ? "/" : "." : n3 && 1 === r3 ? "//" : e3.slice(0, r3);
  }, basename: function(e3, t3) {
    if (void 0 !== t3 && "string" != typeof t3) throw new TypeError('"ext" argument must be a string');
    o2(e3);
    var n3, r3 = 0, i22 = -1, s22 = true;
    if (void 0 !== t3 && t3.length > 0 && t3.length <= e3.length) {
      if (t3.length === e3.length && t3 === e3) return "";
      var a = t3.length - 1, l = -1;
      for (n3 = e3.length - 1; n3 >= 0; --n3) {
        var u = e3.charCodeAt(n3);
        if (47 === u) {
          if (!s22) {
            r3 = n3 + 1;
            break;
          }
        } else -1 === l && (s22 = false, l = n3 + 1), a >= 0 && (u === t3.charCodeAt(a) ? -1 == --a && (i22 = n3) : (a = -1, i22 = l));
      }
      return r3 === i22 ? i22 = l : -1 === i22 && (i22 = e3.length), e3.slice(r3, i22);
    }
    for (n3 = e3.length - 1; n3 >= 0; --n3) if (47 === e3.charCodeAt(n3)) {
      if (!s22) {
        r3 = n3 + 1;
        break;
      }
    } else -1 === i22 && (s22 = false, i22 = n3 + 1);
    return -1 === i22 ? "" : e3.slice(r3, i22);
  }, extname: function(e3) {
    o2(e3);
    for (var t3 = -1, n3 = 0, r3 = -1, i22 = true, s22 = 0, a = e3.length - 1; a >= 0; --a) {
      var l = e3.charCodeAt(a);
      if (47 !== l) -1 === r3 && (i22 = false, r3 = a + 1), 46 === l ? -1 === t3 ? t3 = a : 1 !== s22 && (s22 = 1) : -1 !== t3 && (s22 = -1);
      else if (!i22) {
        n3 = a + 1;
        break;
      }
    }
    return -1 === t3 || -1 === r3 || 0 === s22 || 1 === s22 && t3 === r3 - 1 && t3 === n3 + 1 ? "" : e3.slice(t3, r3);
  }, format: function(e3) {
    if (null === e3 || "object" != typeof e3) throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof e3);
    return (function(e4, t3) {
      var n3 = t3.dir || t3.root, r3 = t3.base || (t3.name || "") + (t3.ext || "");
      return n3 ? n3 === t3.root ? n3 + r3 : n3 + e4 + r3 : r3;
    })("/", e3);
  }, parse: function(e3) {
    o2(e3);
    var t3 = { root: "", dir: "", base: "", ext: "", name: "" };
    if (0 === e3.length) return t3;
    var n3, r3 = e3.charCodeAt(0), i22 = 47 === r3;
    i22 ? (t3.root = "/", n3 = 1) : n3 = 0;
    for (var s22 = -1, a = 0, l = -1, u = true, c2 = e3.length - 1, f = 0; c2 >= n3; --c2) if (47 !== (r3 = e3.charCodeAt(c2))) -1 === l && (u = false, l = c2 + 1), 46 === r3 ? -1 === s22 ? s22 = c2 : 1 !== f && (f = 1) : -1 !== s22 && (f = -1);
    else if (!u) {
      a = c2 + 1;
      break;
    }
    return -1 === s22 || -1 === l || 0 === f || 1 === f && s22 === l - 1 && s22 === a + 1 ? -1 !== l && (t3.base = t3.name = 0 === a && i22 ? e3.slice(1, l) : e3.slice(a, l)) : (0 === a && i22 ? (t3.name = e3.slice(1, s22), t3.base = e3.slice(1, l)) : (t3.name = e3.slice(a, s22), t3.base = e3.slice(a, l)), t3.ext = e3.slice(s22, l)), a > 0 ? t3.dir = e3.slice(0, a - 1) : i22 && (t3.dir = "/"), t3;
  }, sep: "/", delimiter: ":", win32: null, posix: null };
  s2.posix = s2, e2.exports = s2;
}, "./node_modules/picomatch/index.js": (e2, t2, n2) => {
  e2.exports = n2("./node_modules/picomatch/lib/picomatch.js");
}, "./node_modules/picomatch/lib/constants.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/path-browserify/index.js"), o2 = "\\\\/", i2 = `[^${o2}]`, s2 = "\\.", a = "\\/", l = "[^/]", u = `(?:${a}|$)`, c2 = `(?:^|${a})`, f = `${s2}{1,2}${u}`, p = { DOT_LITERAL: s2, PLUS_LITERAL: "\\+", QMARK_LITERAL: "\\?", SLASH_LITERAL: a, ONE_CHAR: "(?=.)", QMARK: l, END_ANCHOR: u, DOTS_SLASH: f, NO_DOT: `(?!${s2})`, NO_DOTS: `(?!${c2}${f})`, NO_DOT_SLASH: `(?!${s2}{0,1}${u})`, NO_DOTS_SLASH: `(?!${f})`, QMARK_NO_DOT: `[^.${a}]`, STAR: `${l}*?`, START_ANCHOR: c2 }, d = { ...p, SLASH_LITERAL: `[${o2}]`, QMARK: i2, STAR: `${i2}*?`, DOTS_SLASH: `${s2}{1,2}(?:[${o2}]|$)`, NO_DOT: `(?!${s2})`, NO_DOTS: `(?!(?:^|[${o2}])${s2}{1,2}(?:[${o2}]|$))`, NO_DOT_SLASH: `(?!${s2}{0,1}(?:[${o2}]|$))`, NO_DOTS_SLASH: `(?!${s2}{1,2}(?:[${o2}]|$))`, QMARK_NO_DOT: `[^.${o2}]`, START_ANCHOR: `(?:^|[${o2}])`, END_ANCHOR: `(?:[${o2}]|$)` };
  e2.exports = { MAX_LENGTH: 65536, POSIX_REGEX_SOURCE: { alnum: "a-zA-Z0-9", alpha: "a-zA-Z", ascii: "\\x00-\\x7F", blank: " \\t", cntrl: "\\x00-\\x1F\\x7F", digit: "0-9", graph: "\\x21-\\x7E", lower: "a-z", print: "\\x20-\\x7E ", punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~", space: " \\t\\r\\n\\v\\f", upper: "A-Z", word: "A-Za-z0-9_", xdigit: "A-Fa-f0-9" }, REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g, REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/, REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/, REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g, REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g, REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g, REPLACEMENTS: { "***": "*", "**/**": "**", "**/**/**": "**" }, CHAR_0: 48, CHAR_9: 57, CHAR_UPPERCASE_A: 65, CHAR_LOWERCASE_A: 97, CHAR_UPPERCASE_Z: 90, CHAR_LOWERCASE_Z: 122, CHAR_LEFT_PARENTHESES: 40, CHAR_RIGHT_PARENTHESES: 41, CHAR_ASTERISK: 42, CHAR_AMPERSAND: 38, CHAR_AT: 64, CHAR_BACKWARD_SLASH: 92, CHAR_CARRIAGE_RETURN: 13, CHAR_CIRCUMFLEX_ACCENT: 94, CHAR_COLON: 58, CHAR_COMMA: 44, CHAR_DOT: 46, CHAR_DOUBLE_QUOTE: 34, CHAR_EQUAL: 61, CHAR_EXCLAMATION_MARK: 33, CHAR_FORM_FEED: 12, CHAR_FORWARD_SLASH: 47, CHAR_GRAVE_ACCENT: 96, CHAR_HASH: 35, CHAR_HYPHEN_MINUS: 45, CHAR_LEFT_ANGLE_BRACKET: 60, CHAR_LEFT_CURLY_BRACE: 123, CHAR_LEFT_SQUARE_BRACKET: 91, CHAR_LINE_FEED: 10, CHAR_NO_BREAK_SPACE: 160, CHAR_PERCENT: 37, CHAR_PLUS: 43, CHAR_QUESTION_MARK: 63, CHAR_RIGHT_ANGLE_BRACKET: 62, CHAR_RIGHT_CURLY_BRACE: 125, CHAR_RIGHT_SQUARE_BRACKET: 93, CHAR_SEMICOLON: 59, CHAR_SINGLE_QUOTE: 39, CHAR_SPACE: 32, CHAR_TAB: 9, CHAR_UNDERSCORE: 95, CHAR_VERTICAL_LINE: 124, CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, SEP: r2.sep, extglobChars: (e3) => ({ "!": { type: "negate", open: "(?:(?!(?:", close: `))${e3.STAR})` }, "?": { type: "qmark", open: "(?:", close: ")?" }, "+": { type: "plus", open: "(?:", close: ")+" }, "*": { type: "star", open: "(?:", close: ")*" }, "@": { type: "at", open: "(?:", close: ")" } }), globChars: (e3) => true === e3 ? d : p };
}, "./node_modules/picomatch/lib/parse.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/picomatch/lib/constants.js"), o2 = n2("./node_modules/picomatch/lib/utils.js"), { MAX_LENGTH: i2, POSIX_REGEX_SOURCE: s2, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: l, REPLACEMENTS: u } = r2, c2 = (e3, t3) => {
    if ("function" == typeof t3.expandRange) return t3.expandRange(...e3, t3);
    e3.sort();
    const n3 = `[${e3.join("-")}]`;
    try {
      new RegExp(n3);
    } catch (t4) {
      return e3.map(((e4) => o2.escapeRegex(e4))).join("..");
    }
    return n3;
  }, f = (e3, t3) => `Missing ${e3}: "${t3}" - use "\\\\${t3}" to match literal characters`, p = (e3, t3) => {
    if ("string" != typeof e3) throw new TypeError("Expected a string");
    e3 = u[e3] || e3;
    const n3 = { ...t3 }, d = "number" == typeof n3.maxLength ? Math.min(i2, n3.maxLength) : i2;
    let h = e3.length;
    if (h > d) throw new SyntaxError(`Input length: ${h}, exceeds maximum allowed length: ${d}`);
    const g = { type: "bos", value: "", output: n3.prepend || "" }, m2 = [g], y = n3.capture ? "" : "?:", b = o2.isWindows(t3), v = r2.globChars(b), E = r2.extglobChars(v), { DOT_LITERAL: j, PLUS_LITERAL: _, SLASH_LITERAL: w, ONE_CHAR: x, DOTS_SLASH: O, NO_DOT: R, NO_DOT_SLASH: A, NO_DOTS_SLASH: S, QMARK: C, QMARK_NO_DOT: $, STAR: T, START_ANCHOR: M } = v, I = (e4) => `(${y}(?:(?!${M}${e4.dot ? O : j}).)*?)`, P = n3.dot ? "" : R, k = n3.dot ? C : $;
    let N = true === n3.bash ? I(n3) : T;
    n3.capture && (N = `(${N})`), "boolean" == typeof n3.noext && (n3.noextglob = n3.noext);
    const L = { input: e3, index: -1, start: 0, dot: true === n3.dot, consumed: "", output: "", prefix: "", backtrack: false, negated: false, brackets: 0, braces: 0, parens: 0, quotes: 0, globstar: false, tokens: m2 };
    e3 = o2.removePrefix(e3, L), h = e3.length;
    const D = [], B = [], U = [];
    let F, H = g;
    const q = () => L.index === h - 1, W = L.peek = (t4 = 1) => e3[L.index + t4], G = L.advance = () => e3[++L.index] || "", z = () => e3.slice(L.index + 1), V = (e4 = "", t4 = 0) => {
      L.consumed += e4, L.index += t4;
    }, K = (e4) => {
      L.output += null != e4.output ? e4.output : e4.value, V(e4.value);
    }, Q = () => {
      let e4 = 1;
      for (; "!" === W() && ("(" !== W(2) || "?" === W(3)); ) G(), L.start++, e4++;
      return e4 % 2 != 0 && (L.negated = true, L.start++, true);
    }, Y = (e4) => {
      L[e4]++, U.push(e4);
    }, X = (e4) => {
      L[e4]--, U.pop();
    }, J = (e4) => {
      if ("globstar" === H.type) {
        const t4 = L.braces > 0 && ("comma" === e4.type || "brace" === e4.type), n4 = true === e4.extglob || D.length && ("pipe" === e4.type || "paren" === e4.type);
        "slash" === e4.type || "paren" === e4.type || t4 || n4 || (L.output = L.output.slice(0, -H.output.length), H.type = "star", H.value = "*", H.output = N, L.output += H.output);
      }
      if (D.length && "paren" !== e4.type && (D[D.length - 1].inner += e4.value), (e4.value || e4.output) && K(e4), H && "text" === H.type && "text" === e4.type) return H.value += e4.value, void (H.output = (H.output || "") + e4.value);
      e4.prev = H, m2.push(e4), H = e4;
    }, Z = (e4, t4) => {
      const r3 = { ...E[t4], conditions: 1, inner: "" };
      r3.prev = H, r3.parens = L.parens, r3.output = L.output;
      const o3 = (n3.capture ? "(" : "") + r3.open;
      Y("parens"), J({ type: e4, value: t4, output: L.output ? "" : x }), J({ type: "paren", extglob: true, value: G(), output: o3 }), D.push(r3);
    }, ee = (e4) => {
      let r3, o3 = e4.close + (n3.capture ? ")" : "");
      if ("negate" === e4.type) {
        let i22 = N;
        if (e4.inner && e4.inner.length > 1 && e4.inner.includes("/") && (i22 = I(n3)), (i22 !== N || q() || /^\)+$/.test(z())) && (o3 = e4.close = `)$))${i22}`), e4.inner.includes("*") && (r3 = z()) && /^\.[^\\/.]+$/.test(r3)) {
          const n4 = p(r3, { ...t3, fastpaths: false }).output;
          o3 = e4.close = `)${n4})${i22})`;
        }
        "bos" === e4.prev.type && (L.negatedExtglob = true);
      }
      J({ type: "paren", extglob: true, value: F, output: o3 }), X("parens");
    };
    if (false !== n3.fastpaths && !/(^[*!]|[/()[\]{}"])/.test(e3)) {
      let r3 = false, i22 = e3.replace(l, ((e4, t4, n4, o3, i3, s22) => "\\" === o3 ? (r3 = true, e4) : "?" === o3 ? t4 ? t4 + o3 + (i3 ? C.repeat(i3.length) : "") : 0 === s22 ? k + (i3 ? C.repeat(i3.length) : "") : C.repeat(n4.length) : "." === o3 ? j.repeat(n4.length) : "*" === o3 ? t4 ? t4 + o3 + (i3 ? N : "") : N : t4 ? e4 : `\\${e4}`));
      return true === r3 && (i22 = true === n3.unescape ? i22.replace(/\\/g, "") : i22.replace(/\\+/g, ((e4) => e4.length % 2 == 0 ? "\\\\" : e4 ? "\\" : ""))), i22 === e3 && true === n3.contains ? (L.output = e3, L) : (L.output = o2.wrapOutput(i22, L, t3), L);
    }
    for (; !q(); ) {
      if (F = G(), "\0" === F) continue;
      if ("\\" === F) {
        const e4 = W();
        if ("/" === e4 && true !== n3.bash) continue;
        if ("." === e4 || ";" === e4) continue;
        if (!e4) {
          F += "\\", J({ type: "text", value: F });
          continue;
        }
        const t5 = /^\\+/.exec(z());
        let r4 = 0;
        if (t5 && t5[0].length > 2 && (r4 = t5[0].length, L.index += r4, r4 % 2 != 0 && (F += "\\")), true === n3.unescape ? F = G() : F += G(), 0 === L.brackets) {
          J({ type: "text", value: F });
          continue;
        }
      }
      if (L.brackets > 0 && ("]" !== F || "[" === H.value || "[^" === H.value)) {
        if (false !== n3.posix && ":" === F) {
          const e4 = H.value.slice(1);
          if (e4.includes("[") && (H.posix = true, e4.includes(":"))) {
            const e5 = H.value.lastIndexOf("["), t5 = H.value.slice(0, e5), n4 = H.value.slice(e5 + 2), r4 = s2[n4];
            if (r4) {
              H.value = t5 + r4, L.backtrack = true, G(), g.output || 1 !== m2.indexOf(H) || (g.output = x);
              continue;
            }
          }
        }
        ("[" === F && ":" !== W() || "-" === F && "]" === W()) && (F = `\\${F}`), "]" !== F || "[" !== H.value && "[^" !== H.value || (F = `\\${F}`), true === n3.posix && "!" === F && "[" === H.value && (F = "^"), H.value += F, K({ value: F });
        continue;
      }
      if (1 === L.quotes && '"' !== F) {
        F = o2.escapeRegex(F), H.value += F, K({ value: F });
        continue;
      }
      if ('"' === F) {
        L.quotes = 1 === L.quotes ? 0 : 1, true === n3.keepQuotes && J({ type: "text", value: F });
        continue;
      }
      if ("(" === F) {
        Y("parens"), J({ type: "paren", value: F });
        continue;
      }
      if (")" === F) {
        if (0 === L.parens && true === n3.strictBrackets) throw new SyntaxError(f("opening", "("));
        const e4 = D[D.length - 1];
        if (e4 && L.parens === e4.parens + 1) {
          ee(D.pop());
          continue;
        }
        J({ type: "paren", value: F, output: L.parens ? ")" : "\\)" }), X("parens");
        continue;
      }
      if ("[" === F) {
        if (true !== n3.nobracket && z().includes("]")) Y("brackets");
        else {
          if (true !== n3.nobracket && true === n3.strictBrackets) throw new SyntaxError(f("closing", "]"));
          F = `\\${F}`;
        }
        J({ type: "bracket", value: F });
        continue;
      }
      if ("]" === F) {
        if (true === n3.nobracket || H && "bracket" === H.type && 1 === H.value.length) {
          J({ type: "text", value: F, output: `\\${F}` });
          continue;
        }
        if (0 === L.brackets) {
          if (true === n3.strictBrackets) throw new SyntaxError(f("opening", "["));
          J({ type: "text", value: F, output: `\\${F}` });
          continue;
        }
        X("brackets");
        const e4 = H.value.slice(1);
        if (true === H.posix || "^" !== e4[0] || e4.includes("/") || (F = `/${F}`), H.value += F, K({ value: F }), false === n3.literalBrackets || o2.hasRegexChars(e4)) continue;
        const t5 = o2.escapeRegex(H.value);
        if (L.output = L.output.slice(0, -H.value.length), true === n3.literalBrackets) {
          L.output += t5, H.value = t5;
          continue;
        }
        H.value = `(${y}${t5}|${H.value})`, L.output += H.value;
        continue;
      }
      if ("{" === F && true !== n3.nobrace) {
        Y("braces");
        const e4 = { type: "brace", value: F, output: "(", outputIndex: L.output.length, tokensIndex: L.tokens.length };
        B.push(e4), J(e4);
        continue;
      }
      if ("}" === F) {
        const e4 = B[B.length - 1];
        if (true === n3.nobrace || !e4) {
          J({ type: "text", value: F, output: F });
          continue;
        }
        let t5 = ")";
        if (true === e4.dots) {
          const e5 = m2.slice(), r4 = [];
          for (let t6 = e5.length - 1; t6 >= 0 && (m2.pop(), "brace" !== e5[t6].type); t6--) "dots" !== e5[t6].type && r4.unshift(e5[t6].value);
          t5 = c2(r4, n3), L.backtrack = true;
        }
        if (true !== e4.comma && true !== e4.dots) {
          const n4 = L.output.slice(0, e4.outputIndex), r4 = L.tokens.slice(e4.tokensIndex);
          e4.value = e4.output = "\\{", F = t5 = "\\}", L.output = n4;
          for (const e5 of r4) L.output += e5.output || e5.value;
        }
        J({ type: "brace", value: F, output: t5 }), X("braces"), B.pop();
        continue;
      }
      if ("|" === F) {
        D.length > 0 && D[D.length - 1].conditions++, J({ type: "text", value: F });
        continue;
      }
      if ("," === F) {
        let e4 = F;
        const t5 = B[B.length - 1];
        t5 && "braces" === U[U.length - 1] && (t5.comma = true, e4 = "|"), J({ type: "comma", value: F, output: e4 });
        continue;
      }
      if ("/" === F) {
        if ("dot" === H.type && L.index === L.start + 1) {
          L.start = L.index + 1, L.consumed = "", L.output = "", m2.pop(), H = g;
          continue;
        }
        J({ type: "slash", value: F, output: w });
        continue;
      }
      if ("." === F) {
        if (L.braces > 0 && "dot" === H.type) {
          "." === H.value && (H.output = j);
          const e4 = B[B.length - 1];
          H.type = "dots", H.output += F, H.value += F, e4.dots = true;
          continue;
        }
        if (L.braces + L.parens === 0 && "bos" !== H.type && "slash" !== H.type) {
          J({ type: "text", value: F, output: j });
          continue;
        }
        J({ type: "dot", value: F, output: j });
        continue;
      }
      if ("?" === F) {
        if (!(H && "(" === H.value) && true !== n3.noextglob && "(" === W() && "?" !== W(2)) {
          Z("qmark", F);
          continue;
        }
        if (H && "paren" === H.type) {
          const e4 = W();
          let t5 = F;
          if ("<" === e4 && !o2.supportsLookbehinds()) throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          ("(" === H.value && !/[!=<:]/.test(e4) || "<" === e4 && !/<([!=]|\w+>)/.test(z())) && (t5 = `\\${F}`), J({ type: "text", value: F, output: t5 });
          continue;
        }
        if (true !== n3.dot && ("slash" === H.type || "bos" === H.type)) {
          J({ type: "qmark", value: F, output: $ });
          continue;
        }
        J({ type: "qmark", value: F, output: C });
        continue;
      }
      if ("!" === F) {
        if (true !== n3.noextglob && "(" === W() && ("?" !== W(2) || !/[!=<:]/.test(W(3)))) {
          Z("negate", F);
          continue;
        }
        if (true !== n3.nonegate && 0 === L.index) {
          Q();
          continue;
        }
      }
      if ("+" === F) {
        if (true !== n3.noextglob && "(" === W() && "?" !== W(2)) {
          Z("plus", F);
          continue;
        }
        if (H && "(" === H.value || false === n3.regex) {
          J({ type: "plus", value: F, output: _ });
          continue;
        }
        if (H && ("bracket" === H.type || "paren" === H.type || "brace" === H.type) || L.parens > 0) {
          J({ type: "plus", value: F });
          continue;
        }
        J({ type: "plus", value: _ });
        continue;
      }
      if ("@" === F) {
        if (true !== n3.noextglob && "(" === W() && "?" !== W(2)) {
          J({ type: "at", extglob: true, value: F, output: "" });
          continue;
        }
        J({ type: "text", value: F });
        continue;
      }
      if ("*" !== F) {
        "$" !== F && "^" !== F || (F = `\\${F}`);
        const e4 = a.exec(z());
        e4 && (F += e4[0], L.index += e4[0].length), J({ type: "text", value: F });
        continue;
      }
      if (H && ("globstar" === H.type || true === H.star)) {
        H.type = "star", H.star = true, H.value += F, H.output = N, L.backtrack = true, L.globstar = true, V(F);
        continue;
      }
      let t4 = z();
      if (true !== n3.noextglob && /^\([^?]/.test(t4)) {
        Z("star", F);
        continue;
      }
      if ("star" === H.type) {
        if (true === n3.noglobstar) {
          V(F);
          continue;
        }
        const r4 = H.prev, o3 = r4.prev, i22 = "slash" === r4.type || "bos" === r4.type, s22 = o3 && ("star" === o3.type || "globstar" === o3.type);
        if (true === n3.bash && (!i22 || t4[0] && "/" !== t4[0])) {
          J({ type: "star", value: F, output: "" });
          continue;
        }
        const a2 = L.braces > 0 && ("comma" === r4.type || "brace" === r4.type), l2 = D.length && ("pipe" === r4.type || "paren" === r4.type);
        if (!i22 && "paren" !== r4.type && !a2 && !l2) {
          J({ type: "star", value: F, output: "" });
          continue;
        }
        for (; "/**" === t4.slice(0, 3); ) {
          const n4 = e3[L.index + 4];
          if (n4 && "/" !== n4) break;
          t4 = t4.slice(3), V("/**", 3);
        }
        if ("bos" === r4.type && q()) {
          H.type = "globstar", H.value += F, H.output = I(n3), L.output = H.output, L.globstar = true, V(F);
          continue;
        }
        if ("slash" === r4.type && "bos" !== r4.prev.type && !s22 && q()) {
          L.output = L.output.slice(0, -(r4.output + H.output).length), r4.output = `(?:${r4.output}`, H.type = "globstar", H.output = I(n3) + (n3.strictSlashes ? ")" : "|$)"), H.value += F, L.globstar = true, L.output += r4.output + H.output, V(F);
          continue;
        }
        if ("slash" === r4.type && "bos" !== r4.prev.type && "/" === t4[0]) {
          const e4 = void 0 !== t4[1] ? "|$" : "";
          L.output = L.output.slice(0, -(r4.output + H.output).length), r4.output = `(?:${r4.output}`, H.type = "globstar", H.output = `${I(n3)}${w}|${w}${e4})`, H.value += F, L.output += r4.output + H.output, L.globstar = true, V(F + G()), J({ type: "slash", value: "/", output: "" });
          continue;
        }
        if ("bos" === r4.type && "/" === t4[0]) {
          H.type = "globstar", H.value += F, H.output = `(?:^|${w}|${I(n3)}${w})`, L.output = H.output, L.globstar = true, V(F + G()), J({ type: "slash", value: "/", output: "" });
          continue;
        }
        L.output = L.output.slice(0, -H.output.length), H.type = "globstar", H.output = I(n3), H.value += F, L.output += H.output, L.globstar = true, V(F);
        continue;
      }
      const r3 = { type: "star", value: F, output: N };
      true !== n3.bash ? !H || "bracket" !== H.type && "paren" !== H.type || true !== n3.regex ? (L.index !== L.start && "slash" !== H.type && "dot" !== H.type || ("dot" === H.type ? (L.output += A, H.output += A) : true === n3.dot ? (L.output += S, H.output += S) : (L.output += P, H.output += P), "*" !== W() && (L.output += x, H.output += x)), J(r3)) : (r3.output = F, J(r3)) : (r3.output = ".*?", "bos" !== H.type && "slash" !== H.type || (r3.output = P + r3.output), J(r3));
    }
    for (; L.brackets > 0; ) {
      if (true === n3.strictBrackets) throw new SyntaxError(f("closing", "]"));
      L.output = o2.escapeLast(L.output, "["), X("brackets");
    }
    for (; L.parens > 0; ) {
      if (true === n3.strictBrackets) throw new SyntaxError(f("closing", ")"));
      L.output = o2.escapeLast(L.output, "("), X("parens");
    }
    for (; L.braces > 0; ) {
      if (true === n3.strictBrackets) throw new SyntaxError(f("closing", "}"));
      L.output = o2.escapeLast(L.output, "{"), X("braces");
    }
    if (true === n3.strictSlashes || "star" !== H.type && "bracket" !== H.type || J({ type: "maybe_slash", value: "", output: `${w}?` }), true === L.backtrack) {
      L.output = "";
      for (const e4 of L.tokens) L.output += null != e4.output ? e4.output : e4.value, e4.suffix && (L.output += e4.suffix);
    }
    return L;
  };
  p.fastpaths = (e3, t3) => {
    const n3 = { ...t3 }, s22 = "number" == typeof n3.maxLength ? Math.min(i2, n3.maxLength) : i2, a2 = e3.length;
    if (a2 > s22) throw new SyntaxError(`Input length: ${a2}, exceeds maximum allowed length: ${s22}`);
    e3 = u[e3] || e3;
    const l2 = o2.isWindows(t3), { DOT_LITERAL: c22, SLASH_LITERAL: f2, ONE_CHAR: p2, DOTS_SLASH: d, NO_DOT: h, NO_DOTS: g, NO_DOTS_SLASH: m2, STAR: y, START_ANCHOR: b } = r2.globChars(l2), v = n3.dot ? g : h, E = n3.dot ? m2 : h, j = n3.capture ? "" : "?:";
    let _ = true === n3.bash ? ".*?" : y;
    n3.capture && (_ = `(${_})`);
    const w = (e4) => true === e4.noglobstar ? _ : `(${j}(?:(?!${b}${e4.dot ? d : c22}).)*?)`, x = (e4) => {
      switch (e4) {
        case "*":
          return `${v}${p2}${_}`;
        case ".*":
          return `${c22}${p2}${_}`;
        case "*.*":
          return `${v}${_}${c22}${p2}${_}`;
        case "*/*":
          return `${v}${_}${f2}${p2}${E}${_}`;
        case "**":
          return v + w(n3);
        case "**/*":
          return `(?:${v}${w(n3)}${f2})?${E}${p2}${_}`;
        case "**/*.*":
          return `(?:${v}${w(n3)}${f2})?${E}${_}${c22}${p2}${_}`;
        case "**/.*":
          return `(?:${v}${w(n3)}${f2})?${c22}${p2}${_}`;
        default: {
          const t4 = /^(.*?)\.(\w+)$/.exec(e4);
          if (!t4) return;
          const n4 = x(t4[1]);
          if (!n4) return;
          return n4 + c22 + t4[2];
        }
      }
    }, O = o2.removePrefix(e3, { negated: false, prefix: "" });
    let R = x(O);
    return R && true !== n3.strictSlashes && (R += `${f2}?`), R;
  }, e2.exports = p;
}, "./node_modules/picomatch/lib/picomatch.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/path-browserify/index.js"), o2 = n2("./node_modules/picomatch/lib/scan.js"), i2 = n2("./node_modules/picomatch/lib/parse.js"), s2 = n2("./node_modules/picomatch/lib/utils.js"), a = n2("./node_modules/picomatch/lib/constants.js"), l = (e3, t3, n3 = false) => {
    if (Array.isArray(e3)) {
      const r4 = e3.map(((e4) => l(e4, t3, n3))), o4 = (e4) => {
        for (const t4 of r4) {
          const n4 = t4(e4);
          if (n4) return n4;
        }
        return false;
      };
      return o4;
    }
    const r3 = (o3 = e3) && "object" == typeof o3 && !Array.isArray(o3) && e3.tokens && e3.input;
    var o3;
    if ("" === e3 || "string" != typeof e3 && !r3) throw new TypeError("Expected pattern to be a non-empty string");
    const i22 = t3 || {}, a2 = s2.isWindows(t3), u = r3 ? l.compileRe(e3, t3) : l.makeRe(e3, t3, false, true), c2 = u.state;
    delete u.state;
    let f = () => false;
    if (i22.ignore) {
      const e4 = { ...t3, ignore: null, onMatch: null, onResult: null };
      f = l(i22.ignore, e4, n3);
    }
    const p = (n4, r4 = false) => {
      const { isMatch: o4, match: s22, output: p2 } = l.test(n4, u, t3, { glob: e3, posix: a2 }), d = { glob: e3, state: c2, regex: u, posix: a2, input: n4, output: p2, match: s22, isMatch: o4 };
      return "function" == typeof i22.onResult && i22.onResult(d), false === o4 ? (d.isMatch = false, !!r4 && d) : f(n4) ? ("function" == typeof i22.onIgnore && i22.onIgnore(d), d.isMatch = false, !!r4 && d) : ("function" == typeof i22.onMatch && i22.onMatch(d), !r4 || d);
    };
    return n3 && (p.state = c2), p;
  };
  l.test = (e3, t3, n3, { glob: r3, posix: o3 } = {}) => {
    if ("string" != typeof e3) throw new TypeError("Expected input to be a string");
    if ("" === e3) return { isMatch: false, output: "" };
    const i22 = n3 || {}, a2 = i22.format || (o3 ? s2.toPosixSlashes : null);
    let u = e3 === r3, c2 = u && a2 ? a2(e3) : e3;
    return false === u && (c2 = a2 ? a2(e3) : e3, u = c2 === r3), false !== u && true !== i22.capture || (u = true === i22.matchBase || true === i22.basename ? l.matchBase(e3, t3, n3, o3) : t3.exec(c2)), { isMatch: Boolean(u), match: u, output: c2 };
  }, l.matchBase = (e3, t3, n3, o3 = s2.isWindows(n3)) => (t3 instanceof RegExp ? t3 : l.makeRe(t3, n3)).test(r2.basename(e3)), l.isMatch = (e3, t3, n3) => l(t3, n3)(e3), l.parse = (e3, t3) => Array.isArray(e3) ? e3.map(((e4) => l.parse(e4, t3))) : i2(e3, { ...t3, fastpaths: false }), l.scan = (e3, t3) => o2(e3, t3), l.compileRe = (e3, t3, n3 = false, r3 = false) => {
    if (true === n3) return e3.output;
    const o3 = t3 || {}, i22 = o3.contains ? "" : "^", s22 = o3.contains ? "" : "$";
    let a2 = `${i22}(?:${e3.output})${s22}`;
    e3 && true === e3.negated && (a2 = `^(?!${a2}).*$`);
    const u = l.toRegex(a2, t3);
    return true === r3 && (u.state = e3), u;
  }, l.makeRe = (e3, t3 = {}, n3 = false, r3 = false) => {
    if (!e3 || "string" != typeof e3) throw new TypeError("Expected a non-empty string");
    let o3 = { negated: false, fastpaths: true };
    return false === t3.fastpaths || "." !== e3[0] && "*" !== e3[0] || (o3.output = i2.fastpaths(e3, t3)), o3.output || (o3 = i2(e3, t3)), l.compileRe(o3, t3, n3, r3);
  }, l.toRegex = (e3, t3) => {
    try {
      const n3 = t3 || {};
      return new RegExp(e3, n3.flags || (n3.nocase ? "i" : ""));
    } catch (e4) {
      if (t3 && true === t3.debug) throw e4;
      return /$^/;
    }
  }, l.constants = a, e2.exports = l;
}, "./node_modules/picomatch/lib/scan.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/picomatch/lib/utils.js"), { CHAR_ASTERISK: o2, CHAR_AT: i2, CHAR_BACKWARD_SLASH: s2, CHAR_COMMA: a, CHAR_DOT: l, CHAR_EXCLAMATION_MARK: u, CHAR_FORWARD_SLASH: c2, CHAR_LEFT_CURLY_BRACE: f, CHAR_LEFT_PARENTHESES: p, CHAR_LEFT_SQUARE_BRACKET: d, CHAR_PLUS: h, CHAR_QUESTION_MARK: g, CHAR_RIGHT_CURLY_BRACE: m2, CHAR_RIGHT_PARENTHESES: y, CHAR_RIGHT_SQUARE_BRACKET: b } = n2("./node_modules/picomatch/lib/constants.js"), v = (e3) => e3 === c2 || e3 === s2, E = (e3) => {
    true !== e3.isPrefix && (e3.depth = e3.isGlobstar ? 1 / 0 : 1);
  };
  e2.exports = (e3, t3) => {
    const n3 = t3 || {}, j = e3.length - 1, _ = true === n3.parts || true === n3.scanToEnd, w = [], x = [], O = [];
    let R, A, S = e3, C = -1, $ = 0, T = 0, M = false, I = false, P = false, k = false, N = false, L = false, D = false, B = false, U = false, F = false, H = 0, q = { value: "", depth: 0, isGlob: false };
    const W = () => C >= j, G = () => (R = A, S.charCodeAt(++C));
    for (; C < j; ) {
      let e4;
      if (A = G(), A !== s2) {
        if (true === L || A === f) {
          for (H++; true !== W() && (A = G()); ) if (A !== s2) if (A !== f) {
            if (true !== L && A === l && (A = G()) === l) {
              if (M = q.isBrace = true, P = q.isGlob = true, F = true, true === _) continue;
              break;
            }
            if (true !== L && A === a) {
              if (M = q.isBrace = true, P = q.isGlob = true, F = true, true === _) continue;
              break;
            }
            if (A === m2 && (H--, 0 === H)) {
              L = false, M = q.isBrace = true, F = true;
              break;
            }
          } else H++;
          else D = q.backslashes = true, G();
          if (true === _) continue;
          break;
        }
        if (A !== c2) {
          if (true !== n3.noext) {
            if (true === (A === h || A === i2 || A === o2 || A === g || A === u) && S.charCodeAt(C + 1) === p) {
              if (P = q.isGlob = true, k = q.isExtglob = true, F = true, A === u && C === $ && (U = true), true === _) {
                for (; true !== W() && (A = G()); ) if (A !== s2) {
                  if (A === y) {
                    P = q.isGlob = true, F = true;
                    break;
                  }
                } else D = q.backslashes = true, A = G();
                continue;
              }
              break;
            }
          }
          if (A === o2) {
            if (R === o2 && (N = q.isGlobstar = true), P = q.isGlob = true, F = true, true === _) continue;
            break;
          }
          if (A === g) {
            if (P = q.isGlob = true, F = true, true === _) continue;
            break;
          }
          if (A === d) {
            for (; true !== W() && (e4 = G()); ) if (e4 !== s2) {
              if (e4 === b) {
                I = q.isBracket = true, P = q.isGlob = true, F = true;
                break;
              }
            } else D = q.backslashes = true, G();
            if (true === _) continue;
            break;
          }
          if (true === n3.nonegate || A !== u || C !== $) {
            if (true !== n3.noparen && A === p) {
              if (P = q.isGlob = true, true === _) {
                for (; true !== W() && (A = G()); ) if (A !== p) {
                  if (A === y) {
                    F = true;
                    break;
                  }
                } else D = q.backslashes = true, A = G();
                continue;
              }
              break;
            }
            if (true === P) {
              if (F = true, true === _) continue;
              break;
            }
          } else B = q.negated = true, $++;
        } else {
          if (w.push(C), x.push(q), q = { value: "", depth: 0, isGlob: false }, true === F) continue;
          if (R === l && C === $ + 1) {
            $ += 2;
            continue;
          }
          T = C + 1;
        }
      } else D = q.backslashes = true, A = G(), A === f && (L = true);
    }
    true === n3.noext && (k = false, P = false);
    let z = S, V = "", K = "";
    $ > 0 && (V = S.slice(0, $), S = S.slice($), T -= $), z && true === P && T > 0 ? (z = S.slice(0, T), K = S.slice(T)) : true === P ? (z = "", K = S) : z = S, z && "" !== z && "/" !== z && z !== S && v(z.charCodeAt(z.length - 1)) && (z = z.slice(0, -1)), true === n3.unescape && (K && (K = r2.removeBackslashes(K)), z && true === D && (z = r2.removeBackslashes(z)));
    const Q = { prefix: V, input: e3, start: $, base: z, glob: K, isBrace: M, isBracket: I, isGlob: P, isExtglob: k, isGlobstar: N, negated: B, negatedExtglob: U };
    if (true === n3.tokens && (Q.maxDepth = 0, v(A) || x.push(q), Q.tokens = x), true === n3.parts || true === n3.tokens) {
      let t4;
      for (let r3 = 0; r3 < w.length; r3++) {
        const o3 = t4 ? t4 + 1 : $, i22 = w[r3], s22 = e3.slice(o3, i22);
        n3.tokens && (0 === r3 && 0 !== $ ? (x[r3].isPrefix = true, x[r3].value = V) : x[r3].value = s22, E(x[r3]), Q.maxDepth += x[r3].depth), 0 === r3 && "" === s22 || O.push(s22), t4 = i22;
      }
      if (t4 && t4 + 1 < e3.length) {
        const r3 = e3.slice(t4 + 1);
        O.push(r3), n3.tokens && (x[x.length - 1].value = r3, E(x[x.length - 1]), Q.maxDepth += x[x.length - 1].depth);
      }
      Q.slashes = w, Q.parts = O;
    }
    return Q;
  };
}, "./node_modules/picomatch/lib/utils.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  const o2 = n2("./node_modules/path-browserify/index.js"), i2 = "win32" === r2.platform, { REGEX_BACKSLASH: s2, REGEX_REMOVE_BACKSLASH: a, REGEX_SPECIAL_CHARS: l, REGEX_SPECIAL_CHARS_GLOBAL: u } = n2("./node_modules/picomatch/lib/constants.js");
  t2.isObject = (e3) => null !== e3 && "object" == typeof e3 && !Array.isArray(e3), t2.hasRegexChars = (e3) => l.test(e3), t2.isRegexChar = (e3) => 1 === e3.length && t2.hasRegexChars(e3), t2.escapeRegex = (e3) => e3.replace(u, "\\$1"), t2.toPosixSlashes = (e3) => e3.replace(s2, "/"), t2.removeBackslashes = (e3) => e3.replace(a, ((e4) => "\\" === e4 ? "" : e4)), t2.supportsLookbehinds = () => {
    const e3 = r2.version.slice(1).split(".").map(Number);
    return 3 === e3.length && e3[0] >= 9 || 8 === e3[0] && e3[1] >= 10;
  }, t2.isWindows = (e3) => e3 && "boolean" == typeof e3.windows ? e3.windows : true === i2 || "\\" === o2.sep, t2.escapeLast = (e3, n3, r3) => {
    const o3 = e3.lastIndexOf(n3, r3);
    return -1 === o3 ? e3 : "\\" === e3[o3 - 1] ? t2.escapeLast(e3, n3, o3 - 1) : `${e3.slice(0, o3)}\\${e3.slice(o3)}`;
  }, t2.removePrefix = (e3, t3 = {}) => {
    let n3 = e3;
    return n3.startsWith("./") && (n3 = n3.slice(2), t3.prefix = "./"), n3;
  }, t2.wrapOutput = (e3, t3 = {}, n3 = {}) => {
    let r3 = `${n3.contains ? "" : "^"}(?:${e3})${n3.contains ? "" : "$"}`;
    return true === t3.negated && (r3 = `(?:^(?!${r3}).*$)`), r3;
  };
}, "./node_modules/pretty-format/build/collections.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.printIteratorEntries = function(e3, t3, n3, r2, o2, i2, s2 = ": ") {
    let a = "", l = 0, u = e3.next();
    if (!u.done) {
      a += t3.spacingOuter;
      const c2 = n3 + t3.indent;
      for (; !u.done; ) {
        if (a += c2, l++ === t3.maxWidth) {
          a += "…";
          break;
        }
        a += i2(u.value[0], t3, c2, r2, o2) + s2 + i2(u.value[1], t3, c2, r2, o2), u = e3.next(), u.done ? t3.min || (a += ",") : a += `,${t3.spacingInner}`;
      }
      a += t3.spacingOuter + n3;
    }
    return a;
  }, t2.printIteratorValues = function(e3, t3, n3, r2, o2, i2) {
    let s2 = "", a = 0, l = e3.next();
    if (!l.done) {
      s2 += t3.spacingOuter;
      const u = n3 + t3.indent;
      for (; !l.done; ) {
        if (s2 += u, a++ === t3.maxWidth) {
          s2 += "…";
          break;
        }
        s2 += i2(l.value, t3, u, r2, o2), l = e3.next(), l.done ? t3.min || (s2 += ",") : s2 += `,${t3.spacingInner}`;
      }
      s2 += t3.spacingOuter + n3;
    }
    return s2;
  }, t2.printListItems = function(e3, t3, n3, r2, o2, i2) {
    let s2 = "";
    if (e3.length) {
      s2 += t3.spacingOuter;
      const a = n3 + t3.indent;
      for (let n4 = 0; n4 < e3.length; n4++) {
        if (s2 += a, n4 === t3.maxWidth) {
          s2 += "…";
          break;
        }
        n4 in e3 && (s2 += i2(e3[n4], t3, a, r2, o2)), n4 < e3.length - 1 ? s2 += `,${t3.spacingInner}` : t3.min || (s2 += ",");
      }
      s2 += t3.spacingOuter + n3;
    }
    return s2;
  }, t2.printObjectProperties = function(e3, t3, r2, o2, i2, s2) {
    let a = "";
    const l = n2(e3, t3.compareKeys);
    if (l.length) {
      a += t3.spacingOuter;
      const n3 = r2 + t3.indent;
      for (let r3 = 0; r3 < l.length; r3++) {
        const u = l[r3];
        a += `${n3 + s2(u, t3, n3, o2, i2)}: ${s2(e3[u], t3, n3, o2, i2)}`, r3 < l.length - 1 ? a += `,${t3.spacingInner}` : t3.min || (a += ",");
      }
      a += t3.spacingOuter + r2;
    }
    return a;
  };
  const n2 = (e3, t3) => {
    const n3 = Object.keys(e3).sort(t3);
    return Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(e3).forEach(((t4) => {
      Object.getOwnPropertyDescriptor(e3, t4).enumerable && n3.push(t4);
    })), n3;
  };
}, "./node_modules/pretty-format/build/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = t2.DEFAULT_OPTIONS = void 0, t2.format = D, t2.plugins = void 0;
  var r2 = p(n2("./node_modules/pretty-format/node_modules/ansi-styles/index.js")), o2 = n2("./node_modules/pretty-format/build/collections.js"), i2 = p(n2("./node_modules/pretty-format/build/plugins/AsymmetricMatcher.js")), s2 = p(n2("./node_modules/pretty-format/build/plugins/ConvertAnsi.js")), a = p(n2("./node_modules/pretty-format/build/plugins/DOMCollection.js")), l = p(n2("./node_modules/pretty-format/build/plugins/DOMElement.js")), u = p(n2("./node_modules/pretty-format/build/plugins/Immutable.js")), c2 = p(n2("./node_modules/pretty-format/build/plugins/ReactElement.js")), f = p(n2("./node_modules/pretty-format/build/plugins/ReactTestComponent.js"));
  function p(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  const d = Object.prototype.toString, h = Date.prototype.toISOString, g = Error.prototype.toString, m2 = RegExp.prototype.toString, y = (e3) => "function" == typeof e3.constructor && e3.constructor.name || "Object", b = (e3) => "undefined" != typeof window && e3 === window, v = /^Symbol\((.*)\)(.*)$/, E = /\n/gi;
  class j extends Error {
    constructor(e3, t3) {
      super(e3), this.stack = t3, this.name = this.constructor.name;
    }
  }
  function _(e3, t3) {
    return t3 ? `[Function ${e3.name || "anonymous"}]` : "[Function]";
  }
  function w(e3) {
    return String(e3).replace(v, "Symbol($1)");
  }
  function x(e3) {
    return `[${g.call(e3)}]`;
  }
  function O(e3, t3, n3, r3) {
    if (true === e3 || false === e3) return `${e3}`;
    if (void 0 === e3) return "undefined";
    if (null === e3) return "null";
    const o3 = typeof e3;
    if ("number" === o3) return (function(e4) {
      return Object.is(e4, -0) ? "-0" : String(e4);
    })(e3);
    if ("bigint" === o3) return (function(e4) {
      return String(`${e4}n`);
    })(e3);
    if ("string" === o3) return r3 ? `"${e3.replace(/"|\\/g, "\\$&")}"` : `"${e3}"`;
    if ("function" === o3) return _(e3, t3);
    if ("symbol" === o3) return w(e3);
    const i22 = d.call(e3);
    return "[object WeakMap]" === i22 ? "WeakMap {}" : "[object WeakSet]" === i22 ? "WeakSet {}" : "[object Function]" === i22 || "[object GeneratorFunction]" === i22 ? _(e3, t3) : "[object Symbol]" === i22 ? w(e3) : "[object Date]" === i22 ? isNaN(+e3) ? "Date { NaN }" : h.call(e3) : "[object Error]" === i22 ? x(e3) : "[object RegExp]" === i22 ? n3 ? m2.call(e3).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&") : m2.call(e3) : e3 instanceof Error ? x(e3) : null;
  }
  function R(e3, t3, n3, r3, i22, s22) {
    if (-1 !== i22.indexOf(e3)) return "[Circular]";
    (i22 = i22.slice()).push(e3);
    const a2 = ++r3 > t3.maxDepth, l2 = t3.min;
    if (t3.callToJSON && !a2 && e3.toJSON && "function" == typeof e3.toJSON && !s22) return C(e3.toJSON(), t3, n3, r3, i22, true);
    const u2 = d.call(e3);
    return "[object Arguments]" === u2 ? a2 ? "[Arguments]" : `${l2 ? "" : "Arguments "}[${(0, o2.printListItems)(e3, t3, n3, r3, i22, C)}]` : /* @__PURE__ */ (function(e4) {
      return "[object Array]" === e4 || "[object ArrayBuffer]" === e4 || "[object DataView]" === e4 || "[object Float32Array]" === e4 || "[object Float64Array]" === e4 || "[object Int8Array]" === e4 || "[object Int16Array]" === e4 || "[object Int32Array]" === e4 || "[object Uint8Array]" === e4 || "[object Uint8ClampedArray]" === e4 || "[object Uint16Array]" === e4 || "[object Uint32Array]" === e4;
    })(u2) ? a2 ? `[${e3.constructor.name}]` : `${l2 ? "" : t3.printBasicPrototype || "Array" !== e3.constructor.name ? `${e3.constructor.name} ` : ""}[${(0, o2.printListItems)(e3, t3, n3, r3, i22, C)}]` : "[object Map]" === u2 ? a2 ? "[Map]" : `Map {${(0, o2.printIteratorEntries)(e3.entries(), t3, n3, r3, i22, C, " => ")}}` : "[object Set]" === u2 ? a2 ? "[Set]" : `Set {${(0, o2.printIteratorValues)(e3.values(), t3, n3, r3, i22, C)}}` : a2 || b(e3) ? `[${y(e3)}]` : `${l2 ? "" : t3.printBasicPrototype || "Object" !== y(e3) ? `${y(e3)} ` : ""}{${(0, o2.printObjectProperties)(e3, t3, n3, r3, i22, C)}}`;
  }
  function A(e3, t3, n3, r3, o3, i22) {
    let s22;
    try {
      s22 = (function(e4) {
        return null != e4.serialize;
      })(e3) ? e3.serialize(t3, n3, r3, o3, i22, C) : e3.print(t3, ((e4) => C(e4, n3, r3, o3, i22)), ((e4) => {
        const t4 = r3 + n3.indent;
        return t4 + e4.replace(E, `
${t4}`);
      }), { edgeSpacing: n3.spacingOuter, min: n3.min, spacing: n3.spacingInner }, n3.colors);
    } catch (e4) {
      throw new j(e4.message, e4.stack);
    }
    if ("string" != typeof s22) throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof s22}".`);
    return s22;
  }
  function S(e3, t3) {
    for (let n3 = 0; n3 < e3.length; n3++) try {
      if (e3[n3].test(t3)) return e3[n3];
    } catch (e4) {
      throw new j(e4.message, e4.stack);
    }
    return null;
  }
  function C(e3, t3, n3, r3, o3, i22) {
    const s22 = S(t3.plugins, e3);
    if (null !== s22) return A(s22, e3, t3, n3, r3, o3);
    const a2 = O(e3, t3.printFunctionName, t3.escapeRegex, t3.escapeString);
    return null !== a2 ? a2 : R(e3, t3, n3, r3, o3, i22);
  }
  const $ = { comment: "gray", content: "reset", prop: "yellow", tag: "cyan", value: "green" }, T = Object.keys($), M = { callToJSON: true, compareKeys: void 0, escapeRegex: false, escapeString: true, highlight: false, indent: 2, maxDepth: 1 / 0, maxWidth: 1 / 0, min: false, plugins: [], printBasicPrototype: true, printFunctionName: true, theme: $ };
  t2.DEFAULT_OPTIONS = M;
  const I = (e3) => T.reduce(((t3, n3) => {
    const o3 = e3.theme && void 0 !== e3.theme[n3] ? e3.theme[n3] : $[n3], i22 = o3 && r2.default[o3];
    if (!i22 || "string" != typeof i22.close || "string" != typeof i22.open) throw new Error(`pretty-format: Option "theme" has a key "${n3}" whose value "${o3}" is undefined in ansi-styles.`);
    return t3[n3] = i22, t3;
  }), /* @__PURE__ */ Object.create(null)), P = (e3) => {
    var t3;
    return null !== (t3 = null == e3 ? void 0 : e3.printFunctionName) && void 0 !== t3 ? t3 : M.printFunctionName;
  }, k = (e3) => {
    var t3;
    return null !== (t3 = null == e3 ? void 0 : e3.escapeRegex) && void 0 !== t3 ? t3 : M.escapeRegex;
  }, N = (e3) => {
    var t3;
    return null !== (t3 = null == e3 ? void 0 : e3.escapeString) && void 0 !== t3 ? t3 : M.escapeString;
  }, L = (e3) => {
    var t3, n3, r3, o3, i22, s22, a2, l2;
    return { callToJSON: null !== (t3 = null == e3 ? void 0 : e3.callToJSON) && void 0 !== t3 ? t3 : M.callToJSON, colors: null != e3 && e3.highlight ? I(e3) : T.reduce(((e4, t4) => (e4[t4] = { close: "", open: "" }, e4)), /* @__PURE__ */ Object.create(null)), compareKeys: "function" == typeof (null == e3 ? void 0 : e3.compareKeys) ? e3.compareKeys : M.compareKeys, escapeRegex: k(e3), escapeString: N(e3), indent: null != e3 && e3.min ? "" : (l2 = null !== (n3 = null == e3 ? void 0 : e3.indent) && void 0 !== n3 ? n3 : M.indent, new Array(l2 + 1).join(" ")), maxDepth: null !== (r3 = null == e3 ? void 0 : e3.maxDepth) && void 0 !== r3 ? r3 : M.maxDepth, maxWidth: null !== (o3 = null == e3 ? void 0 : e3.maxWidth) && void 0 !== o3 ? o3 : M.maxWidth, min: null !== (i22 = null == e3 ? void 0 : e3.min) && void 0 !== i22 ? i22 : M.min, plugins: null !== (s22 = null == e3 ? void 0 : e3.plugins) && void 0 !== s22 ? s22 : M.plugins, printBasicPrototype: null === (a2 = null == e3 ? void 0 : e3.printBasicPrototype) || void 0 === a2 || a2, printFunctionName: P(e3), spacingInner: null != e3 && e3.min ? " " : "\n", spacingOuter: null != e3 && e3.min ? "" : "\n" };
  };
  function D(e3, t3) {
    if (t3 && ((function(e4) {
      if (Object.keys(e4).forEach(((e5) => {
        if (!Object.prototype.hasOwnProperty.call(M, e5)) throw new Error(`pretty-format: Unknown option "${e5}".`);
      })), e4.min && void 0 !== e4.indent && 0 !== e4.indent) throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
      if (void 0 !== e4.theme) {
        if (null === e4.theme) throw new Error('pretty-format: Option "theme" must not be null.');
        if ("object" != typeof e4.theme) throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof e4.theme}".`);
      }
    })(t3), t3.plugins)) {
      const n4 = S(t3.plugins, e3);
      if (null !== n4) return A(n4, e3, L(t3), "", 0, []);
    }
    const n3 = O(e3, P(t3), k(t3), N(t3));
    return null !== n3 ? n3 : R(e3, L(t3), "", 0, []);
  }
  const B = { AsymmetricMatcher: i2.default, ConvertAnsi: s2.default, DOMCollection: a.default, DOMElement: l.default, Immutable: u.default, ReactElement: c2.default, ReactTestComponent: f.default };
  t2.plugins = B;
  var U = D;
  t2.default = U;
}, "./node_modules/pretty-format/build/plugins/AsymmetricMatcher.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = n2("./node_modules/pretty-format/build/collections.js"), o2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const i2 = "function" == typeof o2 && o2.for ? o2.for("jest.asymmetricMatcher") : 1267621, s2 = " ", a = (e3, t3, n3, o3, i22, a2) => {
    const l2 = e3.toString();
    if ("ArrayContaining" === l2 || "ArrayNotContaining" === l2) return ++o3 > t3.maxDepth ? `[${l2}]` : `${l2 + s2}[${(0, r2.printListItems)(e3.sample, t3, n3, o3, i22, a2)}]`;
    if ("ObjectContaining" === l2 || "ObjectNotContaining" === l2) return ++o3 > t3.maxDepth ? `[${l2}]` : `${l2 + s2}{${(0, r2.printObjectProperties)(e3.sample, t3, n3, o3, i22, a2)}}`;
    if ("StringMatching" === l2 || "StringNotMatching" === l2) return l2 + s2 + a2(e3.sample, t3, n3, o3, i22);
    if ("StringContaining" === l2 || "StringNotContaining" === l2) return l2 + s2 + a2(e3.sample, t3, n3, o3, i22);
    if ("function" != typeof e3.toAsymmetricMatcher) throw new Error(`Asymmetric matcher ${e3.constructor.name} does not implement toAsymmetricMatcher()`);
    return e3.toAsymmetricMatcher();
  };
  t2.serialize = a;
  const l = (e3) => e3 && e3.$$typeof === i2;
  t2.test = l;
  var u = { serialize: a, test: l };
  t2.default = u;
}, "./node_modules/pretty-format/build/plugins/ConvertAnsi.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = i2(n2("./node_modules/ansi-regex/index.js")), o2 = i2(n2("./node_modules/pretty-format/node_modules/ansi-styles/index.js"));
  function i2(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  const s2 = (e3) => "string" == typeof e3 && !!e3.match((0, r2.default)());
  t2.test = s2;
  const a = (e3, t3, n3, i22, s22, a2) => a2(e3.replace((0, r2.default)(), ((e4) => {
    switch (e4) {
      case o2.default.red.close:
      case o2.default.green.close:
      case o2.default.cyan.close:
      case o2.default.gray.close:
      case o2.default.white.close:
      case o2.default.yellow.close:
      case o2.default.bgRed.close:
      case o2.default.bgGreen.close:
      case o2.default.bgYellow.close:
      case o2.default.inverse.close:
      case o2.default.dim.close:
      case o2.default.bold.close:
      case o2.default.reset.open:
      case o2.default.reset.close:
        return "</>";
      case o2.default.red.open:
        return "<red>";
      case o2.default.green.open:
        return "<green>";
      case o2.default.cyan.open:
        return "<cyan>";
      case o2.default.gray.open:
        return "<gray>";
      case o2.default.white.open:
        return "<white>";
      case o2.default.yellow.open:
        return "<yellow>";
      case o2.default.bgRed.open:
        return "<bgRed>";
      case o2.default.bgGreen.open:
        return "<bgGreen>";
      case o2.default.bgYellow.open:
        return "<bgYellow>";
      case o2.default.inverse.open:
        return "<inverse>";
      case o2.default.dim.open:
        return "<dim>";
      case o2.default.bold.open:
        return "<bold>";
      default:
        return "";
    }
  })), t3, n3, i22, s22);
  t2.serialize = a;
  var l = { serialize: a, test: s2 };
  t2.default = l;
}, "./node_modules/pretty-format/build/plugins/DOMCollection.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = n2("./node_modules/pretty-format/build/collections.js");
  const o2 = ["DOMStringMap", "NamedNodeMap"], i2 = /^(HTML\w*Collection|NodeList)$/, s2 = (e3) => {
    return e3 && e3.constructor && !!e3.constructor.name && (t3 = e3.constructor.name, -1 !== o2.indexOf(t3) || i2.test(t3));
    var t3;
  };
  t2.test = s2;
  const a = (e3, t3, n3, i22, s22, a2) => {
    const l2 = e3.constructor.name;
    return ++i22 > t3.maxDepth ? `[${l2}]` : (t3.min ? "" : l2 + " ") + (-1 !== o2.indexOf(l2) ? `{${(0, r2.printObjectProperties)(((e4) => "NamedNodeMap" === e4.constructor.name)(e3) ? Array.from(e3).reduce(((e4, t4) => (e4[t4.name] = t4.value, e4)), {}) : { ...e3 }, t3, n3, i22, s22, a2)}}` : `[${(0, r2.printListItems)(Array.from(e3), t3, n3, i22, s22, a2)}]`);
  };
  t2.serialize = a;
  var l = { serialize: a, test: s2 };
  t2.default = l;
}, "./node_modules/pretty-format/build/plugins/DOMElement.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = n2("./node_modules/pretty-format/build/plugins/lib/markup.js");
  const o2 = /^((HTML|SVG)\w*)?Element$/, i2 = (e3) => {
    var t3;
    return (null == e3 || null === (t3 = e3.constructor) || void 0 === t3 ? void 0 : t3.name) && ((e4) => {
      const t4 = e4.constructor.name, { nodeType: n3, tagName: r3 } = e4, i22 = "string" == typeof r3 && r3.includes("-") || ((e5) => {
        try {
          return "function" == typeof e5.hasAttribute && e5.hasAttribute("is");
        } catch {
          return false;
        }
      })(e4);
      return 1 === n3 && (o2.test(t4) || i22) || 3 === n3 && "Text" === t4 || 8 === n3 && "Comment" === t4 || 11 === n3 && "DocumentFragment" === t4;
    })(e3);
  };
  function s2(e3) {
    return 11 === e3.nodeType;
  }
  t2.test = i2;
  const a = (e3, t3, n3, o3, i22, a2) => {
    if ((function(e4) {
      return 3 === e4.nodeType;
    })(e3)) return (0, r2.printText)(e3.data, t3);
    if ((function(e4) {
      return 8 === e4.nodeType;
    })(e3)) return (0, r2.printComment)(e3.data, t3);
    const l2 = s2(e3) ? "DocumentFragment" : e3.tagName.toLowerCase();
    return ++o3 > t3.maxDepth ? (0, r2.printElementAsLeaf)(l2, t3) : (0, r2.printElement)(l2, (0, r2.printProps)(s2(e3) ? [] : Array.from(e3.attributes).map(((e4) => e4.name)).sort(), s2(e3) ? {} : Array.from(e3.attributes).reduce(((e4, t4) => (e4[t4.name] = t4.value, e4)), {}), t3, n3 + t3.indent, o3, i22, a2), (0, r2.printChildren)(Array.prototype.slice.call(e3.childNodes || e3.children), t3, n3 + t3.indent, o3, i22, a2), t3, n3);
  };
  t2.serialize = a;
  var l = { serialize: a, test: i2 };
  t2.default = l;
}, "./node_modules/pretty-format/build/plugins/Immutable.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = n2("./node_modules/pretty-format/build/collections.js");
  const o2 = "@@__IMMUTABLE_ORDERED__@@", i2 = (e3) => `Immutable.${e3}`, s2 = (e3) => `[${e3}]`, a = " ";
  const l = (e3, t3, n3, o3, l2, u2, c22) => ++o3 > t3.maxDepth ? s2(i2(c22)) : `${i2(c22) + a}[${(0, r2.printIteratorValues)(e3.values(), t3, n3, o3, l2, u2)}]`, u = (e3, t3, n3, u2, c22, f2) => e3["@@__IMMUTABLE_MAP__@@"] ? ((e4, t4, n4, o3, l2, u3, c3) => ++o3 > t4.maxDepth ? s2(i2(c3)) : `${i2(c3) + a}{${(0, r2.printIteratorEntries)(e4.entries(), t4, n4, o3, l2, u3)}}`)(e3, t3, n3, u2, c22, f2, e3[o2] ? "OrderedMap" : "Map") : e3["@@__IMMUTABLE_LIST__@@"] ? l(e3, t3, n3, u2, c22, f2, "List") : e3["@@__IMMUTABLE_SET__@@"] ? l(e3, t3, n3, u2, c22, f2, e3[o2] ? "OrderedSet" : "Set") : e3["@@__IMMUTABLE_STACK__@@"] ? l(e3, t3, n3, u2, c22, f2, "Stack") : e3["@@__IMMUTABLE_SEQ__@@"] ? ((e4, t4, n4, o3, l2, u3) => {
    const c3 = i2("Seq");
    return ++o3 > t4.maxDepth ? s2(c3) : e4["@@__IMMUTABLE_KEYED__@@"] ? `${c3 + a}{${e4._iter || e4._object ? (0, r2.printIteratorEntries)(e4.entries(), t4, n4, o3, l2, u3) : "…"}}` : `${c3 + a}[${e4._iter || e4._array || e4._collection || e4._iterable ? (0, r2.printIteratorValues)(e4.values(), t4, n4, o3, l2, u3) : "…"}]`;
  })(e3, t3, n3, u2, c22, f2) : ((e4, t4, n4, o3, l2, u3) => {
    const c3 = i2(e4._name || "Record");
    return ++o3 > t4.maxDepth ? s2(c3) : `${c3 + a}{${(0, r2.printIteratorEntries)(/* @__PURE__ */ (function(e5) {
      let t5 = 0;
      return { next() {
        if (t5 < e5._keys.length) {
          const n5 = e5._keys[t5++];
          return { done: false, value: [n5, e5.get(n5)] };
        }
        return { done: true, value: void 0 };
      } };
    })(e4), t4, n4, o3, l2, u3)}}`;
  })(e3, t3, n3, u2, c22, f2);
  t2.serialize = u;
  const c2 = (e3) => e3 && (true === e3["@@__IMMUTABLE_ITERABLE__@@"] || true === e3["@@__IMMUTABLE_RECORD__@@"]);
  t2.test = c2;
  var f = { serialize: u, test: c2 };
  t2.default = f;
}, "./node_modules/pretty-format/build/plugins/ReactElement.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = (function(e3, t3) {
    if (e3 && e3.__esModule) return e3;
    if (null === e3 || "object" != typeof e3 && "function" != typeof e3) return { default: e3 };
    var n3 = i2(t3);
    if (n3 && n3.has(e3)) return n3.get(e3);
    var r3 = {}, o3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var s22 in e3) if ("default" !== s22 && Object.prototype.hasOwnProperty.call(e3, s22)) {
      var a2 = o3 ? Object.getOwnPropertyDescriptor(e3, s22) : null;
      a2 && (a2.get || a2.set) ? Object.defineProperty(r3, s22, a2) : r3[s22] = e3[s22];
    }
    r3.default = e3, n3 && n3.set(e3, r3);
    return r3;
  })(n2("./node_modules/react-is/index.js")), o2 = n2("./node_modules/pretty-format/build/plugins/lib/markup.js");
  function i2(e3) {
    if ("function" != typeof WeakMap) return null;
    var t3 = /* @__PURE__ */ new WeakMap(), n3 = /* @__PURE__ */ new WeakMap();
    return (i2 = function(e4) {
      return e4 ? n3 : t3;
    })(e3);
  }
  const s2 = (e3, t3 = []) => (Array.isArray(e3) ? e3.forEach(((e4) => {
    s2(e4, t3);
  })) : null != e3 && false !== e3 && t3.push(e3), t3), a = (e3) => {
    const t3 = e3.type;
    if ("string" == typeof t3) return t3;
    if ("function" == typeof t3) return t3.displayName || t3.name || "Unknown";
    if (r2.isFragment(e3)) return "React.Fragment";
    if (r2.isSuspense(e3)) return "React.Suspense";
    if ("object" == typeof t3 && null !== t3) {
      if (r2.isContextProvider(e3)) return "Context.Provider";
      if (r2.isContextConsumer(e3)) return "Context.Consumer";
      if (r2.isForwardRef(e3)) {
        if (t3.displayName) return t3.displayName;
        const e4 = t3.render.displayName || t3.render.name || "";
        return "" !== e4 ? `ForwardRef(${e4})` : "ForwardRef";
      }
      if (r2.isMemo(e3)) {
        const e4 = t3.displayName || t3.type.displayName || t3.type.name || "";
        return "" !== e4 ? `Memo(${e4})` : "Memo";
      }
    }
    return "UNDEFINED";
  }, l = (e3, t3, n3, r3, i22, l2) => ++r3 > t3.maxDepth ? (0, o2.printElementAsLeaf)(a(e3), t3) : (0, o2.printElement)(a(e3), (0, o2.printProps)(((e4) => {
    const { props: t4 } = e4;
    return Object.keys(t4).filter(((e5) => "children" !== e5 && void 0 !== t4[e5])).sort();
  })(e3), e3.props, t3, n3 + t3.indent, r3, i22, l2), (0, o2.printChildren)(s2(e3.props.children), t3, n3 + t3.indent, r3, i22, l2), t3, n3);
  t2.serialize = l;
  const u = (e3) => null != e3 && r2.isElement(e3);
  t2.test = u;
  var c2 = { serialize: l, test: u };
  t2.default = c2;
}, "./node_modules/pretty-format/build/plugins/ReactTestComponent.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.test = t2.serialize = t2.default = void 0;
  var r2 = n2("./node_modules/pretty-format/build/plugins/lib/markup.js"), o2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol;
  const i2 = "function" == typeof o2 && o2.for ? o2.for("react.test.json") : 245830487, s2 = (e3, t3, n3, o3, i22, s22) => ++o3 > t3.maxDepth ? (0, r2.printElementAsLeaf)(e3.type, t3) : (0, r2.printElement)(e3.type, e3.props ? (0, r2.printProps)(((e4) => {
    const { props: t4 } = e4;
    return t4 ? Object.keys(t4).filter(((e5) => void 0 !== t4[e5])).sort() : [];
  })(e3), e3.props, t3, n3 + t3.indent, o3, i22, s22) : "", e3.children ? (0, r2.printChildren)(e3.children, t3, n3 + t3.indent, o3, i22, s22) : "", t3, n3);
  t2.serialize = s2;
  const a = (e3) => e3 && e3.$$typeof === i2;
  t2.test = a;
  var l = { serialize: s2, test: a };
  t2.default = l;
}, "./node_modules/pretty-format/build/plugins/lib/escapeHTML.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3) {
    return e3.replace(/</g, "&lt;").replace(/>/g, "&gt;");
  };
}, "./node_modules/pretty-format/build/plugins/lib/markup.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.printText = t2.printProps = t2.printElementAsLeaf = t2.printElement = t2.printComment = t2.printChildren = void 0;
  var r2, o2 = (r2 = n2("./node_modules/pretty-format/build/plugins/lib/escapeHTML.js")) && r2.__esModule ? r2 : { default: r2 };
  t2.printProps = (e3, t3, n3, r3, o3, i22, s2) => {
    const a = r3 + n3.indent, l = n3.colors;
    return e3.map(((e4) => {
      const u = t3[e4];
      let c2 = s2(u, n3, a, o3, i22);
      return "string" != typeof u && (-1 !== c2.indexOf("\n") && (c2 = n3.spacingOuter + a + c2 + n3.spacingOuter + r3), c2 = `{${c2}}`), `${n3.spacingInner + r3 + l.prop.open + e4 + l.prop.close}=${l.value.open}${c2}${l.value.close}`;
    })).join("");
  };
  t2.printChildren = (e3, t3, n3, r3, o3, s2) => e3.map(((e4) => t3.spacingOuter + n3 + ("string" == typeof e4 ? i2(e4, t3) : s2(e4, t3, n3, r3, o3)))).join("");
  const i2 = (e3, t3) => {
    const n3 = t3.colors.content;
    return n3.open + (0, o2.default)(e3) + n3.close;
  };
  t2.printText = i2;
  t2.printComment = (e3, t3) => {
    const n3 = t3.colors.comment;
    return `${n3.open}<!--${(0, o2.default)(e3)}-->${n3.close}`;
  };
  t2.printElement = (e3, t3, n3, r3, o3) => {
    const i22 = r3.colors.tag;
    return `${i22.open}<${e3}${t3 && i22.close + t3 + r3.spacingOuter + o3 + i22.open}${n3 ? `>${i22.close}${n3}${r3.spacingOuter}${o3}${i22.open}</${e3}` : (t3 && !r3.min ? "" : " ") + "/"}>${i22.close}`;
  };
  t2.printElementAsLeaf = (e3, t3) => {
    const n3 = t3.colors.tag;
    return `${n3.open}<${e3}${n3.close} …${n3.open} />${n3.close}`;
  };
}, "./node_modules/pretty-format/node_modules/ansi-styles/index.js": (e2, t2, n2) => {
  e2 = n2.nmd(e2);
  const r2 = (e3 = 0) => (t3) => `\x1B[${38 + e3};5;${t3}m`, o2 = (e3 = 0) => (t3, n3, r3) => `\x1B[${38 + e3};2;${t3};${n3};${r3}m`;
  Object.defineProperty(e2, "exports", { enumerable: true, get: function() {
    const e3 = /* @__PURE__ */ new Map(), t3 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
    t3.color.gray = t3.color.blackBright, t3.bgColor.bgGray = t3.bgColor.bgBlackBright, t3.color.grey = t3.color.blackBright, t3.bgColor.bgGrey = t3.bgColor.bgBlackBright;
    for (const [n3, r3] of Object.entries(t3)) {
      for (const [n4, o3] of Object.entries(r3)) t3[n4] = { open: `\x1B[${o3[0]}m`, close: `\x1B[${o3[1]}m` }, r3[n4] = t3[n4], e3.set(o3[0], o3[1]);
      Object.defineProperty(t3, n3, { value: r3, enumerable: false });
    }
    return Object.defineProperty(t3, "codes", { value: e3, enumerable: false }), t3.color.close = "\x1B[39m", t3.bgColor.close = "\x1B[49m", t3.color.ansi256 = r2(), t3.color.ansi16m = o2(), t3.bgColor.ansi256 = r2(10), t3.bgColor.ansi16m = o2(10), Object.defineProperties(t3, { rgbToAnsi256: { value: (e4, t4, n3) => e4 === t4 && t4 === n3 ? e4 < 8 ? 16 : e4 > 248 ? 231 : Math.round((e4 - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(e4 / 255 * 5) + 6 * Math.round(t4 / 255 * 5) + Math.round(n3 / 255 * 5), enumerable: false }, hexToRgb: { value: (e4) => {
      const t4 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(e4.toString(16));
      if (!t4) return [0, 0, 0];
      let { colorString: n3 } = t4.groups;
      3 === n3.length && (n3 = n3.split("").map(((e5) => e5 + e5)).join(""));
      const r3 = Number.parseInt(n3, 16);
      return [r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3];
    }, enumerable: false }, hexToAnsi256: { value: (e4) => t3.rgbToAnsi256(...t3.hexToRgb(e4)), enumerable: false } }), t3;
  } });
}, "./node_modules/process/browser.js": (e2) => {
  var t2, n2, r2 = e2.exports = {};
  function o2() {
    throw new Error("setTimeout has not been defined");
  }
  function i2() {
    throw new Error("clearTimeout has not been defined");
  }
  function s2(e3) {
    if (t2 === setTimeout) return setTimeout(e3, 0);
    if ((t2 === o2 || !t2) && setTimeout) return t2 = setTimeout, setTimeout(e3, 0);
    try {
      return t2(e3, 0);
    } catch (n3) {
      try {
        return t2.call(null, e3, 0);
      } catch (n4) {
        return t2.call(this, e3, 0);
      }
    }
  }
  !(function() {
    try {
      t2 = "function" == typeof setTimeout ? setTimeout : o2;
    } catch (e3) {
      t2 = o2;
    }
    try {
      n2 = "function" == typeof clearTimeout ? clearTimeout : i2;
    } catch (e3) {
      n2 = i2;
    }
  })();
  var a, l = [], u = false, c2 = -1;
  function f() {
    u && a && (u = false, a.length ? l = a.concat(l) : c2 = -1, l.length && p());
  }
  function p() {
    if (!u) {
      var e3 = s2(f);
      u = true;
      for (var t3 = l.length; t3; ) {
        for (a = l, l = []; ++c2 < t3; ) a && a[c2].run();
        c2 = -1, t3 = l.length;
      }
      a = null, u = false, (function(e4) {
        if (n2 === clearTimeout) return clearTimeout(e4);
        if ((n2 === i2 || !n2) && clearTimeout) return n2 = clearTimeout, clearTimeout(e4);
        try {
          return n2(e4);
        } catch (t4) {
          try {
            return n2.call(null, e4);
          } catch (t5) {
            return n2.call(this, e4);
          }
        }
      })(e3);
    }
  }
  function d(e3, t3) {
    this.fun = e3, this.array = t3;
  }
  function h() {
  }
  r2.nextTick = function(e3) {
    var t3 = new Array(arguments.length - 1);
    if (arguments.length > 1) for (var n3 = 1; n3 < arguments.length; n3++) t3[n3 - 1] = arguments[n3];
    l.push(new d(e3, t3)), 1 !== l.length || u || s2(p);
  }, d.prototype.run = function() {
    this.fun.apply(null, this.array);
  }, r2.title = "browser", r2.browser = true, r2.env = {}, r2.argv = [], r2.version = "", r2.versions = {}, r2.on = h, r2.addListener = h, r2.once = h, r2.off = h, r2.removeListener = h, r2.removeAllListeners = h, r2.emit = h, r2.prependListener = h, r2.prependOnceListener = h, r2.listeners = function(e3) {
    return [];
  }, r2.binding = function(e3) {
    throw new Error("process.binding is not supported");
  }, r2.cwd = function() {
    return "/";
  }, r2.chdir = function(e3) {
    throw new Error("process.chdir is not supported");
  }, r2.umask = function() {
    return 0;
  };
}, "./node_modules/querystring/decode.js": (e2) => {
  function t2(e3, t3) {
    return Object.prototype.hasOwnProperty.call(e3, t3);
  }
  e2.exports = function(e3, n2, r2, o2) {
    n2 = n2 || "&", r2 = r2 || "=";
    var i2 = {};
    if ("string" != typeof e3 || 0 === e3.length) return i2;
    var s2 = /\+/g;
    e3 = e3.split(n2);
    var a = 1e3;
    o2 && "number" == typeof o2.maxKeys && (a = o2.maxKeys);
    var l = e3.length;
    a > 0 && l > a && (l = a);
    for (var u = 0; u < l; ++u) {
      var c2, f, p, d, h = e3[u].replace(s2, "%20"), g = h.indexOf(r2);
      g >= 0 ? (c2 = h.substr(0, g), f = h.substr(g + 1)) : (c2 = h, f = ""), p = decodeURIComponent(c2), d = decodeURIComponent(f), t2(i2, p) ? Array.isArray(i2[p]) ? i2[p].push(d) : i2[p] = [i2[p], d] : i2[p] = d;
    }
    return i2;
  };
}, "./node_modules/querystring/encode.js": (e2) => {
  var t2 = function(e3) {
    switch (typeof e3) {
      case "string":
        return e3;
      case "boolean":
        return e3 ? "true" : "false";
      case "number":
        return isFinite(e3) ? e3 : "";
      default:
        return "";
    }
  };
  e2.exports = function(e3, n2, r2, o2) {
    return n2 = n2 || "&", r2 = r2 || "=", null === e3 && (e3 = void 0), "object" == typeof e3 ? Object.keys(e3).map((function(o3) {
      var i2 = encodeURIComponent(t2(o3)) + r2;
      return Array.isArray(e3[o3]) ? e3[o3].map((function(e4) {
        return i2 + encodeURIComponent(t2(e4));
      })).join(n2) : i2 + encodeURIComponent(t2(e3[o3]));
    })).join(n2) : o2 ? encodeURIComponent(t2(o2)) + r2 + encodeURIComponent(t2(e3)) : "";
  };
}, "./node_modules/querystring/index.js": (e2, t2, n2) => {
  t2.decode = t2.parse = n2("./node_modules/querystring/decode.js"), t2.encode = t2.stringify = n2("./node_modules/querystring/encode.js");
}, "./node_modules/react-is/cjs/react-is.production.min.js": (e2, t2) => {
  var n2, r2 = Symbol.for("react.element"), o2 = Symbol.for("react.portal"), i2 = Symbol.for("react.fragment"), s2 = Symbol.for("react.strict_mode"), a = Symbol.for("react.profiler"), l = Symbol.for("react.provider"), u = Symbol.for("react.context"), c2 = Symbol.for("react.server_context"), f = Symbol.for("react.forward_ref"), p = Symbol.for("react.suspense"), d = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), g = Symbol.for("react.lazy"), m2 = Symbol.for("react.offscreen");
  function y(e3) {
    if ("object" == typeof e3 && null !== e3) {
      var t3 = e3.$$typeof;
      switch (t3) {
        case r2:
          switch (e3 = e3.type) {
            case i2:
            case a:
            case s2:
            case p:
            case d:
              return e3;
            default:
              switch (e3 = e3 && e3.$$typeof) {
                case c2:
                case u:
                case f:
                case g:
                case h:
                case l:
                  return e3;
                default:
                  return t3;
              }
          }
        case o2:
          return t3;
      }
    }
  }
  n2 = Symbol.for("react.module.reference"), t2.ContextConsumer = u, t2.ContextProvider = l, t2.Element = r2, t2.ForwardRef = f, t2.Fragment = i2, t2.Lazy = g, t2.Memo = h, t2.Portal = o2, t2.Profiler = a, t2.StrictMode = s2, t2.Suspense = p, t2.SuspenseList = d, t2.isAsyncMode = function() {
    return false;
  }, t2.isConcurrentMode = function() {
    return false;
  }, t2.isContextConsumer = function(e3) {
    return y(e3) === u;
  }, t2.isContextProvider = function(e3) {
    return y(e3) === l;
  }, t2.isElement = function(e3) {
    return "object" == typeof e3 && null !== e3 && e3.$$typeof === r2;
  }, t2.isForwardRef = function(e3) {
    return y(e3) === f;
  }, t2.isFragment = function(e3) {
    return y(e3) === i2;
  }, t2.isLazy = function(e3) {
    return y(e3) === g;
  }, t2.isMemo = function(e3) {
    return y(e3) === h;
  }, t2.isPortal = function(e3) {
    return y(e3) === o2;
  }, t2.isProfiler = function(e3) {
    return y(e3) === a;
  }, t2.isStrictMode = function(e3) {
    return y(e3) === s2;
  }, t2.isSuspense = function(e3) {
    return y(e3) === p;
  }, t2.isSuspenseList = function(e3) {
    return y(e3) === d;
  }, t2.isValidElementType = function(e3) {
    return "string" == typeof e3 || "function" == typeof e3 || e3 === i2 || e3 === a || e3 === s2 || e3 === p || e3 === d || e3 === m2 || "object" == typeof e3 && null !== e3 && (e3.$$typeof === g || e3.$$typeof === h || e3.$$typeof === l || e3.$$typeof === u || e3.$$typeof === f || e3.$$typeof === n2 || void 0 !== e3.getModuleId);
  }, t2.typeOf = y;
}, "./node_modules/react-is/index.js": (e2, t2, n2) => {
  e2.exports = n2("./node_modules/react-is/cjs/react-is.production.min.js");
}, "./node_modules/slash/index.js": (e2) => {
  e2.exports = (e3) => {
    const t2 = /^\\\\\?\\/.test(e3), n2 = /[^\u0000-\u0080]+/.test(e3);
    return t2 || n2 ? e3 : e3.replace(/\\/g, "/");
  };
}, "./node_modules/stack-utils/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js");
  const o2 = n2("./node_modules/stack-utils/node_modules/escape-string-regexp/index.js"), i2 = "object" == typeof r2 && r2 && "function" == typeof r2.cwd ? r2.cwd() : ".", s2 = [].concat(n2("?b420").builtinModules, "bootstrap_node", "node").map(((e3) => new RegExp(`(?:\\((?:node:)?${e3}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${e3}(?:\\.js)?:\\d+:\\d+$)`)));
  s2.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
  class a {
    constructor(e3) {
      "internals" in (e3 = { ignoredPackages: [], ...e3 }) == false && (e3.internals = a.nodeInternals()), "cwd" in e3 == false && (e3.cwd = i2), this._cwd = e3.cwd.replace(/\\/g, "/"), this._internals = [].concat(e3.internals, (function(e4) {
        if (0 === e4.length) return [];
        const t3 = e4.map(((e5) => o2(e5)));
        return new RegExp(`[/\\\\]node_modules[/\\\\](?:${t3.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
      })(e3.ignoredPackages)), this._wrapCallSite = e3.wrapCallSite || false;
    }
    static nodeInternals() {
      return [...s2];
    }
    clean(e3, t3 = 0) {
      t3 = " ".repeat(t3), Array.isArray(e3) || (e3 = e3.split("\n")), !/^\s*at /.test(e3[0]) && /^\s*at /.test(e3[1]) && (e3 = e3.slice(1));
      let n3 = false, r3 = null;
      const o3 = [];
      return e3.forEach(((e4) => {
        if (e4 = e4.replace(/\\/g, "/"), this._internals.some(((t5) => t5.test(e4)))) return;
        const t4 = /^\s*at /.test(e4);
        n3 ? e4 = e4.trimEnd().replace(/^(\s+)at /, "$1") : (e4 = e4.trim(), t4 && (e4 = e4.slice(3))), (e4 = e4.replace(`${this._cwd}/`, "")) && (t4 ? (r3 && (o3.push(r3), r3 = null), o3.push(e4)) : (n3 = true, r3 = e4));
      })), o3.map(((e4) => `${t3}${e4}
`)).join("");
    }
    captureString(e3, t3 = this.captureString) {
      "function" == typeof e3 && (t3 = e3, e3 = 1 / 0);
      const { stackTraceLimit: n3 } = Error;
      e3 && (Error.stackTraceLimit = e3);
      const r3 = {};
      Error.captureStackTrace(r3, t3);
      const { stack: o3 } = r3;
      return Error.stackTraceLimit = n3, this.clean(o3);
    }
    capture(e3, t3 = this.capture) {
      "function" == typeof e3 && (t3 = e3, e3 = 1 / 0);
      const { prepareStackTrace: n3, stackTraceLimit: r3 } = Error;
      Error.prepareStackTrace = (e4, t4) => this._wrapCallSite ? t4.map(this._wrapCallSite) : t4, e3 && (Error.stackTraceLimit = e3);
      const o3 = {};
      Error.captureStackTrace(o3, t3);
      const { stack: i22 } = o3;
      return Object.assign(Error, { prepareStackTrace: n3, stackTraceLimit: r3 }), i22;
    }
    at(e3 = this.at) {
      const [t3] = this.capture(1, e3);
      if (!t3) return {};
      const n3 = { line: t3.getLineNumber(), column: t3.getColumnNumber() };
      let r3;
      l(n3, t3.getFileName(), this._cwd), t3.isConstructor() && Object.defineProperty(n3, "constructor", { value: true, configurable: true }), t3.isEval() && (n3.evalOrigin = t3.getEvalOrigin()), t3.isNative() && (n3.native = true);
      try {
        r3 = t3.getTypeName();
      } catch (e4) {
      }
      r3 && "Object" !== r3 && "[object Object]" !== r3 && (n3.type = r3);
      const o3 = t3.getFunctionName();
      o3 && (n3.function = o3);
      const i22 = t3.getMethodName();
      return i22 && o3 !== i22 && (n3.method = i22), n3;
    }
    parseLine(e3) {
      const t3 = e3 && e3.match(u);
      if (!t3) return null;
      const n3 = "new" === t3[1];
      let r3 = t3[2];
      const o3 = t3[3], i22 = t3[4], s22 = Number(t3[5]), a2 = Number(t3[6]);
      let f = t3[7];
      const p = t3[8], d = t3[9], h = "native" === t3[10], g = ")" === t3[11];
      let m2;
      const y = {};
      if (p && (y.line = Number(p)), d && (y.column = Number(d)), g && f) {
        let e4 = 0;
        for (let t4 = f.length - 1; t4 > 0; t4--) if (")" === f.charAt(t4)) e4++;
        else if ("(" === f.charAt(t4) && " " === f.charAt(t4 - 1) && (e4--, -1 === e4 && " " === f.charAt(t4 - 1))) {
          const e5 = f.slice(0, t4 - 1), n4 = f.slice(t4 + 1);
          f = n4, r3 += ` (${e5}`;
          break;
        }
      }
      if (r3) {
        const e4 = r3.match(c2);
        e4 && (r3 = e4[1], m2 = e4[2]);
      }
      return l(y, f, this._cwd), n3 && Object.defineProperty(y, "constructor", { value: true, configurable: true }), o3 && (y.evalOrigin = o3, y.evalLine = s22, y.evalColumn = a2, y.evalFile = i22 && i22.replace(/\\/g, "/")), h && (y.native = true), r3 && (y.function = r3), m2 && r3 !== m2 && (y.method = m2), y;
    }
  }
  function l(e3, t3, n3) {
    t3 && ((t3 = t3.replace(/\\/g, "/")).startsWith(`${n3}/`) && (t3 = t3.slice(n3.length + 1)), e3.file = t3);
  }
  const u = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"), c2 = /^(.*?) \[as (.*?)\]$/;
  e2.exports = a;
}, "./node_modules/stack-utils/node_modules/escape-string-regexp/index.js": (e2) => {
  const t2 = /[|\\{}()[\]^$+*?.-]/g;
  e2.exports = (e3) => {
    if ("string" != typeof e3) throw new TypeError("Expected a string");
    return e3.replace(t2, "\\$&");
  };
}, "./node_modules/supports-color/browser.js": (e2) => {
  e2.exports = { stdout: false, stderr: false };
}, "./node_modules/to-regex-range/index.js": (e2, t2, n2) => {
  const r2 = n2("./node_modules/is-number/index.js"), o2 = (e3, t3, n3) => {
    if (false === r2(e3)) throw new TypeError("toRegexRange: expected the first argument to be a number");
    if (void 0 === t3 || e3 === t3) return String(e3);
    if (false === r2(t3)) throw new TypeError("toRegexRange: expected the second argument to be a number.");
    let i22 = { relaxZeros: true, ...n3 };
    "boolean" == typeof i22.strictZeros && (i22.relaxZeros = false === i22.strictZeros);
    let l2 = e3 + ":" + t3 + "=" + String(i22.relaxZeros) + String(i22.shorthand) + String(i22.capture) + String(i22.wrap);
    if (o2.cache.hasOwnProperty(l2)) return o2.cache[l2].result;
    let u2 = Math.min(e3, t3), c22 = Math.max(e3, t3);
    if (1 === Math.abs(u2 - c22)) {
      let n4 = e3 + "|" + t3;
      return i22.capture ? `(${n4})` : false === i22.wrap ? n4 : `(?:${n4})`;
    }
    let f2 = h(e3) || h(t3), p2 = { min: e3, max: t3, a: u2, b: c22 }, d2 = [], g2 = [];
    if (f2 && (p2.isPadded = f2, p2.maxLen = String(p2.max).length), u2 < 0) {
      g2 = s2(c22 < 0 ? Math.abs(c22) : 1, Math.abs(u2), p2, i22), u2 = p2.a = 0;
    }
    return c22 >= 0 && (d2 = s2(u2, c22, p2, i22)), p2.negatives = g2, p2.positives = d2, p2.result = (function(e4, t4, n4) {
      let r3 = a(e4, t4, "-", false) || [], o3 = a(t4, e4, "", false) || [], i3 = a(e4, t4, "-?", true) || [];
      return r3.concat(i3).concat(o3).join("|");
    })(g2, d2), true === i22.capture ? p2.result = `(${p2.result})` : false !== i22.wrap && d2.length + g2.length > 1 && (p2.result = `(?:${p2.result})`), o2.cache[l2] = p2, p2.result;
  };
  function i2(e3, t3, n3) {
    if (e3 === t3) return { pattern: e3, count: [], digits: 0 };
    let r3 = (function(e4, t4) {
      let n4 = [];
      for (let r4 = 0; r4 < e4.length; r4++) n4.push([e4[r4], t4[r4]]);
      return n4;
    })(e3, t3), o3 = r3.length, i22 = "", s22 = 0;
    for (let e4 = 0; e4 < o3; e4++) {
      let [t4, o4] = r3[e4];
      t4 === o4 ? i22 += t4 : "0" !== t4 || "9" !== o4 ? i22 += d(t4, o4) : s22++;
    }
    return s22 && (i22 += true === n3.shorthand ? "\\d" : "[0-9]"), { pattern: i22, count: [s22], digits: o3 };
  }
  function s2(e3, t3, n3, r3) {
    let o3, s22 = (function(e4, t4) {
      let n4 = 1, r4 = 1, o4 = c2(e4, n4), i22 = /* @__PURE__ */ new Set([t4]);
      for (; e4 <= o4 && o4 <= t4; ) i22.add(o4), n4 += 1, o4 = c2(e4, n4);
      for (o4 = f(t4 + 1, r4) - 1; e4 < o4 && o4 <= t4; ) i22.add(o4), r4 += 1, o4 = f(t4 + 1, r4) - 1;
      return i22 = [...i22], i22.sort(l), i22;
    })(e3, t3), a2 = [], u2 = e3;
    for (let e4 = 0; e4 < s22.length; e4++) {
      let t4 = s22[e4], l2 = i2(String(u2), String(t4), r3), c22 = "";
      n3.isPadded || !o3 || o3.pattern !== l2.pattern ? (n3.isPadded && (c22 = g(t4, n3, r3)), l2.string = c22 + l2.pattern + p(l2.count), a2.push(l2), u2 = t4 + 1, o3 = l2) : (o3.count.length > 1 && o3.count.pop(), o3.count.push(l2.count[0]), o3.string = o3.pattern + p(o3.count), u2 = t4 + 1);
    }
    return a2;
  }
  function a(e3, t3, n3, r3, o3) {
    let i22 = [];
    for (let o4 of e3) {
      let { string: e4 } = o4;
      r3 || u(t3, "string", e4) || i22.push(n3 + e4), r3 && u(t3, "string", e4) && i22.push(n3 + e4);
    }
    return i22;
  }
  function l(e3, t3) {
    return e3 > t3 ? 1 : t3 > e3 ? -1 : 0;
  }
  function u(e3, t3, n3) {
    return e3.some(((e4) => e4[t3] === n3));
  }
  function c2(e3, t3) {
    return Number(String(e3).slice(0, -t3) + "9".repeat(t3));
  }
  function f(e3, t3) {
    return e3 - e3 % Math.pow(10, t3);
  }
  function p(e3) {
    let [t3 = 0, n3 = ""] = e3;
    return n3 || t3 > 1 ? `{${t3 + (n3 ? "," + n3 : "")}}` : "";
  }
  function d(e3, t3, n3) {
    return `[${e3}${t3 - e3 == 1 ? "" : "-"}${t3}]`;
  }
  function h(e3) {
    return /^-?(0+)\d/.test(e3);
  }
  function g(e3, t3, n3) {
    if (!t3.isPadded) return e3;
    let r3 = Math.abs(t3.maxLen - String(e3).length), o3 = false !== n3.relaxZeros;
    switch (r3) {
      case 0:
        return "";
      case 1:
        return o3 ? "0?" : "0";
      case 2:
        return o3 ? "0{0,2}" : "00";
      default:
        return o3 ? `0{0,${r3}}` : `0{${r3}}`;
    }
  }
  o2.cache = {}, o2.clearCache = () => o2.cache = {}, e2.exports = o2;
}, "./node_modules/url/node_modules/punycode/punycode.js": function(e2, t2, n2) {
  var r2;
  e2 = n2.nmd(e2), (function(o2) {
    t2 && t2.nodeType, e2 && e2.nodeType;
    var i2 = "object" == typeof n2.g && n2.g;
    i2.global !== i2 && i2.window !== i2 && i2.self;
    var s2, a = 2147483647, l = 36, u = 1, c2 = 26, f = 38, p = 700, d = 72, h = 128, g = "-", m2 = /^xn--/, y = /[^\x20-\x7E]/, b = /[\x2E\u3002\uFF0E\uFF61]/g, v = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, E = l - u, j = Math.floor, _ = String.fromCharCode;
    function w(e3) {
      throw RangeError(v[e3]);
    }
    function x(e3, t3) {
      for (var n3 = e3.length, r3 = []; n3--; ) r3[n3] = t3(e3[n3]);
      return r3;
    }
    function O(e3, t3) {
      var n3 = e3.split("@"), r3 = "";
      return n3.length > 1 && (r3 = n3[0] + "@", e3 = n3[1]), r3 + x((e3 = e3.replace(b, ".")).split("."), t3).join(".");
    }
    function R(e3) {
      for (var t3, n3, r3 = [], o3 = 0, i22 = e3.length; o3 < i22; ) (t3 = e3.charCodeAt(o3++)) >= 55296 && t3 <= 56319 && o3 < i22 ? 56320 == (64512 & (n3 = e3.charCodeAt(o3++))) ? r3.push(((1023 & t3) << 10) + (1023 & n3) + 65536) : (r3.push(t3), o3--) : r3.push(t3);
      return r3;
    }
    function A(e3) {
      return x(e3, (function(e4) {
        var t3 = "";
        return e4 > 65535 && (t3 += _((e4 -= 65536) >>> 10 & 1023 | 55296), e4 = 56320 | 1023 & e4), t3 += _(e4);
      })).join("");
    }
    function S(e3, t3) {
      return e3 + 22 + 75 * (e3 < 26) - ((0 != t3) << 5);
    }
    function C(e3, t3, n3) {
      var r3 = 0;
      for (e3 = n3 ? j(e3 / p) : e3 >> 1, e3 += j(e3 / t3); e3 > E * c2 >> 1; r3 += l) e3 = j(e3 / E);
      return j(r3 + (E + 1) * e3 / (e3 + f));
    }
    function $(e3) {
      var t3, n3, r3, o3, i22, s22, f2, p2, m22, y2, b2, v2 = [], E2 = e3.length, _2 = 0, x2 = h, O2 = d;
      for ((n3 = e3.lastIndexOf(g)) < 0 && (n3 = 0), r3 = 0; r3 < n3; ++r3) e3.charCodeAt(r3) >= 128 && w("not-basic"), v2.push(e3.charCodeAt(r3));
      for (o3 = n3 > 0 ? n3 + 1 : 0; o3 < E2; ) {
        for (i22 = _2, s22 = 1, f2 = l; o3 >= E2 && w("invalid-input"), ((p2 = (b2 = e3.charCodeAt(o3++)) - 48 < 10 ? b2 - 22 : b2 - 65 < 26 ? b2 - 65 : b2 - 97 < 26 ? b2 - 97 : l) >= l || p2 > j((a - _2) / s22)) && w("overflow"), _2 += p2 * s22, !(p2 < (m22 = f2 <= O2 ? u : f2 >= O2 + c2 ? c2 : f2 - O2)); f2 += l) s22 > j(a / (y2 = l - m22)) && w("overflow"), s22 *= y2;
        O2 = C(_2 - i22, t3 = v2.length + 1, 0 == i22), j(_2 / t3) > a - x2 && w("overflow"), x2 += j(_2 / t3), _2 %= t3, v2.splice(_2++, 0, x2);
      }
      return A(v2);
    }
    function T(e3) {
      var t3, n3, r3, o3, i22, s22, f2, p2, m22, y2, b2, v2, E2, x2, O2, A2 = [];
      for (v2 = (e3 = R(e3)).length, t3 = h, n3 = 0, i22 = d, s22 = 0; s22 < v2; ++s22) (b2 = e3[s22]) < 128 && A2.push(_(b2));
      for (r3 = o3 = A2.length, o3 && A2.push(g); r3 < v2; ) {
        for (f2 = a, s22 = 0; s22 < v2; ++s22) (b2 = e3[s22]) >= t3 && b2 < f2 && (f2 = b2);
        for (f2 - t3 > j((a - n3) / (E2 = r3 + 1)) && w("overflow"), n3 += (f2 - t3) * E2, t3 = f2, s22 = 0; s22 < v2; ++s22) if ((b2 = e3[s22]) < t3 && ++n3 > a && w("overflow"), b2 == t3) {
          for (p2 = n3, m22 = l; !(p2 < (y2 = m22 <= i22 ? u : m22 >= i22 + c2 ? c2 : m22 - i22)); m22 += l) O2 = p2 - y2, x2 = l - y2, A2.push(_(S(y2 + O2 % x2, 0))), p2 = j(O2 / x2);
          A2.push(_(S(p2, 0))), i22 = C(n3, E2, r3 == o3), n3 = 0, ++r3;
        }
        ++n3, ++t3;
      }
      return A2.join("");
    }
    s2 = { version: "1.3.2", ucs2: { decode: R, encode: A }, decode: $, encode: T, toASCII: function(e3) {
      return O(e3, (function(e4) {
        return y.test(e4) ? "xn--" + T(e4) : e4;
      }));
    }, toUnicode: function(e3) {
      return O(e3, (function(e4) {
        return m2.test(e4) ? $(e4.slice(4).toLowerCase()) : e4;
      }));
    } }, void 0 === (r2 = function() {
      return s2;
    }.call(t2, n2, t2, e2)) || (e2.exports = r2);
  })();
}, "./node_modules/url/url.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/url/node_modules/punycode/punycode.js"), o2 = n2("./node_modules/url/util.js");
  function i2() {
    this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
  }
  t2.parse = v, t2.resolve = function(e3, t3) {
    return v(e3, false, true).resolve(t3);
  }, t2.resolveObject = function(e3, t3) {
    return e3 ? v(e3, false, true).resolveObject(t3) : t3;
  }, t2.format = function(e3) {
    o2.isString(e3) && (e3 = v(e3));
    return e3 instanceof i2 ? e3.format() : i2.prototype.format.call(e3);
  }, t2.Url = i2;
  var s2 = /^([a-z0-9.+-]+:)/i, a = /:[0-9]*$/, l = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, u = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), c2 = ["'"].concat(u), f = ["%", "/", "?", ";", "#"].concat(c2), p = ["/", "?", "#"], d = /^[+a-z0-9A-Z_-]{0,63}$/, h = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, g = { javascript: true, "javascript:": true }, m2 = { javascript: true, "javascript:": true }, y = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, b = n2("./node_modules/querystring/index.js");
  function v(e3, t3, n3) {
    if (e3 && o2.isObject(e3) && e3 instanceof i2) return e3;
    var r3 = new i2();
    return r3.parse(e3, t3, n3), r3;
  }
  i2.prototype.parse = function(e3, t3, n3) {
    if (!o2.isString(e3)) throw new TypeError("Parameter 'url' must be a string, not " + typeof e3);
    var i22 = e3.indexOf("?"), a2 = -1 !== i22 && i22 < e3.indexOf("#") ? "?" : "#", u2 = e3.split(a2);
    u2[0] = u2[0].replace(/\\/g, "/");
    var v2 = e3 = u2.join(a2);
    if (v2 = v2.trim(), !n3 && 1 === e3.split("#").length) {
      var E = l.exec(v2);
      if (E) return this.path = v2, this.href = v2, this.pathname = E[1], E[2] ? (this.search = E[2], this.query = t3 ? b.parse(this.search.substr(1)) : this.search.substr(1)) : t3 && (this.search = "", this.query = {}), this;
    }
    var j = s2.exec(v2);
    if (j) {
      var _ = (j = j[0]).toLowerCase();
      this.protocol = _, v2 = v2.substr(j.length);
    }
    if (n3 || j || v2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var w = "//" === v2.substr(0, 2);
      !w || j && m2[j] || (v2 = v2.substr(2), this.slashes = true);
    }
    if (!m2[j] && (w || j && !y[j])) {
      for (var x, O, R = -1, A = 0; A < p.length; A++) {
        -1 !== (S = v2.indexOf(p[A])) && (-1 === R || S < R) && (R = S);
      }
      -1 !== (O = -1 === R ? v2.lastIndexOf("@") : v2.lastIndexOf("@", R)) && (x = v2.slice(0, O), v2 = v2.slice(O + 1), this.auth = decodeURIComponent(x)), R = -1;
      for (A = 0; A < f.length; A++) {
        var S;
        -1 !== (S = v2.indexOf(f[A])) && (-1 === R || S < R) && (R = S);
      }
      -1 === R && (R = v2.length), this.host = v2.slice(0, R), v2 = v2.slice(R), this.parseHost(), this.hostname = this.hostname || "";
      var C = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
      if (!C) for (var $ = this.hostname.split(/\./), T = (A = 0, $.length); A < T; A++) {
        var M = $[A];
        if (M && !M.match(d)) {
          for (var I = "", P = 0, k = M.length; P < k; P++) M.charCodeAt(P) > 127 ? I += "x" : I += M[P];
          if (!I.match(d)) {
            var N = $.slice(0, A), L = $.slice(A + 1), D = M.match(h);
            D && (N.push(D[1]), L.unshift(D[2])), L.length && (v2 = "/" + L.join(".") + v2), this.hostname = N.join(".");
            break;
          }
        }
      }
      this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), C || (this.hostname = r2.toASCII(this.hostname));
      var B = this.port ? ":" + this.port : "", U = this.hostname || "";
      this.host = U + B, this.href += this.host, C && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== v2[0] && (v2 = "/" + v2));
    }
    if (!g[_]) for (A = 0, T = c2.length; A < T; A++) {
      var F = c2[A];
      if (-1 !== v2.indexOf(F)) {
        var H = encodeURIComponent(F);
        H === F && (H = escape(F)), v2 = v2.split(F).join(H);
      }
    }
    var q = v2.indexOf("#");
    -1 !== q && (this.hash = v2.substr(q), v2 = v2.slice(0, q));
    var W = v2.indexOf("?");
    if (-1 !== W ? (this.search = v2.substr(W), this.query = v2.substr(W + 1), t3 && (this.query = b.parse(this.query)), v2 = v2.slice(0, W)) : t3 && (this.search = "", this.query = {}), v2 && (this.pathname = v2), y[_] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
      B = this.pathname || "";
      var G = this.search || "";
      this.path = B + G;
    }
    return this.href = this.format(), this;
  }, i2.prototype.format = function() {
    var e3 = this.auth || "";
    e3 && (e3 = (e3 = encodeURIComponent(e3)).replace(/%3A/i, ":"), e3 += "@");
    var t3 = this.protocol || "", n3 = this.pathname || "", r3 = this.hash || "", i22 = false, s22 = "";
    this.host ? i22 = e3 + this.host : this.hostname && (i22 = e3 + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (i22 += ":" + this.port)), this.query && o2.isObject(this.query) && Object.keys(this.query).length && (s22 = b.stringify(this.query));
    var a2 = this.search || s22 && "?" + s22 || "";
    return t3 && ":" !== t3.substr(-1) && (t3 += ":"), this.slashes || (!t3 || y[t3]) && false !== i22 ? (i22 = "//" + (i22 || ""), n3 && "/" !== n3.charAt(0) && (n3 = "/" + n3)) : i22 || (i22 = ""), r3 && "#" !== r3.charAt(0) && (r3 = "#" + r3), a2 && "?" !== a2.charAt(0) && (a2 = "?" + a2), t3 + i22 + (n3 = n3.replace(/[?#]/g, (function(e4) {
      return encodeURIComponent(e4);
    }))) + (a2 = a2.replace("#", "%23")) + r3;
  }, i2.prototype.resolve = function(e3) {
    return this.resolveObject(v(e3, false, true)).format();
  }, i2.prototype.resolveObject = function(e3) {
    if (o2.isString(e3)) {
      var t3 = new i2();
      t3.parse(e3, false, true), e3 = t3;
    }
    for (var n3 = new i2(), r3 = Object.keys(this), s22 = 0; s22 < r3.length; s22++) {
      var a2 = r3[s22];
      n3[a2] = this[a2];
    }
    if (n3.hash = e3.hash, "" === e3.href) return n3.href = n3.format(), n3;
    if (e3.slashes && !e3.protocol) {
      for (var l2 = Object.keys(e3), u2 = 0; u2 < l2.length; u2++) {
        var c22 = l2[u2];
        "protocol" !== c22 && (n3[c22] = e3[c22]);
      }
      return y[n3.protocol] && n3.hostname && !n3.pathname && (n3.path = n3.pathname = "/"), n3.href = n3.format(), n3;
    }
    if (e3.protocol && e3.protocol !== n3.protocol) {
      if (!y[e3.protocol]) {
        for (var f2 = Object.keys(e3), p2 = 0; p2 < f2.length; p2++) {
          var d2 = f2[p2];
          n3[d2] = e3[d2];
        }
        return n3.href = n3.format(), n3;
      }
      if (n3.protocol = e3.protocol, e3.host || m2[e3.protocol]) n3.pathname = e3.pathname;
      else {
        for (var h2 = (e3.pathname || "").split("/"); h2.length && !(e3.host = h2.shift()); ) ;
        e3.host || (e3.host = ""), e3.hostname || (e3.hostname = ""), "" !== h2[0] && h2.unshift(""), h2.length < 2 && h2.unshift(""), n3.pathname = h2.join("/");
      }
      if (n3.search = e3.search, n3.query = e3.query, n3.host = e3.host || "", n3.auth = e3.auth, n3.hostname = e3.hostname || e3.host, n3.port = e3.port, n3.pathname || n3.search) {
        var g2 = n3.pathname || "", b2 = n3.search || "";
        n3.path = g2 + b2;
      }
      return n3.slashes = n3.slashes || e3.slashes, n3.href = n3.format(), n3;
    }
    var v2 = n3.pathname && "/" === n3.pathname.charAt(0), E = e3.host || e3.pathname && "/" === e3.pathname.charAt(0), j = E || v2 || n3.host && e3.pathname, _ = j, w = n3.pathname && n3.pathname.split("/") || [], x = (h2 = e3.pathname && e3.pathname.split("/") || [], n3.protocol && !y[n3.protocol]);
    if (x && (n3.hostname = "", n3.port = null, n3.host && ("" === w[0] ? w[0] = n3.host : w.unshift(n3.host)), n3.host = "", e3.protocol && (e3.hostname = null, e3.port = null, e3.host && ("" === h2[0] ? h2[0] = e3.host : h2.unshift(e3.host)), e3.host = null), j = j && ("" === h2[0] || "" === w[0])), E) n3.host = e3.host || "" === e3.host ? e3.host : n3.host, n3.hostname = e3.hostname || "" === e3.hostname ? e3.hostname : n3.hostname, n3.search = e3.search, n3.query = e3.query, w = h2;
    else if (h2.length) w || (w = []), w.pop(), w = w.concat(h2), n3.search = e3.search, n3.query = e3.query;
    else if (!o2.isNullOrUndefined(e3.search)) {
      if (x) n3.hostname = n3.host = w.shift(), (C = !!(n3.host && n3.host.indexOf("@") > 0) && n3.host.split("@")) && (n3.auth = C.shift(), n3.host = n3.hostname = C.shift());
      return n3.search = e3.search, n3.query = e3.query, o2.isNull(n3.pathname) && o2.isNull(n3.search) || (n3.path = (n3.pathname ? n3.pathname : "") + (n3.search ? n3.search : "")), n3.href = n3.format(), n3;
    }
    if (!w.length) return n3.pathname = null, n3.search ? n3.path = "/" + n3.search : n3.path = null, n3.href = n3.format(), n3;
    for (var O = w.slice(-1)[0], R = (n3.host || e3.host || w.length > 1) && ("." === O || ".." === O) || "" === O, A = 0, S = w.length; S >= 0; S--) "." === (O = w[S]) ? w.splice(S, 1) : ".." === O ? (w.splice(S, 1), A++) : A && (w.splice(S, 1), A--);
    if (!j && !_) for (; A--; A) w.unshift("..");
    !j || "" === w[0] || w[0] && "/" === w[0].charAt(0) || w.unshift(""), R && "/" !== w.join("/").substr(-1) && w.push("");
    var C, $ = "" === w[0] || w[0] && "/" === w[0].charAt(0);
    x && (n3.hostname = n3.host = $ ? "" : w.length ? w.shift() : "", (C = !!(n3.host && n3.host.indexOf("@") > 0) && n3.host.split("@")) && (n3.auth = C.shift(), n3.host = n3.hostname = C.shift()));
    return (j = j || n3.host && w.length) && !$ && w.unshift(""), w.length ? n3.pathname = w.join("/") : (n3.pathname = null, n3.path = null), o2.isNull(n3.pathname) && o2.isNull(n3.search) || (n3.path = (n3.pathname ? n3.pathname : "") + (n3.search ? n3.search : "")), n3.auth = e3.auth || n3.auth, n3.slashes = n3.slashes || e3.slashes, n3.href = n3.format(), n3;
  }, i2.prototype.parseHost = function() {
    var e3 = this.host, t3 = a.exec(e3);
    t3 && (":" !== (t3 = t3[0]) && (this.port = t3.substr(1)), e3 = e3.substr(0, e3.length - t3.length)), e3 && (this.hostname = e3);
  };
}, "./node_modules/url/util.js": (e2) => {
  e2.exports = { isString: function(e3) {
    return "string" == typeof e3;
  }, isObject: function(e3) {
    return "object" == typeof e3 && null !== e3;
  }, isNull: function(e3) {
    return null === e3;
  }, isNullOrUndefined: function(e3) {
    return null == e3;
  } };
}, "./node_modules/util/support/isBufferBrowser.js": (e2) => {
  e2.exports = function(e3) {
    return e3 && "object" == typeof e3 && "function" == typeof e3.copy && "function" == typeof e3.fill && "function" == typeof e3.readUInt8;
  };
}, "./node_modules/util/support/types.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/is-arguments/index.js"), o2 = n2("./node_modules/is-generator-function/index.js"), i2 = n2("./node_modules/which-typed-array/index.js"), s2 = n2("./node_modules/is-typed-array/index.js");
  function a(e3) {
    return e3.call.bind(e3);
  }
  var l = "undefined" != typeof BigInt, u = "undefined" != typeof Symbol, c2 = a(Object.prototype.toString), f = a(Number.prototype.valueOf), p = a(String.prototype.valueOf), d = a(Boolean.prototype.valueOf);
  if (l) var h = a(BigInt.prototype.valueOf);
  if (u) var g = a(Symbol.prototype.valueOf);
  function m2(e3, t3) {
    if ("object" != typeof e3) return false;
    try {
      return t3(e3), true;
    } catch (e4) {
      return false;
    }
  }
  function y(e3) {
    return "[object Map]" === c2(e3);
  }
  function b(e3) {
    return "[object Set]" === c2(e3);
  }
  function v(e3) {
    return "[object WeakMap]" === c2(e3);
  }
  function E(e3) {
    return "[object WeakSet]" === c2(e3);
  }
  function j(e3) {
    return "[object ArrayBuffer]" === c2(e3);
  }
  function _(e3) {
    return "undefined" != typeof ArrayBuffer && (j.working ? j(e3) : e3 instanceof ArrayBuffer);
  }
  function w(e3) {
    return "[object DataView]" === c2(e3);
  }
  function x(e3) {
    return "undefined" != typeof DataView && (w.working ? w(e3) : e3 instanceof DataView);
  }
  t2.isArgumentsObject = r2, t2.isGeneratorFunction = o2, t2.isTypedArray = s2, t2.isPromise = function(e3) {
    return "undefined" != typeof Promise && e3 instanceof Promise || null !== e3 && "object" == typeof e3 && "function" == typeof e3.then && "function" == typeof e3.catch;
  }, t2.isArrayBufferView = function(e3) {
    return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e3) : s2(e3) || x(e3);
  }, t2.isUint8Array = function(e3) {
    return "Uint8Array" === i2(e3);
  }, t2.isUint8ClampedArray = function(e3) {
    return "Uint8ClampedArray" === i2(e3);
  }, t2.isUint16Array = function(e3) {
    return "Uint16Array" === i2(e3);
  }, t2.isUint32Array = function(e3) {
    return "Uint32Array" === i2(e3);
  }, t2.isInt8Array = function(e3) {
    return "Int8Array" === i2(e3);
  }, t2.isInt16Array = function(e3) {
    return "Int16Array" === i2(e3);
  }, t2.isInt32Array = function(e3) {
    return "Int32Array" === i2(e3);
  }, t2.isFloat32Array = function(e3) {
    return "Float32Array" === i2(e3);
  }, t2.isFloat64Array = function(e3) {
    return "Float64Array" === i2(e3);
  }, t2.isBigInt64Array = function(e3) {
    return "BigInt64Array" === i2(e3);
  }, t2.isBigUint64Array = function(e3) {
    return "BigUint64Array" === i2(e3);
  }, y.working = "undefined" != typeof Map && y(/* @__PURE__ */ new Map()), t2.isMap = function(e3) {
    return "undefined" != typeof Map && (y.working ? y(e3) : e3 instanceof Map);
  }, b.working = "undefined" != typeof Set && b(/* @__PURE__ */ new Set()), t2.isSet = function(e3) {
    return "undefined" != typeof Set && (b.working ? b(e3) : e3 instanceof Set);
  }, v.working = "undefined" != typeof WeakMap && v(/* @__PURE__ */ new WeakMap()), t2.isWeakMap = function(e3) {
    return "undefined" != typeof WeakMap && (v.working ? v(e3) : e3 instanceof WeakMap);
  }, E.working = "undefined" != typeof WeakSet && E(/* @__PURE__ */ new WeakSet()), t2.isWeakSet = function(e3) {
    return E(e3);
  }, j.working = "undefined" != typeof ArrayBuffer && j(new ArrayBuffer()), t2.isArrayBuffer = _, w.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && w(new DataView(new ArrayBuffer(1), 0, 1)), t2.isDataView = x;
  var O = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
  function R(e3) {
    return "[object SharedArrayBuffer]" === c2(e3);
  }
  function A(e3) {
    return void 0 !== O && (void 0 === R.working && (R.working = R(new O())), R.working ? R(e3) : e3 instanceof O);
  }
  function S(e3) {
    return m2(e3, f);
  }
  function C(e3) {
    return m2(e3, p);
  }
  function $(e3) {
    return m2(e3, d);
  }
  function T(e3) {
    return l && m2(e3, h);
  }
  function M(e3) {
    return u && m2(e3, g);
  }
  t2.isSharedArrayBuffer = A, t2.isAsyncFunction = function(e3) {
    return "[object AsyncFunction]" === c2(e3);
  }, t2.isMapIterator = function(e3) {
    return "[object Map Iterator]" === c2(e3);
  }, t2.isSetIterator = function(e3) {
    return "[object Set Iterator]" === c2(e3);
  }, t2.isGeneratorObject = function(e3) {
    return "[object Generator]" === c2(e3);
  }, t2.isWebAssemblyCompiledModule = function(e3) {
    return "[object WebAssembly.Module]" === c2(e3);
  }, t2.isNumberObject = S, t2.isStringObject = C, t2.isBooleanObject = $, t2.isBigIntObject = T, t2.isSymbolObject = M, t2.isBoxedPrimitive = function(e3) {
    return S(e3) || C(e3) || $(e3) || T(e3) || M(e3);
  }, t2.isAnyArrayBuffer = function(e3) {
    return "undefined" != typeof Uint8Array && (_(e3) || A(e3));
  }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach((function(e3) {
    Object.defineProperty(t2, e3, { enumerable: false, value: function() {
      throw new Error(e3 + " is not supported in userland");
    } });
  }));
}, "./node_modules/util/util.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js"), o2 = n2("./node_modules/console-browserify/index.js"), i2 = Object.getOwnPropertyDescriptors || function(e3) {
    for (var t3 = Object.keys(e3), n3 = {}, r3 = 0; r3 < t3.length; r3++) n3[t3[r3]] = Object.getOwnPropertyDescriptor(e3, t3[r3]);
    return n3;
  }, s2 = /%[sdj%]/g;
  t2.format = function(e3) {
    if (!E(e3)) {
      for (var t3 = [], n3 = 0; n3 < arguments.length; n3++) t3.push(c2(arguments[n3]));
      return t3.join(" ");
    }
    n3 = 1;
    for (var r3 = arguments, o3 = r3.length, i22 = String(e3).replace(s2, (function(e4) {
      if ("%%" === e4) return "%";
      if (n3 >= o3) return e4;
      switch (e4) {
        case "%s":
          return String(r3[n3++]);
        case "%d":
          return Number(r3[n3++]);
        case "%j":
          try {
            return JSON.stringify(r3[n3++]);
          } catch (e5) {
            return "[Circular]";
          }
        default:
          return e4;
      }
    })), a2 = r3[n3]; n3 < o3; a2 = r3[++n3]) b(a2) || !w(a2) ? i22 += " " + a2 : i22 += " " + c2(a2);
    return i22;
  }, t2.deprecate = function(e3, n3) {
    if (void 0 !== r2 && true === r2.noDeprecation) return e3;
    if (void 0 === r2) return function() {
      return t2.deprecate(e3, n3).apply(this, arguments);
    };
    var i22 = false;
    return function() {
      if (!i22) {
        if (r2.throwDeprecation) throw new Error(n3);
        r2.traceDeprecation ? o2.trace(n3) : o2.error(n3), i22 = true;
      }
      return e3.apply(this, arguments);
    };
  };
  var a = {}, l = /^$/;
  if (r2.env.NODE_DEBUG) {
    var u = r2.env.NODE_DEBUG;
    u = u.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), l = new RegExp("^" + u + "$", "i");
  }
  function c2(e3, n3) {
    var r3 = { seen: [], stylize: p };
    return arguments.length >= 3 && (r3.depth = arguments[2]), arguments.length >= 4 && (r3.colors = arguments[3]), y(n3) ? r3.showHidden = n3 : n3 && t2._extend(r3, n3), j(r3.showHidden) && (r3.showHidden = false), j(r3.depth) && (r3.depth = 2), j(r3.colors) && (r3.colors = false), j(r3.customInspect) && (r3.customInspect = true), r3.colors && (r3.stylize = f), d(r3, e3, r3.depth);
  }
  function f(e3, t3) {
    var n3 = c2.styles[t3];
    return n3 ? "\x1B[" + c2.colors[n3][0] + "m" + e3 + "\x1B[" + c2.colors[n3][1] + "m" : e3;
  }
  function p(e3, t3) {
    return e3;
  }
  function d(e3, n3, r3) {
    if (e3.customInspect && n3 && R(n3.inspect) && n3.inspect !== t2.inspect && (!n3.constructor || n3.constructor.prototype !== n3)) {
      var o3 = n3.inspect(r3, e3);
      return E(o3) || (o3 = d(e3, o3, r3)), o3;
    }
    var i22 = (function(e4, t3) {
      if (j(t3)) return e4.stylize("undefined", "undefined");
      if (E(t3)) {
        var n4 = "'" + JSON.stringify(t3).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return e4.stylize(n4, "string");
      }
      if (v(t3)) return e4.stylize("" + t3, "number");
      if (y(t3)) return e4.stylize("" + t3, "boolean");
      if (b(t3)) return e4.stylize("null", "null");
    })(e3, n3);
    if (i22) return i22;
    var s22 = Object.keys(n3), a2 = (function(e4) {
      var t3 = {};
      return e4.forEach((function(e5, n4) {
        t3[e5] = true;
      })), t3;
    })(s22);
    if (e3.showHidden && (s22 = Object.getOwnPropertyNames(n3)), O(n3) && (s22.indexOf("message") >= 0 || s22.indexOf("description") >= 0)) return h(n3);
    if (0 === s22.length) {
      if (R(n3)) {
        var l2 = n3.name ? ": " + n3.name : "";
        return e3.stylize("[Function" + l2 + "]", "special");
      }
      if (_(n3)) return e3.stylize(RegExp.prototype.toString.call(n3), "regexp");
      if (x(n3)) return e3.stylize(Date.prototype.toString.call(n3), "date");
      if (O(n3)) return h(n3);
    }
    var u2, c22 = "", f2 = false, p2 = ["{", "}"];
    (m2(n3) && (f2 = true, p2 = ["[", "]"]), R(n3)) && (c22 = " [Function" + (n3.name ? ": " + n3.name : "") + "]");
    return _(n3) && (c22 = " " + RegExp.prototype.toString.call(n3)), x(n3) && (c22 = " " + Date.prototype.toUTCString.call(n3)), O(n3) && (c22 = " " + h(n3)), 0 !== s22.length || f2 && 0 != n3.length ? r3 < 0 ? _(n3) ? e3.stylize(RegExp.prototype.toString.call(n3), "regexp") : e3.stylize("[Object]", "special") : (e3.seen.push(n3), u2 = f2 ? (function(e4, t3, n4, r4, o4) {
      for (var i3 = [], s3 = 0, a3 = t3.length; s3 < a3; ++s3) $(t3, String(s3)) ? i3.push(g(e4, t3, n4, r4, String(s3), true)) : i3.push("");
      return o4.forEach((function(o5) {
        o5.match(/^\d+$/) || i3.push(g(e4, t3, n4, r4, o5, true));
      })), i3;
    })(e3, n3, r3, a2, s22) : s22.map((function(t3) {
      return g(e3, n3, r3, a2, t3, f2);
    })), e3.seen.pop(), (function(e4, t3, n4) {
      var r4 = e4.reduce((function(e5, t4) {
        return t4.indexOf("\n") >= 0 && 0, e5 + t4.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }), 0);
      if (r4 > 60) return n4[0] + ("" === t3 ? "" : t3 + "\n ") + " " + e4.join(",\n  ") + " " + n4[1];
      return n4[0] + t3 + " " + e4.join(", ") + " " + n4[1];
    })(u2, c22, p2)) : p2[0] + c22 + p2[1];
  }
  function h(e3) {
    return "[" + Error.prototype.toString.call(e3) + "]";
  }
  function g(e3, t3, n3, r3, o3, i22) {
    var s22, a2, l2;
    if ((l2 = Object.getOwnPropertyDescriptor(t3, o3) || { value: t3[o3] }).get ? a2 = l2.set ? e3.stylize("[Getter/Setter]", "special") : e3.stylize("[Getter]", "special") : l2.set && (a2 = e3.stylize("[Setter]", "special")), $(r3, o3) || (s22 = "[" + o3 + "]"), a2 || (e3.seen.indexOf(l2.value) < 0 ? (a2 = b(n3) ? d(e3, l2.value, null) : d(e3, l2.value, n3 - 1)).indexOf("\n") > -1 && (a2 = i22 ? a2.split("\n").map((function(e4) {
      return "  " + e4;
    })).join("\n").slice(2) : "\n" + a2.split("\n").map((function(e4) {
      return "   " + e4;
    })).join("\n")) : a2 = e3.stylize("[Circular]", "special")), j(s22)) {
      if (i22 && o3.match(/^\d+$/)) return a2;
      (s22 = JSON.stringify("" + o3)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s22 = s22.slice(1, -1), s22 = e3.stylize(s22, "name")) : (s22 = s22.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s22 = e3.stylize(s22, "string"));
    }
    return s22 + ": " + a2;
  }
  function m2(e3) {
    return Array.isArray(e3);
  }
  function y(e3) {
    return "boolean" == typeof e3;
  }
  function b(e3) {
    return null === e3;
  }
  function v(e3) {
    return "number" == typeof e3;
  }
  function E(e3) {
    return "string" == typeof e3;
  }
  function j(e3) {
    return void 0 === e3;
  }
  function _(e3) {
    return w(e3) && "[object RegExp]" === A(e3);
  }
  function w(e3) {
    return "object" == typeof e3 && null !== e3;
  }
  function x(e3) {
    return w(e3) && "[object Date]" === A(e3);
  }
  function O(e3) {
    return w(e3) && ("[object Error]" === A(e3) || e3 instanceof Error);
  }
  function R(e3) {
    return "function" == typeof e3;
  }
  function A(e3) {
    return Object.prototype.toString.call(e3);
  }
  function S(e3) {
    return e3 < 10 ? "0" + e3.toString(10) : e3.toString(10);
  }
  t2.debuglog = function(e3) {
    if (e3 = e3.toUpperCase(), !a[e3]) if (l.test(e3)) {
      var n3 = r2.pid;
      a[e3] = function() {
        var r3 = t2.format.apply(t2, arguments);
        o2.error("%s %d: %s", e3, n3, r3);
      };
    } else a[e3] = function() {
    };
    return a[e3];
  }, t2.inspect = c2, c2.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, c2.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, t2.types = n2("./node_modules/util/support/types.js"), t2.isArray = m2, t2.isBoolean = y, t2.isNull = b, t2.isNullOrUndefined = function(e3) {
    return null == e3;
  }, t2.isNumber = v, t2.isString = E, t2.isSymbol = function(e3) {
    return "symbol" == typeof e3;
  }, t2.isUndefined = j, t2.isRegExp = _, t2.types.isRegExp = _, t2.isObject = w, t2.isDate = x, t2.types.isDate = x, t2.isError = O, t2.types.isNativeError = O, t2.isFunction = R, t2.isPrimitive = function(e3) {
    return null === e3 || "boolean" == typeof e3 || "number" == typeof e3 || "string" == typeof e3 || "symbol" == typeof e3 || void 0 === e3;
  }, t2.isBuffer = n2("./node_modules/util/support/isBufferBrowser.js");
  var C = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  function $(e3, t3) {
    return Object.prototype.hasOwnProperty.call(e3, t3);
  }
  t2.log = function() {
    var e3, n3;
    o2.log("%s - %s", (e3 = /* @__PURE__ */ new Date(), n3 = [S(e3.getHours()), S(e3.getMinutes()), S(e3.getSeconds())].join(":"), [e3.getDate(), C[e3.getMonth()], n3].join(" ")), t2.format.apply(t2, arguments));
  }, t2.inherits = n2("./node_modules/inherits/inherits_browser.js"), t2._extend = function(e3, t3) {
    if (!t3 || !w(t3)) return e3;
    for (var n3 = Object.keys(t3), r3 = n3.length; r3--; ) e3[n3[r3]] = t3[n3[r3]];
    return e3;
  };
  var T = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
  function M(e3, t3) {
    if (!e3) {
      var n3 = new Error("Promise was rejected with a falsy value");
      n3.reason = e3, e3 = n3;
    }
    return t3(e3);
  }
  t2.promisify = function(e3) {
    if ("function" != typeof e3) throw new TypeError('The "original" argument must be of type Function');
    if (T && e3[T]) {
      var t3;
      if ("function" != typeof (t3 = e3[T])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      return Object.defineProperty(t3, T, { value: t3, enumerable: false, writable: false, configurable: true }), t3;
    }
    function t3() {
      for (var t4, n3, r3 = new Promise((function(e4, r4) {
        t4 = e4, n3 = r4;
      })), o3 = [], i22 = 0; i22 < arguments.length; i22++) o3.push(arguments[i22]);
      o3.push((function(e4, r4) {
        e4 ? n3(e4) : t4(r4);
      }));
      try {
        e3.apply(this, o3);
      } catch (e4) {
        n3(e4);
      }
      return r3;
    }
    return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), T && Object.defineProperty(t3, T, { value: t3, enumerable: false, writable: false, configurable: true }), Object.defineProperties(t3, i2(e3));
  }, t2.promisify.custom = T, t2.callbackify = function(e3) {
    if ("function" != typeof e3) throw new TypeError('The "original" argument must be of type Function');
    function t3() {
      for (var t4 = [], n3 = 0; n3 < arguments.length; n3++) t4.push(arguments[n3]);
      var o3 = t4.pop();
      if ("function" != typeof o3) throw new TypeError("The last argument must be of type Function");
      var i22 = this, s22 = function() {
        return o3.apply(i22, arguments);
      };
      e3.apply(this, t4).then((function(e4) {
        r2.nextTick(s22.bind(null, null, e4));
      }), (function(e4) {
        r2.nextTick(M.bind(null, e4, s22));
      }));
    }
    return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Object.defineProperties(t3, i2(e3)), t3;
  };
}, "./node_modules/which-typed-array/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/for-each/index.js"), o2 = n2("./node_modules/available-typed-arrays/index.js"), i2 = n2("./node_modules/call-bind/callBound.js"), s2 = n2("./node_modules/gopd/index.js"), a = i2("Object.prototype.toString"), l = n2("./node_modules/has-tostringtag/shams.js")(), u = "undefined" == typeof globalThis ? n2.g : globalThis, c2 = o2(), f = i2("String.prototype.slice"), p = {}, d = Object.getPrototypeOf;
  l && s2 && d && r2(c2, (function(e3) {
    if ("function" == typeof u[e3]) {
      var t3 = new u[e3]();
      if (Symbol.toStringTag in t3) {
        var n3 = d(t3), r3 = s2(n3, Symbol.toStringTag);
        if (!r3) {
          var o3 = d(n3);
          r3 = s2(o3, Symbol.toStringTag);
        }
        p[e3] = r3.get;
      }
    }
  }));
  var h = n2("./node_modules/is-typed-array/index.js");
  e2.exports = function(e3) {
    return !!h(e3) && (l && Symbol.toStringTag in e3 ? (function(e4) {
      var t3 = false;
      return r2(p, (function(n3, r3) {
        if (!t3) try {
          var o3 = n3.call(e4);
          o3 === r3 && (t3 = o3);
        } catch (e5) {
        }
      })), t3;
    })(e3) : f(a(e3), 8, -1));
  };
}, "?4d29": () => {
}, "?023e": () => {
}, "?b420": () => {
}, "./node_modules/@babel/code-frame/lib/index.js": (e2, t2, n2) => {
  var r2 = n2("./node_modules/process/browser.js"), o2 = n2("./node_modules/console-browserify/index.js");
  Object.defineProperty(t2, "__esModule", { value: true }), t2.codeFrameColumns = l, t2.default = function(e3, t3, n3, i22 = {}) {
    if (!s2) {
      s2 = true;
      const e4 = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (r2.emitWarning) r2.emitWarning(e4, "DeprecationWarning");
      else {
        new Error(e4).name = "DeprecationWarning", o2.warn(new Error(e4));
      }
    }
    n3 = Math.max(n3, 0);
    return l(e3, { start: { column: n3, line: t3 } }, i22);
  };
  var i2 = n2("./node_modules/@babel/highlight/lib/index.js");
  let s2 = false;
  const a = /\r\n|[\n\r\u2028\u2029]/;
  function l(e3, t3, n3 = {}) {
    const r3 = (n3.highlightCode || n3.forceColor) && (0, i2.shouldHighlight)(n3), o3 = (0, i2.getChalk)(n3), s22 = (function(e4) {
      return { gutter: e4.grey, marker: e4.red.bold, message: e4.red.bold };
    })(o3), l2 = (e4, t4) => r3 ? e4(t4) : t4, u = e3.split(a), { start: c2, end: f, markerLines: p } = (function(e4, t4, n4) {
      const r4 = Object.assign({ column: 0, line: -1 }, e4.start), o4 = Object.assign({}, r4, e4.end), { linesAbove: i22 = 2, linesBelow: s3 = 3 } = n4 || {}, a2 = r4.line, l3 = r4.column, u2 = o4.line, c22 = o4.column;
      let f2 = Math.max(a2 - (i22 + 1), 0), p2 = Math.min(t4.length, u2 + s3);
      -1 === a2 && (f2 = 0), -1 === u2 && (p2 = t4.length);
      const d2 = u2 - a2, h2 = {};
      if (d2) for (let e5 = 0; e5 <= d2; e5++) {
        const n5 = e5 + a2;
        if (l3) if (0 === e5) {
          const e6 = t4[n5 - 1].length;
          h2[n5] = [l3, e6 - l3 + 1];
        } else if (e5 === d2) h2[n5] = [0, c22];
        else {
          const r5 = t4[n5 - e5].length;
          h2[n5] = [0, r5];
        }
        else h2[n5] = true;
      }
      else h2[a2] = l3 === c22 ? !l3 || [l3, 0] : [l3, c22 - l3];
      return { start: f2, end: p2, markerLines: h2 };
    })(t3, u, n3), d = t3.start && "number" == typeof t3.start.column, h = String(f).length;
    let g = (r3 ? (0, i2.default)(e3, n3) : e3).split(a, f).slice(c2, f).map(((e4, t4) => {
      const r4 = c2 + 1 + t4, o4 = ` ${` ${r4}`.slice(-h)} |`, i22 = p[r4], a2 = !p[r4 + 1];
      if (i22) {
        let t5 = "";
        if (Array.isArray(i22)) {
          const r5 = e4.slice(0, Math.max(i22[0] - 1, 0)).replace(/[^\t]/g, " "), u2 = i22[1] || 1;
          t5 = ["\n ", l2(s22.gutter, o4.replace(/\d/g, " ")), " ", r5, l2(s22.marker, "^").repeat(u2)].join(""), a2 && n3.message && (t5 += " " + l2(s22.message, n3.message));
        }
        return [l2(s22.marker, ">"), l2(s22.gutter, o4), e4.length > 0 ? ` ${e4}` : "", t5].join("");
      }
      return ` ${l2(s22.gutter, o4)}${e4.length > 0 ? ` ${e4}` : ""}`;
    })).join("\n");
    return n3.message && !d && (g = `${" ".repeat(h + 1)}${n3.message}
${g}`), r3 ? o3.reset(g) : g;
  }
}, "./node_modules/@babel/helper-validator-identifier/lib/identifier.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.isIdentifierChar = c2, t2.isIdentifierName = function(e3) {
    let t3 = true;
    for (let n3 = 0; n3 < e3.length; n3++) {
      let r3 = e3.charCodeAt(n3);
      if (55296 == (64512 & r3) && n3 + 1 < e3.length) {
        const t4 = e3.charCodeAt(++n3);
        56320 == (64512 & t4) && (r3 = 65536 + ((1023 & r3) << 10) + (1023 & t4));
      }
      if (t3) {
        if (t3 = false, !u(r3)) return false;
      } else if (!c2(r3)) return false;
    }
    return !t3;
  }, t2.isIdentifierStart = u;
  let n2 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", r2 = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
  const o2 = new RegExp("[" + n2 + "]"), i2 = new RegExp("[" + n2 + r2 + "]");
  n2 = r2 = null;
  const s2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191], a = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function l(e3, t3) {
    let n3 = 65536;
    for (let r3 = 0, o3 = t3.length; r3 < o3; r3 += 2) {
      if (n3 += t3[r3], n3 > e3) return false;
      if (n3 += t3[r3 + 1], n3 >= e3) return true;
    }
    return false;
  }
  function u(e3) {
    return e3 < 65 ? 36 === e3 : e3 <= 90 || (e3 < 97 ? 95 === e3 : e3 <= 122 || (e3 <= 65535 ? e3 >= 170 && o2.test(String.fromCharCode(e3)) : l(e3, s2)));
  }
  function c2(e3) {
    return e3 < 48 ? 36 === e3 : e3 < 58 || !(e3 < 65) && (e3 <= 90 || (e3 < 97 ? 95 === e3 : e3 <= 122 || (e3 <= 65535 ? e3 >= 170 && i2.test(String.fromCharCode(e3)) : l(e3, s2) || l(e3, a))));
  }
}, "./node_modules/@babel/helper-validator-identifier/lib/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "isIdentifierChar", { enumerable: true, get: function() {
    return r2.isIdentifierChar;
  } }), Object.defineProperty(t2, "isIdentifierName", { enumerable: true, get: function() {
    return r2.isIdentifierName;
  } }), Object.defineProperty(t2, "isIdentifierStart", { enumerable: true, get: function() {
    return r2.isIdentifierStart;
  } }), Object.defineProperty(t2, "isKeyword", { enumerable: true, get: function() {
    return o2.isKeyword;
  } }), Object.defineProperty(t2, "isReservedWord", { enumerable: true, get: function() {
    return o2.isReservedWord;
  } }), Object.defineProperty(t2, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
    return o2.isStrictBindOnlyReservedWord;
  } }), Object.defineProperty(t2, "isStrictBindReservedWord", { enumerable: true, get: function() {
    return o2.isStrictBindReservedWord;
  } }), Object.defineProperty(t2, "isStrictReservedWord", { enumerable: true, get: function() {
    return o2.isStrictReservedWord;
  } });
  var r2 = n2("./node_modules/@babel/helper-validator-identifier/lib/identifier.js"), o2 = n2("./node_modules/@babel/helper-validator-identifier/lib/keyword.js");
}, "./node_modules/@babel/helper-validator-identifier/lib/keyword.js": (e2, t2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.isKeyword = function(e3) {
    return o2.has(e3);
  }, t2.isReservedWord = a, t2.isStrictBindOnlyReservedWord = u, t2.isStrictBindReservedWord = function(e3, t3) {
    return l(e3, t3) || u(e3);
  }, t2.isStrictReservedWord = l;
  const n2 = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], r2 = ["eval", "arguments"], o2 = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), i2 = new Set(n2), s2 = new Set(r2);
  function a(e3, t3) {
    return t3 && "await" === e3 || "enum" === e3;
  }
  function l(e3, t3) {
    return a(e3, t3) || i2.has(e3);
  }
  function u(e3) {
    return s2.has(e3);
  }
}, "./node_modules/@babel/highlight/lib/index.js": (e2, t2, n2) => {
  Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function(e3, t3 = {}) {
    if ("" !== e3 && c2(t3)) {
      const n3 = (function(e4) {
        return { keyword: e4.cyan, capitalized: e4.yellow, jsxIdentifier: e4.yellow, punctuator: e4.yellow, number: e4.magenta, string: e4.green, regex: e4.magenta, comment: e4.grey, invalid: e4.white.bgRed.bold };
      })(f(t3));
      return (function(e4, t4) {
        let n4 = "";
        for (const { type: r3, value: o3 } of u(t4)) {
          const t5 = e4[r3];
          n4 += t5 ? o3.split(a).map(((e5) => t5(e5))).join("\n") : o3;
        }
        return n4;
      })(n3, e3);
    }
    return e3;
  }, t2.getChalk = f, t2.shouldHighlight = c2;
  var r2 = n2("./node_modules/js-tokens/index.js"), o2 = n2("./node_modules/@babel/helper-validator-identifier/lib/index.js"), i2 = n2("./node_modules/@babel/highlight/node_modules/chalk/index.js");
  const s2 = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
  const a = /\r\n|[\n\r\u2028\u2029]/, l = /^[()[\]{}]$/;
  let u;
  {
    const e3 = /^[a-z][\w-]*$/i, t3 = function(t4, n3, r3) {
      if ("name" === t4.type) {
        if ((0, o2.isKeyword)(t4.value) || (0, o2.isStrictReservedWord)(t4.value, true) || s2.has(t4.value)) return "keyword";
        if (e3.test(t4.value) && ("<" === r3[n3 - 1] || "</" == r3.slice(n3 - 2, n3))) return "jsxIdentifier";
        if (t4.value[0] !== t4.value[0].toLowerCase()) return "capitalized";
      }
      return "punctuator" === t4.type && l.test(t4.value) ? "bracket" : "invalid" !== t4.type || "@" !== t4.value && "#" !== t4.value ? t4.type : "punctuator";
    };
    u = function* (e4) {
      let n3;
      for (; n3 = r2.default.exec(e4); ) {
        const o3 = r2.matchToToken(n3);
        yield { type: t3(o3, n3.index, e4), value: o3.value };
      }
    };
  }
  function c2(e3) {
    return !!i2.supportsColor || e3.forceColor;
  }
  function f(e3) {
    return e3.forceColor ? new i2.constructor({ enabled: true, level: 1 }) : i2;
  }
}, "./node_modules/available-typed-arrays/index.js": (e2, t2, n2) => {
  var r2 = ["BigInt64Array", "BigUint64Array", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"], o2 = "undefined" == typeof globalThis ? n2.g : globalThis;
  e2.exports = function() {
    for (var e3 = [], t3 = 0; t3 < r2.length; t3++) "function" == typeof o2[r2[t3]] && (e3[e3.length] = r2[t3]);
    return e3;
  };
}, "./node_modules/ci-info/vendors.json": (e2) => {
  e2.exports = JSON.parse('[{"name":"Appcircle","constant":"APPCIRCLE","env":"AC_APPCIRCLE"},{"name":"AppVeyor","constant":"APPVEYOR","env":"APPVEYOR","pr":"APPVEYOR_PULL_REQUEST_NUMBER"},{"name":"AWS CodeBuild","constant":"CODEBUILD","env":"CODEBUILD_BUILD_ARN"},{"name":"Azure Pipelines","constant":"AZURE_PIPELINES","env":"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI","pr":"SYSTEM_PULLREQUEST_PULLREQUESTID"},{"name":"Bamboo","constant":"BAMBOO","env":"bamboo_planKey"},{"name":"Bitbucket Pipelines","constant":"BITBUCKET","env":"BITBUCKET_COMMIT","pr":"BITBUCKET_PR_ID"},{"name":"Bitrise","constant":"BITRISE","env":"BITRISE_IO","pr":"BITRISE_PULL_REQUEST"},{"name":"Buddy","constant":"BUDDY","env":"BUDDY_WORKSPACE_ID","pr":"BUDDY_EXECUTION_PULL_REQUEST_ID"},{"name":"Buildkite","constant":"BUILDKITE","env":"BUILDKITE","pr":{"env":"BUILDKITE_PULL_REQUEST","ne":"false"}},{"name":"CircleCI","constant":"CIRCLE","env":"CIRCLECI","pr":"CIRCLE_PULL_REQUEST"},{"name":"Cirrus CI","constant":"CIRRUS","env":"CIRRUS_CI","pr":"CIRRUS_PR"},{"name":"Codefresh","constant":"CODEFRESH","env":"CF_BUILD_ID","pr":{"any":["CF_PULL_REQUEST_NUMBER","CF_PULL_REQUEST_ID"]}},{"name":"Codemagic","constant":"CODEMAGIC","env":"CM_BUILD_ID","pr":"CM_PULL_REQUEST"},{"name":"Codeship","constant":"CODESHIP","env":{"CI_NAME":"codeship"}},{"name":"Drone","constant":"DRONE","env":"DRONE","pr":{"DRONE_BUILD_EVENT":"pull_request"}},{"name":"dsari","constant":"DSARI","env":"DSARI"},{"name":"Expo Application Services","constant":"EAS","env":"EAS_BUILD"},{"name":"Gerrit","constant":"GERRIT","env":"GERRIT_PROJECT"},{"name":"GitHub Actions","constant":"GITHUB_ACTIONS","env":"GITHUB_ACTIONS","pr":{"GITHUB_EVENT_NAME":"pull_request"}},{"name":"GitLab CI","constant":"GITLAB","env":"GITLAB_CI","pr":"CI_MERGE_REQUEST_ID"},{"name":"GoCD","constant":"GOCD","env":"GO_PIPELINE_LABEL"},{"name":"Google Cloud Build","constant":"GOOGLE_CLOUD_BUILD","env":"BUILDER_OUTPUT"},{"name":"Harness CI","constant":"HARNESS","env":"HARNESS_BUILD_ID"},{"name":"Heroku","constant":"HEROKU","env":{"env":"NODE","includes":"/app/.heroku/node/bin/node"}},{"name":"Hudson","constant":"HUDSON","env":"HUDSON_URL"},{"name":"Jenkins","constant":"JENKINS","env":["JENKINS_URL","BUILD_ID"],"pr":{"any":["ghprbPullId","CHANGE_ID"]}},{"name":"LayerCI","constant":"LAYERCI","env":"LAYERCI","pr":"LAYERCI_PULL_REQUEST"},{"name":"Magnum CI","constant":"MAGNUM","env":"MAGNUM"},{"name":"Netlify CI","constant":"NETLIFY","env":"NETLIFY","pr":{"env":"PULL_REQUEST","ne":"false"}},{"name":"Nevercode","constant":"NEVERCODE","env":"NEVERCODE","pr":{"env":"NEVERCODE_PULL_REQUEST","ne":"false"}},{"name":"ReleaseHub","constant":"RELEASEHUB","env":"RELEASE_BUILD_ID"},{"name":"Render","constant":"RENDER","env":"RENDER","pr":{"IS_PULL_REQUEST":"true"}},{"name":"Sail CI","constant":"SAIL","env":"SAILCI","pr":"SAIL_PULL_REQUEST_NUMBER"},{"name":"Screwdriver","constant":"SCREWDRIVER","env":"SCREWDRIVER","pr":{"env":"SD_PULL_REQUEST","ne":"false"}},{"name":"Semaphore","constant":"SEMAPHORE","env":"SEMAPHORE","pr":"PULL_REQUEST_NUMBER"},{"name":"Shippable","constant":"SHIPPABLE","env":"SHIPPABLE","pr":{"IS_PULL_REQUEST":"true"}},{"name":"Solano CI","constant":"SOLANO","env":"TDDIUM","pr":"TDDIUM_PR_ID"},{"name":"Sourcehut","constant":"SOURCEHUT","env":{"CI_NAME":"sourcehut"}},{"name":"Strider CD","constant":"STRIDER","env":"STRIDER"},{"name":"TaskCluster","constant":"TASKCLUSTER","env":["TASK_ID","RUN_ID"]},{"name":"TeamCity","constant":"TEAMCITY","env":"TEAMCITY_VERSION"},{"name":"Travis CI","constant":"TRAVIS","env":"TRAVIS","pr":{"env":"TRAVIS_PULL_REQUEST","ne":"false"}},{"name":"Vercel","constant":"VERCEL","env":{"any":["NOW_BUILDER","VERCEL"]}},{"name":"Visual Studio App Center","constant":"APPCENTER","env":"APPCENTER_BUILD_ID"},{"name":"Woodpecker","constant":"WOODPECKER","env":{"CI":"woodpecker"},"pr":{"CI_BUILD_EVENT":"pull_request"}},{"name":"Xcode Cloud","constant":"XCODE_CLOUD","env":"CI_XCODE_PROJECT","pr":"CI_PULL_REQUEST_NUMBER"},{"name":"Xcode Server","constant":"XCODE_SERVER","env":"XCS"}]');
} }, t$1 = {};
function n$1(r2) {
  var o2 = t$1[r2];
  if (void 0 !== o2) return o2.exports;
  var i2 = t$1[r2] = { id: r2, loaded: false, exports: {} };
  return e$1[r2].call(i2.exports, i2, i2.exports, n$1), i2.loaded = true, i2.exports;
}
n$1.d = (e2, t2) => {
  for (var r2 in t2) n$1.o(t2, r2) && !n$1.o(e2, r2) && Object.defineProperty(e2, r2, { enumerable: true, get: t2[r2] });
}, n$1.g = (function() {
  if ("object" == typeof globalThis) return globalThis;
  try {
    return this || new Function("return this")();
  } catch (e2) {
    if ("object" == typeof window) return window;
  }
})(), n$1.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), n$1.nmd = (e2) => (e2.paths = [], e2.children || (e2.children = []), e2);
var r$1 = {};
(() => {
  n$1.d(r$1, { Z: () => e2 });
  const e2 = n$1("./node_modules/expect/build/index.js").ZP;
})();
var o$1 = r$1.Z;
var minIndent;
var hasRequiredMinIndent;
function requireMinIndent() {
  if (hasRequiredMinIndent) return minIndent;
  hasRequiredMinIndent = 1;
  minIndent = (string) => {
    const match = string.match(/^[ \t]*(?=\S)/gm);
    if (!match) {
      return 0;
    }
    return match.reduce((r2, a) => Math.min(r2, a.length), Infinity);
  };
  return minIndent;
}
var stripIndent;
var hasRequiredStripIndent;
function requireStripIndent() {
  if (hasRequiredStripIndent) return stripIndent;
  hasRequiredStripIndent = 1;
  const minIndent2 = requireMinIndent();
  stripIndent = (string) => {
    const indent = minIndent2(string);
    if (indent === 0) {
      return string;
    }
    const regex = new RegExp(`^[ \\t]{${indent}}`, "gm");
    return string.replace(regex, "");
  };
  return stripIndent;
}
var indentString;
var hasRequiredIndentString;
function requireIndentString() {
  if (hasRequiredIndentString) return indentString;
  hasRequiredIndentString = 1;
  indentString = (string, count = 1, options) => {
    options = {
      indent: " ",
      includeEmptyLines: false,
      ...options
    };
    if (typeof string !== "string") {
      throw new TypeError(
        `Expected \`input\` to be a \`string\`, got \`${typeof string}\``
      );
    }
    if (typeof count !== "number") {
      throw new TypeError(
        `Expected \`count\` to be a \`number\`, got \`${typeof count}\``
      );
    }
    if (typeof options.indent !== "string") {
      throw new TypeError(
        `Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``
      );
    }
    if (count === 0) {
      return string;
    }
    const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
    return string.replace(regex, options.indent.repeat(count));
  };
  return indentString;
}
var redent$1;
var hasRequiredRedent;
function requireRedent() {
  if (hasRequiredRedent) return redent$1;
  hasRequiredRedent = 1;
  const stripIndent2 = requireStripIndent();
  const indentString2 = requireIndentString();
  redent$1 = (string, count = 0, options) => indentString2(stripIndent2(string), count, options);
  return redent$1;
}
var redentExports = requireRedent();
const redent = /* @__PURE__ */ getDefaultExportFromCjs(redentExports);
class t extends Error {
  constructor(t2, e2, i2, s2, n2) {
    super(`${t2}:${i2}:${s2}: ${e2}`);
    __publicField(this, "reason");
    __publicField(this, "filename");
    __publicField(this, "line");
    __publicField(this, "column");
    __publicField(this, "source");
    this.reason = e2, this.filename = t2, this.line = i2, this.column = s2, this.source = n2;
  }
}
class e {
  constructor(t2, e2, i2) {
    __publicField(this, "start");
    __publicField(this, "end");
    __publicField(this, "source");
    this.start = t2, this.end = e2, this.source = i2;
  }
}
var i;
!(function(t2) {
  t2.stylesheet = "stylesheet", t2.rule = "rule", t2.declaration = "declaration", t2.comment = "comment", t2.container = "container", t2.charset = "charset", t2.document = "document", t2.customMedia = "custom-media", t2.fontFace = "font-face", t2.host = "host", t2.import = "import", t2.keyframes = "keyframes", t2.keyframe = "keyframe", t2.layer = "layer", t2.media = "media", t2.namespace = "namespace", t2.page = "page", t2.startingStyle = "starting-style", t2.supports = "supports";
})(i || (i = {}));
const s = (t2, e2, i2) => {
  let s2 = i2, n2 = 1e4;
  do {
    const i3 = e2.map((e3) => t2.indexOf(e3, s2));
    i3.push(t2.indexOf("\\", s2));
    const r2 = i3.filter((t3) => -1 !== t3);
    if (0 === r2.length) return -1;
    const o2 = Math.min(...r2);
    if ("\\" !== t2[o2]) return o2;
    s2 = o2 + 2, n2--;
  } while (n2 > 0);
  throw new Error("Too many escaping");
}, n = (t2, e2, i2) => {
  let r2 = i2, o2 = 1e4;
  do {
    const i3 = e2.map((e3) => t2.indexOf(e3, r2));
    i3.push(t2.indexOf("(", r2)), i3.push(t2.indexOf('"', r2)), i3.push(t2.indexOf("'", r2)), i3.push(t2.indexOf("\\", r2));
    const c2 = i3.filter((t3) => -1 !== t3);
    if (0 === c2.length) return -1;
    const a = Math.min(...c2);
    switch (t2[a]) {
      case "\\":
        r2 = a + 2;
        break;
      case "(":
        {
          const e3 = n(t2, [")"], a + 1);
          if (-1 === e3) return -1;
          r2 = e3 + 1;
        }
        break;
      case '"':
        {
          const e3 = s(t2, ['"'], a + 1);
          if (-1 === e3) return -1;
          r2 = e3 + 1;
        }
        break;
      case "'":
        {
          const e3 = s(t2, ["'"], a + 1);
          if (-1 === e3) return -1;
          r2 = e3 + 1;
        }
        break;
      default:
        return a;
    }
    o2--;
  } while (o2 > 0);
  throw new Error("Too many escaping");
}, r = /\/\*[^]*?(?:\*\/|$)/g;
function o(t2) {
  return t2 ? t2.trim() : "";
}
function c(t2, e2) {
  const i2 = t2 && "string" == typeof t2.type, s2 = i2 ? t2 : e2;
  for (const e3 in t2) {
    const i3 = t2[e3];
    Array.isArray(i3) ? i3.forEach((t3) => {
      c(t3, s2);
    }) : i3 && "object" == typeof i3 && c(i3, s2);
  }
  return i2 && Object.defineProperty(t2, "parent", { configurable: true, writable: true, enumerable: false, value: e2 || null }), t2;
}
const m = (s2, a) => {
  a = a || {};
  let m2 = 1, h = 1;
  function u() {
    const t2 = { line: m2, column: h };
    return (i2) => (i2.position = new e(t2, { line: m2, column: h }, a?.source || ""), $(), i2);
  }
  const p = [];
  function l(e2) {
    const i2 = new t(a?.source || "", e2, m2, h, s2);
    if (!a?.silent) throw i2;
    p.push(i2);
  }
  function f() {
    const t2 = /^{\s*/.exec(s2);
    return !!t2 && (g(t2), true);
  }
  function d() {
    const t2 = /^}/.exec(s2);
    return !!t2 && (g(t2), true);
  }
  function y() {
    let t2;
    const e2 = [];
    for ($(), x(e2); s2.length && "}" !== s2.charAt(0) && (t2 = A() || S(), t2); ) e2.push(t2), x(e2);
    return e2;
  }
  function g(t2) {
    const e2 = t2[0];
    return (function(t3) {
      const e3 = t3.match(/\n/g);
      e3 && (m2 += e3.length);
      const i2 = t3.lastIndexOf("\n");
      h = ~i2 ? t3.length - i2 : h + t3.length;
    })(e2), s2 = s2.slice(e2.length), t2;
  }
  function $() {
    const t2 = /^\s*/.exec(s2);
    t2 && g(t2);
  }
  function x(t2) {
    t2 = t2 || [];
    let e2 = V();
    for (; e2; ) t2.push(e2), e2 = V();
    return t2;
  }
  function V() {
    const t2 = u();
    if ("/" !== s2.charAt(0) || "*" !== s2.charAt(1)) return;
    const e2 = /^\/\*[^]*?\*\//.exec(s2);
    return e2 ? (g(e2), t2({ type: i.comment, comment: e2[0].slice(2, -2) })) : l("End of comment missing");
  }
  function k() {
    const t2 = /^([^{]+)/.exec(s2);
    if (!t2) return;
    g(t2);
    return ((t3, e2) => {
      const i2 = [];
      let s3 = 0;
      for (; s3 < t3.length; ) {
        const r2 = n(t3, e2, s3);
        if (-1 === r2) return i2.push(t3.substring(s3)), i2;
        i2.push(t3.substring(s3, r2)), s3 = r2 + 1;
      }
      return i2;
    })(o(t2[0]).replace(r, ""), [","]).map((t3) => o(t3));
  }
  function v() {
    const t2 = u(), e2 = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/.exec(s2);
    if (!e2) return;
    g(e2);
    const c2 = o(e2[0]), a2 = /^:\s*/.exec(s2);
    if (!a2) return l("property missing ':'");
    g(a2);
    let m3 = "";
    const h2 = n(s2, [";", "}"]);
    if (-1 !== h2) {
      m3 = s2.substring(0, h2);
      g([m3]), m3 = o(m3).replace(r, "");
    }
    const p2 = t2({ type: i.declaration, property: c2.replace(r, ""), value: m3 }), f2 = /^[;\s]*/.exec(s2);
    return f2 && g(f2), p2;
  }
  function w() {
    const t2 = [];
    if (!f()) return l("missing '{'");
    x(t2);
    let e2 = v();
    for (; e2; ) t2.push(e2), x(t2), e2 = v();
    return d() ? t2 : l("missing '}'");
  }
  function b() {
    const t2 = [], e2 = u();
    let n2 = /^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/.exec(s2);
    for (; n2; ) {
      const e3 = g(n2);
      t2.push(e3[1]);
      const i2 = /^,\s*/.exec(s2);
      i2 && g(i2), n2 = /^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/.exec(s2);
    }
    if (t2.length) return e2({ type: i.keyframe, values: t2, declarations: w() || [] });
  }
  const j = M("import"), O = M("charset"), E = M("namespace");
  function M(t2) {
    const e2 = new RegExp("^@" + t2 + `\\s*((?::?[^;'"]|"(?:\\\\"|[^"])*?"|'(?:\\\\'|[^'])*?')+)(?:;|$)`);
    return () => {
      const i2 = u(), n2 = e2.exec(s2);
      if (!n2) return;
      const r2 = g(n2), o2 = { type: t2 };
      return o2[t2] = r2[1].trim(), i2(o2);
    };
  }
  function A() {
    if ("@" === s2[0]) return (function() {
      const t2 = u(), e2 = /^@([-\w]+)?keyframes\s*/.exec(s2);
      if (!e2) return;
      const n2 = g(e2)[1], r2 = /^([-\w]+)\s*/.exec(s2);
      if (!r2) return l("@keyframes missing name");
      const o2 = g(r2)[1];
      if (!f()) return l("@keyframes missing '{'");
      let c2 = x(), a2 = b();
      for (; a2; ) c2.push(a2), c2 = c2.concat(x()), a2 = b();
      return d() ? t2({ type: i.keyframes, name: o2, vendor: n2, keyframes: c2 }) : l("@keyframes missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@media *([^{]+)/.exec(s2);
      if (!e2) return;
      const n2 = o(g(e2)[1]);
      if (!f()) return l("@media missing '{'");
      const r2 = x().concat(y());
      return d() ? t2({ type: i.media, media: n2, rules: r2 }) : l("@media missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@custom-media\s+(--\S+)\s+([^{;\s][^{;]*);/.exec(s2);
      if (!e2) return;
      const n2 = g(e2);
      return t2({ type: i.customMedia, name: o(n2[1]), media: o(n2[2]) });
    })() || (function() {
      const t2 = u(), e2 = /^@supports *([^{]+)/.exec(s2);
      if (!e2) return;
      const n2 = o(g(e2)[1]);
      if (!f()) return l("@supports missing '{'");
      const r2 = x().concat(y());
      return d() ? t2({ type: i.supports, supports: n2, rules: r2 }) : l("@supports missing '}'");
    })() || j() || O() || E() || (function() {
      const t2 = u(), e2 = /^@([-\w]+)?document *([^{]+)/.exec(s2);
      if (!e2) return;
      const n2 = g(e2), r2 = o(n2[1]), c2 = o(n2[2]);
      if (!f()) return l("@document missing '{'");
      const a2 = x().concat(y());
      return d() ? t2({ type: i.document, document: c2, vendor: r2, rules: a2 }) : l("@document missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@page */.exec(s2);
      if (!e2) return;
      g(e2);
      const n2 = k() || [];
      if (!f()) return l("@page missing '{'");
      let r2 = x(), o2 = v();
      for (; o2; ) r2.push(o2), r2 = r2.concat(x()), o2 = v();
      return d() ? t2({ type: i.page, selectors: n2, declarations: r2 }) : l("@page missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@host\s*/.exec(s2);
      if (!e2) return;
      if (g(e2), !f()) return l("@host missing '{'");
      const n2 = x().concat(y());
      return d() ? t2({ type: i.host, rules: n2 }) : l("@host missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@font-face\s*/.exec(s2);
      if (!e2) return;
      if (g(e2), !f()) return l("@font-face missing '{'");
      let n2 = x(), r2 = v();
      for (; r2; ) n2.push(r2), n2 = n2.concat(x()), r2 = v();
      return d() ? t2({ type: i.fontFace, declarations: n2 }) : l("@font-face missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@container *([^{]+)/.exec(s2);
      if (!e2) return;
      const n2 = o(g(e2)[1]);
      if (!f()) return l("@container missing '{'");
      const r2 = x().concat(y());
      return d() ? t2({ type: i.container, container: n2, rules: r2 }) : l("@container missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@starting-style\s*/.exec(s2);
      if (!e2) return;
      if (g(e2), !f()) return l("@starting-style missing '{'");
      const n2 = x().concat(y());
      return d() ? t2({ type: i.startingStyle, rules: n2 }) : l("@starting-style missing '}'");
    })() || (function() {
      const t2 = u(), e2 = /^@layer *([^{;@]+)/.exec(s2);
      if (!e2) return;
      const n2 = o(g(e2)[1]);
      if (!f()) {
        const e3 = /^[;\s]*/.exec(s2);
        return e3 && g(e3), t2({ type: i.layer, layer: n2 });
      }
      const r2 = x().concat(y());
      return d() ? t2({ type: i.layer, layer: n2, rules: r2 }) : l("@layer missing '}'");
    })();
  }
  function S() {
    const t2 = u(), e2 = k();
    return e2 ? (x(), t2({ type: i.rule, selectors: e2, declarations: w() || [] })) : l("selector missing");
  }
  return c((function() {
    const t2 = y();
    return { type: i.stylesheet, stylesheet: { source: a?.source, rules: t2, parsingErrors: p } };
  })());
};
var toStr = Object.prototype.toString;
function isCallable(fn) {
  return typeof fn === "function" || toStr.call(fn) === "[object Function]";
}
function toInteger(value) {
  var number = Number(value);
  if (isNaN(number)) {
    return 0;
  }
  if (number === 0 || !isFinite(number)) {
    return number;
  }
  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(value) {
  var len = toInteger(value);
  return Math.min(Math.max(len, 0), maxSafeInteger);
}
function arrayFrom(arrayLike, mapFn) {
  var C = Array;
  var items = Object(arrayLike);
  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }
  var len = toLength(items.length);
  var A = isCallable(C) ? Object(new C(len)) : new Array(len);
  var k = 0;
  var kValue;
  while (k < len) {
    kValue = items[k];
    {
      A[k] = kValue;
    }
    k += 1;
  }
  A.length = len;
  return A;
}
function _typeof$1(o2) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof$1(o2);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _defineProperty$1(obj, key, value) {
  key = _toPropertyKey$1(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey$1(arg) {
  var key = _toPrimitive$1(arg, "string");
  return _typeof$1(key) === "symbol" ? key : String(key);
}
function _toPrimitive$1(input2, hint) {
  if (_typeof$1(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint);
    if (_typeof$1(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
var SetLike = /* @__PURE__ */ (function() {
  function SetLike2() {
    var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck(this, SetLike2);
    _defineProperty$1(this, "items", void 0);
    this.items = items;
  }
  _createClass(SetLike2, [{
    key: "add",
    value: function add(value) {
      if (this.has(value) === false) {
        this.items.push(value);
      }
      return this;
    }
  }, {
    key: "clear",
    value: function clear2() {
      this.items = [];
    }
  }, {
    key: "delete",
    value: function _delete(value) {
      var previousLength = this.items.length;
      this.items = this.items.filter(function(item) {
        return item !== value;
      });
      return previousLength !== this.items.length;
    }
  }, {
    key: "forEach",
    value: function forEach2(callbackfn) {
      var _this = this;
      this.items.forEach(function(item) {
        callbackfn(item, item, _this);
      });
    }
  }, {
    key: "has",
    value: function has(value) {
      return this.items.indexOf(value) !== -1;
    }
  }, {
    key: "size",
    get: function get2() {
      return this.items.length;
    }
  }]);
  return SetLike2;
})();
const SetLike$1 = typeof Set === "undefined" ? Set : SetLike;
function getLocalName(element) {
  var _element$localName;
  return (
    // eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName
    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : (
      // eslint-disable-next-line no-restricted-properties -- required for the fallback
      element.tagName.toLowerCase()
    )
  );
}
var localNameToRoleMappings = {
  article: "article",
  aside: "complementary",
  button: "button",
  datalist: "listbox",
  dd: "definition",
  details: "group",
  dialog: "dialog",
  dt: "term",
  fieldset: "group",
  figure: "figure",
  // WARNING: Only with an accessible name
  form: "form",
  footer: "contentinfo",
  h1: "heading",
  h2: "heading",
  h3: "heading",
  h4: "heading",
  h5: "heading",
  h6: "heading",
  header: "banner",
  hr: "separator",
  html: "document",
  legend: "legend",
  li: "listitem",
  math: "math",
  main: "main",
  menu: "list",
  nav: "navigation",
  ol: "list",
  optgroup: "group",
  // WARNING: Only in certain context
  option: "option",
  output: "status",
  progress: "progressbar",
  // WARNING: Only with an accessible name
  section: "region",
  summary: "button",
  table: "table",
  tbody: "rowgroup",
  textarea: "textbox",
  tfoot: "rowgroup",
  // WARNING: Only in certain context
  td: "cell",
  th: "columnheader",
  thead: "rowgroup",
  tr: "row",
  ul: "list"
};
var prohibitedAttributes = {
  caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]),
  insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  none: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"])
};
function hasGlobalAriaAttributes(element, role) {
  return [
    "aria-atomic",
    "aria-busy",
    "aria-controls",
    "aria-current",
    "aria-description",
    "aria-describedby",
    "aria-details",
    // "disabled",
    "aria-dropeffect",
    // "errormessage",
    "aria-flowto",
    "aria-grabbed",
    // "haspopup",
    "aria-hidden",
    // "invalid",
    "aria-keyshortcuts",
    "aria-label",
    "aria-labelledby",
    "aria-live",
    "aria-owns",
    "aria-relevant",
    "aria-roledescription"
  ].some(function(attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole(element, implicitRole) {
  return hasGlobalAriaAttributes(element, implicitRole);
}
function getRole(element) {
  var explicitRole = getExplicitRole(element);
  if (explicitRole === null || presentationRoles.indexOf(explicitRole) !== -1) {
    var implicitRole = getImplicitRole(element);
    if (presentationRoles.indexOf(explicitRole || "") === -1 || ignorePresentationalRole(element, implicitRole || "")) {
      return implicitRole;
    }
  }
  return explicitRole;
}
function getImplicitRole(element) {
  var mappedByTag = localNameToRoleMappings[getLocalName(element)];
  if (mappedByTag !== void 0) {
    return mappedByTag;
  }
  switch (getLocalName(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) {
        return "link";
      }
      break;
    case "img":
      if (element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img")) {
        return "presentation";
      }
      return "img";
    case "input": {
      var _ref = element, type2 = _ref.type;
      switch (type2) {
        case "button":
        case "image":
        case "reset":
        case "submit":
          return "button";
        case "checkbox":
        case "radio":
          return type2;
        case "range":
          return "slider";
        case "email":
        case "tel":
        case "text":
        case "url":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "textbox";
        case "search":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "searchbox";
        case "number":
          return "spinbutton";
        default:
          return null;
      }
    }
    case "select":
      if (element.hasAttribute("multiple") || element.size > 1) {
        return "listbox";
      }
      return "combobox";
  }
  return null;
}
function getExplicitRole(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    if (explicitRole.length > 0) {
      return explicitRole;
    }
  }
  return null;
}
var presentationRoles = ["presentation", "none"];
function isElement(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement(node) {
  return isElement(node) && getLocalName(node) === "caption";
}
function isHTMLInputElement(node) {
  return isElement(node) && getLocalName(node) === "input";
}
function isHTMLOptGroupElement(node) {
  return isElement(node) && getLocalName(node) === "optgroup";
}
function isHTMLSelectElement(node) {
  return isElement(node) && getLocalName(node) === "select";
}
function isHTMLTableElement(node) {
  return isElement(node) && getLocalName(node) === "table";
}
function isHTMLTextAreaElement(node) {
  return isElement(node) && getLocalName(node) === "textarea";
}
function safeWindow(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
  if (defaultView === null) {
    throw new TypeError("no window available");
  }
  return defaultView;
}
function isHTMLFieldSetElement(node) {
  return isElement(node) && getLocalName(node) === "fieldset";
}
function isHTMLLegendElement(node) {
  return isElement(node) && getLocalName(node) === "legend";
}
function isHTMLSlotElement(node) {
  return isElement(node) && getLocalName(node) === "slot";
}
function isSVGElement(node) {
  return isElement(node) && node.ownerSVGElement !== void 0;
}
function isSVGSVGElement(node) {
  return isElement(node) && getLocalName(node) === "svg";
}
function isSVGTitleElement(node) {
  return isSVGElement(node) && getLocalName(node) === "title";
}
function queryIdRefs(node, attributeName) {
  if (isElement(node) && node.hasAttribute(attributeName)) {
    var ids = node.getAttribute(attributeName).split(" ");
    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function(id) {
      return root.getElementById(id);
    }).filter(
      function(element) {
        return element !== null;
      }
      // TODO: why does this not narrow?
    );
  }
  return [];
}
function hasAnyConcreteRoles(node, roles) {
  if (isElement(node)) {
    return roles.indexOf(getRole(node)) !== -1;
  }
  return false;
}
function asFlatString(s2) {
  return s2.trim().replace(/\s\s+/g, " ");
}
function isHidden(node, getComputedStyleImplementation) {
  if (!isElement(node)) {
    return false;
  }
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") {
    return true;
  }
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}
function isControl(node) {
  return hasAnyConcreteRoles(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole(node, "range");
}
function hasAbstractRole(node, role) {
  if (!isElement(node)) {
    return false;
  }
  switch (role) {
    case "range":
      return hasAnyConcreteRoles(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}
function querySelectorAllSubtree(element, selectors) {
  var elements = arrayFrom(element.querySelectorAll(selectors));
  queryIdRefs(element, "aria-owns").forEach(function(root) {
    elements.push.apply(elements, arrayFrom(root.querySelectorAll(selectors)));
  });
  return elements;
}
function querySelectedOptions(listbox) {
  if (isHTMLSelectElement(listbox)) {
    return listbox.selectedOptions || querySelectorAllSubtree(listbox, "[selected]");
  }
  return querySelectorAllSubtree(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational(node) {
  return hasAnyConcreteRoles(node, presentationRoles);
}
function isNativeHostLanguageTextAlternativeElement(node) {
  return isHTMLTableCaptionElement(node);
}
function allowsNameFromContent(node) {
  return hasAnyConcreteRoles(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}
function isDescendantOfNativeHostLanguageTextAlternativeElement(node) {
  return false;
}
function getValueOfTextbox(element) {
  if (isHTMLInputElement(element) || isHTMLTextAreaElement(element)) {
    return element.value;
  }
  return element.textContent || "";
}
function getTextualContent(declaration) {
  var content = declaration.getPropertyValue("content");
  if (/^["'].*["']$/.test(content)) {
    return content.slice(1, -1);
  }
  return "";
}
function isLabelableElement(element) {
  var localName = getLocalName(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}
function findLabelableElement(element) {
  if (isLabelableElement(element)) {
    return element;
  }
  var labelableElement = null;
  element.childNodes.forEach(function(childNode) {
    if (labelableElement === null && isElement(childNode)) {
      var descendantLabelableElement = findLabelableElement(childNode);
      if (descendantLabelableElement !== null) {
        labelableElement = descendantLabelableElement;
      }
    }
  });
  return labelableElement;
}
function getControlOfLabel(label) {
  if (label.control !== void 0) {
    return label.control;
  }
  var htmlFor = label.getAttribute("for");
  if (htmlFor !== null) {
    return label.ownerDocument.getElementById(htmlFor);
  }
  return findLabelableElement(label);
}
function getLabels(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) {
    return labelsProperty;
  }
  if (labelsProperty !== void 0) {
    return arrayFrom(labelsProperty);
  }
  if (!isLabelableElement(element)) {
    return null;
  }
  var document2 = element.ownerDocument;
  return arrayFrom(document2.querySelectorAll("label")).filter(function(label) {
    return getControlOfLabel(label) === element;
  });
}
function getSlotContents(slot) {
  var assignedNodes = slot.assignedNodes();
  if (assignedNodes.length === 0) {
    return arrayFrom(slot.childNodes);
  }
  return assignedNodes;
}
function computeTextAlternative(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var consultedNodes = new SetLike$1();
  var window2 = safeWindow(root);
  var _options$compute = options.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
  function computeMiscTextAlternative(node, context) {
    var accumulatedText = "";
    if (isElement(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before");
      var beforeContent = getTextualContent(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }
    var childNodes = isHTMLSlotElement(node) ? getSlotContents(node) : arrayFrom(node.childNodes).concat(queryIdRefs(node, "aria-owns"));
    childNodes.forEach(function(child) {
      var result = computeTextAlternative2(child, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false,
        recursion: true
      });
      var display2 = isElement(child) ? getComputedStyle(child).getPropertyValue("display") : "inline";
      var separator = display2 !== "inline" ? " " : "";
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    });
    if (isElement(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after");
      var afterContent = getTextualContent(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "") {
      consultedNodes.add(attribute);
      return attribute.value;
    }
    return null;
  }
  function computeTooltipAttributeValue(node) {
    if (!isElement(node)) {
      return null;
    }
    return useAttribute(node, "title");
  }
  function computeElementTextAlternative(node) {
    if (!isElement(node)) {
      return null;
    }
    if (isHTMLFieldSetElement(node)) {
      consultedNodes.add(node);
      var children = arrayFrom(node.childNodes);
      for (var i2 = 0; i2 < children.length; i2 += 1) {
        var child = children[i2];
        if (isHTMLLegendElement(child)) {
          return computeTextAlternative2(child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isHTMLTableElement(node)) {
      consultedNodes.add(node);
      var _children = arrayFrom(node.childNodes);
      for (var _i = 0; _i < _children.length; _i += 1) {
        var _child = _children[_i];
        if (isHTMLTableCaptionElement(_child)) {
          return computeTextAlternative2(_child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isSVGSVGElement(node)) {
      consultedNodes.add(node);
      var _children2 = arrayFrom(node.childNodes);
      for (var _i2 = 0; _i2 < _children2.length; _i2 += 1) {
        var _child2 = _children2[_i2];
        if (isSVGTitleElement(_child2)) {
          return _child2.textContent;
        }
      }
      return null;
    } else if (getLocalName(node) === "img" || getLocalName(node) === "area") {
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) {
        return nameFromAlt;
      }
    } else if (isHTMLOptGroupElement(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) {
        return nameFromLabel;
      }
    }
    if (isHTMLInputElement(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) {
        return nameFromValue;
      }
      if (node.type === "submit") {
        return "Submit";
      }
      if (node.type === "reset") {
        return "Reset";
      }
    }
    var labels = getLabels(node);
    if (labels !== null && labels.length !== 0) {
      consultedNodes.add(node);
      return arrayFrom(labels).map(function(element) {
        return computeTextAlternative2(element, {
          isEmbeddedInLabel: true,
          isReferenced: false,
          recursion: true
        });
      }).filter(function(label) {
        return label.length > 0;
      }).join(" ");
    }
    if (isHTMLInputElement(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) {
        return _nameFromAlt;
      }
      var nameFromTitle = useAttribute(node, "title");
      if (nameFromTitle !== null) {
        return nameFromTitle;
      }
      return "Submit Query";
    }
    if (hasAnyConcreteRoles(node, ["button"])) {
      var nameFromSubTree = computeMiscTextAlternative(node, {
        isEmbeddedInLabel: false
      });
      if (nameFromSubTree !== "") {
        return nameFromSubTree;
      }
    }
    return null;
  }
  function computeTextAlternative2(current, context) {
    if (consultedNodes.has(current)) {
      return "";
    }
    if (!hidden && isHidden(current, getComputedStyle) && !context.isReferenced) {
      consultedNodes.add(current);
      return "";
    }
    var labelAttributeNode = isElement(current) ? current.getAttributeNode("aria-labelledby") : null;
    var labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs(current, "aria-labelledby") : [];
    if (compute === "name" && !context.isReferenced && labelElements.length > 0) {
      consultedNodes.add(labelAttributeNode);
      return labelElements.map(function(element) {
        return computeTextAlternative2(element, {
          isEmbeddedInLabel: context.isEmbeddedInLabel,
          isReferenced: true,
          // this isn't recursion as specified, otherwise we would skip
          // `aria-label` in
          // <input id="myself" aria-label="foo" aria-labelledby="myself"
          recursion: false
        });
      }).join(" ");
    }
    var skipToStep2E = context.recursion && isControl(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = (isElement(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") {
        consultedNodes.add(current);
        return ariaLabel;
      }
      if (!isMarkedPresentational(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) {
          consultedNodes.add(current);
          return elementTextAlternative;
        }
      }
    }
    if (hasAnyConcreteRoles(current, ["menu"])) {
      consultedNodes.add(current);
      return "";
    }
    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
      if (hasAnyConcreteRoles(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions(current);
        if (selectedOptions.length === 0) {
          return isHTMLInputElement(current) ? current.value : "";
        }
        return arrayFrom(selectedOptions).map(function(selectedOption) {
          return computeTextAlternative2(selectedOption, {
            isEmbeddedInLabel: context.isEmbeddedInLabel,
            isReferenced: false,
            recursion: true
          });
        }).join(" ");
      }
      if (hasAbstractRole(current, "range")) {
        consultedNodes.add(current);
        if (current.hasAttribute("aria-valuetext")) {
          return current.getAttribute("aria-valuetext");
        }
        if (current.hasAttribute("aria-valuenow")) {
          return current.getAttribute("aria-valuenow");
        }
        return current.getAttribute("value") || "";
      }
      if (hasAnyConcreteRoles(current, ["textbox"])) {
        consultedNodes.add(current);
        return getValueOfTextbox(current);
      }
    }
    if (allowsNameFromContent(current) || isElement(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement()) {
      var accumulatedText2F = computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel
      });
      if (accumulatedText2F !== "") {
        consultedNodes.add(current);
        return accumulatedText2F;
      }
    }
    if (current.nodeType === current.TEXT_NODE) {
      consultedNodes.add(current);
      return current.textContent || "";
    }
    if (context.recursion) {
      consultedNodes.add(current);
      return computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel
      });
    }
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    if (tooltipAttributeValue !== null) {
      consultedNodes.add(current);
      return tooltipAttributeValue;
    }
    consultedNodes.add(current);
    return "";
  }
  return asFlatString(computeTextAlternative2(root, {
    isEmbeddedInLabel: false,
    // by spec computeAccessibleDescription starts with the referenced elements as roots
    isReferenced: compute === "description",
    recursion: false
  }));
}
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
function ownKeys(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e2);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input2, hint) {
  if (_typeof(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint);
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function computeAccessibleDescription(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var description = queryIdRefs(root, "aria-describedby").map(function(element) {
    return computeTextAlternative(element, _objectSpread(_objectSpread({}, options), {}, {
      compute: "description"
    }));
  }).join(" ");
  if (description === "") {
    var ariaDescription = root.getAttribute("aria-description");
    description = ariaDescription === null ? "" : ariaDescription;
  }
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
function prohibitsNaming(node) {
  return hasAnyConcreteRoles(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "none", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}
function computeAccessibleName(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (prohibitsNaming(root)) {
    return "";
  }
  return computeTextAlternative(root, options);
}
var picocolors_browser = { exports: {} };
var hasRequiredPicocolors_browser;
function requirePicocolors_browser() {
  if (hasRequiredPicocolors_browser) return picocolors_browser.exports;
  hasRequiredPicocolors_browser = 1;
  var x = String;
  var create = function() {
    return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x, blackBright: x, redBright: x, greenBright: x, yellowBright: x, blueBright: x, magentaBright: x, cyanBright: x, whiteBright: x, bgBlackBright: x, bgRedBright: x, bgGreenBright: x, bgYellowBright: x, bgBlueBright: x, bgMagentaBright: x, bgCyanBright: x, bgWhiteBright: x };
  };
  picocolors_browser.exports = create();
  picocolors_browser.exports.createColors = create;
  return picocolors_browser.exports;
}
var picocolors_browserExports = /* @__PURE__ */ requirePicocolors_browser();
const pico = /* @__PURE__ */ getDefaultExportFromCjs(picocolors_browserExports);
var css_escape$1 = { exports: {} };
/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */
var css_escape = css_escape$1.exports;
var hasRequiredCss_escape;
function requireCss_escape() {
  if (hasRequiredCss_escape) return css_escape$1.exports;
  hasRequiredCss_escape = 1;
  (function(module2, exports) {
    (function(root, factory) {
      {
        module2.exports = factory(root);
      }
    })(typeof commonjsGlobal != "undefined" ? commonjsGlobal : css_escape, function(root) {
      if (root.CSS && root.CSS.escape) {
        return root.CSS.escape;
      }
      var cssEscape = function(value) {
        if (arguments.length == 0) {
          throw new TypeError("`CSS.escape` requires an argument.");
        }
        var string = String(value);
        var length = string.length;
        var index2 = -1;
        var codeUnit;
        var result = "";
        var firstCodeUnit = string.charCodeAt(0);
        while (++index2 < length) {
          codeUnit = string.charCodeAt(index2);
          if (codeUnit == 0) {
            result += "�";
            continue;
          }
          if (
            // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
            // U+007F, […]
            codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || // If the character is the first character and is in the range [0-9]
            // (U+0030 to U+0039), […]
            index2 == 0 && codeUnit >= 48 && codeUnit <= 57 || // If the character is the second character and is in the range [0-9]
            // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
            index2 == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45
          ) {
            result += "\\" + codeUnit.toString(16) + " ";
            continue;
          }
          if (
            // If the character is the first character and is a `-` (U+002D), and
            // there is no second character, […]
            index2 == 0 && length == 1 && codeUnit == 45
          ) {
            result += "\\" + string.charAt(index2);
            continue;
          }
          if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
            result += string.charAt(index2);
            continue;
          }
          result += "\\" + string.charAt(index2);
        }
        return result;
      };
      if (!root.CSS) {
        root.CSS = {};
      }
      root.CSS.escape = cssEscape;
      return cssEscape;
    });
  })(css_escape$1);
  return css_escape$1.exports;
}
var css_escapeExports = requireCss_escape();
const escape$1 = /* @__PURE__ */ getDefaultExportFromCjs(css_escapeExports);
class GenericTypeError extends Error {
  constructor(expectedString, received, matcherFn, context) {
    super();
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, matcherFn);
    }
    let withType = "";
    try {
      withType = context.utils.printWithType(
        "Received",
        received,
        context.utils.printReceived
      );
    } catch (e2) {
    }
    this.message = [
      context.utils.matcherHint(
        `${context.isNot ? ".not" : ""}.${matcherFn.name}`,
        "received",
        ""
      ),
      "",
      // eslint-disable-next-line new-cap
      `${context.utils.RECEIVED_COLOR(
        "received"
      )} value must ${expectedString}.`,
      withType
    ].join("\n");
  }
}
class HtmlElementTypeError extends GenericTypeError {
  constructor(...args) {
    super("be an HTMLElement or an SVGElement", ...args);
  }
}
class NodeTypeError extends GenericTypeError {
  constructor(...args) {
    super("be a Node", ...args);
  }
}
function checkHasWindow(htmlElement, ErrorClass, ...args) {
  if (!htmlElement || !htmlElement.ownerDocument || !htmlElement.ownerDocument.defaultView) {
    throw new ErrorClass(htmlElement, ...args);
  }
}
function checkNode(node, ...args) {
  checkHasWindow(node, NodeTypeError, ...args);
  const window2 = node.ownerDocument.defaultView;
  if (!(node instanceof window2.Node)) {
    throw new NodeTypeError(node, ...args);
  }
}
function checkHtmlElement(htmlElement, ...args) {
  checkHasWindow(htmlElement, HtmlElementTypeError, ...args);
  const window2 = htmlElement.ownerDocument.defaultView;
  if (!(htmlElement instanceof window2.HTMLElement) && !(htmlElement instanceof window2.SVGElement)) {
    throw new HtmlElementTypeError(htmlElement, ...args);
  }
}
class InvalidCSSError extends Error {
  constructor(received, matcherFn, context) {
    super();
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, matcherFn);
    }
    this.message = [
      received.message,
      "",
      // eslint-disable-next-line new-cap
      context.utils.RECEIVED_COLOR(`Failing css:`),
      // eslint-disable-next-line new-cap
      context.utils.RECEIVED_COLOR(`${received.css}`)
    ].join("\n");
  }
}
function parseCSS(css, ...args) {
  const ast = m(`selector { ${css} }`, { silent: true }).stylesheet;
  if (ast.parsingErrors && ast.parsingErrors.length > 0) {
    const { reason, line } = ast.parsingErrors[0];
    throw new InvalidCSSError(
      {
        css,
        message: `Syntax error parsing expected css: ${reason} on line: ${line}`
      },
      ...args
    );
  }
  const parsedRules = ast.rules[0].declarations.filter((d) => d.type === "declaration").reduce(
    (obj, { property, value }) => Object.assign(obj, { [property]: value }),
    {}
  );
  return parsedRules;
}
function display(context, value) {
  return typeof value === "string" ? value : context.utils.stringify(value);
}
function getMessage(context, matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [
    `${matcher}
`,
    // eslint-disable-next-line new-cap
    `${expectedLabel}:
${context.utils.EXPECTED_COLOR(
      redent(display(context, expectedValue), 2)
    )}`,
    // eslint-disable-next-line new-cap
    `${receivedLabel}:
${context.utils.RECEIVED_COLOR(
      redent(display(context, receivedValue), 2)
    )}`
  ].join("\n");
}
function matches(textToMatch, matcher) {
  if (matcher instanceof RegExp) {
    return matcher.test(textToMatch);
  } else {
    return textToMatch.includes(String(matcher));
  }
}
function deprecate(name, replacementText) {
  console.warn(
    `Warning: ${name} has been deprecated and will be removed in future updates.`,
    replacementText
  );
}
function normalize(text) {
  return text.replace(/\s+/g, " ").trim();
}
function getTag(element) {
  return element.tagName && element.tagName.toLowerCase();
}
function getSelectValue({ multiple, options }) {
  const selectedOptions = [...options].filter((option) => option.selected);
  if (multiple) {
    return [...selectedOptions].map((opt) => opt.value);
  }
  if (selectedOptions.length === 0) {
    return void 0;
  }
  return selectedOptions[0].value;
}
function getInputValue(inputElement) {
  switch (inputElement.type) {
    case "number":
      return inputElement.value === "" ? null : Number(inputElement.value);
    case "checkbox":
      return inputElement.checked;
    default:
      return inputElement.value;
  }
}
const rolesSupportingValues = ["meter", "progressbar", "slider", "spinbutton"];
function getAccessibleValue(element) {
  if (!rolesSupportingValues.includes(element.getAttribute("role"))) {
    return void 0;
  }
  return Number(element.getAttribute("aria-valuenow"));
}
function getSingleElementValue(element) {
  if (!element) {
    return void 0;
  }
  switch (element.tagName.toLowerCase()) {
    case "input":
      return getInputValue(element);
    case "select":
      return getSelectValue(element);
    default: {
      return element.value ?? getAccessibleValue(element);
    }
  }
}
function toSentence(array, { wordConnector = ", ", lastWordConnector = " and " } = {}) {
  return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(
    array.length > 1 ? lastWordConnector : ""
  );
}
function compareAsSet(val1, val2) {
  if (Array.isArray(val1) && Array.isArray(val2)) {
    return [...new Set(val1)].every((v) => new Set(val2).has(v));
  }
  return val1 === val2;
}
function toBeInTheDOM(element, container) {
  deprecate(
    "toBeInTheDOM",
    "Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container."
  );
  if (element) {
    checkHtmlElement(element, toBeInTheDOM, this);
  }
  if (container) {
    checkHtmlElement(container, toBeInTheDOM, this);
  }
  return {
    pass: container ? container.contains(element) : !!element,
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeInTheDOM`,
          "element",
          ""
        ),
        "",
        "Received:",
        `  ${this.utils.printReceived(
          element ? element.cloneNode(false) : element
        )}`
      ].join("\n");
    }
  };
}
function toBeInTheDocument(element) {
  if (element !== null || !this.isNot) {
    checkHtmlElement(element, toBeInTheDocument, this);
  }
  const pass = element === null ? false : element.ownerDocument === element.getRootNode({ composed: true });
  const errorFound = () => {
    return `expected document not to contain element, found ${this.utils.stringify(
      element.cloneNode(true)
    )} instead`;
  };
  const errorNotFound = () => {
    return `element could not be found in the document`;
  };
  return {
    pass,
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeInTheDocument`,
          "element",
          ""
        ),
        "",
        // eslint-disable-next-line new-cap
        this.utils.RECEIVED_COLOR(this.isNot ? errorFound() : errorNotFound())
      ].join("\n");
    }
  };
}
function toBeEmpty(element) {
  deprecate(
    "toBeEmpty",
    "Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM."
  );
  checkHtmlElement(element, toBeEmpty, this);
  return {
    pass: element.innerHTML === "",
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeEmpty`,
          "element",
          ""
        ),
        "",
        "Received:",
        `  ${this.utils.printReceived(element.innerHTML)}`
      ].join("\n");
    }
  };
}
function toBeEmptyDOMElement(element) {
  checkHtmlElement(element, toBeEmptyDOMElement, this);
  return {
    pass: isEmptyElement(element),
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeEmptyDOMElement`,
          "element",
          ""
        ),
        "",
        "Received:",
        `  ${this.utils.printReceived(element.innerHTML)}`
      ].join("\n");
    }
  };
}
function isEmptyElement(element) {
  const nonCommentChildNodes = [...element.childNodes].filter((node) => node.nodeType !== 8);
  return nonCommentChildNodes.length === 0;
}
function toContainElement(container, element) {
  checkHtmlElement(container, toContainElement, this);
  if (element !== null) {
    checkHtmlElement(element, toContainElement, this);
  }
  return {
    pass: container.contains(element),
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toContainElement`,
          "element",
          "element"
        ),
        "",
        // eslint-disable-next-line new-cap
        this.utils.RECEIVED_COLOR(`${this.utils.stringify(
          container.cloneNode(false)
        )} ${this.isNot ? "contains:" : "does not contain:"} ${this.utils.stringify(element ? element.cloneNode(false) : element)}
        `)
      ].join("\n");
    }
  };
}
function getNormalizedHtml(container, htmlText) {
  const div = container.ownerDocument.createElement("div");
  div.innerHTML = htmlText;
  return div.innerHTML;
}
function toContainHTML(container, htmlText) {
  checkHtmlElement(container, toContainHTML, this);
  if (typeof htmlText !== "string") {
    throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`);
  }
  return {
    pass: container.outerHTML.includes(getNormalizedHtml(container, htmlText)),
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toContainHTML`,
          "element",
          ""
        ),
        "Expected:",
        // eslint-disable-next-line new-cap
        `  ${this.utils.EXPECTED_COLOR(htmlText)}`,
        "Received:",
        `  ${this.utils.printReceived(container.cloneNode(true))}`
      ].join("\n");
    }
  };
}
function toHaveTextContent(node, checkWith, options = { normalizeWhitespace: true }) {
  checkNode(node, toHaveTextContent, this);
  const textContent = options.normalizeWhitespace ? normalize(node.textContent) : node.textContent.replace(/\u00a0/g, " ");
  const checkingWithEmptyString = textContent !== "" && checkWith === "";
  return {
    pass: !checkingWithEmptyString && matches(textContent, checkWith),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toHaveTextContent`,
          "element",
          ""
        ),
        checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`,
        checkWith,
        "Received",
        textContent
      );
    }
  };
}
function toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {
  checkHtmlElement(htmlElement, toHaveAccessibleDescription, this);
  const actualAccessibleDescription = computeAccessibleDescription(htmlElement);
  const missingExpectedValue = arguments.length === 1;
  let pass = false;
  if (missingExpectedValue) {
    pass = actualAccessibleDescription !== "";
  } else {
    pass = expectedAccessibleDescription instanceof RegExp ? expectedAccessibleDescription.test(actualAccessibleDescription) : this.equals(
      actualAccessibleDescription,
      expectedAccessibleDescription
    );
  }
  return {
    pass,
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.${toHaveAccessibleDescription.name}`,
          "element",
          ""
        ),
        `Expected element ${to} have accessible description`,
        expectedAccessibleDescription,
        "Received",
        actualAccessibleDescription
      );
    }
  };
}
const ariaInvalidName = "aria-invalid";
const validStates = ["false"];
function toHaveAccessibleErrorMessage(htmlElement, expectedAccessibleErrorMessage) {
  checkHtmlElement(htmlElement, toHaveAccessibleErrorMessage, this);
  const to = this.isNot ? "not to" : "to";
  const method = this.isNot ? ".not.toHaveAccessibleErrorMessage" : ".toHaveAccessibleErrorMessage";
  const errormessageId = htmlElement.getAttribute("aria-errormessage");
  const errormessageIdInvalid = !!errormessageId && /\s+/.test(errormessageId);
  if (errormessageIdInvalid) {
    return {
      pass: false,
      message: () => {
        return getMessage(
          this,
          this.utils.matcherHint(method, "element"),
          "Expected element's `aria-errormessage` attribute to be empty or a single, valid ID",
          "",
          "Received",
          `aria-errormessage="${errormessageId}"`
        );
      }
    };
  }
  const ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);
  const fieldValid = !htmlElement.hasAttribute(ariaInvalidName) || validStates.includes(ariaInvalidVal);
  if (fieldValid) {
    return {
      pass: false,
      message: () => {
        return getMessage(
          this,
          this.utils.matcherHint(method, "element"),
          "Expected element to be marked as invalid with attribute",
          `${ariaInvalidName}="${String(true)}"`,
          "Received",
          htmlElement.hasAttribute("aria-invalid") ? `${ariaInvalidName}="${htmlElement.getAttribute(ariaInvalidName)}` : null
        );
      }
    };
  }
  const error = normalize(
    htmlElement.ownerDocument.getElementById(errormessageId)?.textContent ?? ""
  );
  return {
    pass: expectedAccessibleErrorMessage === void 0 ? Boolean(error) : expectedAccessibleErrorMessage instanceof RegExp ? expectedAccessibleErrorMessage.test(error) : this.equals(error, expectedAccessibleErrorMessage),
    message: () => {
      return getMessage(
        this,
        this.utils.matcherHint(method, "element"),
        `Expected element ${to} have accessible error message`,
        expectedAccessibleErrorMessage ?? "",
        "Received",
        error
      );
    }
  };
}
const elementRoleList = buildElementRoleList(libExports.elementRoles);
function toHaveRole(htmlElement, expectedRole) {
  checkHtmlElement(htmlElement, toHaveRole, this);
  const actualRoles = getExplicitOrImplicitRoles(htmlElement);
  const pass = actualRoles.some((el) => el === expectedRole);
  return {
    pass,
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.${toHaveRole.name}`,
          "element",
          ""
        ),
        `Expected element ${to} have role`,
        expectedRole,
        "Received",
        actualRoles.join(", ")
      );
    }
  };
}
function getExplicitOrImplicitRoles(htmlElement) {
  const hasExplicitRole = htmlElement.hasAttribute("role");
  if (hasExplicitRole) {
    const roleValue = htmlElement.getAttribute("role");
    return roleValue.split(" ").filter(Boolean);
  }
  const implicitRoles = getImplicitAriaRoles(htmlElement);
  return implicitRoles;
}
function getImplicitAriaRoles(currentNode) {
  for (const { match, roles } of elementRoleList) {
    if (match(currentNode)) {
      return [...roles];
    }
  }
  return [];
}
function buildElementRoleList(elementRolesMap) {
  function makeElementSelector({ name, attributes }) {
    return `${name}${attributes.map(({ name: attributeName, value, constraints = [] }) => {
      const shouldNotExist = constraints.indexOf("undefined") !== -1;
      if (shouldNotExist) {
        return `:not([${attributeName}])`;
      } else if (value) {
        return `[${attributeName}="${value}"]`;
      } else {
        return `[${attributeName}]`;
      }
    }).join("")}`;
  }
  function getSelectorSpecificity({ attributes = [] }) {
    return attributes.length;
  }
  function bySelectorSpecificity({ specificity: leftSpecificity }, { specificity: rightSpecificity }) {
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let { attributes = [] } = element;
    const typeTextIndex = attributes.findIndex(
      (attribute) => attribute.value && attribute.name === "type" && attribute.value === "text"
    );
    if (typeTextIndex >= 0) {
      attributes = [
        ...attributes.slice(0, typeTextIndex),
        ...attributes.slice(typeTextIndex + 1)
      ];
    }
    const selector = makeElementSelector({ ...element, attributes });
    return (node) => {
      if (typeTextIndex >= 0 && node.type !== "text") {
        return false;
      }
      return node.matches(selector);
    };
  }
  let result = [];
  for (const [element, roles] of elementRolesMap.entries()) {
    result = [
      ...result,
      {
        match: match(element),
        roles: Array.from(roles),
        specificity: getSelectorSpecificity(element)
      }
    ];
  }
  return result.sort(bySelectorSpecificity);
}
function toHaveAccessibleName(htmlElement, expectedAccessibleName) {
  checkHtmlElement(htmlElement, toHaveAccessibleName, this);
  const actualAccessibleName = computeAccessibleName(htmlElement);
  const missingExpectedValue = arguments.length === 1;
  let pass = false;
  if (missingExpectedValue) {
    pass = actualAccessibleName !== "";
  } else {
    pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName);
  }
  return {
    pass,
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.${toHaveAccessibleName.name}`,
          "element",
          ""
        ),
        `Expected element ${to} have accessible name`,
        expectedAccessibleName,
        "Received",
        actualAccessibleName
      );
    }
  };
}
function printAttribute(stringify, name, value) {
  return value === void 0 ? name : `${name}=${stringify(value)}`;
}
function getAttributeComment(stringify, name, value) {
  return value === void 0 ? `element.hasAttribute(${stringify(name)})` : `element.getAttribute(${stringify(name)}) === ${stringify(value)}`;
}
function toHaveAttribute(htmlElement, name, expectedValue) {
  checkHtmlElement(htmlElement, toHaveAttribute, this);
  const isExpectedValuePresent = expectedValue !== void 0;
  const hasAttribute = htmlElement.hasAttribute(name);
  const receivedValue = htmlElement.getAttribute(name);
  return {
    pass: isExpectedValuePresent ? hasAttribute && this.equals(receivedValue, expectedValue) : hasAttribute,
    message: () => {
      const to = this.isNot ? "not to" : "to";
      const receivedAttribute = hasAttribute ? printAttribute(this.utils.stringify, name, receivedValue) : null;
      const matcher = this.utils.matcherHint(
        `${this.isNot ? ".not" : ""}.toHaveAttribute`,
        "element",
        this.utils.printExpected(name),
        {
          secondArgument: isExpectedValuePresent ? this.utils.printExpected(expectedValue) : void 0,
          comment: getAttributeComment(
            this.utils.stringify,
            name,
            expectedValue
          )
        }
      );
      return getMessage(
        this,
        matcher,
        `Expected the element ${to} have attribute`,
        printAttribute(this.utils.stringify, name, expectedValue),
        "Received",
        receivedAttribute
      );
    }
  };
}
function getExpectedClassNamesAndOptions(params) {
  const lastParam = params.pop();
  let expectedClassNames, options;
  if (typeof lastParam === "object" && !(lastParam instanceof RegExp)) {
    expectedClassNames = params;
    options = lastParam;
  } else {
    expectedClassNames = params.concat(lastParam);
    options = { exact: false };
  }
  return { expectedClassNames, options };
}
function splitClassNames(str) {
  if (!str) return [];
  return str.split(/\s+/).filter((s2) => s2.length > 0);
}
function isSubset$1(subset, superset) {
  return subset.every(
    (strOrRegexp) => typeof strOrRegexp === "string" ? superset.includes(strOrRegexp) : superset.some((className) => strOrRegexp.test(className))
  );
}
function toHaveClass(htmlElement, ...params) {
  checkHtmlElement(htmlElement, toHaveClass, this);
  const { expectedClassNames, options } = getExpectedClassNamesAndOptions(params);
  const received = splitClassNames(htmlElement.getAttribute("class"));
  const expected = expectedClassNames.reduce(
    (acc, className) => acc.concat(
      typeof className === "string" || !className ? splitClassNames(className) : className
    ),
    []
  );
  const hasRegExp = expected.some((className) => className instanceof RegExp);
  if (options.exact && hasRegExp) {
    throw new Error("Exact option does not support RegExp expected class names");
  }
  if (options.exact) {
    return {
      pass: isSubset$1(expected, received) && expected.length === received.length,
      message: () => {
        const to = this.isNot ? "not to" : "to";
        return getMessage(
          this,
          this.utils.matcherHint(
            `${this.isNot ? ".not" : ""}.toHaveClass`,
            "element",
            this.utils.printExpected(expected.join(" "))
          ),
          `Expected the element ${to} have EXACTLY defined classes`,
          expected.join(" "),
          "Received",
          received.join(" ")
        );
      }
    };
  }
  return expected.length > 0 ? {
    pass: isSubset$1(expected, received),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toHaveClass`,
          "element",
          this.utils.printExpected(expected.join(" "))
        ),
        `Expected the element ${to} have class`,
        expected.join(" "),
        "Received",
        received.join(" ")
      );
    }
  } : {
    pass: this.isNot ? received.length > 0 : false,
    message: () => this.isNot ? getMessage(
      this,
      this.utils.matcherHint(".not.toHaveClass", "element", ""),
      "Expected the element to have classes",
      "(none)",
      "Received",
      received.join(" ")
    ) : [
      this.utils.matcherHint(`.toHaveClass`, "element"),
      "At least one expected class must be provided."
    ].join("\n")
  };
}
function getStyleDeclaration(document2, css) {
  const styles = {};
  const copy2 = document2.createElement("div");
  Object.keys(css).forEach((property) => {
    copy2.style[property] = css[property];
    styles[property] = copy2.style[property];
  });
  return styles;
}
function isSubset(styles, computedStyle) {
  return !!Object.keys(styles).length && Object.entries(styles).every(([prop, value]) => {
    const isCustomProperty = prop.startsWith("--");
    const spellingVariants = [prop];
    if (!isCustomProperty) spellingVariants.push(prop.toLowerCase());
    return spellingVariants.some(
      (name) => computedStyle[name] === value || computedStyle.getPropertyValue(name) === value
    );
  });
}
function printoutStyles(styles) {
  return Object.keys(styles).sort().map((prop) => `${prop}: ${styles[prop]};`).join("\n");
}
function expectedDiff(diffFn, expected, computedStyles) {
  const received = Array.from(computedStyles).filter((prop) => expected[prop] !== void 0).reduce(
    (obj, prop) => Object.assign(obj, { [prop]: computedStyles.getPropertyValue(prop) }),
    {}
  );
  const diffOutput = diffFn(printoutStyles(expected), printoutStyles(received));
  return diffOutput.replace(`${pico.red("+ Received")}
`, "");
}
function toHaveStyle(htmlElement, css) {
  checkHtmlElement(htmlElement, toHaveStyle, this);
  const parsedCSS = typeof css === "object" ? css : parseCSS(css, toHaveStyle, this);
  const { getComputedStyle } = htmlElement.ownerDocument.defaultView;
  const expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);
  const received = getComputedStyle(htmlElement);
  return {
    pass: isSubset(expected, received),
    message: () => {
      const matcher = `${this.isNot ? ".not" : ""}.toHaveStyle`;
      return [
        this.utils.matcherHint(matcher, "element", ""),
        expectedDiff(this.utils.diff, expected, received)
      ].join("\n\n");
    }
  };
}
function toHaveFocus(element) {
  checkHtmlElement(element, toHaveFocus, this);
  return {
    pass: element.ownerDocument.activeElement === element,
    message: () => {
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toHaveFocus`,
          "element",
          ""
        ),
        "",
        ...this.isNot ? [
          "Received element is focused:",
          `  ${this.utils.printReceived(element)}`
        ] : [
          "Expected element with focus:",
          `  ${this.utils.printExpected(element)}`,
          "Received element with focus:",
          `  ${this.utils.printReceived(
            element.ownerDocument.activeElement
          )}`
        ]
      ].join("\n");
    }
  };
}
function getMultiElementValue(elements) {
  const types = [...new Set(elements.map((element) => element.type))];
  if (types.length !== 1) {
    throw new Error(
      "Multiple form elements with the same name must be of the same type"
    );
  }
  switch (types[0]) {
    case "radio": {
      const theChosenOne = elements.find((radio) => radio.checked);
      return theChosenOne ? theChosenOne.value : void 0;
    }
    case "checkbox":
      return elements.filter((checkbox) => checkbox.checked).map((checkbox) => checkbox.value);
    default:
      return elements.map((element) => element.value);
  }
}
function getFormValue(container, name) {
  const elements = [...container.querySelectorAll(`[name="${escape$1(name)}"]`)];
  if (elements.length === 0) {
    return void 0;
  }
  switch (elements.length) {
    case 1:
      return getSingleElementValue(elements[0]);
    default:
      return getMultiElementValue(elements);
  }
}
function getPureName(name) {
  return /\[\]$/.test(name) ? name.slice(0, -2) : name;
}
function getAllFormValues(container) {
  const names = Array.from(container.elements).map((element) => element.name);
  return names.reduce(
    (obj, name) => ({
      ...obj,
      [getPureName(name)]: getFormValue(container, name)
    }),
    {}
  );
}
function toHaveFormValues(formElement, expectedValues) {
  checkHtmlElement(formElement, toHaveFormValues, this);
  if (!formElement.elements) {
    throw new Error("toHaveFormValues must be called on a form or a fieldset");
  }
  const formValues = getAllFormValues(formElement);
  return {
    pass: Object.entries(expectedValues).every(
      ([name, expectedValue]) => compareAsSet(formValues[name], expectedValue)
    ),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      const matcher = `${this.isNot ? ".not" : ""}.toHaveFormValues`;
      const commonKeyValues = Object.keys(formValues).filter((key) => expectedValues.hasOwnProperty(key)).reduce((obj, key) => ({ ...obj, [key]: formValues[key] }), {});
      return [
        this.utils.matcherHint(matcher, "element", ""),
        `Expected the element ${to} have form values`,
        this.utils.diff(expectedValues, commonKeyValues)
      ].join("\n\n");
    }
  };
}
function isStyleVisible(element) {
  const { getComputedStyle } = element.ownerDocument.defaultView;
  const { display: display2, visibility, opacity } = getComputedStyle(element);
  return display2 !== "none" && visibility !== "hidden" && visibility !== "collapse" && opacity !== "0" && opacity !== 0;
}
function isAttributeVisible(element, previousElement) {
  let detailsVisibility;
  if (previousElement) {
    detailsVisibility = element.nodeName === "DETAILS" && previousElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true;
  } else {
    detailsVisibility = element.nodeName === "DETAILS" ? element.hasAttribute("open") : true;
  }
  return !element.hasAttribute("hidden") && detailsVisibility;
}
function isElementVisible(element, previousElement) {
  return isStyleVisible(element) && isAttributeVisible(element, previousElement) && (!element.parentElement || isElementVisible(element.parentElement, element));
}
function toBeVisible(element) {
  checkHtmlElement(element, toBeVisible, this);
  const isInDocument = element.ownerDocument === element.getRootNode({ composed: true });
  const isVisible2 = isInDocument && isElementVisible(element);
  return {
    pass: isVisible2,
    message: () => {
      const is = isVisible2 ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeVisible`,
          "element",
          ""
        ),
        "",
        `Received element ${is} visible${isInDocument ? "" : " (element is not in the document)"}:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
const FORM_TAGS$2 = [
  "fieldset",
  "input",
  "select",
  "optgroup",
  "option",
  "button",
  "textarea"
];
function isFirstLegendChildOfFieldset(element, parent) {
  return getTag(element) === "legend" && getTag(parent) === "fieldset" && element.isSameNode(
    Array.from(parent.children).find((child) => getTag(child) === "legend")
  );
}
function isElementDisabledByParent(element, parent) {
  return isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent);
}
function isCustomElement(tag) {
  return tag.includes("-");
}
function canElementBeDisabled(element) {
  const tag = getTag(element);
  return FORM_TAGS$2.includes(tag) || isCustomElement(tag);
}
function isElementDisabled(element) {
  return canElementBeDisabled(element) && element.hasAttribute("disabled");
}
function isAncestorDisabled(element) {
  const parent = element.parentElement;
  return Boolean(parent) && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));
}
function isElementOrAncestorDisabled(element) {
  return canElementBeDisabled(element) && (isElementDisabled(element) || isAncestorDisabled(element));
}
function toBeDisabled(element) {
  checkHtmlElement(element, toBeDisabled, this);
  const isDisabled2 = isElementOrAncestorDisabled(element);
  return {
    pass: isDisabled2,
    message: () => {
      const is = isDisabled2 ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeDisabled`,
          "element",
          ""
        ),
        "",
        `Received element ${is} disabled:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
function toBeEnabled(element) {
  checkHtmlElement(element, toBeEnabled, this);
  const isEnabled = !isElementOrAncestorDisabled(element);
  return {
    pass: isEnabled,
    message: () => {
      const is = isEnabled ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeEnabled`,
          "element",
          ""
        ),
        "",
        `Received element ${is} enabled:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
const FORM_TAGS$1 = ["select", "textarea"];
const ARIA_FORM_TAGS = ["input", "select", "textarea"];
const UNSUPPORTED_INPUT_TYPES = [
  "color",
  "hidden",
  "range",
  "submit",
  "image",
  "reset"
];
const SUPPORTED_ARIA_ROLES = [
  "checkbox",
  "combobox",
  "gridcell",
  "listbox",
  "radiogroup",
  "spinbutton",
  "textbox",
  "tree"
];
function isRequiredOnFormTagsExceptInput(element) {
  return FORM_TAGS$1.includes(getTag(element)) && element.hasAttribute("required");
}
function isRequiredOnSupportedInput(element) {
  return getTag(element) === "input" && element.hasAttribute("required") && (element.hasAttribute("type") && !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute("type")) || !element.hasAttribute("type"));
}
function isElementRequiredByARIA(element) {
  return element.hasAttribute("aria-required") && element.getAttribute("aria-required") === "true" && (ARIA_FORM_TAGS.includes(getTag(element)) || element.hasAttribute("role") && SUPPORTED_ARIA_ROLES.includes(element.getAttribute("role")));
}
function toBeRequired(element) {
  checkHtmlElement(element, toBeRequired, this);
  const isRequired = isRequiredOnFormTagsExceptInput(element) || isRequiredOnSupportedInput(element) || isElementRequiredByARIA(element);
  return {
    pass: isRequired,
    message: () => {
      const is = isRequired ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeRequired`,
          "element",
          ""
        ),
        "",
        `Received element ${is} required:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
const FORM_TAGS = ["form", "input", "select", "textarea"];
function isElementHavingAriaInvalid(element) {
  return element.hasAttribute("aria-invalid") && element.getAttribute("aria-invalid") !== "false";
}
function isSupportsValidityMethod(element) {
  return FORM_TAGS.includes(getTag(element));
}
function isElementInvalid(element) {
  const isHaveAriaInvalid = isElementHavingAriaInvalid(element);
  if (isSupportsValidityMethod(element)) {
    return isHaveAriaInvalid || !element.checkValidity();
  } else {
    return isHaveAriaInvalid;
  }
}
function toBeInvalid(element) {
  checkHtmlElement(element, toBeInvalid, this);
  const isInvalid = isElementInvalid(element);
  return {
    pass: isInvalid,
    message: () => {
      const is = isInvalid ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeInvalid`,
          "element",
          ""
        ),
        "",
        `Received element ${is} currently invalid:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
function toBeValid(element) {
  checkHtmlElement(element, toBeValid, this);
  const isValid = !isElementInvalid(element);
  return {
    pass: isValid,
    message: () => {
      const is = isValid ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeValid`,
          "element",
          ""
        ),
        "",
        `Received element ${is} currently valid:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
function toHaveValue(htmlElement, expectedValue) {
  checkHtmlElement(htmlElement, toHaveValue, this);
  if (htmlElement.tagName.toLowerCase() === "input" && ["checkbox", "radio"].includes(htmlElement.type)) {
    throw new Error(
      "input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead"
    );
  }
  const receivedValue = getSingleElementValue(htmlElement);
  const expectsValue = expectedValue !== void 0;
  let expectedTypedValue = expectedValue;
  let receivedTypedValue = receivedValue;
  if (expectedValue == receivedValue && expectedValue !== receivedValue) {
    expectedTypedValue = `${expectedValue} (${typeof expectedValue})`;
    receivedTypedValue = `${receivedValue} (${typeof receivedValue})`;
  }
  return {
    pass: expectsValue ? compareAsSet(receivedValue, expectedValue) : Boolean(receivedValue),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      const matcher = this.utils.matcherHint(
        `${this.isNot ? ".not" : ""}.toHaveValue`,
        "element",
        expectedValue
      );
      return getMessage(
        this,
        matcher,
        `Expected the element ${to} have value`,
        expectsValue ? expectedTypedValue : "(any)",
        "Received",
        receivedTypedValue
      );
    }
  };
}
function toHaveDisplayValue(htmlElement, expectedValue) {
  checkHtmlElement(htmlElement, toHaveDisplayValue, this);
  const tagName = htmlElement.tagName.toLowerCase();
  if (!["select", "input", "textarea"].includes(tagName)) {
    throw new Error(
      ".toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead."
    );
  }
  if (tagName === "input" && ["radio", "checkbox"].includes(htmlElement.type)) {
    throw new Error(
      `.toHaveDisplayValue() currently does not support input[type="${htmlElement.type}"], try with another matcher instead.`
    );
  }
  const values = getValues(tagName, htmlElement);
  const expectedValues = getExpectedValues(expectedValue);
  const numberOfMatchesWithValues = expectedValues.filter(
    (expected) => values.some(
      (value) => expected instanceof RegExp ? expected.test(value) : this.equals(value, String(expected))
    )
  ).length;
  const matchedWithAllValues = numberOfMatchesWithValues === values.length;
  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;
  return {
    pass: matchedWithAllValues && matchedWithAllExpectedValues,
    message: () => getMessage(
      this,
      this.utils.matcherHint(
        `${this.isNot ? ".not" : ""}.toHaveDisplayValue`,
        "element",
        ""
      ),
      `Expected element ${this.isNot ? "not " : ""}to have display value`,
      expectedValue,
      "Received",
      values
    )
  };
}
function getValues(tagName, htmlElement) {
  return tagName === "select" ? Array.from(htmlElement).filter((option) => option.selected).map((option) => option.textContent) : [htmlElement.value];
}
function getExpectedValues(expectedValue) {
  return expectedValue instanceof Array ? expectedValue : [expectedValue];
}
function toBeChecked(element) {
  checkHtmlElement(element, toBeChecked, this);
  const isValidInput = () => {
    return element.tagName.toLowerCase() === "input" && ["checkbox", "radio"].includes(element.type);
  };
  const isValidAriaElement = () => {
    return roleSupportsChecked(element.getAttribute("role")) && ["true", "false"].includes(element.getAttribute("aria-checked"));
  };
  if (!isValidInput() && !isValidAriaElement()) {
    return {
      pass: false,
      message: () => `only inputs with type="checkbox" or type="radio" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`
    };
  }
  const isChecked = () => {
    if (isValidInput()) return element.checked;
    return element.getAttribute("aria-checked") === "true";
  };
  return {
    pass: isChecked(),
    message: () => {
      const is = isChecked() ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBeChecked`,
          "element",
          ""
        ),
        "",
        `Received element ${is} checked:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
function supportedRolesSentence() {
  return toSentence(
    supportedRoles().map((role) => `role="${role}"`),
    { lastWordConnector: " or " }
  );
}
function supportedRoles() {
  return libExports.roles.keys().filter(roleSupportsChecked);
}
function roleSupportsChecked(role) {
  return libExports.roles.get(role)?.props["aria-checked"] !== void 0;
}
function toBePartiallyChecked(element) {
  checkHtmlElement(element, toBePartiallyChecked, this);
  const isValidInput = () => {
    return element.tagName.toLowerCase() === "input" && element.type === "checkbox";
  };
  const isValidAriaElement = () => {
    return element.getAttribute("role") === "checkbox";
  };
  if (!isValidInput() && !isValidAriaElement()) {
    return {
      pass: false,
      message: () => 'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead'
    };
  }
  const isPartiallyChecked = () => {
    const isAriaMixed = element.getAttribute("aria-checked") === "mixed";
    if (isValidInput()) {
      return element.indeterminate || isAriaMixed;
    }
    return isAriaMixed;
  };
  return {
    pass: isPartiallyChecked(),
    message: () => {
      const is = isPartiallyChecked() ? "is" : "is not";
      return [
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toBePartiallyChecked`,
          "element",
          ""
        ),
        "",
        `Received element ${is} partially checked:`,
        `  ${this.utils.printReceived(element.cloneNode(false))}`
      ].join("\n");
    }
  };
}
function toHaveDescription(htmlElement, checkWith) {
  deprecate(
    "toHaveDescription",
    "Please use toHaveAccessibleDescription."
  );
  checkHtmlElement(htmlElement, toHaveDescription, this);
  const expectsDescription = checkWith !== void 0;
  const descriptionIDRaw = htmlElement.getAttribute("aria-describedby") || "";
  const descriptionIDs = descriptionIDRaw.split(/\s+/).filter(Boolean);
  let description = "";
  if (descriptionIDs.length > 0) {
    const document2 = htmlElement.ownerDocument;
    const descriptionEls = descriptionIDs.map((descriptionID) => document2.getElementById(descriptionID)).filter(Boolean);
    description = normalize(descriptionEls.map((el) => el.textContent).join(" "));
  }
  return {
    pass: expectsDescription ? checkWith instanceof RegExp ? checkWith.test(description) : this.equals(description, checkWith) : Boolean(description),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toHaveDescription`,
          "element",
          ""
        ),
        `Expected the element ${to} have description`,
        this.utils.printExpected(checkWith),
        "Received",
        this.utils.printReceived(description)
      );
    }
  };
}
function toHaveErrorMessage(htmlElement, checkWith) {
  deprecate("toHaveErrorMessage", "Please use toHaveAccessibleErrorMessage.");
  checkHtmlElement(htmlElement, toHaveErrorMessage, this);
  if (!htmlElement.hasAttribute("aria-invalid") || htmlElement.getAttribute("aria-invalid") === "false") {
    const not = this.isNot ? ".not" : "";
    return {
      pass: false,
      message: () => {
        return getMessage(
          this,
          this.utils.matcherHint(`${not}.toHaveErrorMessage`, "element", ""),
          `Expected the element to have invalid state indicated by`,
          'aria-invalid="true"',
          "Received",
          htmlElement.hasAttribute("aria-invalid") ? `aria-invalid="${htmlElement.getAttribute("aria-invalid")}"` : this.utils.printReceived("")
        );
      }
    };
  }
  const expectsErrorMessage = checkWith !== void 0;
  const errormessageIDRaw = htmlElement.getAttribute("aria-errormessage") || "";
  const errormessageIDs = errormessageIDRaw.split(/\s+/).filter(Boolean);
  let errormessage = "";
  if (errormessageIDs.length > 0) {
    const document2 = htmlElement.ownerDocument;
    const errormessageEls = errormessageIDs.map((errormessageID) => document2.getElementById(errormessageID)).filter(Boolean);
    errormessage = normalize(
      errormessageEls.map((el) => el.textContent).join(" ")
    );
  }
  return {
    pass: expectsErrorMessage ? checkWith instanceof RegExp ? checkWith.test(errormessage) : this.equals(errormessage, checkWith) : Boolean(errormessage),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      return getMessage(
        this,
        this.utils.matcherHint(
          `${this.isNot ? ".not" : ""}.toHaveErrorMessage`,
          "element",
          ""
        ),
        `Expected the element ${to} have error message`,
        this.utils.printExpected(checkWith),
        "Received",
        this.utils.printReceived(errormessage)
      );
    }
  };
}
function getSelection(element) {
  const selection = element.ownerDocument.getSelection();
  if (["input", "textarea"].includes(element.tagName.toLowerCase())) {
    if (["radio", "checkbox"].includes(element.type)) return "";
    return element.value.toString().substring(element.selectionStart, element.selectionEnd);
  }
  if (selection.anchorNode === null || selection.focusNode === null) {
    return "";
  }
  const originalRange = selection.getRangeAt(0);
  const temporaryRange = element.ownerDocument.createRange();
  if (selection.containsNode(element, false)) {
    temporaryRange.selectNodeContents(element);
    selection.removeAllRanges();
    selection.addRange(temporaryRange);
  } else if (element.contains(selection.anchorNode) && element.contains(selection.focusNode)) ;
  else {
    const selectionStartsWithinElement = element === originalRange.startContainer || element.contains(originalRange.startContainer);
    const selectionEndsWithinElement = element === originalRange.endContainer || element.contains(originalRange.endContainer);
    selection.removeAllRanges();
    if (selectionStartsWithinElement || selectionEndsWithinElement) {
      temporaryRange.selectNodeContents(element);
      if (selectionStartsWithinElement) {
        temporaryRange.setStart(
          originalRange.startContainer,
          originalRange.startOffset
        );
      }
      if (selectionEndsWithinElement) {
        temporaryRange.setEnd(
          originalRange.endContainer,
          originalRange.endOffset
        );
      }
      selection.addRange(temporaryRange);
    }
  }
  const result = selection.toString();
  selection.removeAllRanges();
  selection.addRange(originalRange);
  return result;
}
function toHaveSelection(htmlElement, expectedSelection) {
  checkHtmlElement(htmlElement, toHaveSelection, this);
  const expectsSelection = expectedSelection !== void 0;
  if (expectsSelection && typeof expectedSelection !== "string") {
    throw new Error(`expected selection must be a string or undefined`);
  }
  const receivedSelection = getSelection(htmlElement);
  return {
    pass: expectsSelection ? compareAsSet(receivedSelection, expectedSelection) : Boolean(receivedSelection),
    message: () => {
      const to = this.isNot ? "not to" : "to";
      const matcher = this.utils.matcherHint(
        `${this.isNot ? ".not" : ""}.toHaveSelection`,
        "element",
        expectedSelection
      );
      return getMessage(
        this,
        matcher,
        `Expected the element ${to} have selection`,
        expectsSelection ? expectedSelection : "(any)",
        "Received",
        receivedSelection
      );
    }
  };
}
function toBePressed(element) {
  checkHtmlElement(element, toBePressed, this);
  const roles = (element.getAttribute("role") || "").split(" ").map((role) => role.trim());
  const isButton = element.tagName.toLowerCase() === "button" || element.tagName.toLowerCase() === "input" && element.type === "button" || roles.includes("button");
  const pressedAttribute = element.getAttribute("aria-pressed");
  const isValidAriaElement = pressedAttribute === "true" || pressedAttribute === "false";
  if (!isButton || !isValidAriaElement) {
    return {
      pass: false,
      message: () => `Only button or input with type="button" or element with role="button" and a valid aria-pressed attribute can be used with .toBePressed()`
    };
  }
  const isPressed = pressedAttribute === "true";
  return {
    pass: isButton && isPressed,
    message: () => {
      const matcher = this.utils.matcherHint(
        `${this.isNot ? ".not" : ""}.toBePressed`,
        "element",
        ""
      );
      return getMessage(
        this,
        matcher,
        `Expected element to have`,
        `aria-pressed="${this.isNot ? "false" : "true"}"`,
        `Received`,
        `aria-pressed="${pressedAttribute}"`
      );
    }
  };
}
function toBePartiallyPressed(element) {
  checkHtmlElement(element, toBePartiallyPressed, this);
  const roles = (element.getAttribute("role") || "").split(" ").map((role) => role.trim());
  const isButton = element.tagName.toLowerCase() === "button" || element.tagName.toLowerCase() === "input" && element.type === "button" || roles.includes("button");
  const pressedAttribute = element.getAttribute("aria-pressed");
  const isValidAriaElement = pressedAttribute === "true" || pressedAttribute === "false" || pressedAttribute === "mixed";
  if (!isButton || !isValidAriaElement) {
    return {
      pass: false,
      message: () => `Only button or input with type="button" or element with role="button" and a valid aria-pressed attribute can be used with .toBePartiallyPressed()`
    };
  }
  const isPartiallyPressed = pressedAttribute === "mixed";
  return {
    pass: isButton && isPartiallyPressed,
    message: () => {
      const to = this.isNot ? "not to" : "to";
      const matcher = this.utils.matcherHint(
        `${this.isNot ? ".not" : ""}.toBePartiallyPressed`,
        "element",
        ""
      );
      return getMessage(
        this,
        matcher,
        `Expected element ${to} have`,
        `aria-pressed="mixed"`,
        `Received`,
        `aria-pressed="${pressedAttribute}"`
      );
    }
  };
}
const matchers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  toBeChecked,
  toBeDisabled,
  toBeEmpty,
  toBeEmptyDOMElement,
  toBeEnabled,
  toBeInTheDOM,
  toBeInTheDocument,
  toBeInvalid,
  toBePartiallyChecked,
  toBePartiallyPressed,
  toBePressed,
  toBeRequired,
  toBeValid,
  toBeVisible,
  toContainElement,
  toContainHTML,
  toHaveAccessibleDescription,
  toHaveAccessibleErrorMessage,
  toHaveAccessibleName,
  toHaveAttribute,
  toHaveClass,
  toHaveDescription,
  toHaveDisplayValue,
  toHaveErrorMessage,
  toHaveFocus,
  toHaveFormValues,
  toHaveRole,
  toHaveSelection,
  toHaveStyle,
  toHaveTextContent,
  toHaveValue
}, Symbol.toStringTag, { value: "Module" }));
var build = {};
var hasRequiredBuild;
function requireBuild() {
  if (hasRequiredBuild) return build;
  hasRequiredBuild = 1;
  Object.defineProperty(build, "__esModule", {
    value: true
  });
  build.spyOn = build.mocked = build.fn = build.ModuleMocker = void 0;
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  const MOCK_CONSTRUCTOR_NAME = "mockConstructor";
  const FUNCTION_NAME_RESERVED_PATTERN = /[\s!-\/:-@\[-`{-~]/;
  const FUNCTION_NAME_RESERVED_REPLACE = new RegExp(
    FUNCTION_NAME_RESERVED_PATTERN.source,
    "g"
  );
  const RESERVED_KEYWORDS = /* @__PURE__ */ new Set([
    "arguments",
    "await",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "enum",
    "eval",
    "export",
    "extends",
    "false",
    "finally",
    "for",
    "function",
    "if",
    "implements",
    "import",
    "in",
    "instanceof",
    "interface",
    "let",
    "new",
    "null",
    "package",
    "private",
    "protected",
    "public",
    "return",
    "static",
    "super",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield"
  ]);
  function matchArity(fn2, length) {
    let mockConstructor;
    switch (length) {
      case 1:
        mockConstructor = function(_a) {
          return fn2.apply(this, arguments);
        };
        break;
      case 2:
        mockConstructor = function(_a, _b) {
          return fn2.apply(this, arguments);
        };
        break;
      case 3:
        mockConstructor = function(_a, _b, _c) {
          return fn2.apply(this, arguments);
        };
        break;
      case 4:
        mockConstructor = function(_a, _b, _c, _d) {
          return fn2.apply(this, arguments);
        };
        break;
      case 5:
        mockConstructor = function(_a, _b, _c, _d, _e) {
          return fn2.apply(this, arguments);
        };
        break;
      case 6:
        mockConstructor = function(_a, _b, _c, _d, _e, _f) {
          return fn2.apply(this, arguments);
        };
        break;
      case 7:
        mockConstructor = function(_a, _b, _c, _d, _e, _f, _g) {
          return fn2.apply(this, arguments);
        };
        break;
      case 8:
        mockConstructor = function(_a, _b, _c, _d, _e, _f, _g, _h) {
          return fn2.apply(this, arguments);
        };
        break;
      case 9:
        mockConstructor = function(_a, _b, _c, _d, _e, _f, _g, _h, _i) {
          return fn2.apply(this, arguments);
        };
        break;
      default:
        mockConstructor = function() {
          return fn2.apply(this, arguments);
        };
        break;
    }
    return mockConstructor;
  }
  function getObjectType(value) {
    return Object.prototype.toString.apply(value).slice(8, -1);
  }
  function getType(ref2) {
    const typeName = getObjectType(ref2);
    if (typeName === "Function" || typeName === "AsyncFunction" || typeName === "GeneratorFunction") {
      return "function";
    } else if (Array.isArray(ref2)) {
      return "array";
    } else if (typeName === "Object") {
      return "object";
    } else if (typeName === "Number" || typeName === "String" || typeName === "Boolean" || typeName === "Symbol") {
      return "constant";
    } else if (typeName === "Map" || typeName === "WeakMap" || typeName === "Set") {
      return "collection";
    } else if (typeName === "RegExp") {
      return "regexp";
    } else if (ref2 === void 0) {
      return "undefined";
    } else if (ref2 === null) {
      return "null";
    } else {
      return null;
    }
  }
  function isReadonlyProp(object, prop) {
    if (prop === "arguments" || prop === "caller" || prop === "callee" || prop === "name" || prop === "length") {
      const typeName = getObjectType(object);
      return typeName === "Function" || typeName === "AsyncFunction" || typeName === "GeneratorFunction";
    }
    if (prop === "source" || prop === "global" || prop === "ignoreCase" || prop === "multiline") {
      return getObjectType(object) === "RegExp";
    }
    return false;
  }
  class ModuleMocker {
    /**
     * @see README.md
     * @param global Global object of the test environment, used to create
     * mocks
     */
    constructor(global2) {
      _defineProperty2(this, "_environmentGlobal", void 0);
      _defineProperty2(this, "_mockState", void 0);
      _defineProperty2(this, "_mockConfigRegistry", void 0);
      _defineProperty2(this, "_spyState", void 0);
      _defineProperty2(this, "_invocationCallCounter", void 0);
      this._environmentGlobal = global2;
      this._mockState = /* @__PURE__ */ new WeakMap();
      this._mockConfigRegistry = /* @__PURE__ */ new WeakMap();
      this._spyState = /* @__PURE__ */ new Set();
      this._invocationCallCounter = 1;
    }
    _getSlots(object) {
      if (!object) {
        return [];
      }
      const slots = /* @__PURE__ */ new Set();
      const EnvObjectProto = this._environmentGlobal.Object.prototype;
      const EnvFunctionProto = this._environmentGlobal.Function.prototype;
      const EnvRegExpProto = this._environmentGlobal.RegExp.prototype;
      const ObjectProto = Object.prototype;
      const FunctionProto = Function.prototype;
      const RegExpProto = RegExp.prototype;
      while (object != null && object !== EnvObjectProto && object !== EnvFunctionProto && object !== EnvRegExpProto && object !== ObjectProto && object !== FunctionProto && object !== RegExpProto) {
        const ownNames = Object.getOwnPropertyNames(object);
        for (let i2 = 0; i2 < ownNames.length; i2++) {
          const prop = ownNames[i2];
          if (!isReadonlyProp(object, prop)) {
            const propDesc = Object.getOwnPropertyDescriptor(object, prop);
            if (propDesc !== void 0 && !propDesc.get || object.__esModule) {
              slots.add(prop);
            }
          }
        }
        object = Object.getPrototypeOf(object);
      }
      return Array.from(slots);
    }
    _ensureMockConfig(f) {
      let config2 = this._mockConfigRegistry.get(f);
      if (!config2) {
        config2 = this._defaultMockConfig();
        this._mockConfigRegistry.set(f, config2);
      }
      return config2;
    }
    _ensureMockState(f) {
      let state = this._mockState.get(f);
      if (!state) {
        state = this._defaultMockState();
        this._mockState.set(f, state);
      }
      if (state.calls.length > 0) {
        state.lastCall = state.calls[state.calls.length - 1];
      }
      return state;
    }
    _defaultMockConfig() {
      return {
        mockImpl: void 0,
        mockName: "jest.fn()",
        specificMockImpls: [],
        specificReturnValues: []
      };
    }
    _defaultMockState() {
      return {
        calls: [],
        instances: [],
        invocationCallOrder: [],
        results: []
      };
    }
    _makeComponent(metadata, restore) {
      if (metadata.type === "object") {
        return new this._environmentGlobal.Object();
      } else if (metadata.type === "array") {
        return new this._environmentGlobal.Array();
      } else if (metadata.type === "regexp") {
        return new this._environmentGlobal.RegExp("");
      } else if (metadata.type === "constant" || metadata.type === "collection" || metadata.type === "null" || metadata.type === "undefined") {
        return metadata.value;
      } else if (metadata.type === "function") {
        const prototype = metadata.members && metadata.members.prototype && metadata.members.prototype.members || {};
        const prototypeSlots = this._getSlots(prototype);
        const mocker = this;
        const mockConstructor = matchArity(function(...args) {
          const mockState = mocker._ensureMockState(f);
          const mockConfig = mocker._ensureMockConfig(f);
          mockState.instances.push(this);
          mockState.calls.push(args);
          const mockResult = {
            type: "incomplete",
            value: void 0
          };
          mockState.results.push(mockResult);
          mockState.invocationCallOrder.push(mocker._invocationCallCounter++);
          let finalReturnValue;
          let thrownError;
          let callDidThrowError = false;
          try {
            finalReturnValue = (() => {
              if (this instanceof f) {
                prototypeSlots.forEach((slot) => {
                  if (prototype[slot].type === "function") {
                    const protoImpl = this[slot];
                    this[slot] = mocker.generateFromMetadata(prototype[slot]);
                    this[slot]._protoImpl = protoImpl;
                  }
                });
                const mockImpl = mockConfig.specificMockImpls.length ? mockConfig.specificMockImpls.shift() : mockConfig.mockImpl;
                return mockImpl && mockImpl.apply(this, arguments);
              }
              let specificMockImpl = mockConfig.specificMockImpls.shift();
              if (specificMockImpl === void 0) {
                specificMockImpl = mockConfig.mockImpl;
              }
              if (specificMockImpl) {
                return specificMockImpl.apply(this, arguments);
              }
              if (f._protoImpl) {
                return f._protoImpl.apply(this, arguments);
              }
              return void 0;
            })();
          } catch (error) {
            thrownError = error;
            callDidThrowError = true;
            throw error;
          } finally {
            mockResult.type = callDidThrowError ? "throw" : "return";
            mockResult.value = callDidThrowError ? thrownError : finalReturnValue;
          }
          return finalReturnValue;
        }, metadata.length || 0);
        const f = this._createMockFunction(metadata, mockConstructor);
        f._isMockFunction = true;
        f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;
        if (typeof restore === "function") {
          this._spyState.add(restore);
        }
        this._mockState.set(f, this._defaultMockState());
        this._mockConfigRegistry.set(f, this._defaultMockConfig());
        Object.defineProperty(f, "mock", {
          configurable: false,
          enumerable: true,
          get: () => this._ensureMockState(f),
          set: (val) => this._mockState.set(f, val)
        });
        f.mockClear = () => {
          this._mockState.delete(f);
          return f;
        };
        f.mockReset = () => {
          f.mockClear();
          this._mockConfigRegistry.delete(f);
          return f;
        };
        f.mockRestore = () => {
          f.mockReset();
          return restore ? restore() : void 0;
        };
        f.mockReturnValueOnce = (value) => f.mockImplementationOnce(() => value);
        f.mockResolvedValueOnce = (value) => f.mockImplementationOnce(() => Promise.resolve(value));
        f.mockRejectedValueOnce = (value) => f.mockImplementationOnce(() => Promise.reject(value));
        f.mockReturnValue = (value) => f.mockImplementation(() => value);
        f.mockResolvedValue = (value) => f.mockImplementation(() => Promise.resolve(value));
        f.mockRejectedValue = (value) => f.mockImplementation(() => Promise.reject(value));
        f.mockImplementationOnce = (fn2) => {
          const mockConfig = this._ensureMockConfig(f);
          mockConfig.specificMockImpls.push(fn2);
          return f;
        };
        f.mockImplementation = (fn2) => {
          const mockConfig = this._ensureMockConfig(f);
          mockConfig.mockImpl = fn2;
          return f;
        };
        f.mockReturnThis = () => f.mockImplementation(function() {
          return this;
        });
        f.mockName = (name) => {
          if (name) {
            const mockConfig = this._ensureMockConfig(f);
            mockConfig.mockName = name;
          }
          return f;
        };
        f.getMockName = () => {
          const mockConfig = this._ensureMockConfig(f);
          return mockConfig.mockName || "jest.fn()";
        };
        if (metadata.mockImpl) {
          f.mockImplementation(metadata.mockImpl);
        }
        return f;
      } else {
        const unknownType = metadata.type || "undefined type";
        throw new Error("Unrecognized type " + unknownType);
      }
    }
    _createMockFunction(metadata, mockConstructor) {
      let name = metadata.name;
      if (!name) {
        return mockConstructor;
      }
      const boundFunctionPrefix = "bound ";
      let bindCall = "";
      if (name && name.startsWith(boundFunctionPrefix)) {
        do {
          name = name.substring(boundFunctionPrefix.length);
          bindCall = ".bind(null)";
        } while (name && name.startsWith(boundFunctionPrefix));
      }
      if (name === MOCK_CONSTRUCTOR_NAME) {
        return mockConstructor;
      }
      if (
        // It's a syntax error to define functions with a reserved keyword
        // as name.
        RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number
        /^\d/.test(name)
      ) {
        name = "$" + name;
      }
      if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {
        name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, "$");
      }
      const body = "return function " + name + "() {return " + MOCK_CONSTRUCTOR_NAME + ".apply(this,arguments);}" + bindCall;
      const createConstructor = new this._environmentGlobal.Function(
        MOCK_CONSTRUCTOR_NAME,
        body
      );
      return createConstructor(mockConstructor);
    }
    _generateMock(metadata, callbacks, refs) {
      const mock2 = this._makeComponent(metadata);
      if (metadata.refID != null) {
        refs[metadata.refID] = mock2;
      }
      this._getSlots(metadata.members).forEach((slot) => {
        const slotMetadata = metadata.members && metadata.members[slot] || {};
        if (slotMetadata.ref != null) {
          callbacks.push(
            /* @__PURE__ */ (function(ref2) {
              return () => mock2[slot] = refs[ref2];
            })(slotMetadata.ref)
          );
        } else {
          mock2[slot] = this._generateMock(slotMetadata, callbacks, refs);
        }
      });
      if (metadata.type !== "undefined" && metadata.type !== "null" && mock2.prototype && typeof mock2.prototype === "object") {
        mock2.prototype.constructor = mock2;
      }
      return mock2;
    }
    /**
     * @see README.md
     * @param _metadata Metadata for the mock in the schema returned by the
     * getMetadata method of this module.
     */
    generateFromMetadata(_metadata) {
      const callbacks = [];
      const refs = {};
      const mock2 = this._generateMock(_metadata, callbacks, refs);
      callbacks.forEach((setter) => setter());
      return mock2;
    }
    /**
     * @see README.md
     * @param component The component for which to retrieve metadata.
     */
    getMetadata(component, _refs) {
      const refs = _refs || /* @__PURE__ */ new Map();
      const ref2 = refs.get(component);
      if (ref2 != null) {
        return {
          ref: ref2
        };
      }
      const type2 = getType(component);
      if (!type2) {
        return null;
      }
      const metadata = {
        type: type2
      };
      if (type2 === "constant" || type2 === "collection" || type2 === "undefined" || type2 === "null") {
        metadata.value = component;
        return metadata;
      } else if (type2 === "function") {
        metadata.name = component.name;
        if (component._isMockFunction === true) {
          metadata.mockImpl = component.getMockImplementation();
        }
      }
      metadata.refID = refs.size;
      refs.set(component, metadata.refID);
      let members = null;
      if (type2 !== "array") {
        this._getSlots(component).forEach((slot) => {
          if (type2 === "function" && // @ts-expect-error may be a mock
          component._isMockFunction === true && slot.match(/^mock/)) {
            return;
          }
          const slotMetadata = this.getMetadata(component[slot], refs);
          if (slotMetadata) {
            if (!members) {
              members = {};
            }
            members[slot] = slotMetadata;
          }
        });
      }
      if (members) {
        metadata.members = members;
      }
      return metadata;
    }
    isMockFunction(fn2) {
      return !!fn2 && fn2._isMockFunction === true;
    }
    fn(implementation2) {
      const length = implementation2 ? implementation2.length : 0;
      const fn2 = this._makeComponent({
        length,
        type: "function"
      });
      if (implementation2) {
        fn2.mockImplementation(implementation2);
      }
      return fn2;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    spyOn(object, methodName, accessType) {
      if (accessType) {
        return this._spyOnProperty(object, methodName, accessType);
      }
      if (typeof object !== "object" && typeof object !== "function") {
        throw new Error(
          "Cannot spyOn on a primitive value; " + this._typeOf(object) + " given"
        );
      }
      const original = object[methodName];
      if (!this.isMockFunction(original)) {
        if (typeof original !== "function") {
          throw new Error(
            "Cannot spy the " + methodName + " property because it is not a function; " + this._typeOf(original) + " given instead"
          );
        }
        const isMethodOwner = Object.prototype.hasOwnProperty.call(
          object,
          methodName
        );
        let descriptor = Object.getOwnPropertyDescriptor(object, methodName);
        let proto = Object.getPrototypeOf(object);
        while (!descriptor && proto !== null) {
          descriptor = Object.getOwnPropertyDescriptor(proto, methodName);
          proto = Object.getPrototypeOf(proto);
        }
        let mock2;
        if (descriptor && descriptor.get) {
          const originalGet = descriptor.get;
          mock2 = this._makeComponent(
            {
              type: "function"
            },
            () => {
              descriptor.get = originalGet;
              Object.defineProperty(object, methodName, descriptor);
            }
          );
          descriptor.get = () => mock2;
          Object.defineProperty(object, methodName, descriptor);
        } else {
          mock2 = this._makeComponent(
            {
              type: "function"
            },
            () => {
              if (isMethodOwner) {
                object[methodName] = original;
              } else {
                delete object[methodName];
              }
            }
          );
          object[methodName] = mock2;
        }
        mock2.mockImplementation(function() {
          return original.apply(this, arguments);
        });
      }
      return object[methodName];
    }
    _spyOnProperty(obj, propertyName, accessType = "get") {
      if (typeof obj !== "object" && typeof obj !== "function") {
        throw new Error(
          "Cannot spyOn on a primitive value; " + this._typeOf(obj) + " given"
        );
      }
      if (!obj) {
        throw new Error(
          "spyOn could not find an object to spy upon for " + propertyName
        );
      }
      if (!propertyName) {
        throw new Error("No property name supplied");
      }
      let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);
      let proto = Object.getPrototypeOf(obj);
      while (!descriptor && proto !== null) {
        descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);
        proto = Object.getPrototypeOf(proto);
      }
      if (!descriptor) {
        throw new Error(propertyName + " property does not exist");
      }
      if (!descriptor.configurable) {
        throw new Error(propertyName + " is not declared configurable");
      }
      if (!descriptor[accessType]) {
        throw new Error(
          "Property " + propertyName + " does not have access type " + accessType
        );
      }
      const original = descriptor[accessType];
      if (!this.isMockFunction(original)) {
        if (typeof original !== "function") {
          throw new Error(
            "Cannot spy the " + propertyName + " property because it is not a function; " + this._typeOf(original) + " given instead"
          );
        }
        descriptor[accessType] = this._makeComponent(
          {
            type: "function"
          },
          () => {
            descriptor[accessType] = original;
            Object.defineProperty(obj, propertyName, descriptor);
          }
        );
        descriptor[accessType].mockImplementation(function() {
          return original.apply(this, arguments);
        });
      }
      Object.defineProperty(obj, propertyName, descriptor);
      return descriptor[accessType];
    }
    clearAllMocks() {
      this._mockState = /* @__PURE__ */ new WeakMap();
    }
    resetAllMocks() {
      this._mockConfigRegistry = /* @__PURE__ */ new WeakMap();
      this._mockState = /* @__PURE__ */ new WeakMap();
    }
    restoreAllMocks() {
      this._spyState.forEach((restore) => restore());
      this._spyState = /* @__PURE__ */ new Set();
    }
    _typeOf(value) {
      return value == null ? "" + value : typeof value;
    }
    // the typings test helper
    mocked(item, _deep = false) {
      return item;
    }
  }
  build.ModuleMocker = ModuleMocker;
  const JestMock = new ModuleMocker(commonjsGlobal);
  const fn = JestMock.fn.bind(JestMock);
  build.fn = fn;
  const spyOn = JestMock.spyOn.bind(JestMock);
  build.spyOn = spyOn;
  const mocked = JestMock.mocked.bind(JestMock);
  build.mocked = mocked;
  return build;
}
var buildExports = requireBuild();
const index = /* @__PURE__ */ getDefaultExportFromCjs(buildExports);
const mock = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: index
}, [buildExports]);
var isMulti = (args) => args.transports !== void 0, generateRandomId = () => Math.random().toString(16).slice(2), Channel2 = class {
  constructor(input2 = {}) {
    this.sender = generateRandomId(), this.events = {}, this.data = {}, this.transports = [], this.isAsync = input2.async || false, isMulti(input2) ? (this.transports = input2.transports || [], this.transports.forEach((t2) => {
      t2.setHandler((event) => this.handleEvent(event));
    })) : this.transports = input2.transport ? [input2.transport] : [], this.transports.forEach((t2) => {
      t2.setHandler((event) => this.handleEvent(event));
    });
  }
  get hasTransport() {
    return this.transports.length > 0;
  }
  addListener(eventName, listener) {
    this.events[eventName] = this.events[eventName] || [], this.events[eventName].push(listener);
  }
  emit(eventName, ...args) {
    let event = { type: eventName, args, from: this.sender }, options = {};
    args.length >= 1 && args[0] && args[0].options && (options = args[0].options);
    let handler = () => {
      this.transports.forEach((t2) => {
        t2.send(event, options);
      }), this.handleEvent(event);
    };
    this.isAsync ? setImmediate(handler) : handler();
  }
  last(eventName) {
    return this.data[eventName];
  }
  eventNames() {
    return Object.keys(this.events);
  }
  listenerCount(eventName) {
    let listeners = this.listeners(eventName);
    return listeners ? listeners.length : 0;
  }
  listeners(eventName) {
    return this.events[eventName] || void 0;
  }
  once(eventName, listener) {
    let onceListener = this.onceListener(eventName, listener);
    this.addListener(eventName, onceListener);
  }
  removeAllListeners(eventName) {
    eventName ? this.events[eventName] && delete this.events[eventName] : this.events = {};
  }
  removeListener(eventName, listener) {
    let listeners = this.listeners(eventName);
    listeners && (this.events[eventName] = listeners.filter((l) => l !== listener));
  }
  on(eventName, listener) {
    this.addListener(eventName, listener);
  }
  off(eventName, listener) {
    this.removeListener(eventName, listener);
  }
  handleEvent(event) {
    let listeners = this.listeners(event.type);
    listeners && listeners.length && listeners.forEach((fn) => {
      fn.apply(event, event.args);
    }), this.data[event.type] = event.args;
  }
  onceListener(eventName, listener) {
    let onceListener = (...args) => (this.removeListener(eventName, onceListener), listener(...args));
    return onceListener;
  }
};
var scope = (() => {
  let win;
  return typeof window < "u" ? win = window : typeof globalThis < "u" ? win = globalThis : typeof global < "u" ? win = global : typeof self < "u" ? win = self : win = {}, win;
})();
var events = ((events2) => (events2.CHANNEL_CREATED = "channelCreated", events2.CONFIG_ERROR = "configError", events2.STORY_INDEX_INVALIDATED = "storyIndexInvalidated", events2.STORY_SPECIFIED = "storySpecified", events2.SET_CONFIG = "setConfig", events2.SET_STORIES = "setStories", events2.SET_INDEX = "setIndex", events2.SET_CURRENT_STORY = "setCurrentStory", events2.CURRENT_STORY_WAS_SET = "currentStoryWasSet", events2.FORCE_RE_RENDER = "forceReRender", events2.FORCE_REMOUNT = "forceRemount", events2.PRELOAD_ENTRIES = "preloadStories", events2.STORY_PREPARED = "storyPrepared", events2.DOCS_PREPARED = "docsPrepared", events2.STORY_CHANGED = "storyChanged", events2.STORY_UNCHANGED = "storyUnchanged", events2.STORY_RENDERED = "storyRendered", events2.STORY_MISSING = "storyMissing", events2.STORY_ERRORED = "storyErrored", events2.STORY_THREW_EXCEPTION = "storyThrewException", events2.STORY_RENDER_PHASE_CHANGED = "storyRenderPhaseChanged", events2.PLAY_FUNCTION_THREW_EXCEPTION = "playFunctionThrewException", events2.UPDATE_STORY_ARGS = "updateStoryArgs", events2.STORY_ARGS_UPDATED = "storyArgsUpdated", events2.RESET_STORY_ARGS = "resetStoryArgs", events2.SET_GLOBALS = "setGlobals", events2.UPDATE_GLOBALS = "updateGlobals", events2.GLOBALS_UPDATED = "globalsUpdated", events2.REGISTER_SUBSCRIPTION = "registerSubscription", events2.PREVIEW_KEYDOWN = "previewKeydown", events2.PREVIEW_BUILDER_PROGRESS = "preview_builder_progress", events2.SELECT_STORY = "selectStory", events2.STORIES_COLLAPSE_ALL = "storiesCollapseAll", events2.STORIES_EXPAND_ALL = "storiesExpandAll", events2.DOCS_RENDERED = "docsRendered", events2.SHARED_STATE_CHANGED = "sharedStateChanged", events2.SHARED_STATE_SET = "sharedStateSet", events2.NAVIGATE_URL = "navigateUrl", events2.UPDATE_QUERY_PARAMS = "updateQueryParams", events2.REQUEST_WHATS_NEW_DATA = "requestWhatsNewData", events2.RESULT_WHATS_NEW_DATA = "resultWhatsNewData", events2.SET_WHATS_NEW_CACHE = "setWhatsNewCache", events2.TOGGLE_WHATS_NEW_NOTIFICATIONS = "toggleWhatsNewNotifications", events2.TELEMETRY_ERROR = "telemetryError", events2))(events || {});
var { CHANNEL_CREATED, CONFIG_ERROR, CURRENT_STORY_WAS_SET, DOCS_PREPARED, DOCS_RENDERED, FORCE_RE_RENDER, FORCE_REMOUNT, GLOBALS_UPDATED, NAVIGATE_URL, PLAY_FUNCTION_THREW_EXCEPTION, PRELOAD_ENTRIES, PREVIEW_BUILDER_PROGRESS, PREVIEW_KEYDOWN, REGISTER_SUBSCRIPTION, RESET_STORY_ARGS, SELECT_STORY, SET_CONFIG, SET_CURRENT_STORY, SET_GLOBALS, SET_INDEX, SET_STORIES, SHARED_STATE_CHANGED, SHARED_STATE_SET, STORIES_COLLAPSE_ALL, STORIES_EXPAND_ALL, STORY_ARGS_UPDATED, STORY_CHANGED, STORY_ERRORED, STORY_INDEX_INVALIDATED, STORY_MISSING, STORY_PREPARED, STORY_RENDER_PHASE_CHANGED, STORY_RENDERED, STORY_SPECIFIED, STORY_THREW_EXCEPTION, STORY_UNCHANGED, UPDATE_GLOBALS, UPDATE_QUERY_PARAMS, UPDATE_STORY_ARGS, REQUEST_WHATS_NEW_DATA, RESULT_WHATS_NEW_DATA, SET_WHATS_NEW_CACHE, TOGGLE_WHATS_NEW_NOTIFICATIONS, TELEMETRY_ERROR } = events, IGNORED_EXCEPTION = new Error("ignoredException");
var { LOGLEVEL } = scope, levels = { trace: 1, debug: 2, info: 3, warn: 4, error: 5, silent: 10 }, currentLogLevelString = LOGLEVEL, currentLogLevelNumber = levels[currentLogLevelString] || levels.info, logger = { trace: (message, ...rest) => {
  currentLogLevelNumber <= levels.trace && console.trace(message, ...rest);
}, debug: (message, ...rest) => {
  currentLogLevelNumber <= levels.debug && console.debug(message, ...rest);
}, info: (message, ...rest) => {
  currentLogLevelNumber <= levels.info && console.info(message, ...rest);
}, warn: (message, ...rest) => {
  currentLogLevelNumber <= levels.warn && console.warn(message, ...rest);
}, error: (message, ...rest) => {
  currentLogLevelNumber <= levels.error && console.error(message, ...rest);
}, log: (message, ...rest) => {
  currentLogLevelNumber < levels.silent && console.log(message, ...rest);
} }, logged = /* @__PURE__ */ new Set(), once = (type2) => (message, ...rest) => {
  if (!logged.has(message))
    return logged.add(message), logger[type2](message, ...rest);
};
once.clear = () => logged.clear();
once.trace = once("trace");
once.debug = once("debug");
once.info = once("info");
once.warn = once("warn");
once.error = once("error");
once.log = once("log");
var { CONFIG_TYPE } = scope;
function mockChannel() {
  let transport = { setHandler: () => {
  }, send: () => {
  } };
  return new Channel2({ transport });
}
var AddonStore2 = class {
  constructor() {
    this.getChannel = () => {
      if (!this.channel) {
        let channel = mockChannel();
        return this.setChannel(channel), channel;
      }
      return this.channel;
    }, this.getServerChannel = () => {
      if (!this.serverChannel)
        throw new Error("Accessing non-existent serverChannel");
      return this.serverChannel;
    }, this.ready = () => this.promise, this.hasChannel = () => !!this.channel, this.hasServerChannel = () => !!this.serverChannel, this.setChannel = (channel) => {
      this.channel = channel, this.resolve();
    }, this.setServerChannel = (channel) => {
      this.serverChannel = channel;
    }, this.promise = new Promise((res) => {
      this.resolve = () => res(this.getChannel());
    });
  }
}, KEY = "__STORYBOOK_ADDONS_PREVIEW";
function getAddonsStore() {
  return scope[KEY] || (scope[KEY] = new AddonStore2()), scope[KEY];
}
var addons = getAddonsStore();
var CallStates = ((CallStates2) => (CallStates2.DONE = "done", CallStates2.ERROR = "error", CallStates2.ACTIVE = "active", CallStates2.WAITING = "waiting", CallStates2))(CallStates || {}), EVENTS = { CALL: "storybook/instrumenter/call", SYNC: "storybook/instrumenter/sync", START: "storybook/instrumenter/start", BACK: "storybook/instrumenter/back", GOTO: "storybook/instrumenter/goto", NEXT: "storybook/instrumenter/next", END: "storybook/instrumenter/end" }, controlsDisabled = { start: false, back: false, goto: false, next: false, end: false }, alreadyCompletedException = new Error("This function ran after the play function completed. Did you forget to `await` it?"), isObject = (o2) => Object.prototype.toString.call(o2) === "[object Object]", isModule = (o2) => Object.prototype.toString.call(o2) === "[object Module]", isInstrumentable = (o2) => {
  if (!isObject(o2) && !isModule(o2))
    return false;
  if (o2.constructor === void 0)
    return true;
  let proto = o2.constructor.prototype;
  return !(!isObject(proto) || Object.prototype.hasOwnProperty.call(proto, "isPrototypeOf") === false);
}, construct = (obj) => {
  try {
    return new obj.constructor();
  } catch {
    return {};
  }
}, getInitialState = () => ({ renderPhase: void 0, isDebugging: false, isPlaying: false, isLocked: false, cursor: 0, calls: [], shadowCalls: [], callRefsByResult: /* @__PURE__ */ new Map(), chainedCallIds: /* @__PURE__ */ new Set(), ancestors: [], playUntil: void 0, resolvers: {}, syncTimeout: void 0 }), getRetainedState = (state, isDebugging = false) => {
  let calls = (isDebugging ? state.shadowCalls : state.calls).filter((call) => call.retain);
  if (!calls.length)
    return;
  let callRefsByResult = new Map(Array.from(state.callRefsByResult.entries()).filter(([, ref2]) => ref2.retain));
  return { cursor: calls.length, calls, callRefsByResult };
}, Instrumenter2 = class {
  constructor() {
    this.initialized = false, this.channel = addons.getChannel(), this.state = scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ || {};
    let resetState = ({ storyId, isPlaying = true, isDebugging = false }) => {
      let state = this.getState(storyId);
      this.setState(storyId, { ...getInitialState(), ...getRetainedState(state, isDebugging), shadowCalls: isDebugging ? state.shadowCalls : [], chainedCallIds: isDebugging ? state.chainedCallIds : /* @__PURE__ */ new Set(), playUntil: isDebugging ? state.playUntil : void 0, isPlaying, isDebugging }), this.sync(storyId);
    };
    this.channel.on(FORCE_REMOUNT, resetState), this.channel.on(STORY_RENDER_PHASE_CHANGED, ({ storyId, newPhase }) => {
      let { isDebugging } = this.getState(storyId);
      this.setState(storyId, { renderPhase: newPhase }), newPhase === "preparing" && isDebugging && resetState({ storyId }), newPhase === "playing" && resetState({ storyId, isDebugging }), newPhase === "played" && this.setState(storyId, { isLocked: false, isPlaying: false, isDebugging: false }), newPhase === "errored" && this.setState(storyId, { isLocked: false, isPlaying: false });
    }), this.channel.on(SET_CURRENT_STORY, () => {
      this.initialized ? this.cleanup() : this.initialized = true;
    });
    let start = ({ storyId, playUntil }) => {
      this.getState(storyId).isDebugging || this.setState(storyId, ({ calls }) => ({ calls: [], shadowCalls: calls.map((call) => ({ ...call, status: "waiting" })), isDebugging: true }));
      let log = this.getLog(storyId);
      this.setState(storyId, ({ shadowCalls }) => {
        var _a;
        if (playUntil || !log.length)
          return { playUntil };
        let firstRowIndex = shadowCalls.findIndex((call) => call.id === log[0].callId);
        return { playUntil: (_a = shadowCalls.slice(0, firstRowIndex).filter((call) => call.interceptable && !call.ancestors.length).slice(-1)[0]) == null ? void 0 : _a.id };
      }), this.channel.emit(FORCE_REMOUNT, { storyId, isDebugging: true });
    }, back = ({ storyId }) => {
      var _a;
      let log = this.getLog(storyId).filter((call) => !call.ancestors.length), last = log.reduceRight((res, item, index2) => res >= 0 || item.status === "waiting" ? res : index2, -1);
      start({ storyId, playUntil: (_a = log[last - 1]) == null ? void 0 : _a.callId });
    }, goto = ({ storyId, callId }) => {
      var _a;
      let { calls, shadowCalls, resolvers } = this.getState(storyId), call = calls.find(({ id }) => id === callId), shadowCall = shadowCalls.find(({ id }) => id === callId);
      if (!call && shadowCall && Object.values(resolvers).length > 0) {
        let nextId = (_a = this.getLog(storyId).find((c2) => c2.status === "waiting")) == null ? void 0 : _a.callId;
        shadowCall.id !== nextId && this.setState(storyId, { playUntil: shadowCall.id }), Object.values(resolvers).forEach((resolve) => resolve());
      } else
        start({ storyId, playUntil: callId });
    }, next = ({ storyId }) => {
      var _a;
      let { resolvers } = this.getState(storyId);
      if (Object.values(resolvers).length > 0)
        Object.values(resolvers).forEach((resolve) => resolve());
      else {
        let nextId = (_a = this.getLog(storyId).find((c2) => c2.status === "waiting")) == null ? void 0 : _a.callId;
        nextId ? start({ storyId, playUntil: nextId }) : end({ storyId });
      }
    }, end = ({ storyId }) => {
      this.setState(storyId, { playUntil: void 0, isDebugging: false }), Object.values(this.getState(storyId).resolvers).forEach((resolve) => resolve());
    };
    this.channel.on(EVENTS.START, start), this.channel.on(EVENTS.BACK, back), this.channel.on(EVENTS.GOTO, goto), this.channel.on(EVENTS.NEXT, next), this.channel.on(EVENTS.END, end);
  }
  getState(storyId) {
    return this.state[storyId] || getInitialState();
  }
  setState(storyId, update) {
    let state = this.getState(storyId), patch = typeof update == "function" ? update(state) : update;
    this.state = { ...this.state, [storyId]: { ...state, ...patch } }, scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state;
  }
  cleanup() {
    this.state = Object.entries(this.state).reduce((acc, [storyId, state]) => {
      let retainedState = getRetainedState(state);
      return retainedState && (acc[storyId] = Object.assign(getInitialState(), retainedState)), acc;
    }, {});
    let payload = { controlStates: controlsDisabled, logItems: [] };
    this.channel.emit(EVENTS.SYNC, payload), scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state;
  }
  getLog(storyId) {
    let { calls, shadowCalls } = this.getState(storyId), merged = [...shadowCalls];
    calls.forEach((call, index2) => {
      merged[index2] = call;
    });
    let seen = /* @__PURE__ */ new Set();
    return merged.reduceRight((acc, call) => (call.args.forEach((arg) => {
      arg != null && arg.__callId__ && seen.add(arg.__callId__);
    }), call.path.forEach((node) => {
      node.__callId__ && seen.add(node.__callId__);
    }), (call.interceptable || call.exception) && !seen.has(call.id) && (acc.unshift({ callId: call.id, status: call.status, ancestors: call.ancestors }), seen.add(call.id)), acc), []);
  }
  instrument(obj, options) {
    if (!isInstrumentable(obj))
      return obj;
    let { mutate = false, path = [] } = options;
    return Object.keys(obj).reduce((acc, key) => {
      let value = obj[key];
      return typeof value != "function" ? (acc[key] = this.instrument(value, { ...options, path: path.concat(key) }), acc) : typeof value.__originalFn__ == "function" ? (acc[key] = value, acc) : (acc[key] = (...args) => this.track(key, value, args, options), acc[key].__originalFn__ = value, Object.defineProperty(acc[key], "name", { value: key, writable: false }), Object.keys(value).length > 0 && Object.assign(acc[key], this.instrument({ ...value }, { ...options, path: path.concat(key) })), acc);
    }, mutate ? obj : construct(obj));
  }
  track(method, fn, args, options) {
    var _a, _b, _c, _d;
    let storyId = ((_a = args == null ? void 0 : args[0]) == null ? void 0 : _a.__storyId__) || ((_d = (_c = (_b = scope.__STORYBOOK_PREVIEW__) == null ? void 0 : _b.selectionStore) == null ? void 0 : _c.selection) == null ? void 0 : _d.storyId), { cursor, ancestors } = this.getState(storyId);
    this.setState(storyId, { cursor: cursor + 1 });
    let id = `${ancestors.slice(-1)[0] || storyId} [${cursor}] ${method}`, { path = [], intercept = false, retain = false } = options, interceptable = typeof intercept == "function" ? intercept(method, path) : intercept, call = { id, cursor, storyId, ancestors, path, method, args, interceptable, retain }, result = (interceptable && !ancestors.length ? this.intercept : this.invoke).call(this, fn, call, options);
    return this.instrument(result, { ...options, mutate: true, path: [{ __callId__: call.id }] });
  }
  intercept(fn, call, options) {
    let { chainedCallIds, isDebugging, playUntil } = this.getState(call.storyId), isChainedUpon = chainedCallIds.has(call.id);
    return !isDebugging || isChainedUpon || playUntil ? (playUntil === call.id && this.setState(call.storyId, { playUntil: void 0 }), this.invoke(fn, call, options)) : new Promise((resolve) => {
      this.setState(call.storyId, ({ resolvers }) => ({ isLocked: false, resolvers: { ...resolvers, [call.id]: resolve } }));
    }).then(() => (this.setState(call.storyId, (state) => {
      let { [call.id]: _, ...resolvers } = state.resolvers;
      return { isLocked: true, resolvers };
    }), this.invoke(fn, call, options)));
  }
  invoke(fn, call, options) {
    let { callRefsByResult, renderPhase } = this.getState(call.storyId), serializeValues = (value) => {
      var _a, _b;
      if (callRefsByResult.has(value))
        return callRefsByResult.get(value);
      if (value instanceof Array)
        return value.map(serializeValues);
      if (value instanceof Date)
        return { __date__: { value: value.toISOString() } };
      if (value instanceof Error) {
        let { name, message, stack } = value;
        return { __error__: { name, message, stack } };
      }
      if (value instanceof RegExp) {
        let { flags, source } = value;
        return { __regexp__: { flags, source } };
      }
      if (value instanceof scope.window.HTMLElement) {
        let { prefix, localName, id, classList, innerText } = value, classNames = Array.from(classList);
        return { __element__: { prefix, localName, id, classNames, innerText } };
      }
      return typeof value == "function" ? { __function__: { name: value.name } } : typeof value == "symbol" ? { __symbol__: { description: value.description } } : typeof value == "object" && ((_a = value == null ? void 0 : value.constructor) == null ? void 0 : _a.name) && ((_b = value == null ? void 0 : value.constructor) == null ? void 0 : _b.name) !== "Object" ? { __class__: { name: value.constructor.name } } : Object.prototype.toString.call(value) === "[object Object]" ? Object.fromEntries(Object.entries(value).map(([key, val]) => [key, serializeValues(val)])) : value;
    }, info = { ...call, args: call.args.map(serializeValues) };
    call.path.forEach((ref2) => {
      ref2 != null && ref2.__callId__ && this.setState(call.storyId, ({ chainedCallIds }) => ({ chainedCallIds: new Set(Array.from(chainedCallIds).concat(ref2.__callId__)) }));
    });
    let handleException = (e2) => {
      if (e2 instanceof Error) {
        let { name, message, stack, callId = call.id } = e2, exception = { name, message, stack, callId };
        if (this.update({ ...info, status: "error", exception }), this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [e2, { __callId__: call.id, retain: call.retain }]]) })), call.ancestors.length)
          throw Object.prototype.hasOwnProperty.call(e2, "callId") || Object.defineProperty(e2, "callId", { value: call.id }), e2;
        if (e2 !== alreadyCompletedException)
          throw logger.warn(e2), IGNORED_EXCEPTION;
      }
      throw e2;
    };
    try {
      if (renderPhase === "played" && !call.retain)
        throw alreadyCompletedException;
      let finalArgs = (options.getArgs ? options.getArgs(call, this.getState(call.storyId)) : call.args).map((arg) => typeof arg != "function" || Object.keys(arg).length ? arg : (...args) => {
        let { cursor, ancestors } = this.getState(call.storyId);
        this.setState(call.storyId, { cursor: 0, ancestors: [...ancestors, call.id] });
        let restore = () => this.setState(call.storyId, { cursor, ancestors }), willRestore = false;
        try {
          let res = arg(...args);
          return res instanceof Promise ? (willRestore = true, res.finally(restore)) : res;
        } finally {
          willRestore || restore();
        }
      }), result = fn(...finalArgs);
      return result && ["object", "function", "symbol"].includes(typeof result) && this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [result, { __callId__: call.id, retain: call.retain }]]) })), this.update({ ...info, status: result instanceof Promise ? "active" : "done" }), result instanceof Promise ? result.then((value) => (this.update({ ...info, status: "done" }), value), handleException) : result;
    } catch (e2) {
      return handleException(e2);
    }
  }
  update(call) {
    this.channel.emit(EVENTS.CALL, call), this.setState(call.storyId, ({ calls }) => {
      let callsById = calls.concat(call).reduce((a, c2) => Object.assign(a, { [c2.id]: c2 }), {});
      return { calls: Object.values(callsById).sort((a, b) => a.id.localeCompare(b.id, void 0, { numeric: true })) };
    }), this.sync(call.storyId);
  }
  sync(storyId) {
    let synchronize = () => {
      var _a;
      let { isLocked, isPlaying } = this.getState(storyId), logItems = this.getLog(storyId), pausedAt = (_a = logItems.filter(({ ancestors }) => !ancestors.length).find((item) => item.status === "waiting")) == null ? void 0 : _a.callId, hasActive = logItems.some((item) => item.status === "active");
      if (isLocked || hasActive || logItems.length === 0) {
        let payload2 = { controlStates: controlsDisabled, logItems };
        this.channel.emit(EVENTS.SYNC, payload2);
        return;
      }
      let hasPrevious = logItems.some((item) => item.status === "done" || item.status === "error"), payload = { controlStates: { start: hasPrevious, back: hasPrevious, goto: true, next: isPlaying, end: isPlaying }, logItems, pausedAt };
      this.channel.emit(EVENTS.SYNC, payload);
    };
    this.setState(storyId, ({ syncTimeout }) => (clearTimeout(syncTimeout), { syncTimeout: setTimeout(synchronize, 0) }));
  }
};
function instrument(obj, options = {}) {
  var _a, _b, _c, _d;
  try {
    let forceInstrument = false, skipInstrument = false;
    return (_b = (_a = scope.window.location) == null ? void 0 : _a.search) != null && _b.includes("instrument=true") ? forceInstrument = true : (_d = (_c = scope.window.location) == null ? void 0 : _c.search) != null && _d.includes("instrument=false") && (skipInstrument = true), scope.window.parent === scope.window && !forceInstrument || skipInstrument ? obj : (scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ || (scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ = new Instrumenter2()), scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__.instrument(obj, options));
  } catch (e2) {
    return once.warn(e2), obj;
  }
}
var { jest: jest$1 } = instrument({ jest: mock }), expect = instrument(
  { expect: o$1 },
  { intercept: (_method, path) => path[0] !== "expect" }
).expect;
expect.extend(matchers);
export {
  expect as e,
  userEvent as u,
  within as w
};
