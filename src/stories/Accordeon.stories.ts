import Accordeon from '../components/Accordeon.vue';
import type { Meta, StoryObj } from '@storybook/vue3';
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<typeof Accordeon> = {
    title: 'Components/Accordeon', // Le chemin dans Storybook
    component: Accordeon,
    tags: ['autodocs'],
    argTypes: {
        title: { control: 'text' },
        content: { control: 'text' },
    },
};

export default meta;
type Story = StoryObj<typeof Accordeon>;

export const Default: Story = {
    args: {
        title: 'Titre',
        content: 'Content accordÃ©on',
    },
    play: async ({ canvasElement }) => {
        const canvas = within(canvasElement);

        // ðŸ”¹ SÃ©lectionner le bouton de l'accordÃ©on (par son texte)
        const button = await canvas.getByRole('button', { name: /Titre/i });

        // ðŸ”¹ VÃ©rifier que le contenu est cachÃ© par dÃ©faut
        const content = canvas.getByText(/Content accordÃ©on/i);
        const contentWrapper = content.closest('div'); // RÃ©cupÃ¨re le premier parent <div>
        expect(contentWrapper).toHaveStyle('display: none');

        // ðŸ”¹ Simuler un clic pour ouvrir l'accordÃ©on
        await userEvent.click(button);

        // ðŸ”¹ VÃ©rifier que le contenu est maintenant visible
        expect(content).toHaveStyle('display: block');

        // ðŸ”¹ VÃ©rifier que l'icÃ´ne du chevron a tournÃ© (rotation de 180Â°)
        const chevronIcon = canvasElement.querySelector('.w-6.h-6');
        expect(chevronIcon).toHaveClass('rotate-180');

        // ðŸ”¹ Simuler un autre clic pour fermer l'accordÃ©on
        await userEvent.click(button);

        // ðŸ”¹ VÃ©rifier que le contenu est de nouveau cachÃ©
        expect(contentWrapper).toHaveStyle('display: none');

        // ðŸ”¹ VÃ©rifier que l'icÃ´ne du chevron est revenu Ã  sa position d'origine
        expect(chevronIcon).not.toHaveClass('rotate-180');
    },
};
